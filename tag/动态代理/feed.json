{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"动态代理\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/dfdc2005/",
            "url": "https://smile1231.github.io/posts/dfdc2005/",
            "title": "JDK动态代理原理剖析(简洁版)",
            "date_published": "2022-03-14T09:40:52.000Z",
            "content_html": "<h2 id=\"动态代理两个实例-视频中学的\"><a href=\"#动态代理两个实例-视频中学的\" class=\"headerlink\" title=\"动态代理两个实例(视频中学的)\"></a>动态代理两个实例(视频中学的)</h2><p>动态代理在<code>Java</code>中有着广泛的应用，比如<code>Spring AOP、Hibernate</code>数据查询、测试框架的后端<code>mock、RPC</code>远程调用、<code>Java</code>注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等。<br>本文主要介绍<code>Java</code>中两种常见的动态代理方式：<code>JDK</code>原生动态代理和<code>CGLIB</code>动态代理。</p>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>本文将介绍的<code>Java</code>动态代理与设计模式中的代理模式有关，什么是代理模式呢？</p>\n<span id=\"more\"></span>\n\n<p><strong>代理模式：</strong>给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。</p>\n<p>代理模式角色分为 <code>3</code> 种：</p>\n<ul>\n<li><p><code>Subject（抽象主题角色）</code>：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p>\n</li>\n<li><p><code>RealSubject（真实主题角色）</code>：真正实现业务逻辑的类；</p>\n</li>\n<li><p><code>Proxy（代理主题角色）</code>：用来代理和封装真实主题；</p>\n</li>\n</ul>\n<p>代理模式的结构比较简单，其核心是代理类，为了让客户端能够一致性地对待真实对象和代理对象，在代理模式中引入了抽象层</p>\n<img data-src=\"/blog/posts/dfdc2005/2022-03-14-17-42-04.png\" class=\"\">\n\n<blockquote>\n<p>代理模式按照职责（使用场景）来分类，至少可以分为以下几类：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、远程代理。 </span><br><span class=\"line\"><span class=\"number\">2</span>、虚拟代理。 </span><br><span class=\"line\"><span class=\"number\">3</span>、Copy-on-Write 代理。 </span><br><span class=\"line\"><span class=\"number\">4</span>、保护（Protect or Access）代理。 </span><br><span class=\"line\"><span class=\"number\">5</span>、Cache代理。 </span><br><span class=\"line\"><span class=\"number\">6</span>、防火墙（Firewall）代理。 </span><br><span class=\"line\"><span class=\"number\">7</span>、同步化（Synchronization）代理。 </span><br><span class=\"line\"><span class=\"number\">8</span>、智能引用（Smart Reference）代理等等。</span><br></pre></td></tr></table></figure>\n\n<p>如果根据字节码的创建时机来分类，可以分为静态代理和动态代理：</p>\n<ul>\n<li>所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和真实主题角色的关系在运行前就确定了。</li>\n<li>而动态代理的源码是在程序运行期间由<code>JVM</code>根据反射等机制动态的生成，所以在运行前并不存在代理类的字节码文件</li>\n</ul>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>我们先通过实例来学习静态代理，然后理解静态代理的缺点，再来学习本文的主角：动态代理</p>\n<p>编写一个接口 <code>UserService</code> ，以及该接口的一个实现类 <code>UserServiceImpl</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span></span>;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;查询 selectById&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;更新 update&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们将通过静态代理对 <code>UserServiceImpl</code> 进行功能增强，在调用 <code>select</code> 和 <code>update</code> 之前记录一些日志。写一个代理类 <code>UserServiceProxy</code>，代理类需要实现 <code>UserService</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService target; <span class=\"comment\">// 被代理的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceProxy</span><span class=\"params\">(UserService target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.select();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        target.update();    <span class=\"comment\">// 这里才实际调用真实主题角色的方法</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;     <span class=\"comment\">// 在执行方法之前执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">&quot;log start time [%s] &quot;</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;      <span class=\"comment\">// 在执行方法之后执行</span></span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">&quot;log end time [%s] &quot;</span>, <span class=\"keyword\">new</span> Date()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        UserService userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        UserService proxy = <span class=\"keyword\">new</span> UserServiceProxy(userServiceImpl);</span><br><span class=\"line\"></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过静态代理，我们达到了功能增强的目的，而且没有侵入原代码，这是静态代理的一个优点。</p>\n<h4 id=\"静态代理的缺点\"><a href=\"#静态代理的缺点\" class=\"headerlink\" title=\"静态代理的缺点\"></a>静态代理的缺点</h4><p>虽然静态代理实现简单，且不侵入原代码，但是，当场景稍微复杂一些的时候，静态代理的缺点也会暴露出来。<br>1、 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：</p>\n<pre><code>- 只维护一个代理类，由这个代理类实现多个接口，但是这样就导致代理类过于庞大\n- 新建多个代理类，每个目标对象对应一个代理类，但是这样会产生过多的代理类\n</code></pre>\n<p>2、 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，不易维护</p>\n<h3 id=\"如何改进？\"><a href=\"#如何改进？\" class=\"headerlink\" title=\"如何改进？\"></a>如何改进？</h3><p>当然是让代理类<strong>动态的生成</strong>啦，也就是动态代理。</p>\n<p><strong>为什么类可以动态的生成？</strong></p>\n<p>这就涉及到<code>Java</code>虚拟机的<strong>类加载机制</strong>了，推荐翻看《深入理解Java虚拟机》7.3节 类加载的过程。</p>\n<p>Java虚拟机类加载过程主要分为五个阶段：加载、验证、准备、解析、初始化。其中加载阶段需要完成以下3件事情：</p>\n<p>通过一个类的全限定名来获取定义此类的二进制字节流<br>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构<br>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据访问入口</p>\n<p>由于虚拟机规范对这3点要求并不具体，所以实际的实现是非常灵活的，关于第1点，获取类的二进制字节流（class字节码）就有很多途径：</p>\n<p>从ZIP包获取，这是JAR、EAR、WAR等格式的基础<br>从网络中获取，典型的应用是 Applet<br>运行时计算生成，这种场景使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 *$Proxy 的代理类的二进制字节流<br>由其它文件生成，典型应用是JSP，即由JSP文件生成对应的Class类<br>从数据库中获取等等</p>\n<p>所以，动态代理就是想办法，根据接口或目标对象，计算出代理类的字节码，然后再加载到JVM中使用。但是如何计算？如何生成？情况也许比想象的复杂得多，我们需要借助现有的方案。</p>\n<h3 id=\"常见的字节码操作类库\"><a href=\"#常见的字节码操作类库\" class=\"headerlink\" title=\"常见的字节码操作类库\"></a>常见的字节码操作类库</h3><p>这里有一些介绍：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vamF2YS1zb3VyY2UubmV0L29wZW4tc291cmNlL2J5dGVjb2RlLWxpYnJhcmllcw==\">java-source.net/open-source…</span></p>\n<h3 id=\"实现动态代理的思考方向\"><a href=\"#实现动态代理的思考方向\" class=\"headerlink\" title=\"实现动态代理的思考方向\"></a>实现动态代理的思考方向</h3><p>为了让生成的代理类与目标对象（真实主题角色）保持一致性，从现在开始将介绍以下两种最常见的方式：</p>\n<ul>\n<li>通过实现接口的方式 -&gt; <code>JDK</code>动态代理</li>\n<li>通过继承类的方式 -&gt; <code>CGLIB</code>动态代理</li>\n</ul>\n<p>注：使用<code>ASM</code>对使用者要求比较高，使用<code>Javassist</code>会比较麻烦</p>\n<h3 id=\"JDk动态代理\"><a href=\"#JDk动态代理\" class=\"headerlink\" title=\"JDk动态代理\"></a><code>JDk</code>动态代理</h3><p>JDK动态代理主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code>，我们仍然通过案例来学习</p>\n<p>编写一个调用逻辑处理器 <code>LogHandler</code> 类，提供日志增强功能，并实现 <code>InvocationHandler</code> 接口；在 <code>LogHandler</code> 中维护一个目标对象，这个对象是被代理的对象（真实主题角色）；在 <code>invoke</code> 方法中编写方法调用的逻辑处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> jinmao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2022-03-14-10:52</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> LogHandler</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 代理的对象，实际的方法执行者</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造方法注入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LogHandler</span><span class=\"params\">(Object target)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> proxy:代理类代理的真实代理对象com.sun.proxy.$Proxy0</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method:我们所要调用某个对象真实的方法的Method对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args:指代代理对象方法传递的参数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"comment\">//调用target的method方法</span></span><br><span class=\"line\">        Object result = method.invoke(target, args);</span><br><span class=\"line\">        after();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之前执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;log start time [%s] %n&quot;</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用invoke方法之后执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;log end time [%s] %n&quot;</span>, <span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编写客户端，获取动态生成的代理类的对象须借助 <code>Proxy</code> 类的 <code>newProxyInstance</code> 方法，具体步骤可见代码和注释</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.cy.learn.dynamic.proxy.utils.ProxyUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@creator</span> jinmao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2022-03-14-13:14</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> Client</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置变量可以保存动态代理类，默认名称以 $Proxy0 格式命名</span></span><br><span class=\"line\">        <span class=\"comment\">// System.getProperties().setProperty(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建被代理的对象，UserService接口的实现类</span></span><br><span class=\"line\">        UserServiceImpl userServiceImpl = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">        <span class=\"comment\">// 2. 获取对应的 ClassLoader</span></span><br><span class=\"line\">        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();</span><br><span class=\"line\">        <span class=\"comment\">// 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，</span></span><br><span class=\"line\">        Class&lt;?&gt;[] interfaces = userServiceImpl.getClass().getInterfaces();</span><br><span class=\"line\">        <span class=\"comment\">// 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用</span></span><br><span class=\"line\">        LogHandler logHandler = <span class=\"keyword\">new</span> LogHandler(userServiceImpl);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        5.根据上面提供的信息，创建代理对象 在这个过程中，</span></span><br><span class=\"line\"><span class=\"comment\">           a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码</span></span><br><span class=\"line\"><span class=\"comment\">           b.然后根据相应的字节码转换成对应的class，</span></span><br><span class=\"line\"><span class=\"comment\">           c.然后调用newInstance()创建代理实例</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);</span><br><span class=\"line\">        <span class=\"comment\">// 调用代理的方法</span></span><br><span class=\"line\">        proxy.select();</span><br><span class=\"line\">        proxy.update();</span><br><span class=\"line\">        <span class=\"comment\">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy</span></span><br><span class=\"line\">        <span class=\"comment\">//ProxyUtils.generateClassFile(userServiceImpl.getClass(), &quot;UserServiceProxy&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Mon Mar <span class=\"number\">14</span> <span class=\"number\">18</span>:<span class=\"number\">02</span>:<span class=\"number\">11</span> CST <span class=\"number\">2022</span>] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Mon Mar <span class=\"number\">14</span> <span class=\"number\">18</span>:<span class=\"number\">02</span>:<span class=\"number\">11</span> CST <span class=\"number\">2022</span>] </span><br><span class=\"line\">log start time [Mon Mar <span class=\"number\">14</span> <span class=\"number\">18</span>:<span class=\"number\">02</span>:<span class=\"number\">11</span> CST <span class=\"number\">2022</span>] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Mon Mar <span class=\"number\">14</span> <span class=\"number\">18</span>:<span class=\"number\">02</span>:<span class=\"number\">11</span> CST <span class=\"number\">2022</span>] </span><br></pre></td></tr></table></figure>\n<p><code>InvocationHandler</code> 和 <code>Proxy</code> 的主要方法介绍如下：</p>\n<p><strong><code>java.lang.reflect.InvocationHandler</code></strong></p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object invoke(Object proxy, <span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">method</span>, <span class=\"title\">Object</span>[] <span class=\"title\">args</span>) 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>java.lang.reflect.Proxy</code></strong></p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static InvocationHandler getInvocationHandler(Object proxy)  用于获取指定代理对象所关联的调用处理器<span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) 返回指定接口的代理类<span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">static</span> Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的<span class=\"built_in\"> invoke </span>方法<span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">static</span> boolean isProxyClass(Class&lt;?&gt; cl) 返回 cl 是否为一个代理类</span><br></pre></td></tr></table></figure>\n<h3 id=\"代理类的调用过程\"><a href=\"#代理类的调用过程\" class=\"headerlink\" title=\"代理类的调用过程\"></a>代理类的调用过程</h3><p>生成的代理类到底长什么样子呢？借助下面的工具类，把代理类保存下来再探个究竟</p>\n<p>（通过设置环境变量<code>sun.misc.ProxyGenerator.saveGeneratedFiles=true</code>也可以保存代理类）</p>\n<p>手写一个工具类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sun.misc.ProxyGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@creator</span> jinmao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2022-03-14-13:24</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> ProxyUtils</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将根据类信息动态生成的二进制字节码保存到硬盘中，默认的是clazz目录下</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> clazz: 需要生成动态代理类的类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> proxyName: 为动态生成的代理类的名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generateClassFile</span><span class=\"params\">(Class clazz, String proxyName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 根据类信息和提供的代理类名称，生成字节码</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] classFile = ProxyGenerator.generateProxyClass(proxyName, clazz.getInterfaces());</span><br><span class=\"line\">        String paths = clazz.getResource(<span class=\"string\">&quot;.&quot;</span>).getPath();</span><br><span class=\"line\">        System.out.println(paths);</span><br><span class=\"line\">        FileOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//保留到硬盘中</span></span><br><span class=\"line\">            out = <span class=\"keyword\">new</span> FileOutputStream(paths + proxyName + <span class=\"string\">&quot;.class&quot;</span>);</span><br><span class=\"line\">            out.write(classFile);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                out.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将这两行注释放开即可:</p>\n<img data-src=\"/blog/posts/dfdc2005/2022-03-14-18-10-35.png\" class=\"\">\n\n<p>运行结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log start time [Mon Mar <span class=\"number\">14</span> <span class=\"number\">18</span>:<span class=\"number\">25</span>:<span class=\"number\">57</span> CST <span class=\"number\">2022</span>] </span><br><span class=\"line\">查询 selectById</span><br><span class=\"line\">log end time [Mon Mar <span class=\"number\">14</span> <span class=\"number\">18</span>:<span class=\"number\">25</span>:<span class=\"number\">57</span> CST <span class=\"number\">2022</span>] </span><br><span class=\"line\">log start time [Mon Mar <span class=\"number\">14</span> <span class=\"number\">18</span>:<span class=\"number\">25</span>:<span class=\"number\">57</span> CST <span class=\"number\">2022</span>] </span><br><span class=\"line\">更新 update</span><br><span class=\"line\">log end time [Mon Mar <span class=\"number\">14</span> <span class=\"number\">18</span>:<span class=\"number\">25</span>:<span class=\"number\">57</span> CST <span class=\"number\">2022</span>] </span><br></pre></td></tr></table></figure>\n\n\n<p><code>IDEA</code> 再次运行之后就可以在 <code>out</code> 的类路径下找到 <code>UserServiceProxy.class</code>，双击后<code>IDEA</code>的反编译插件会将该二进制<code>class</code>文件</p>\n<img data-src=\"/blog/posts/dfdc2005/2022-03-14-18-12-41.png\" class=\"\">\n\n<p><code>UserServiceProxy</code>的反编译代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class=\"line\"><span class=\"comment\">// (powered by FernFlower decompiler)</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.cy.learn.dynamic.proxy.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceProxy</span> <span class=\"keyword\">extends</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m4;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m0;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method m3;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceProxy</span><span class=\"params\">(InvocationHandler var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(var1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object var1)</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m4, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m3, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            m1 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"string\">&quot;equals&quot;</span>, Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>));</span><br><span class=\"line\">            m2 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"string\">&quot;toString&quot;</span>);</span><br><span class=\"line\">            m4 = Class.forName(<span class=\"string\">&quot;com.cy.learn.dynamic.proxy.UserService&quot;</span>).getMethod(<span class=\"string\">&quot;select&quot;</span>);</span><br><span class=\"line\">            m0 = Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"string\">&quot;hashCode&quot;</span>);</span><br><span class=\"line\">            m3 = Class.forName(<span class=\"string\">&quot;com.cy.learn.dynamic.proxy.UserService&quot;</span>).getMethod(<span class=\"string\">&quot;update&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中看一段我们自己的和新方法<code>select()</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.h.invoke(<span class=\"keyword\">this</span>, m4, (Object[])<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> var2;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable var3) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UndeclaredThrowableException(var3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处的<code>super</code>就是<code>extends</code>的<code>Proxy</code>类,我们来看<code>super</code>中的<code>h</code>到底是什么?</p>\n<img data-src=\"/blog/posts/dfdc2005/2022-03-14-18-24-12.png\" class=\"\">\n\n<p>而<code>super.h.invoke</code>方法即为我们手写的<code>LogHandler</code>中的<code>invoke</code>方法,所以日志才会打印</p>\n<img data-src=\"/blog/posts/dfdc2005/2022-03-14-18-25-17.png\" class=\"\">\n\n<blockquote>\n<p>小总结</p>\n</blockquote>\n<p>从 <code>UserServiceProxy</code> 的代码中我们可以发现：</p>\n<ul>\n<li><code>UserServiceProxy</code> 继承了 <code>Proxy</code> 类，并且实现了被代理的所有接口，以及<code>equals、hashCode、toString</code>等方法</li>\n<li>由于 <code>UserServiceProxy</code> 继承了 <code>Proxy</code> 类，所以每个代理类都会关联一个 <code>InvocationHandler</code> 方法调用处理器</li>\n<li>类和所有方法都被 <code>public final</code> 修饰，所以代理类只可被使用，不可以再被继承</li>\n<li>每个方法都有一个 <code>Method</code> <code>对象来描述，Method</code> 对象在<code>static</code>静态代码块中创建，以<code> m + 数字</code> 的格式命名</li>\n<li>调用方法的时候通过 <code>super.h.invoke(this, m1, (Object[])null)</code>; 调用，其中的 <code>super.h.invoke</code> 实际上是在创建代理的时候传递给 <code>Proxy.newProxyInstance</code> 的 <code>LogHandler</code> 对象，它继承 <code>InvocationHandler</code> 类，负责实际的调用处理逻辑</li>\n</ul>\n<p>而 <code>LogHandler</code> 的 <code>invoke</code> 方法接收到 <code>method、args</code> 等参数后，进行一些处理，然后通过反射让被代理的对象 <code>target</code> 执行方法</p>\n<p>JDK动态代理执行方法调用的过程简图如下：</p>\n<img data-src=\"/blog/posts/dfdc2005/2022-03-14-18-28-41.png\" class=\"\">\n\n\n<h2 id=\"Proxy-newProxyInstance源码debug\"><a href=\"#Proxy-newProxyInstance源码debug\" class=\"headerlink\" title=\"Proxy.newProxyInstance源码debug\"></a><code>Proxy.newProxyInstance</code>源码<code>debug</code></h2><p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回将方法调用分派到指定调用处理程序的指定接口的代理类的实例。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@CallerSensitive</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">newProxyInstance</span><span class=\"params\">(ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        Class&lt;?&gt;[] interfaces,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                        InvocationHandler h)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> IllegalArgumentException</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(h);</span><br><span class=\"line\">    <span class=\"comment\">//复制一份传入的接口字节码对象数组</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找或生成指定的代理类</span></span><br><span class=\"line\">    <span class=\"comment\">//此处使用类加载器和接口生成一个Proxy子类字节码对象</span></span><br><span class=\"line\">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs); ------------------------------------&gt;  进入该核心方法</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用指定的调用处理程序调用其构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sm != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//获取构造器对象和调用处理器</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> InvocationHandler ih = h;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class=\"line\">            AccessController.doPrivileged(<span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//用构造器和调用处理器创建proxy代理对象并返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cons.newInstance(<span class=\"keyword\">new</span> Object[]&#123;h&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入<code>getProxyClass0</code>方法：</p>\n<img data-src=\"/blog/posts/dfdc2005/2022-03-14-22-06-24.png\" class=\"\">\n\n\n<p>进入到<code>get</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过缓存查找值。如果给定的 (key, subKey) 对的缓存中没有条目或条目已被清除</span></span><br><span class=\"line\"><span class=\"comment\">// 则这始终评估subKeyFactory函数并可选地评估valueFactory函数。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K key, P parameter)</span> </span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(parameter);</span><br><span class=\"line\"></span><br><span class=\"line\">    expungeStaleEntries();</span><br><span class=\"line\"></span><br><span class=\"line\">    Object cacheKey = CacheKey.valueOf(key, refQueue);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 惰性地为特定的cacheKey安装第二级值map</span></span><br><span class=\"line\">    ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap = map.get(cacheKey);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (valuesMap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap</span><br><span class=\"line\">            = map.putIfAbsent(cacheKey,</span><br><span class=\"line\">                                valuesMap = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldValuesMap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            valuesMap = oldValuesMap;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建subKey并从valuesMap中检索由该subKey存储的可能的Supplier&lt;V&gt;</span></span><br><span class=\"line\">    Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter));</span><br><span class=\"line\">    Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class=\"line\">    Factory factory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (supplier != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// supplier可以是一个Factory或者CacheValue&lt;V&gt;实例</span></span><br><span class=\"line\">            V value = supplier.get(); -----------------------------------&gt;  进入该和新方法</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//否则缓存中没有供应商 </span></span><br><span class=\"line\">        <span class=\"comment\">//或返回null的供应商(可以是一个清除的CacheValue)</span></span><br><span class=\"line\">        <span class=\"comment\">//或一个工厂，没有成功安装CacheValue)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 懒惰地建造工厂</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (factory == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            factory = <span class=\"keyword\">new</span> Factory(key, parameter, subKey, valuesMap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (supplier == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            supplier = valuesMap.putIfAbsent(subKey, factory);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (supplier == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// successfully installed Factory</span></span><br><span class=\"line\">                supplier = factory;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// else retry with winning supplier</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (valuesMap.replace(subKey, supplier, factory)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// successfully replaced</span></span><br><span class=\"line\">                <span class=\"comment\">// cleared CacheEntry / unsuccessful Factory</span></span><br><span class=\"line\">                <span class=\"comment\">// with our Factory</span></span><br><span class=\"line\">                supplier = factory;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// retry with current supplier</span></span><br><span class=\"line\">                supplier = valuesMap.get(subKey);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Supplier.get</code>方法,此处是<code>Factory</code>实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> V <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// serialize access</span></span><br><span class=\"line\">    <span class=\"comment\">// re-check</span></span><br><span class=\"line\">    Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supplier != <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在我们等待的时候发生了一些变化: </span></span><br><span class=\"line\">        <span class=\"comment\">//可能是我们被CacheValue替换了 </span></span><br><span class=\"line\">        <span class=\"comment\">//或因为失败而被删除-&gt; </span></span><br><span class=\"line\">        <span class=\"comment\">//返回null信号WeakCache.get()重试 </span></span><br><span class=\"line\">        <span class=\"comment\">//循环</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// else still us (supplier == this)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// create new value</span></span><br><span class=\"line\">    V value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        value = Objects.requireNonNull(valueFactory.apply(key, parameter)); ---------&gt; 进入该apply核心方法</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// remove us on failure</span></span><br><span class=\"line\">            valuesMap.remove(subKey, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 断言非空值</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> value != <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用CacheValue (WeakReference)包装值</span></span><br><span class=\"line\">    CacheValue&lt;V&gt; cacheValue = <span class=\"keyword\">new</span> CacheValue&lt;&gt;(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// put into reverseMap</span></span><br><span class=\"line\">    reverseMap.put(cacheValue, Boolean.TRUE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// try replacing us with CacheValue (this should always succeed)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!valuesMap.replace(subKey, <span class=\"keyword\">this</span>, cacheValue)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">&quot;Should not reach here&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// successfully replaced us with new CacheValue -&gt; return the value</span></span><br><span class=\"line\">    <span class=\"comment\">// wrapped by it</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>apply</code>源码,此处为<code>Proxy</code>实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class=\"keyword\">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//验证类装入器解析此名称 指向同一个Class对象的接口</span></span><br><span class=\"line\">        Class&lt;?&gt; interfaceClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            interfaceClass = Class.forName(intf.getName(), <span class=\"keyword\">false</span>, loader);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (interfaceClass != intf) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                intf + <span class=\"string\">&quot; is not visible from class loader&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//验证Class对象实际表示接口。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                interfaceClass.getName() + <span class=\"string\">&quot; is not an interface&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 确认该接口不是重复的接口。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                <span class=\"string\">&quot;repeated interface: &quot;</span> + interfaceClass.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String proxyPkg = <span class=\"keyword\">null</span>;     <span class=\"comment\">// package to define proxy class in</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录非公共代理接口的包，</span></span><br><span class=\"line\">    <span class=\"comment\">// 使代理类将在同一个包中定义。</span></span><br><span class=\"line\">    <span class=\"comment\">// 验证所有的非公共代理接口都在同一个包中。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flags = intf.getModifiers();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class=\"line\">            accessFlags = Modifier.FINAL;</span><br><span class=\"line\">            String name = intf.getName();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = name.lastIndexOf(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">            String pkg = ((n == -<span class=\"number\">1</span>) ? <span class=\"string\">&quot;&quot;</span> : name.substring(<span class=\"number\">0</span>, n + <span class=\"number\">1</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (proxyPkg == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                proxyPkg = pkg;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(</span><br><span class=\"line\">                    <span class=\"string\">&quot;non-public interfaces from different packages&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proxyPkg == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有非公共代理接口，使用  com.sun.proxy 包</span></span><br><span class=\"line\">        proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 为要生成的代理类选择一个名称</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class=\"line\">    <span class=\"comment\">// 这理解解释了为什么我们每次debug的时候都会有一个 com.sun.proxy.$Proxy0  这种类名</span></span><br><span class=\"line\">    String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成特定的代理类</span></span><br><span class=\"line\">    <span class=\"comment\">//在上面中我讲生成的class文件输出在了out中，就是调用了这个方法，地方使用了AccessController.doPrivileged，为native方法，由C++编写</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class=\"line\">        proxyName, interfaces, accessFlags);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用native方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> defineClass0(loader, proxyName,</span><br><span class=\"line\">                            proxyClassFile, <span class=\"number\">0</span>, proxyClassFile.length);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassFormatError e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//类formaterror表示(禁止代理类生成代码)还有一些其他的 提供给代理的参数的无效方面 类创建(如虚拟机限制超过)</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(e.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>小总结</p>\n</blockquote>\n<p><code>newProxyInstance</code> -&gt; <code>getProxyClass0</code> -&gt; <code>supplier.get()</code> -&gt; <code>valueFactory.apply</code> 就是生成代理类的大概原理啦，只要有兴趣，<code>debug</code>一下就可以了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNzQ0OTU0NDMzNTQ0\">参考文章</span> </p>\n",
            "tags": [
                "Java面试",
                "JDK",
                "动态代理"
            ]
        }
    ]
}