{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"machine learning\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/53fbbba3/",
            "url": "https://smile1231.github.io/posts/53fbbba3/",
            "title": "Jupyter notebook使用",
            "date_published": "2022-07-17T14:44:03.000Z",
            "content_html": "<p><code>Jupyter</code>  不乏为一个很好的编译工具，搭配上 <code>Anoconda</code>  简直是无敌了</p>\n<h2 id=\"jupyter常用快捷键\"><a class=\"markdownIt-Anchor\" href=\"#jupyter常用快捷键\">#</a>  <code>Jupyter</code>  常用快捷键：</h2>\n<h3 id=\"命令模式按esc键\"><a class=\"markdownIt-Anchor\" href=\"#命令模式按esc键\">#</a> 命令模式（按 <code>Esc</code>  键）：</h3>\n<ol>\n<li>Enter：转入编辑模式</li>\n<li>Shift-Enter：运行本单元，选中下个单元</li>\n<li>Ctrl-Enter：运行本单元</li>\n<li>Alt-Enter：运行本单元，在其下插入新单元</li>\n<li>Y：单元转入代码状态</li>\n<li>M：单元转入 markdown 状态</li>\n<li>R：单元转入 raw 状态</li>\n<li>1：设定 1 级标题</li>\n<li>2：设定 2 级标题</li>\n<li>3：设定 3 级标题</li>\n<li>4：设定 4 级标题</li>\n<li>5：设定 5 级标题</li>\n<li>6：设定 6 级标题</li>\n<li>Up：选中上方单元</li>\n<li>K：选中上方单元</li>\n<li>Down：选中下方单元</li>\n<li>J：选中下方单元</li>\n<li>Shift-K：扩大选中上方单元</li>\n<li>Shift-J：扩大选中下方单元</li>\n<li>A：在上方插入新单元</li>\n<li>B：在下方插入新单元</li>\n<li>X：剪切选中的单元</li>\n<li>C：复制选中的单元</li>\n<li>Shift-V：粘贴到上方单元</li>\n<li>V：粘贴到下方单元</li>\n<li>Z：恢复删除的最后一个单元</li>\n<li>D,D：删除选中的单元</li>\n<li>Shift-M：合并选中的单元</li>\n<li>Ctrl-S：文件存盘</li>\n<li>S：文件存盘</li>\n<li>L：转换行号</li>\n<li>O：转换输出</li>\n<li>Shift-O：转换输出滚动</li>\n<li>Esc：关闭页面</li>\n<li>Q：关闭页面</li>\n<li>H：显示快捷键帮助</li>\n<li>I,I：中断 Notebook 内核</li>\n<li>0,0：重启 Notebook 内核</li>\n<li>Shift：忽略</li>\n<li>Shift-Space：向上滚动</li>\n<li>Space：向下滚动</li>\n</ol>\n<h3 id=\"编辑模式\"><a class=\"markdownIt-Anchor\" href=\"#编辑模式\">#</a> 编辑模式：</h3>\n<ol>\n<li>Tab : 代码补全或缩进</li>\n<li>Shift-Tab : 提示</li>\n<li>Ctrl-] : 缩进</li>\n<li>Ctrl-[ : 解除缩进</li>\n<li>Ctrl-A : 全选</li>\n<li>Ctrl-Z : 复原</li>\n<li>Ctrl-Shift-Z : 再做</li>\n<li>Ctrl-Y : 再做</li>\n<li>Ctrl-Home : 跳到单元开头</li>\n<li>Ctrl-Up : 跳到单元开头</li>\n<li>Ctrl-End : 跳到单元末尾</li>\n<li>Ctrl-Down : 跳到单元末尾</li>\n<li>Ctrl-Left : 跳到左边一个字首</li>\n<li>Ctrl-Right : 跳到右边一个字首</li>\n<li>Ctrl-Backspace : 删除前面一个字</li>\n<li>Ctrl-Delete : 删除后面一个字</li>\n<li>Esc : 进入命令模式</li>\n<li>Ctrl-M : 进入命令模式</li>\n<li>Shift-Enter : 运行本单元，选中下一单元</li>\n<li>Ctrl-Enter : 运行本单元</li>\n<li>Alt-Enter : 运行本单元，在下面插入一单元</li>\n<li>Ctrl-Shift-- : 分割单元</li>\n<li>Ctrl-Shift-Subtract : 分割单元</li>\n<li>Ctrl-S : 文件存盘</li>\n<li>Shift : 忽略</li>\n<li>Up : 光标上移或转入上一单元</li>\n<li>Down : 光标下移或转入下一单元</li>\n</ol>\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项：</h2>\n<p><code>jupyter notebook</code>  每一个 <code>cell</code>  运行完后都会把这个 <code>cell</code>  中的变量保存到内存中，如果在一个 <code>cell</code>  中修改了之前的变量，再此运行这个 <code>cell</code>  的时候可能会导致一些问题产生。比如以下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一个cell中的代码</span></span><br><span class=\"line\">a = <span class=\"number\">10</span></span><br><span class=\"line\">b = <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二个cell中的代码</span></span><br><span class=\"line\">c = a/b</span><br><span class=\"line\">b = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>因为第二个 <code>cell</code>  修改了 <code>b</code>  变量，此时在整个环境中 <code>b</code>  都是等于 0 的，所以以后再运行这个 <code>cell</code>  的时候， <code>a/b</code>  这个就会出问题了。这时候可以使用 <code>Kernel-&gt;Rstart&amp;Run All</code>  来重新运行整个项目。</p>\n<h2 id=\"mac乱码解决\"><a class=\"markdownIt-Anchor\" href=\"#mac乱码解决\">#</a>  <code>Mac</code>  乱码解决</h2>\n<h3 id=\"步骤一-查看自己的字体中有哪种中文字体\"><a class=\"markdownIt-Anchor\" href=\"#步骤一-查看自己的字体中有哪种中文字体\">#</a> 步骤一 查看自己的字体中有哪种中文字体</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib</span><br><span class=\"line\">a=<span class=\"built_in\">sorted</span>([f.name <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> matplotlib.font_manager.fontManager.ttflist])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/53fbbba3/2022-07-17-22-46-35.png\" class=\"\">\n<p>找到支持中文的字体</p>\n<img data-src=\"/posts/53fbbba3/2022-07-17-22-46-44.png\" class=\"\">\n<h3 id=\"选择相应的字体\"><a class=\"markdownIt-Anchor\" href=\"#选择相应的字体\">#</a> 选择相应的字体</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>]=<span class=\"string\">&#x27;Heiti TC&#x27;</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>] = <span class=\"literal\">False</span>  <span class=\"comment\"># 负号正常显示</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/53fbbba3/2022-07-17-22-46-51.png\" class=\"\">\n",
            "tags": [
                "Python",
                "Jupyter",
                "Machine Learning"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/1b930e38/",
            "url": "https://smile1231.github.io/posts/1b930e38/",
            "title": "Machine Learning essays",
            "date_published": "2022-07-17T13:44:54.000Z",
            "content_html": "<p>最近在看 <code>数据挖掘</code> 以及 <code>ML</code>  的课程</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmh3bC5jb29sL3B5dGhvbi8lRTYlOTUlQjAlRTYlOEQlQUUlRTYlOEMlOTYlRTYlOEUlOTgv\">数据挖掘资料</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnVtcHkub3JnLmNuL3JlZmVyZW5jZS8=\">numpy reference</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnL3N0YWJsZS9tb2R1bGVzL2NsYXNzZXMuaHRtbA==\">Sklearn Reference</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3dlYmdyYXBodml6LmNvbS8=\">WebGraph</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9kYXRhc2V0cy8=\">Kaggle</span></p>\n<h2 id=\"python中的head方法\"><a class=\"markdownIt-Anchor\" href=\"#python中的head方法\">#</a>  <code>python</code>  中的 <code>head</code>  方法</h2>\n<p><code>head()</code>  根据位置返回对象的前 <code>n</code>  行。 如果你的对象中包含正确的数据类型，则对于快速测试很有用。 此方法用于返回数据帧或序列的前 <code>n</code>  行 (默认值为 <code>5</code> )。  <code>n：</code> 它是指返回行数的整数值。</p>\n<h2 id=\"pandas交叉表\"><a class=\"markdownIt-Anchor\" href=\"#pandas交叉表\">#</a>  <code>pandas</code>  交叉表</h2>\n<p>交叉表是由列和行组成的双向表。 它也被称为数据透视表或多维表。 其最大的优势是能够构造、汇总及显示大量数据。 交叉表还可用于确定行变量与列变量之间是否存在关系。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnRpYmNvLmNvbS9wdWIvc3BvdGZpcmVfd2ViX3BsYXllci82LjAuMC1ub3ZlbWJlci0yMDEzL3poLUNOL1dlYkhlbHAvR1VJRC0xRjY3QjJGMy0wNTZCLTQzMjQtQjJDQy0xNEQ3M0QzNzg2OTMuaHRtbA==\">参考链接</span></p>\n<h2 id=\"网格搜索gridsearchcv\"><a class=\"markdownIt-Anchor\" href=\"#网格搜索gridsearchcv\">#</a> 网格搜索（ <code>GridSearchCV</code> ）</h2>\n<p><code>GridSearch和CV</code> ，即网格搜索和交叉验证</p>\n<p>网格搜索算法是一种通过遍历给定的参数组合来优化模型表现的方法</p>\n<p>为何使用：超参数选择不恰当，就会出现欠拟合或者过拟合的问题</p>\n<p>内容： 网格搜索，搜索的是参数，即在指定的参数范围内，按步长依次调整参数，利用调整的参数训练学习器，从所有的参数中找到在验证集上精度最高的参数，这其实是一个训练和比较的过程。</p>\n<p><code>Grid Search</code> ：一种调参手段；穷举搜索：在所有候选的参数选择中，通过循环遍历，尝试每一种可能性，表现最好的参数就是最终的结果</p>\n<p>用法：网格搜索适用于三四个（或者更少）的超参数（当超参数的数量增长时，网格搜索的计算复杂度会呈现指数增长，这时候则使用随机搜索），用户列出一个较小的超参数值域，这些超参数至于的笛卡尔积（排列组合）为一组组超参数。网格搜索算法使用每组超参数训练模型并挑选验证集误差最小的超参数组合</p>\n<p>缺点：遍历所有组合，比较耗时</p>\n<h2 id=\"打印表头\"><a class=\"markdownIt-Anchor\" href=\"#打印表头\">#</a> 打印表头</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\">titanic = pd.read_csv(<span class=\"string\">&quot;./titanic/train.csv&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(titanic.columns)</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/1b930e38/2022-07-29-13-01-44.png\" class=\"\">\n<h2 id=\"pandas的inplace参数\"><a class=\"markdownIt-Anchor\" href=\"#pandas的inplace参数\">#</a>  <code>pandas</code>  的 <code>inplace</code>  参数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 关于`python`中的随机种子——`random_state`</span><br><span class=\"line\"></span><br><span class=\"line\">`random_state`是一个随机种子，是在任意带有随机性的类或函数里作为参数来控制随机模式。当`random_state`取某一个值时，也就确定了一种规则。</span><br><span class=\"line\"></span><br><span class=\"line\">`random_state`可以用于很多函数，一般用于以下三个地方：1、训练集测试集的划分 2、构建决策树 3、构建随机森林</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 查看数据类型</span><br><span class=\"line\"></span><br><span class=\"line\">```python</span><br><span class=\"line\"># type(a)   DataFrame数据类型</span><br><span class=\"line\"></span><br><span class=\"line\">df.dtypes  #查看各列数据类型</span><br><span class=\"line\">df[A].dtypes  #查看A列数据类型</span><br><span class=\"line\"></span><br><span class=\"line\">df[A].astypes(int)#将A列数据类型转换为int</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Machine Learning",
                "numpy",
                "pandas",
                "sklearn"
            ]
        }
    ]
}