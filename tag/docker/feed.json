{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"docker\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/e2b12017/",
            "url": "https://smile1231.github.io/posts/e2b12017/",
            "title": "Dokcer镜像推送到DockerHub",
            "date_published": "2022-08-10T16:52:36.000Z",
            "content_html": "<p>关于推送本地的镜像到<code>Docker Hub</code>上</p>\n<p>关于如何制作镜像：<a href=\"https://smile1231.github.io/posts/11faeb76/\">make DockerFile</a></p>\n<h2 id=\"注册账号\"><a href=\"#注册账号\" class=\"headerlink\" title=\"注册账号\"></a>注册账号</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">official Website</span></p>\n<p>注册完成之后，进入自己的账户信息页创建<code>Token</code></p>\n<img data-src=\"/blog/posts/e2b12017/2022-08-13-10-51-18.png\" class=\"\">\n\n<h2 id=\"本地登陆账号\"><a href=\"#本地登陆账号\" class=\"headerlink\" title=\"本地登陆账号\"></a>本地登陆账号</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Username: jinmaohub</span></span><br><span class=\"line\"><span class=\"comment\"># Password: $&#123;token&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># Login Successed</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"推送镜像\"><a href=\"#推送镜像\" class=\"headerlink\" title=\"推送镜像\"></a>推送镜像</h2><blockquote>\n<p>get images </p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/e2b12017/2022-08-13-10-48-38.png\" class=\"\">\n\n<blockquote>\n<p>用<code>docker tag</code>来进行标记</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag &lt;image-name&gt; &lt;docekerhub-name&gt;/&lt;iamges-name&gt;:&lt;tag-name&gt;</span><br><span class=\"line\"><span class=\"comment\"># docker tag local_vue jinmaohub/local_vue:latest</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>推送<code>images</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push &lt;docekerhub-name&gt;/&lt;iamges-name&gt;:&lt;tag-name&gt;</span><br><span class=\"line\"><span class=\"comment\"># docker push jinmaohub/local_hub:latest</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/e2b12017/2022-08-13-11-20-34.png\" class=\"\">\n\n<p>就会发现镜像推送成功了</p>\n<img data-src=\"/blog/posts/e2b12017/2022-08-13-11-20-56.png\" class=\"\">\n\n\n\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/11faeb76/",
            "url": "https://smile1231.github.io/posts/11faeb76/",
            "title": "Docker指令以及部署",
            "date_published": "2022-06-30T13:30:40.000Z",
            "content_html": "<p>文档地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly95ZWFzeS5naXRib29rLmlvL2RvY2tlcl9wcmFjdGljZS8=\">https://yeasy.gitbook.io/docker_practice/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">Docker hub</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv\">Docker Install</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDgxNjczOC9hcnRpY2xlL2RldGFpbHMvMTE3NjUyNzM2\">Docker 部署 Springboot</span></p>\n<h2 id=\"列出所有镜像\"><a href=\"#列出所有镜像\" class=\"headerlink\" title=\"列出所有镜像\"></a>列出所有镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看运行的容器\"><a href=\"#查看运行的容器\" class=\"headerlink\" title=\"查看运行的容器\"></a>查看运行的容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>列出所有容器ID</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -aq</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"查看所有的容器包括停止的\"><a href=\"#查看所有的容器包括停止的\" class=\"headerlink\" title=\"查看所有的容器包括停止的\"></a>查看所有的容器包括停止的</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><blockquote>\n<p>删除容器  </p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm &lt;NAMES&gt;/&lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>删除镜像</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image rm &lt;IMAGES&gt;</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/11faeb76/2022-06-30-22-57-53.png\" class=\"\">\n\n<h2 id=\"停止、启动、杀死、重启一个容器\"><a href=\"#停止、启动、杀死、重启一个容器\" class=\"headerlink\" title=\"停止、启动、杀死、重启一个容器\"></a>停止、启动、杀死、重启一个容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop Name或者ID  </span><br><span class=\"line\">docker start Name或者ID  </span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> Name或者ID  </span><br><span class=\"line\">docker restart name或者ID</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker启动失败如何查看容器日志\"><a href=\"#docker启动失败如何查看容器日志\" class=\"headerlink\" title=\"docker启动失败如何查看容器日志\"></a><code>docker</code>启动失败如何查看容器日志</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们可以通过如下命令来获取容器的日志地址</span></span><br><span class=\"line\">docker inspect --format <span class=\"string\">&#x27;&#123;&#123;.LogPath&#125;&#125;&#x27;</span> &lt;NAMES&gt;</span><br><span class=\"line\"><span class=\"comment\">#  然后通过cat命令查看上述命令找到的日志地址</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/11faeb76/2022-06-30-23-11-07.png\" class=\"\">\n\n<blockquote>\n<p>更简单的方式</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs &lt;NAMES&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"M1拉取Mysql数据库\"><a href=\"#M1拉取Mysql数据库\" class=\"headerlink\" title=\"M1拉取Mysql数据库\"></a><code>M1</code>拉取<code>Mysql</code>数据库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull --platform linux/x86_64 mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动mysql</span></span><br><span class=\"line\">docker run --name mymysql -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime -d -p 3306:3306  mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker安装Nginx并且部署Vue项目\"><a href=\"#Docker安装Nginx并且部署Vue项目\" class=\"headerlink\" title=\"Docker安装Nginx并且部署Vue项目\"></a><code>Docker</code>安装<code>Nginx</code>并且部署<code>Vue</code>项目</h2><h3 id=\"拉取Nginx\"><a href=\"#拉取Nginx\" class=\"headerlink\" title=\"拉取Nginx\"></a>拉取<code>Nginx</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建挂载目录\"><a href=\"#创建挂载目录\" class=\"headerlink\" title=\"创建挂载目录\"></a>创建挂载目录</h3><p>找个目录创建一下目录（在<code>/Users/jinmao/Documents/Docker/</code>下创建<code>/nginx</code>）</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行并且挂载nginx\"><a href=\"#运行并且挂载nginx\" class=\"headerlink\" title=\"运行并且挂载nginx\"></a>运行并且挂载<code>nginx</code></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 80:80 --name nginx_BEBA  -v /Users/jinmao/Documents/Docker/nginx/dist:/usr/share/nginx/html --restart=always nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"把vue的目录上传到挂载的目录\"><a href=\"#把vue的目录上传到挂载的目录\" class=\"headerlink\" title=\"把vue的目录上传到挂载的目录\"></a>把<code>vue</code>的目录上传到挂载的目录</h3><p><code>vue</code>项目打包</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"builtin-name\">run</span> build</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/11faeb76/2022-07-02-09-15-41.png\" class=\"\">\n\n<h3 id=\"重启Docker容器\"><a href=\"#重启Docker容器\" class=\"headerlink\" title=\"重启Docker容器\"></a>重启<code>Docker</code>容器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart <span class=\"tag\">&lt;<span class=\"name\">NAMES</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时就可以了，<code>nginx</code>开放端口为<code>80</code>,直接<code>ip</code>访问即可</p>\n<h3 id=\"为什么要挂载在到docker的-usr-share-nginx-html\"><a href=\"#为什么要挂载在到docker的-usr-share-nginx-html\" class=\"headerlink\" title=\"为什么要挂载在到docker的/usr/share/nginx/html\"></a>为什么要挂载在到<code>docker</code>的<code>/usr/share/nginx/html</code></h3><p>看<code>nginx</code>的默认配置就知道<br>进入<code>docker</code>的容器里面：<br>通过命令<code>docker ps</code>查看运行容器信息；<br>在通过命令 <code>docker exec -it 容器id /bin/bash </code>进入容器目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it &lt;NAMES&gt; /bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>进入<code>cd /etc/nginx/conf.d</code> , 查看<code>default.conf</code>文件</p>\n<img data-src=\"/blog/posts/11faeb76/2022-07-02-09-34-32.png\" class=\"\">\n\n\n<p>但是你会发现<code>etc/nginx</code>下有个<code>nginx.conf</code> 配置文件我们查看配置发现这里有条语句是引用了上面<code>default.conf</code>的配置，由此可见我们以后需要配置其他项目路径就直接配置<code>default.conf</code>就行了。</p>\n<img data-src=\"/blog/posts/11faeb76/2022-07-02-09-36-44.png\" class=\"\">\n\n<p>但是这个有个缺点每次修改都需要进入容器的内部求修改。</p>\n<h3 id=\"优化nginx的配置文件（为了以后多项目部署方便修改Nginx）\"><a href=\"#优化nginx的配置文件（为了以后多项目部署方便修改Nginx）\" class=\"headerlink\" title=\"优化nginx的配置文件（为了以后多项目部署方便修改Nginx）\"></a>优化<code>nginx</code>的配置文件（为了以后多项目部署方便修改<code>Nginx</code>）</h3><p>我们可以通过把<code>etc/nginx</code> 复制到宿主机的目录下这样我们就可以修改宿主机的配置文件在重新启动一下容器就可以实现最新的配置</p>\n<ol>\n<li><p>使用命令复制容器的文件到宿主机：<code>docker cp &lt;NAMES&gt;:/etc/nginx /Users/jinmao/Documents/Docker/nginx/</code></p>\n<blockquote>\n<p><code>/etc/nginx</code>:为需要复制的文件</p>\n</blockquote>\n<blockquote>\n<p><code>/Users/jinmao/Documents/Docker/nginx/dist</code> :把他保存到那个目录下</p>\n</blockquote>\n <img data-src=\"/blog/posts/11faeb76/2022-07-02-09-52-09.png\" class=\"\"></li>\n<li><p>进入<code>/nginx</code>修改宿主机(本地的)的<code>default.conf</code>配置文件命令</p>\n <img data-src=\"/blog/posts/11faeb76/2022-07-02-10-35-29.png\" class=\"\"></li>\n<li><p>通过命令删除就的<code>nginx</code>容器：<code>docker rm 容器id</code> 删除容器</p>\n</li>\n<li><p>重新启动容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name &lt;name&gt; -p 80:80 -v /Users/jinmao/Documents/Docker/nginx/dist:/Users/jinmao/Documents/Study/doctor/Topic1/frontPro/dist -v /Users/jinmao/Documents/Docker/nginx/nginx:/etc/nginx -d nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解释：</span></span><br><span class=\"line\"><span class=\"comment\"># –name：后面的是容器名称</span></span><br><span class=\"line\"><span class=\"comment\"># -p:冒号前面是宿主机的对外端口，冒号后面的是容器的端口</span></span><br><span class=\"line\"><span class=\"comment\"># -v：冒号前面的是宿主机的文件目录，冒号后面是容器的内部文件目录</span></span><br><span class=\"line\"><span class=\"comment\"># -d:表示后端运行</span></span><br><span class=\"line\"><span class=\"comment\"># nginx：最后面的nginx是镜像的名称</span></span><br></pre></td></tr></table></figure>\n <img data-src=\"/blog/posts/11faeb76/2022-07-02-11-08-24.png\" class=\"\"></li>\n</ol>\n<p>现在已经把宿主机的<code>vue</code>项目<code>dist</code>挂载到<code>nginx</code>容器中，这样监听的请求就会被<code>nginx</code>代理到对应的目录中访问资源，还有宿主机的<code>/Users/jinmao/Documents/Docker/nginx/nginx</code>也被挂载到了容器<code>etc/nginx</code>中，这样只要修改宿主机的<code>nginx</code>配置,只要重启容器最新配置就会生效。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE1NTg1Njk5LzUxNzk2ODg=\">参考链接</span></p>\n<h2 id=\"制作Dockerfile-Springboot\"><a href=\"#制作Dockerfile-Springboot\" class=\"headerlink\" title=\"制作Dockerfile(Springboot)\"></a>制作<code>Dockerfile</code>(<code>Springboot</code>)</h2><p><code>Maven</code> 打包完<code>jar</code>包，忽略。。</p>\n<h3 id=\"编辑DockerFile文件\"><a href=\"#编辑DockerFile文件\" class=\"headerlink\" title=\"编辑DockerFile文件\"></a>编辑<code>DockerFile</code>文件</h3><p>和 <code>jar</code>包在同一级</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim Dockerfile</span><br></pre></td></tr></table></figure>\n<p>example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Docker image for springboot file run</span></span><br><span class=\"line\"><span class=\"comment\"># VERSION 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"># Author: jinmao</span></span><br><span class=\"line\">FROM java:8</span><br><span class=\"line\">VOLUME /tmp</span><br><span class=\"line\">EXPOSE 9999</span><br><span class=\"line\">ADD thesis-project.jar /app.jar</span><br><span class=\"line\">RUN bash -c <span class=\"string\">&#x27;touch /app.jar&#x27;</span></span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打包命令</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t &lt;lower_name&gt; .</span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/11faeb76/2022-07-02-13-32-00.png\" class=\"\">\n\n<blockquote>\n<p>运行</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 9999:9999 --name BABE_Thesis -d babe_end</span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/11faeb76/2022-07-02-13-35-28.png\" class=\"\">\n\n\n<h2 id=\"Docker安装Jenkins\"><a href=\"#Docker安装Jenkins\" class=\"headerlink\" title=\"Docker安装Jenkins\"></a><code>Docker</code>安装<code>Jenkins</code></h2><p>原理图：</p>\n<img data-src=\"/blog/posts/11faeb76/2022-08-04-23-24-21.png\" class=\"\">\n\n<ol>\n<li><p>拉取镜像(稳定版本)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/11faeb76/2022-08-04-23-21-06.png\" class=\"\"></li>\n<li><p>创建挂载目录</p>\n</li>\n</ol>\n<blockquote>\n<p>创建目录</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/jinmao/Documents/Docker/jenkins_mount</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>运行容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -d 后台运行镜像</span></span><br><span class=\"line\"><span class=\"comment\"># -p 10240:8080 将镜像的8080端口映射到服务器的10240端口。</span></span><br><span class=\"line\"><span class=\"comment\"># -p 10241:50000 将镜像的50000端口映射到服务器的10241端口</span></span><br><span class=\"line\"><span class=\"comment\"># -v /Users/jinmao/Documents/Docker/jenkins_mount:/var/jenkins_home /var/jenkins_home目录为容器jenkins工作目录，我们将硬盘上的一个目录挂载到这个位置，方便后续更新镜像后继续使用原来的工作目录。这里我们设置的就是上面我们创建的 /Users/jinmao/Documents/Docker/jenkins_mount 目录</span></span><br><span class=\"line\"><span class=\"comment\"># -v /etc/localtime:/etc/localtime让容器使用和服务器同样的时间设置。</span></span><br><span class=\"line\"><span class=\"comment\"># --name myJenkins 给容器起一个别名</span></span><br><span class=\"line\">docker run -d -p 10240:8080 -p 10241:50000 -v /Users/jinmao/Documents/Docker/jenkins_mount:/var/jenkins_home -v /etc/localtime:/etc/localtime --name myJenkins jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-00-10-33.png\" class=\"\">\n\n<blockquote>\n<p>链接别的容器(<code>--link</code>，前面为容器名，后面为别名)</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">run -d -p 10242:8080 -p 10243:50000 -v /Users/jinmao/Documents/Docker/jenkins_m/jenkins_10242:/var/jenkins_home -v /etc/localtime:/etc/localtime --link mysql57:mysql  --name myJenkins10242  jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>查看<code>jenkins</code>是否启动成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-00-12-41.png\" class=\"\"></li>\n<li><p>查看<code>docker</code>容器日志。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs &lt;name&gt; </span><br><span class=\"line\"><span class=\"comment\"># docker logs myJenkins</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-00-14-43.png\" class=\"\">\n\n<ol start=\"6\">\n<li>进入挂载目录</li>\n</ol>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-00-15-42.png\" class=\"\">\n\n<ol start=\"7\">\n<li>访问<code>Jenkins</code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost:10240</span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-00-20-45.png\" class=\"\"></li>\n</ol>\n<p>根据提示输入密码</p>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-00-26-18.png\" class=\"\">\n\n<ol start=\"8\">\n<li>安装 <code>plugin</code></li>\n</ol>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-00-27-44.png\" class=\"\">\n\n<p>安装完成创建一下账户即可使用(账户截图未展示)</p>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-00-28-01.png\" class=\"\">\n\n<h2 id=\"Jenkins-关闭跨域\"><a href=\"#Jenkins-关闭跨域\" class=\"headerlink\" title=\"Jenkins 关闭跨域\"></a><code>Jenkins</code> 关闭跨域</h2><p>低版本可以直接在图形化界面中关闭，高版本只能进入<code>Docker</code>容器中更改</p>\n<blockquote>\n<p>进入容器</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker exec -u root -it myJenkins bash</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -u root -it &lt;name&gt; bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># apt update</span></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install vim</span></span><br><span class=\"line\">apt-get install vim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change configuration</span></span><br><span class=\"line\">vim /usr/<span class=\"built_in\">local</span>/bin/jenkins.sh</span><br><span class=\"line\"></span><br><span class=\"line\">-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-11-25-46.png\" class=\"\">\n\n<blockquote>\n<p>需要重启</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker restart myJenkins</span></span><br><span class=\"line\">docker restart &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>关闭成功</p>\n<img data-src=\"/blog/posts/11faeb76/2022-08-05-11-39-50.png\" class=\"\">\n\n\n\n\n",
            "tags": [
                "Java",
                "Docker"
            ]
        }
    ]
}