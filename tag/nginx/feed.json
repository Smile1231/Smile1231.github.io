{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"nginx\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/7874a051/",
            "url": "https://smile1231.github.io/posts/7874a051/",
            "title": "Nginx踩坑之解决前后端跨域",
            "date_published": "2022-07-05T15:17:40.000Z",
            "content_html": "<h2 id=\"nginx配置前端跨域\"><a href=\"#nginx配置前端跨域\" class=\"headerlink\" title=\"nginx配置前端跨域\"></a><code>nginx</code>配置前端跨域</h2><p>注意点： 如果使用<code>nginx</code>解决跨域在前端使用<code>axios</code>是不需要写后端全路径的，类似于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  原来我们需要写</span></span><br><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">&#x27;http://localhost:9999/api&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 现在改为</span></span><br><span class=\"line\">axios.defaults.baseURL = <span class=\"string\">&#x27;/api&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>这边不改动</p>\n<span id=\"more\"></span>\n\n<img data-src=\"/blog/posts/7874a051/2022-07-05-23-34-01.png\" class=\"\">\n\n<p>因为如果使用了<code>Nginx</code>反向代理之后，部署服务器会有跨域的问题，如果仅仅只是后端处理，也不一定能行, 需要在配置文件中进行代理,<code>docker</code>中文件位置：</p>\n<img data-src=\"/blog/posts/7874a051/2022-07-05-23-39-51.png\" class=\"\">\n\n<img data-src=\"/blog/posts/7874a051/2022-07-05-23-40-29.png\" class=\"\">\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!--</span> <span class=\"string\">解决跨域代理 --&gt;</span></span><br><span class=\"line\"><span class=\"attr\">location</span> <span class=\"string\">/api/ &#123;</span></span><br><span class=\"line\"><span class=\"attr\">proxy_pass</span> <span class=\"string\">http://58.198.178.163:9999/api/;</span></span><br><span class=\"line\"><span class=\"attr\">client_max_body_size</span> <span class=\"string\">1024m;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!--</span> <span class=\"string\">解决404 --&gt;</span></span><br><span class=\"line\"><span class=\"attr\">error_page</span>  <span class=\"string\">404              index.html;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Tips：此处一定要注意的是，<code>proxy_pass</code> 所对应的地址一定要是真实<code>ip</code>，要不然就回报<code>502</code>错误，真的是个大坑，也是我自己的问题！！！</strong>： </p>\n<h2 id=\"Nginx与Vue打包成镜像\"><a href=\"#Nginx与Vue打包成镜像\" class=\"headerlink\" title=\"Nginx与Vue打包成镜像\"></a><code>Nginx</code>与<code>Vue</code>打包成镜像</h2><blockquote>\n<p><code>npm run build</code>打包,生成<code>dist</code>文件夹</p>\n</blockquote>\n<blockquote>\n<p>在<code>dist</code>统计目录下，<code>vim Dockerfile</code>,在其中输入</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM nginx</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 80</span><br><span class=\"line\"></span><br><span class=\"line\">COPY /dist /usr/share/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT nginx -g <span class=\"string\">&quot;daemon off;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>打包命令:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t &lt;image_name&gt; .</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看镜像 ： <code>docker images</code></p>\n</blockquote>\n<blockquote>\n<p>运行： <code>docker run -d --name nginx_vue -p 8888:80 &lt;image_name&gt;</code></p>\n</blockquote>\n<blockquote>\n<p>进入容器：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it nginx_vue /bin/bash</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>nginx</code>配置文件地址 <code>/etc/nginx/conf.d/default.conf</code></p>\n</blockquote>\n<h2 id=\"Nginx修改上传文件大小\"><a href=\"#Nginx修改上传文件大小\" class=\"headerlink\" title=\"Nginx修改上传文件大小\"></a><code>Nginx</code>修改上传文件大小</h2><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">client_max_body_size</span>    <span class=\"string\">1000m;</span></span><br></pre></td></tr></table></figure>\n\n\n\n",
            "tags": [
                "Java",
                "Nginx"
            ]
        }
    ]
}