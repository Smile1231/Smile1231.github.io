{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"stream\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/b1231c9f/",
            "url": "https://smile1231.github.io/posts/b1231c9f/",
            "title": "java stream中Collectors的用法",
            "date_published": "2022-02-13T13:48:00.000Z",
            "content_html": "<h1 id=\"java-stream中Collectors的用法\"><a href=\"#java-stream中Collectors的用法\" class=\"headerlink\" title=\"java stream中Collectors的用法\"></a><code>java stream</code>中<code>Collectors</code>的用法</h1><ul>\n<li><a href=\"#java-stream%E4%B8%ADcollectors%E7%9A%84%E7%94%A8%E6%B3%95\"><code>java stream</code>中<code>Collectors</code>的用法</a><ul>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\"><span id=\"common\">简介</span></a></li>\n<li><a href=\"#collectorstolist\"><span id=\"toList\"><code>Collectors.toList()</code></span></a></li>\n<li><a href=\"#collectorstoset\"><span id=\"toSet\"><code>Collectors.toSet()</code></span></a></li>\n<li><a href=\"#collectorstocollection\"><span id=\"toColl\"><code>Collectors.toCollection()</code></span></a></li>\n<li><a href=\"#collectorstomap\"><span id=\"toMap\"><code>Collectors.toMap()</code></span></a></li>\n<li><a href=\"#collectorscollectingandthen\"><span id=\"toCollAndThen\"><code>Collectors.collectingAndThen()</code></span></a></li>\n<li><a href=\"#collectorsjoining\"><span id=\"join\"><code>Collectors.joining()</code></span></a></li>\n<li><a href=\"#collectorscounting\"><span id=\"count\"><code>Collectors.counting()</code></span></a></li>\n<li><a href=\"#collectorssummarizingdoublelongint\"><span id=\"sum\"><code>Collectors.summarizingDouble/Long/Int()</code></span></a></li>\n<li><a href=\"#collectorsaveragingdoublelongint\"><span id=\"average\"><code>Collectors.averagingDouble/Long/Int()</code></span></a></li>\n<li><a href=\"#collectorssummingdoublelongint\"><span id=\"summing\"><code>Collectors.summingDouble/Long/Int()</code></span></a></li>\n<li><a href=\"#collectorsmaxbyminby\"><span id=\"max\"><code>Collectors.maxBy()/minBy()</code></span></a></li>\n<li><a href=\"#collectorsgroupingby\"><span id=\"group\"><code>Collectors.groupingBy()</code></span></a></li>\n<li><a href=\"#collectorspartitioningby\"><span id=\"par\"><code>Collectors.partitioningBy()</code></span></a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><span id=\"common\">简介</span></h2><p>在<code>java stream</code>中，我们通常需要将处理后的<code>stream</code>转换成集合类，这个时候就需要用到<code>stream.collect</code>方法。<code>collect</code>方法需要传入一个<code>Collector</code>类型，要实现<code>Collector</code>还是很麻烦的，需要实现好几个接口。</p>\n<p>于是<code>java</code>提供了更简单的<code>Collectors</code>工具类来方便我们构建<code>Collector</code>。</p>\n<p>下面我们将会具体讲解<code>Collectors</code>的用法。</p>\n<p>假如我们有这样两个<code>list：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;bob&quot;</span>, <span class=\"string\">&quot;alice&quot;</span>, <span class=\"string\">&quot;mark&quot;</span>);</span><br><span class=\"line\">List&lt;String&gt; duplicateList = Arrays.asList(<span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;alice&quot;</span>, <span class=\"string\">&quot;mark&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>上面一个是无重复的<code>list</code>，一个是带重复数据的<code>list</code>。接下来的例子我们会用上面的两个<code>list</code>来讲解<code>Collectors</code>的用法。</p>\n<h2 id=\"Collectors-toList\"><a href=\"#Collectors-toList\" class=\"headerlink\" title=\"Collectors.toList()\"></a><span id=\"toList\"><code>Collectors.toList()</code></span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; listResult = list.stream().collect(Collectors.toList());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,listResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-13-35.png\" class=\"\">\n\n<p>将<code>stream</code>转换为<code>list</code>。这里转换的<code>list</code>是<code>ArrayList</code>，如果想要转换成特定的<code>list</code>，需要使用<code>toCollection</code>方法。</p>\n<h2 id=\"Collectors-toSet\"><a href=\"#Collectors-toSet\" class=\"headerlink\" title=\"Collectors.toSet()\"></a><span id=\"toSet\"><code>Collectors.toSet()</code></span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set&lt;String&gt; setResult = list.stream().collect(Collectors.toSet());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,setResult);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-13-55.png\" class=\"\">\n\n<h2 id=\"Collectors-toCollection\"><a href=\"#Collectors-toCollection\" class=\"headerlink\" title=\"Collectors.toCollection()\"></a><span id=\"toColl\"><code>Collectors.toCollection()</code></span></h2><p>上面的<code>toMap,toSet</code>转换出来的都是特定的类型，如果我们需要自定义，则可以使用<code>toCollection()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; custListResult = list.stream().collect(Collectors.toCollection(LinkedList::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,custListResult);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-14-12.png\" class=\"\">\n\n<h2 id=\"Collectors-toMap\"><a href=\"#Collectors-toMap\" class=\"headerlink\" title=\"Collectors.toMap()\"></a><span id=\"toMap\"><code>Collectors.toMap()</code></span></h2><p><code>toMap</code>接收两个参数，第一个参数是<code>keyMapper</code>，第二个参数是<code>valueMapper</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; mapResult = list.stream()</span><br><span class=\"line\">                .collect(Collectors.toMap(Function.identity(), String::length));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,mapResult);</span><br></pre></td></tr></table></figure>\n<p>如果<code>stream</code>中有重复的值，则转换会报<code>IllegalStateException</code>异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; duplicateMapResult = duplicateList.stream()</span><br><span class=\"line\">                .collect(Collectors.toMap(Function.identity(), String::length));</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-14-26.png\" class=\"\">\n\n<p>解决方案:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; duplicateMapResult2 = duplicateList.stream()</span><br><span class=\"line\">                .collect(Collectors.toMap(Function.identity(), String::length, (item, identicalItem) -&gt; item));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,duplicateMapResult2);</span><br></pre></td></tr></table></figure>\n<p>在<code>toMap</code>中添加第三个参数<code>mergeFunction</code>，来解决冲突的问题。</p>\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-14-53.png\" class=\"\">\n\n<h2 id=\"Collectors-collectingAndThen\"><a href=\"#Collectors-collectingAndThen\" class=\"headerlink\" title=\"Collectors.collectingAndThen()\"></a><span id=\"toCollAndThen\">Collectors.collectingAndThen()</span></h2><p><code>collectingAndThen</code>允许我们对生成的集合再做一次操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; collectAndThenResult = list.stream()</span><br><span class=\"line\">                .collect(Collectors.collectingAndThen(Collectors.toList(), l -&gt; &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(l);&#125;));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,collectAndThenResult);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-15-04.png\" class=\"\">\n\n<h2 id=\"Collectors-joining\"><a href=\"#Collectors-joining\" class=\"headerlink\" title=\"Collectors.joining()\"></a><span id=\"join\"><code>Collectors.joining()</code></span></h2><p><code>Joining</code>用来连接<code>stream</code>中的元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String joinResult = list.stream().collect(Collectors.joining());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,joinResult);</span><br><span class=\"line\">        String joinResult1 = list.stream().collect(Collectors.joining(<span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,joinResult1);</span><br><span class=\"line\">        String joinResult2 = list.stream().collect(Collectors.joining(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;prefix&quot;</span>,<span class=\"string\">&quot;suffix&quot;</span>));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,joinResult2);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-15-15.png\" class=\"\">\n\n<p>可以不带参数，也可以带一个参数，也可以带三个参数，根据我们的需要进行选择。</p>\n<h2 id=\"Collectors-counting\"><a href=\"#Collectors-counting\" class=\"headerlink\" title=\"Collectors.counting()\"></a><span id=\"count\"><code>Collectors.counting()</code></span></h2><p><code>counting</code>主要用来统计<code>stream</code>中元素的个数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Long countResult = list.stream().collect(Collectors.counting());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,countResult);</span><br></pre></td></tr></table></figure>\n\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-15-42.png\" class=\"\">\n\n<h2 id=\"Collectors-summarizingDouble-Long-Int\"><a href=\"#Collectors-summarizingDouble-Long-Int\" class=\"headerlink\" title=\"Collectors.summarizingDouble/Long/Int()\"></a><span id=\"sum\"><code>Collectors.summarizingDouble/Long/Int()</code></span></h2><p><code>SummarizingDouble/Long/Int</code>为<code>stream</code>中的元素生成了统计信息，返回的结果是一个统计类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntSummaryStatistics intResult = list.stream()</span><br><span class=\"line\">                .collect(Collectors.summarizingInt(String::length));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,intResult);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-16-28.png\" class=\"\">\n\n<h2 id=\"Collectors-averagingDouble-Long-Int\"><a href=\"#Collectors-averagingDouble-Long-Int\" class=\"headerlink\" title=\"Collectors.averagingDouble/Long/Int()\"></a><span id=\"average\"><code>Collectors.averagingDouble/Long/Int()</code></span></h2><p><code>averagingDouble/Long/Int()</code>对<code>stream</code>中的元素做平均：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Double averageResult = list.stream().collect(Collectors.averagingInt(String::length));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,averageResult);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-16-42.png\" class=\"\">\n\n<h2 id=\"Collectors-summingDouble-Long-Int\"><a href=\"#Collectors-summingDouble-Long-Int\" class=\"headerlink\" title=\"Collectors.summingDouble/Long/Int()\"></a><span id=\"summing\"><code>Collectors.summingDouble/Long/Int()</code></span></h2><p><code>summingDouble/Long/Int()</code>对<code>stream</code>中的元素做<code>sum</code>操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Double summingResult = list.stream().collect(Collectors.summingDouble(String::length));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,summingResult);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-17-11.png\" class=\"\">\n\n<h2 id=\"Collectors-maxBy-minBy\"><a href=\"#Collectors-maxBy-minBy\" class=\"headerlink\" title=\"Collectors.maxBy()/minBy()\"></a><span id=\"max\"><code>Collectors.maxBy()/minBy()</code></span></h2><p><code>maxBy()/minBy()</code>根据提供的<code>Comparator</code>，返回<code>stream</code>中的最大或者最小值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; maxByResult = list.stream().collect(Collectors.maxBy(Comparator.naturalOrder()));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,maxByResult);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-17-22.png\" class=\"\">\n\n<h2 id=\"Collectors-groupingBy\"><a href=\"#Collectors-groupingBy\" class=\"headerlink\" title=\"Collectors.groupingBy()\"></a><span id=\"group\"><code>Collectors.groupingBy()</code></span></h2><p><code>GroupingBy</code>根据某些属性进行分组，并返回一个<code>Map</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Set&lt;String&gt;&gt; groupByResult = list.stream()</span><br><span class=\"line\">                .collect(Collectors.groupingBy(String::length, Collectors.toSet()));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,groupByResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-17-31.png\" class=\"\">\n\n<h2 id=\"Collectors-partitioningBy\"><a href=\"#Collectors-partitioningBy\" class=\"headerlink\" title=\"Collectors.partitioningBy()\"></a><span id=\"par\"><code>Collectors.partitioningBy()</code></span></h2><p><code>PartitioningBy</code>是一个特别的<code>groupingBy，PartitioningBy</code>返回一个<code>Map</code>，这个<code>Map</code>是以<code>boolean</code>值为<code>key</code>，从而将<code>stream</code>分成两部分，一部分是匹配<code>PartitioningBy</code>条件的，一部分是不满足条件的：</p>\n<img data-src=\"/blog/posts/b1231c9f/2022-02-13-23-17-39.png\" class=\"\">\n\n\n\n",
            "tags": [
                "Java",
                "Stream"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/8b8fedea/",
            "url": "https://smile1231.github.io/posts/8b8fedea/",
            "title": "Stream流的介绍",
            "date_published": "2022-02-13T13:43:58.000Z",
            "content_html": "<h1 id=\"Stream-流的介绍\"><a href=\"#Stream-流的介绍\" class=\"headerlink\" title=\"Stream 流的介绍\"></a><code>Stream</code> 流的介绍</h1><h2 id=\"1-1-java8-stream介绍\"><a href=\"#1-1-java8-stream介绍\" class=\"headerlink\" title=\"1.1 java8 stream介绍\"></a>1.1 <code>java8 stream</code>介绍</h2><p>　　<code>java8</code>新增了<code>stream</code>流的特性，能够让用户以函数式的方式、更为简单的操纵集合等数据结构，并实现了用户无感知的并行计算。</p>\n<h2 id=\"1-2-从零开始实现一个stream流\"><a href=\"#1-2-从零开始实现一个stream流\" class=\"headerlink\" title=\"1.2 从零开始实现一个stream流\"></a>1.2 从零开始实现一个<code>stream</code>流</h2><p>　　相信很多人在使用过<code>java8</code>的<code>streamAPI</code>接口之后，都会对其实现原理感到好奇，但往往在看到<code>jdk</code>的<code>stream</code>源码后却被其复杂的抽象、封装给弄糊涂了，而无法很好的理解其背后的原理。究其原因，是因为<code>jdk</code>的<code>stream</code>源码是高度工程化的代码，工程化的代码为了效率和满足各式各样的需求，会将代码实现的极其复杂，不易理解。</p>\n<p>　　在这里，我们将抛开<code>jdk</code>的实现思路，从零开始实现一个<code>stream</code>流。</p>\n<p>　　我们的<code>stream</code>流同样拥有惰性求值，函数式编程接口等特性，并兼容<code>jdk</code>的<code>Collection</code>等数据结构(但不支持并行计算 <code>orz</code>)。</p>\n<p>　　相信在亲手实现一个<code>stream</code>流的框架之后，大家能更好的理解流计算的原理。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"stream的优点\"><a href=\"#stream的优点\" class=\"headerlink\" title=\"stream的优点\"></a><code>stream</code>的优点</h2><p>在探讨探究<code>stream</code>的实现原理和动手实现之前，我们先要体会<code>stream</code>流计算的独特之处。</p>\n<blockquote>\n<p>举个例子： 有一个<code>List&lt;Person&gt;</code>列表,我们需要获得年龄为<code>70</code>岁的前<code>10</code>个<code>Person</code>的姓名。</p>\n</blockquote>\n<blockquote>\n<p>过程式的解决方案：</p>\n</blockquote>\n<p>　　稍加思考，我们很快就写出了一个过程式的解决方案(伪代码)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Person&gt; personList = fromDB(); <span class=\"comment\">// 获得List&lt;Person&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> limit = <span class=\"number\">10</span>; <span class=\"comment\">// 限制条件</span></span><br><span class=\"line\">List&lt;String&gt; nameList = <span class=\"keyword\">new</span> ArrayList(); <span class=\"comment\">// 收集的姓名集合</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Person personItem : personList)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(personItem.age == <span class=\"number\">70</span>)&#123; <span class=\"comment\">// 满足条件</span></span><br><span class=\"line\">        nameList.add(personItem.name); <span class=\"comment\">// 加入姓名集合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nameList.size() &gt;= <span class=\"number\">10</span>)&#123; <span class=\"comment\">// 判断是否超过限制</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> nameList;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>函数式<code>stream</code>解决方案：</p>\n</blockquote>\n<p>　　下面我们给出一种基于<code>stream</code>流的解决方案(伪代码)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Person&gt; personList = fromDB(); <span class=\"comment\">// 获得List&lt;Person&gt;</span></span><br><span class=\"line\">List&lt;String&gt; nameList = personList.stream()</span><br><span class=\"line\">　　　　　　.filter(item-&gt;item.age == <span class=\"number\">70</span>) <span class=\"comment\">// 过滤条件</span></span><br><span class=\"line\">　　　　　　.limit(<span class=\"number\">10</span>)    <span class=\"comment\">// limit限制条件</span></span><br><span class=\"line\">　　　　　　.map(item-&gt;item.name) <span class=\"comment\">// 获得姓名</span></span><br><span class=\"line\">　　　　　　.collect(Collector.toList()); <span class=\"comment\">// 转化为list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> nameList;</span><br></pre></td></tr></table></figure>\n\n<p>两种方案的不同之处：</p>\n<p>　　从函数式的角度上看，过程式的代码实现将收集元素、循环迭代、各种逻辑判断耦合在一起，暴露了太多细节。当未来需求变动和变得更加复杂的情况下，过程式的代码将变得难以理解和维护(需要控制台打印出 年龄为<code>70</code>岁的前10个<code>Person</code>中，姓王的<code>Person</code>的名称）。</p>\n<p>　　函数式的解决方案解开了代码细节和业务逻辑的耦合，类似于<code>sql</code>语句，表达的是”要做什么”而不是”如何去做”，使程序员可以更加专注于业务逻辑，写出易于理解和维护的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Person&gt; personList = fromDB(); <span class=\"comment\">// 获得List&lt;Person&gt;</span></span><br><span class=\"line\">personList.stream()</span><br><span class=\"line\">    .filter(item-&gt;item.age == <span class=\"number\">70</span>) <span class=\"comment\">// 过滤条件</span></span><br><span class=\"line\">    .limit(<span class=\"number\">10</span>)    <span class=\"comment\">// limit限制条件</span></span><br><span class=\"line\">    .filter(item-&gt;item.name.startWith(<span class=\"string\">&quot;王&quot;</span>))  <span class=\"comment\">// 过滤条件</span></span><br><span class=\"line\">    .map(item-&gt;item.name) <span class=\"comment\">// 获得姓名</span></span><br><span class=\"line\">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"stream-API接口介绍\"><a href=\"#stream-API接口介绍\" class=\"headerlink\" title=\"stream API接口介绍\"></a><code>stream API</code>接口介绍</h1><p><code>stream API</code>的接口是函数式的，尽管<code>java 8</code>也引入了<code>lambda</code>表达式，但<code>java</code>实质上依然是由接口-匿名内部类来实现函数传参的，所以需要事先定义一系列的函数式接口。</p>\n<blockquote>\n<p><code>Function:</code> 类似于 <code>y = F(x)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Function</span>&lt;<span class=\"title\">R</span>,<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 函数式接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 类似于 y = F(x)</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>BiFunction</code>: 类似于 <code>z = F(x,y)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BiFunction</span>&lt;<span class=\"title\">R</span>, <span class=\"title\">T</span>, <span class=\"title\">U</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 函数式接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 类似于 z = F(x,y)</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t, U u)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>ForEach</code>: 遍历处理</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ForEach</span> &lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 迭代器遍历</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 被迭代的每一项</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(T item)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Comparator</code>: 比较器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">T</span>&gt;  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 比较方法逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o1    参数1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o2    参数2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>      返回值大于0 ---&gt; (o1 &gt; o2)</span></span><br><span class=\"line\"><span class=\"comment\">     *              返回值等于0 ---&gt; (o1 = o2)</span></span><br><span class=\"line\"><span class=\"comment\">     *              返回值小于0 ---&gt; (o1 &lt; o2)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(T o1, T o2)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>Predicate:</code> 条件判断</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Predicate</span> &lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 函数式接口</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 迭代的每一项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 满足条件</span></span><br><span class=\"line\"><span class=\"comment\">     *          false 不满足条件</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">satisfy</span><span class=\"params\">(T item)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Supplier：</code>提供初始值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Supplier</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供初始值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 初始化的值</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>EvalFunction：stream</code>求值函数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EvalFunction</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * stream流的强制求值方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 求值返回一个新的stream</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">apply</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"stream-API接口：\"><a href=\"#stream-API接口：\" class=\"headerlink\" title=\"stream API接口：\"></a><code>stream API</code>接口：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * stream流的API接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Stream</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 映射 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mapper 转换逻辑 T-&gt;R</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 一个新的流</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    &lt;R&gt; <span class=\"function\">MyStream&lt;R&gt; <span class=\"title\">map</span><span class=\"params\">(Function&lt;R,T&gt; mapper)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扁平化 映射 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mapper 转换逻辑 T-&gt;MyStream&lt;R&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  一个新的流(扁平化之后)</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    &lt;R&gt; <span class=\"function\">MyStream&lt;R&gt; <span class=\"title\">flatMap</span><span class=\"params\">(Function&lt;? extends MyStream&lt;R&gt;, T&gt; mapper)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> predicate 谓词判断</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 一个新的流，其中元素是满足predicate条件的</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;T&gt; predicate)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 截断 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> n 截断流，只获取部分</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 一个新的流，其中的元素不超过 n</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">limit</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 去重操作 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 一个新的流，其中的元素不重复(!equals）</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">distinct</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 窥视 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 同一个流，peek不改变流的任何行为</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">peek</span><span class=\"params\">(ForEach&lt;T&gt; consumer)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 遍历 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> consumer 遍历逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(ForEach&lt;T&gt; consumer)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 浓缩 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initVal 浓缩时的初始值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accumulator 浓缩时的 累加逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 浓缩之后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    &lt;R&gt; <span class=\"function\">R <span class=\"title\">reduce</span><span class=\"params\">(R initVal, BiFunction&lt;R, R, T&gt; accumulator)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 收集 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> collector 传入所需的函数组合子，生成高阶函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 收集之后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    &lt;R, A&gt; <span class=\"function\">R <span class=\"title\">collect</span><span class=\"params\">(Collector&lt;T,A,R&gt; collector)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最大值 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> comparator 大小比较逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 流中的最大值</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">max</span><span class=\"params\">(Comparator&lt;T&gt; comparator)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最小值 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> comparator 大小比较逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 流中的最小值</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">min</span><span class=\"params\">(Comparator&lt;T&gt; comparator)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计数 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  当前流的个数</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流中是否存在满足predicate的项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 匹配项</span></span><br><span class=\"line\"><span class=\"comment\">     *         false 不存在 匹配项</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">anyMatch</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流中的元素是否全部满足predicate</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 全部满足</span></span><br><span class=\"line\"><span class=\"comment\">     *          false 不全部满足</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">allMatch</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回空的 stream</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 空stream</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">makeEmptyStream</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// isEnd = true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;T&gt;().isEnd(<span class=\"keyword\">true</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MyStream-实现细节\"><a href=\"#MyStream-实现细节\" class=\"headerlink\" title=\"MyStream 实现细节\"></a><code>MyStream</code> 实现细节</h2><p>简单介绍了<code>API</code>接口定义之后，我们开始深入探讨流的内部实现。</p>\n<p>　　流由两个重要的部分所组成，当前数据项(head)”和”下一数据项的求值函数<code>(nextItemEvalProcess)</code>。</p>\n<p>　　其中，<code>nextItemEvalProcess</code>是流能够实现”惰性求值”的关键。</p>\n<img data-src=\"/blog/posts/8b8fedea/2022-02-13-23-00-11.png\" class=\"\">\n\n<blockquote>\n<p>流的基本属性：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStream</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Stream</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流的头部</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流的下一项求值函数</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NextItemEvalProcess nextItemEvalProcess;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否是流的结尾</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isEnd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> MyStream&lt;T&gt; target;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.target = <span class=\"keyword\">new</span> MyStream&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder&lt;T&gt; <span class=\"title\">head</span><span class=\"params\">(T head)</span></span>&#123;</span><br><span class=\"line\">            target.head = head;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">Builder&lt;T&gt; <span class=\"title\">isEnd</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isEnd)</span></span>&#123;</span><br><span class=\"line\">            target.isEnd = isEnd;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder&lt;T&gt; <span class=\"title\">nextItemEvalProcess</span><span class=\"params\">(NextItemEvalProcess nextItemEvalProcess)</span></span>&#123;</span><br><span class=\"line\">            target.nextItemEvalProcess = nextItemEvalProcess;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MyStream&lt;T&gt; <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前流强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 求值之后返回一个新的流</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> MyStream&lt;T&gt; <span class=\"title\">eval</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nextItemEvalProcess.eval();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前流 为空</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptyStream</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.isEnd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下一个元素求值过程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NextItemEvalProcess</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 求值方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EvalFunction evalFunction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NextItemEvalProcess</span><span class=\"params\">(EvalFunction evalFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.evalFunction = evalFunction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">MyStream <span class=\"title\">eval</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evalFunction.apply();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-stream流在使用过程中的三个阶段\"><a href=\"#4-1-stream流在使用过程中的三个阶段\" class=\"headerlink\" title=\"4.1 stream流在使用过程中的三个阶段\"></a>4.1 <code>stream</code>流在使用过程中的三个阶段</h3><ol>\n<li><p>生成并构造一个流 (List.stream() 等方法)</p>\n</li>\n<li><p>在流的处理过程中添加、绑定惰性求值流程  (map、filter、limit 等方法)</p>\n</li>\n<li><p>对流使用强制求值函数，生成最终结果 (max、collect、forEach等方法)</p>\n</li>\n</ol>\n<h3 id=\"4-2-生成并构造一个流\"><a href=\"#4-2-生成并构造一个流\" class=\"headerlink\" title=\"4.2 生成并构造一个流\"></a>4.2 生成并构造一个流</h3><p>　　流在生成时是”纯净”的，其最初的<code>NextItemEvalProcess</code>求值之后就是指向自己的下一个元素。</p>\n<p>　　我们以一个<code>Integer</code>整数流的生成为例。<code>IntegerStreamGenerator.getIntegerStream(1,10) </code>会返回一个流结构，其逻辑上等价于一个从<code>1</code>到<code>10</code>的整数流。但实质是一个惰性求值的<code>stream</code>对象，这里称其为<code>IntStream</code>，其<code>NextItemEvalProcess</code>是一个闭包，方法体是一个递归结构的求值函数，其中下界参数<code>low = low + 1</code>。</p>\n<p>　　当<code>IntStream</code>第一次被求值时，流开始初始化，<code>isStart = false</code>。当初始化完成之后，每一次求值，都会生成一个新的流对象，其中<code>head(low) = low + 1</code>。当<code>low &gt; high</code>时，流被终止，返回空的流对象。</p>\n<img data-src=\"/blog/posts/8b8fedea/2022-02-13-23-00-27.png\" class=\"\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 整数流生成器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerStreamGenerator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得一个有限的整数流 介于[low-high]之间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> low 下界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> high 上界</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MyStream&lt;Integer&gt; <span class=\"title\">getIntegerStream</span><span class=\"params\">(<span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getIntegerStreamInner(low,high,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归函数。配合getIntegerStream(int low,int high)</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MyStream&lt;Integer&gt; <span class=\"title\">getIntegerStreamInner</span><span class=\"params\">(<span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">boolean</span> isStart)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 到达边界条件，返回空的流</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Stream.makeEmptyStream();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isStart)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;Integer&gt;()</span><br><span class=\"line\">                    .process(<span class=\"keyword\">new</span> NextItemEvalProcess(()-&gt;getIntegerStreamInner(low,high,<span class=\"keyword\">false</span>)))</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;Integer&gt;()</span><br><span class=\"line\">                    <span class=\"comment\">// 当前元素 low</span></span><br><span class=\"line\">                    .head(low)</span><br><span class=\"line\">                    <span class=\"comment\">// 下一个元素 low+1</span></span><br><span class=\"line\">                    .process(<span class=\"keyword\">new</span> NextItemEvalProcess(()-&gt;getIntegerStreamInner(low+<span class=\"number\">1</span>,high,<span class=\"keyword\">false</span>)))</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，生成一个流的关键在于确定如何求值下一项元素。对于整数流来说，<code>low = low + 1</code>就是其下一项的求值过程。</p>\n<p>　　那么对于我们非常关心的<code>jdk</code>集合容器，又该如何生成对应的流呢?</p>\n<p>　　答案是<code>Iterator</code>迭代器，<code>jdk</code>的集合容器都实现了<code>Iterator</code>迭代器接口，通过迭代器我们可以轻易的取得容器的下一项元素，而不用关心容器内部实现细节。换句话说，只要实现过迭代器接口，就可以自然的转化为<code>stream</code>流，从而获得流计算的所有能力。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 集合流生成器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollectionStreamGenerator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将一个List转化为stream流</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">getListStream</span><span class=\"params\">(List&lt;T&gt; list)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getListStream(list.iterator(),<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> iterator list 集合的迭代器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> isStart 是否是第一次迭代</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">getListStream</span><span class=\"params\">(Iterator&lt;T&gt; iterator, <span class=\"keyword\">boolean</span> isStart)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!iterator.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不存在迭代的下一个元素，返回空的流</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Stream.makeEmptyStream();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isStart)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化，只需要设置 求值过程</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;T&gt;()</span><br><span class=\"line\">                    .nextItemEvalProcess(<span class=\"keyword\">new</span> NextItemEvalProcess(()-&gt; getListStream(iterator,<span class=\"keyword\">false</span>)))</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 非初始化，设置head和接下来的求值过程</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;T&gt;()</span><br><span class=\"line\">                    .head(iterator.next())</span><br><span class=\"line\">                    .nextItemEvalProcess(<span class=\"keyword\">new</span> NextItemEvalProcess(()-&gt; getListStream(iterator,<span class=\"keyword\">false</span>)))</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"举例分析\"><a href=\"#举例分析\" class=\"headerlink\" title=\"举例分析\"></a>举例分析</h2><p>　　我们选择一个简单而又不失一般性的例子，串联起这些内容。通过完整的描述一个流求值的全过程，加深大家对流的理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Integer sum = IntegerStreamGenerator.getIntegerStream(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">                .filter(item-&gt; item%<span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"comment\">// 过滤出偶数</span></span><br><span class=\"line\">                .map(item-&gt; item * item)    <span class=\"comment\">// 映射为平方</span></span><br><span class=\"line\">                .limit(<span class=\"number\">2</span>)                   <span class=\"comment\">// 截取前两个</span></span><br><span class=\"line\">                .reduce(<span class=\"number\">0</span>,(i1,i2)-&gt; i1+i2); <span class=\"comment\">// 最终结果累加求和(初始值为0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(sum); <span class=\"comment\">// 20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>由于我们的<code>stream</code>实现采用的是链式编程的方式，不太好理解，将其展开为逻辑等价的形式。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;　　　　 <span class=\"comment\">// 生成整数流 1-10</span></span><br><span class=\"line\">    Stream&lt;Integer&gt; intStream = IntegerStreamGenerator.getIntegerStream(<span class=\"number\">1</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">// intStream基础上过滤出偶数</span></span><br><span class=\"line\">    Stream&lt;Integer&gt; filterStream =  intStream.filter(item-&gt; item%<span class=\"number\">2</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// filterStream基础上映射为平方</span></span><br><span class=\"line\">    Stream&lt;Integer&gt; mapStream = filterStream.map(item-&gt; item * item);</span><br><span class=\"line\">    <span class=\"comment\">// mapStream基础上截取前两个</span></span><br><span class=\"line\">    Stream&lt;Integer&gt; limitStream = mapStream.limit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 最终结果累加求和(初始值为0)</span></span><br><span class=\"line\">    Integer sum = limitStream.reduce(<span class=\"number\">0</span>,(i1,i2)-&gt; i1+i2);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(sum); <span class=\"comment\">// 20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>reduce</code>强制求值操作之前的执行过程图：</p>\n</blockquote>\n<img data-src=\"/blog/posts/8b8fedea/2022-02-13-23-00-42.png\" class=\"\">\n\n<blockquote>\n<p><code>reduce</code>强制求值过程中的执行过程图 ：</p>\n</blockquote>\n<img data-src=\"/blog/posts/8b8fedea/2022-02-13-23-00-49.png\" class=\"\">\n\n<p>可以看到，<code>stream</code>的求值过程并不会一口气将初始的流全部求值，而是按需的、一个一个的进行求值。</p>\n<p><code>stream</code>的一次求值过程至多只会遍历流中元素一次；如果存在短路操作(<code>limit、anyMatch</code>等)，实际迭代的次数会更少。</p>\n<p>因此不必担心多层的<code>map、filter</code>处理逻辑的嵌套会让流进行多次迭代，导致效率急剧下降。</p>\n<img data-src=\"/blog/posts/8b8fedea/2022-02-13-23-00-59.png\" class=\"\">\n\n<hr/>\n\n\n\n<h2 id=\"具体用法\"><a href=\"#具体用法\" class=\"headerlink\" title=\"具体用法\"></a>具体用法</h2><img data-src=\"/blog/posts/8b8fedea/2022-02-13-23-01-07.png\" class=\"\">\n\n<ul>\n<li><p>无状态：指元素的处理不受之前元素的影响；</p>\n</li>\n<li><p>有状态：指该操作只有拿到所有元素之后才能继续下去。</p>\n</li>\n<li><p>非短路操作：指必须处理所有元素才能得到最终结果；</p>\n</li>\n<li><p>短路操作：指遇到某些符合条件的元素就可以得到最终结果，如<code> A || B</code>，只要<code>A</code>为<code>true</code>，则无需判断<code>B</code>的结果。</p>\n</li>\n</ul>\n<h3 id=\"1-流的常用创建方法\"><a href=\"#1-流的常用创建方法\" class=\"headerlink\" title=\"1. 流的常用创建方法\"></a>1. 流的常用创建方法</h3><h4 id=\"1-1-使用Collection下的-stream-和-parallelStream-方法\"><a href=\"#1-1-使用Collection下的-stream-和-parallelStream-方法\" class=\"headerlink\" title=\"1.1 使用Collection下的 stream() 和 parallelStream() 方法\"></a>1.1 使用<code>Collection</code>下的 <code>stream()</code> 和 <code>parallelStream()</code> 方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">Stream&lt;String&gt; stream = list.stream(); <span class=\"comment\">//获取一个顺序流</span></span><br><span class=\"line\">Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class=\"comment\">//获取一个并行流</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-使用Arrays-中的-stream-方法，将数组转成流\"><a href=\"#1-2-使用Arrays-中的-stream-方法，将数组转成流\" class=\"headerlink\" title=\"1.2 使用Arrays 中的 stream() 方法，将数组转成流\"></a>1.2 使用<code>Arrays</code> 中的 <code>stream()</code> 方法，将数组转成流</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer[] nums = <span class=\"keyword\">new</span> Integer[<span class=\"number\">10</span>];</span><br><span class=\"line\">Stream&lt;Integer&gt; stream = Arrays.stream(nums);</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-使用Stream中的静态方法：of-、iterate-、generate\"><a href=\"#1-3-使用Stream中的静态方法：of-、iterate-、generate\" class=\"headerlink\" title=\"1.3 使用Stream中的静态方法：of()、iterate()、generate()\"></a>1.3 使用<code>Stream</code>中的静态方法：<code>of()、iterate()、generate()</code></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; stream = Stream.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class=\"number\">0</span>, (x) -&gt; x + <span class=\"number\">2</span>).limit(<span class=\"number\">6</span>);</span><br><span class=\"line\">stream2.forEach(System.out::println); <span class=\"comment\">// 0 2 4 6 8 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class=\"number\">2</span>);</span><br><span class=\"line\">stream3.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-4-使用-BufferedReader-lines-方法，将每行内容转成流\"><a href=\"#1-4-使用-BufferedReader-lines-方法，将每行内容转成流\" class=\"headerlink\" title=\"1.4 使用 BufferedReader.lines() 方法，将每行内容转成流\"></a>1.4 使用 <code>BufferedReader.lines()</code> 方法，将每行内容转成流</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">&quot;F:\\\\test_stream.txt&quot;</span>));</span><br><span class=\"line\">Stream&lt;String&gt; lineStream = reader.lines();</span><br><span class=\"line\">lineStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流\"><a href=\"#1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流\" class=\"headerlink\" title=\"1.5 使用 Pattern.splitAsStream() 方法，将字符串分隔成流\"></a>1.5 使用 <code>Pattern.splitAsStream()</code> 方法，将字符串分隔成流</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pattern pattern = Pattern.compile(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class=\"string\">&quot;a,b,c,d&quot;</span>);</span><br><span class=\"line\">stringStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-流的中间操作\"><a href=\"#2-流的中间操作\" class=\"headerlink\" title=\"2. 流的中间操作\"></a><code>2.</code> 流的中间操作</h3><h4 id=\"2-1-筛选与切片\"><a href=\"#2-1-筛选与切片\" class=\"headerlink\" title=\"2.1 筛选与切片\"></a><code>2.1</code> 筛选与切片</h4><p><code>filter：</code>过滤流中的某些元素</p>\n<p><code>limit(n)：</code>获取<code>n</code>个元素</p>\n<p><code>skip(n)：</code>跳过<code>n</code>元素，配合<code>limit(n)</code>可实现分页</p>\n<p><code>distinct：</code>通过流中元素的 <code>hashCode()</code> 和 <code>equals()</code> 去除重复元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; stream = Stream.of(<span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>, <span class=\"number\">14</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Stream&lt;Integer&gt; newStream = stream.filter(s -&gt; s &gt; <span class=\"number\">5</span>) <span class=\"comment\">//6 6 7 9 8 10 12 14 14</span></span><br><span class=\"line\">        .distinct() <span class=\"comment\">//6 7 9 8 10 12 14</span></span><br><span class=\"line\">        .skip(<span class=\"number\">2</span>) <span class=\"comment\">//9 8 10 12 14</span></span><br><span class=\"line\">        .limit(<span class=\"number\">2</span>); <span class=\"comment\">//9 8</span></span><br><span class=\"line\">newStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-映射\"><a href=\"#2-2-映射\" class=\"headerlink\" title=\"2.2 映射\"></a><code>2.2</code> 映射</h4><ul>\n<li><code>map：</code>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</li>\n<li><code>flatMap：</code>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;a,b,c&quot;</span>, <span class=\"string\">&quot;1,2,3&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//将每个元素转成一个新的且不带逗号的元素</span></span><br><span class=\"line\">Stream&lt;String&gt; s1 = list.stream().map(s -&gt; s.replaceAll(<span class=\"string\">&quot;,&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">s1.forEach(System.out::println); <span class=\"comment\">// abc  123</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Stream&lt;String&gt; s3 = list.stream().flatMap(s -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将每个元素转换成一个stream</span></span><br><span class=\"line\">    String[] split = s.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">s3.forEach(System.out::println); <span class=\"comment\">// a b c 1 2 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-排序\"><a href=\"#2-3-排序\" class=\"headerlink\" title=\"2.3 排序\"></a><code>2.3</code> 排序</h4><ul>\n<li><code>sorted()：</code>自然排序，流中元素需实现<code>Comparable</code>接口</li>\n<li><code>sorted(Comparator com)：</code>定制排序，自定义<code>Comparator</code>排序器  </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"string\">&quot;ff&quot;</span>, <span class=\"string\">&quot;dd&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//String 类自身已实现Compareable接口</span></span><br><span class=\"line\">list.stream().sorted().forEach(System.out::println);<span class=\"comment\">// aa dd ff</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Student s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">Student s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;bb&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">Student s3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">Student s4 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;dd&quot;</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\">List&lt;Student&gt; studentList = Arrays.asList(s1, s2, s3, s4);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//自定义排序：先按姓名升序，姓名相同则按年龄升序</span></span><br><span class=\"line\">studentList.stream().sorted(</span><br><span class=\"line\">        (o1, o2) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o1.getName().equals(o2.getName())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.getAge() - o2.getAge();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.getName().compareTo(o2.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-消费\"><a href=\"#2-4-消费\" class=\"headerlink\" title=\"2.4 消费\"></a>2.4 消费</h4><p><code>peek：</code>如同于<code>map</code>，能得到流中的每一个元素。但<code>map</code>接收的是一个<code>Function</code>表达式，有返回值；而<code>peek</code>接收的是<code>Consumer</code>表达式，没有返回值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">Student s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;bb&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">List&lt;Student&gt; studentList = Arrays.asList(s1, s2);</span><br><span class=\"line\"> </span><br><span class=\"line\">studentList.stream()</span><br><span class=\"line\">        .peek(o -&gt; o.setAge(<span class=\"number\">100</span>))</span><br><span class=\"line\">        .forEach(System.out::println);   </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\">Student&#123;name=<span class=\"string\">&#x27;aa&#x27;</span>, age=<span class=\"number\">100</span>&#125;</span><br><span class=\"line\">Student&#123;name=<span class=\"string\">&#x27;bb&#x27;</span>, age=<span class=\"number\">100</span>&#125;            </span><br></pre></td></tr></table></figure>\n<h3 id=\"3-流的终止操作\"><a href=\"#3-流的终止操作\" class=\"headerlink\" title=\"3. 流的终止操作\"></a>3. 流的终止操作</h3><h4 id=\"3-1-匹配、聚合操作\"><a href=\"#3-1-匹配、聚合操作\" class=\"headerlink\" title=\"3.1 匹配、聚合操作\"></a>3.1 匹配、聚合操作</h4><p><code>allMatch</code>：接收一个 <code>Predicate</code> 函数，当流中每个元素都符合该断言时才返回<code>true</code>，否则返回<code>false</code></p>\n<ul>\n<li><code>noneMatch</code>：接收一个 <code>Predicate</code> 函数，当流中每个元素都不符合该断言时才返回<code>true</code>，否则返回<code>false</code></li>\n<li><code>anyMatch</code>：接收一个 <code>Predicate</code> 函数，只要流中有一个元素满足该断言则返回<code>true</code>，否则返回<code>false</code></li>\n<li><code>findFirst</code>：返回流中第一个元素</li>\n<li><code>findAny</code>：返回流中的任意元素</li>\n<li><code>count</code>：返回流中元素的总个数</li>\n<li><code>max</code>：返回流中元素最大值</li>\n<li><code>min</code>：返回流中元素最小值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">boolean</span> allMatch = list.stream().allMatch(e -&gt; e &gt; <span class=\"number\">10</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> noneMatch = list.stream().noneMatch(e -&gt; e &gt; <span class=\"number\">10</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> anyMatch = list.stream().anyMatch(e -&gt; e &gt; <span class=\"number\">4</span>);  <span class=\"comment\">//true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Integer findFirst = list.stream().findFirst().get(); <span class=\"comment\">//1</span></span><br><span class=\"line\">Integer findAny = list.stream().findAny().get(); <span class=\"comment\">//1</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">long</span> count = list.stream().count(); <span class=\"comment\">//5</span></span><br><span class=\"line\">Integer max = list.stream().max(Integer::compareTo).get(); <span class=\"comment\">//5</span></span><br><span class=\"line\">Integer min = list.stream().min(Integer::compareTo).get(); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-规约操作\"><a href=\"#3-2-规约操作\" class=\"headerlink\" title=\"3.2 规约操作\"></a>3.2 规约操作</h4><p><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)：</code>第一次执行时，<code>accumulator</code>函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素；依次类推。</p>\n<p><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)：</code>流程跟上面一样，只是第一次执行时，<code>accumulator</code>函数的第一个参数为<code>identity</code>，而第二个参数为流中的第一个元素。</p>\n<p><code>&lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)：</code>在串行流(<code>stream</code>)中，该方法跟第二个方法一样，即第三个参数<code>combiner</code>不会起作用。在并行流(<code>parallelStream</code>)中,我们知道流被<code>fork join</code>出多个线程进行执行，此时每个线程的执行流程就跟第二个方法<code>reduce(identity,accumulator)</code>一样，而第三个参数<code>combiner</code>函数，则是将每个线程的执行结果当成一个新的流，然后使用第一个方法<code>reduce(accumulator)</code>流程进行规约。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//经过测试，当元素个数小于24时，并行时线程数等于元素个数，当大于等于24时，并行时线程数为16</span></span><br><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Integer v = list.stream().reduce((x1, x2) -&gt; x1 + x2).get();</span><br><span class=\"line\">System.out.println(v);   <span class=\"comment\">// 300</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Integer v1 = list.stream().reduce(<span class=\"number\">10</span>, (x1, x2) -&gt; x1 + x2);</span><br><span class=\"line\">System.out.println(v1);  <span class=\"comment\">//310</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Integer v2 = list.stream().reduce(<span class=\"number\">0</span>,</span><br><span class=\"line\">        (x1, x2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;stream accumulator: x1:&quot;</span> + x1 + <span class=\"string\">&quot;  x2:&quot;</span> + x2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 - x2;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        (x1, x2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;stream combiner: x1:&quot;</span> + x1 + <span class=\"string\">&quot;  x2:&quot;</span> + x2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 * x2;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">System.out.println(v2); <span class=\"comment\">// -300</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Integer v3 = list.parallelStream().reduce(<span class=\"number\">0</span>,</span><br><span class=\"line\">        (x1, x2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;parallelStream accumulator: x1:&quot;</span> + x1 + <span class=\"string\">&quot;  x2:&quot;</span> + x2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 - x2;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        (x1, x2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;parallelStream combiner: x1:&quot;</span> + x1 + <span class=\"string\">&quot;  x2:&quot;</span> + x2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 * x2;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">System.out.println(v3); <span class=\"comment\">//197474048</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-收集操作\"><a href=\"#3-3-收集操作\" class=\"headerlink\" title=\"3.3 收集操作\"></a>3.3 收集操作</h4><ul>\n<li><code>collect</code>：接收一个<code>Collector</code>实例，将流中元素收集成另外一个数据结构。</li>\n<li><code>Collector&lt;T, A, R&gt;</code> 是一个接口，有以下5个抽象方法：</li>\n<li><code>Supplier&lt;A&gt; supplier()</code>：创建一个结果容器A</li>\n<li><code>BiConsumer&lt;A, T&gt; accumulator()</code>：消费型接口，第一个参数为容器A，第二个参数为流中元素<code>T</code>。</li>\n<li><code>BinaryOperator&lt;A&gt; combiner()</code>：函数接口，该参数的作用跟上一个方法(<code>reduce</code>)中的<code>combiner</code>参数一样，将并行流中各个子进程的运行结果(<code>accumulator</code>函数操作后的容器<code>A</code>)进行合并。</li>\n<li><code>Function&lt;A, R&gt; finisher()</code>：函数式接口，参数为：容器<code>A</code>，返回类型为：<code>collect</code>方法最终想要的结果<code>R</code>。</li>\n<li><code>Set&lt;Characteristics&gt; characteristics()</code>：返回一个不可变的<code>Set</code>集合，用来表明该<code>Collector</code>的特征。有以下三个特征：<ul>\n<li><code>CONCURRENT</code>：表示此收集器支持并发。（官方文档还有其他描述，暂时没去探索，故不作过多翻译）</li>\n<li><code>UNORDERED</code>：表示该收集操作不会保留流中元素原有的顺序。</li>\n<li><code>IDENTITY_FINISH</code>：表示<code>finisher</code>参数只是标识而已，可忽略。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-3-1-Collector-工具库：Collectors\"><a href=\"#3-3-1-Collector-工具库：Collectors\" class=\"headerlink\" title=\"3.3.1 Collector 工具库：Collectors\"></a>3.3.1 <code>Collector</code> 工具库：Collectors</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"number\">10</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">Student s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;bb&quot;</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">Student s3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">10</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">List&lt;Student&gt; list = Arrays.asList(s1, s2, s3);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//装成list</span></span><br><span class=\"line\">List&lt;Integer&gt; ageList = list.stream().map(Student::getAge).collect(Collectors.toList()); <span class=\"comment\">// [10, 20, 10]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//转成set</span></span><br><span class=\"line\">Set&lt;Integer&gt; ageSet = list.stream().map(Student::getAge).collect(Collectors.toSet()); <span class=\"comment\">// [20, 10]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//转成map,注:key不能相同，否则报错</span></span><br><span class=\"line\">Map&lt;String, Integer&gt; studentMap = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge)); <span class=\"comment\">// &#123;cc=10, bb=20, aa=10&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//字符串分隔符连接</span></span><br><span class=\"line\">String joinName = list.stream().map(Student::getName).collect(Collectors.joining(<span class=\"string\">&quot;,&quot;</span>, <span class=\"string\">&quot;(&quot;</span>, <span class=\"string\">&quot;)&quot;</span>)); <span class=\"comment\">// (aa,bb,cc)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//聚合操作</span></span><br><span class=\"line\"><span class=\"comment\">//1.学生总数</span></span><br><span class=\"line\">Long count = list.stream().collect(Collectors.counting()); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">//2.最大年龄 (最小的minBy同理)</span></span><br><span class=\"line\">Integer maxAge = list.stream().map(Student::getAge).collect(Collectors.maxBy(Integer::compare)).get(); <span class=\"comment\">// 20</span></span><br><span class=\"line\"><span class=\"comment\">//3.所有人的年龄</span></span><br><span class=\"line\">Integer sumAge = list.stream().collect(Collectors.summingInt(Student::getAge)); <span class=\"comment\">// 40</span></span><br><span class=\"line\"><span class=\"comment\">//4.平均年龄</span></span><br><span class=\"line\">Double averageAge = list.stream().collect(Collectors.averagingDouble(Student::getAge)); <span class=\"comment\">// 13.333333333333334</span></span><br><span class=\"line\"><span class=\"comment\">// 带上以上所有方法</span></span><br><span class=\"line\">DoubleSummaryStatistics statistics = list.stream().collect(Collectors.summarizingDouble(Student::getAge));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;count:&quot;</span> + statistics.getCount() + <span class=\"string\">&quot;,max:&quot;</span> + statistics.getMax() + <span class=\"string\">&quot;,sum:&quot;</span> + statistics.getSum() + <span class=\"string\">&quot;,average:&quot;</span> + statistics.getAverage());</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//分组</span></span><br><span class=\"line\">Map&lt;Integer, List&lt;Student&gt;&gt; ageMap = list.stream().collect(Collectors.groupingBy(Student::getAge));</span><br><span class=\"line\"><span class=\"comment\">//多重分组,先根据类型分再根据年龄分</span></span><br><span class=\"line\">Map&lt;Integer, Map&lt;Integer, List&lt;Student&gt;&gt;&gt; typeAgeMap = list.stream().collect(Collectors.groupingBy(Student::getType, Collectors.groupingBy(Student::getAge)));</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//分区</span></span><br><span class=\"line\"><span class=\"comment\">//分成两部分，一部分大于10岁，一部分小于等于10岁</span></span><br><span class=\"line\">Map&lt;Boolean, List&lt;Student&gt;&gt; partMap = list.stream().collect(Collectors.partitioningBy(v -&gt; v.getAge() &gt; <span class=\"number\">10</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//规约</span></span><br><span class=\"line\">Integer allAge = list.stream().map(Student::getAge).collect(Collectors.reducing(Integer::sum)).get(); <span class=\"comment\">//40</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3-3-2-Collectors-toList-解析\"><a href=\"#3-3-2-Collectors-toList-解析\" class=\"headerlink\" title=\"3.3.2 Collectors.toList() 解析\"></a>3.3.2 <code>Collectors.toList()</code> 解析</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//toList 源码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CollectorImpl&lt;&gt;((Supplier&lt;List&lt;T&gt;&gt;) ArrayList::<span class=\"keyword\">new</span>, List::add,</span><br><span class=\"line\">            (left, right) -&gt; &#123;</span><br><span class=\"line\">                left.addAll(right);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">            &#125;, CH_ID);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//为了更好地理解，我们转化一下源码中的lambda表达式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList() &#123;</span><br><span class=\"line\">    Supplier&lt;List&lt;T&gt;&gt; supplier = () -&gt; <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    BiConsumer&lt;List&lt;T&gt;, T&gt; accumulator = (list, t) -&gt; list.add(t);</span><br><span class=\"line\">    BinaryOperator&lt;List&lt;T&gt;&gt; combiner = (list1, list2) -&gt; &#123;</span><br><span class=\"line\">        list1.addAll(list2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    Function&lt;List&lt;T&gt;, List&lt;T&gt;&gt; finisher = (list) -&gt; list;</span><br><span class=\"line\">    Set&lt;Collector.Characteristics&gt; characteristics = Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.IDENTITY_FINISH));</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Collector&lt;T, List&lt;T&gt;, List&lt;T&gt;&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Supplier <span class=\"title\">supplier</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> supplier;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BiConsumer <span class=\"title\">accumulator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> accumulator;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BinaryOperator <span class=\"title\">combiner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> combiner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Function <span class=\"title\">finisher</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> finisher;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Characteristics&gt; <span class=\"title\">characteristics</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> characteristics;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n",
            "tags": [
                "Java",
                "Stream"
            ]
        }
    ]
}