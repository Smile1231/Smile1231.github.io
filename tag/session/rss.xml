<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>JIN MAO &#39;s Blog • Posts by &#34;session&#34; tag</title>
        <link>https://smile1231.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Tue, 15 Feb 2022 21:37:52 +0800</pubDate>
        <lastBuildDate>Tue, 15 Feb 2022 21:37:52 +0800</lastBuildDate>
        <category>SAP</category>
        <category>生物信息</category>
        <category>基因编辑</category>
        <category>Java</category>
        <category>Cache</category>
        <category>Cookie</category>
        <category>Session</category>
        <category>Java面试</category>
        <category>Corn</category>
        <category>前端</category>
        <category>Css</category>
        <category>DisPlay属性</category>
        <category>DDD</category>
        <category>领域驱动设计</category>
        <category>Docker</category>
        <category>FastJson</category>
        <category>JavaScript</category>
        <category>Html</category>
        <category>blog</category>
        <category>hexo</category>
        <category>next</category>
        <category>IDEA</category>
        <category>SpringBoot</category>
        <category>函数式接口</category>
        <category>Jvm</category>
        <category>map</category>
        <category>Stream流</category>
        <category>Assert</category>
        <category>Springboot</category>
        <category>java</category>
        <category>calender</category>
        <category>LeetCode</category>
        <category>算法</category>
        <category>递归</category>
        <category>Linux</category>
        <category>Mybatis</category>
        <category>分页查询</category>
        <category>模糊查询</category>
        <category>Nginx</category>
        <category>Spring</category>
        <category>SrpingBoot</category>
        <category>文件上传</category>
        <category>事务</category>
        <category>TypeScript</category>
        <category>WebPack</category>
        <category>master</category>
        <category>UML</category>
        <category>Ubuntu</category>
        <category>Mysql</category>
        <category>VSCODE</category>
        <category>快捷键</category>
        <category>Vue</category>
        <category>VsCode</category>
        <category>Shell</category>
        <category>日期</category>
        <category>Stream</category>
        <category>线程池</category>
        <category>ubuntu</category>
        <category>虚拟机</category>
        <category>二分查找</category>
        <category>数据挖掘</category>
        <category>Hadoop</category>
        <category>操作系统</category>
        <category>EasyExcel</category>
        <category>node</category>
        <category>JVM</category>
        <category>Yaml</category>
        <category>Hexo</category>
        <category>junit</category>
        <category>数据库</category>
        <category>Mysql事务</category>
        <category>Git</category>
        <category>git,npm,node</category>
        <category>冒泡排序</category>
        <category>动态规划</category>
        <category>堆排序</category>
        <category>幂等性</category>
        <category>多线程</category>
        <category>流</category>
        <category>归并排序</category>
        <category>快速排序</category>
        <category>正则表达式</category>
        <category>直接插入排序</category>
        <category>选择排序</category>
        <category>Java 面试</category>
        <category>数据结构</category>
        <category>阻塞队列</category>
        <category>Spring事务</category>
        <category>JDK</category>
        <category>动态代理</category>
        <category>Date</category>
        <category>ArrayList</category>
        <category>接口</category>
        <category>SpringMvc</category>
        <category>排序</category>
        <category>执行计划</category>
        <category>HashMap</category>
        <category>设计模式</category>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/b42f0c87/</guid>
            <title>Cache、Cookie、Session、Token</title>
            <link>https://smile1231.github.io/posts/b42f0c87/</link>
            <category>Java</category>
            <category>Cache</category>
            <category>Cookie</category>
            <category>Session</category>
            <category>Java面试</category>
            <pubDate>Tue, 15 Feb 2022 21:37:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Cache、Cookie、Session、Token&#34;&gt;&lt;a href=&#34;#Cache、Cookie、Session、Token&#34; class=&#34;headerlink&#34; title=&#34;Cache、Cookie、Session、Token&#34;&gt;&lt;/a&gt;&lt;code&gt;Cache、Cookie、Session、Token&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&#34;协议是什么&#34;&gt;&lt;a href=&#34;#协议是什么&#34; class=&#34;headerlink&#34; title=&#34;协议是什么&#34;&gt;&lt;/a&gt;协议是什么&lt;/h2&gt;&lt;p&gt;在接口测试中，客户端发送的&lt;code&gt;request&lt;/code&gt;至服务端反馈的&lt;code&gt;response&lt;/code&gt;中传输的数据就是接口测试最重要的部分&lt;/p&gt;
&lt;h2 id=&#34;Cache是什么&#34;&gt;&lt;a href=&#34;#Cache是什么&#34; class=&#34;headerlink&#34; title=&#34;Cache是什么&#34;&gt;&lt;/a&gt;&lt;code&gt;Cache&lt;/code&gt;是什么&lt;/h2&gt;&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;打开浏览器或者应用的时候，用户的等待时间叫做响应时间，打开速度影响到用户体验，提高反应速度的一个方法就是使用缓存策略，缓存策略能带来什么好处呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;减少延迟：因为网页请求指向的是更接近的客户端缓存，而不是资源服务器，所以花费的时间更短，提高用户体验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;降低网络负荷：因为缓存可以重复使用，节省带宽，降低网络负荷，也就可以更加节省用户的流量&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;缓存一般分为以下几种：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;浏览器缓存　　　　&lt;br&gt;（缓存在本地）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代理缓存　　　　　&lt;br&gt;（缓存在网络路由，也就是共享缓存）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网关缓存　　　　　&lt;br&gt;(缓存在CDN)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;缓存策略一般分两种情况：&#34;&gt;&lt;a href=&#34;#缓存策略一般分两种情况：&#34; class=&#34;headerlink&#34; title=&#34;缓存策略一般分两种情况：&#34;&gt;&lt;/a&gt;缓存策略一般分两种情况：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;强缓存　　　　(直接在本地缓存中读取资源)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;协商缓存　　  (通过服务器告知是否能用本地缓存，先和服务器协商，如果可以，就从本地缓存中读取。如果不可以，就返回最新的资源)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Cookie&#34;&gt;&lt;a href=&#34;#Cookie&#34; class=&#34;headerlink&#34; title=&#34;Cookie&#34;&gt;&lt;/a&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Cookie&lt;/code&gt;的内容是保存一小段文本信息。组成一个通行证，用来处理客户端无状态协议的一种解决方案&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cookie&lt;/code&gt;使用原理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用户会提供信息提交给服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务端向客户端回传相应数据的同时，也会发回&lt;code&gt;Cookie&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端接收到服务器相应后，浏览器将&lt;code&gt;Cookie&lt;/code&gt;保存在同一个位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端向服务端发送请求的实话，会把&lt;code&gt;Cookie&lt;/code&gt;再次发回服务端&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;获取Cookie的途径&#34;&gt;&lt;a href=&#34;#获取Cookie的途径&#34; class=&#34;headerlink&#34; title=&#34;获取Cookie的途径&#34;&gt;&lt;/a&gt;获取&lt;code&gt;Cookie&lt;/code&gt;的途径&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;浏览器自带的开发工具或者抓包工具&lt;code&gt;（Fiddler,Charles）&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地获取（&lt;code&gt;ie&lt;/code&gt;的路径为&lt;code&gt;C&lt;/code&gt;盘&lt;code&gt;appdata/Microsoft/Windows/Cookies，Firefox位于C盘appdata/Mozilla/Firefox/Profiles，Charome位于C盘appdata/Goole/Chrome/User Date /Default）&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;js&lt;/code&gt;代码查看(浏览器地址栏输入&lt;code&gt;Javascript:alert(document.cookie)&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Session是什么&#34;&gt;&lt;a href=&#34;#Session是什么&#34; class=&#34;headerlink&#34; title=&#34;Session是什么&#34;&gt;&lt;/a&gt;&lt;code&gt;Session&lt;/code&gt;是什么&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Session&lt;/code&gt;是另外一种记录用户状态的机制，不同于&lt;code&gt;Cookie&lt;/code&gt;的是&lt;code&gt;Session&lt;/code&gt;是保存在服务器上，用来解决服务端对无状态协议&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Session&lt;/code&gt;的传输步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;服务端创建&lt;code&gt;Session&lt;/code&gt;，并创建唯一的&lt;code&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器将&lt;code&gt;id&lt;/code&gt;发给客户端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端再次发送请求的实话带上&lt;code&gt;Session&lt;/code&gt;的&lt;code&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务器接收到请求后根据&lt;code&gt;Seesion&lt;/code&gt;的&lt;code&gt;id&lt;/code&gt;找到相应的&lt;code&gt;Session&lt;/code&gt;，完成相应&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Session的传输媒介&#34;&gt;&lt;a href=&#34;#Session的传输媒介&#34; class=&#34;headerlink&#34; title=&#34;Session的传输媒介&#34;&gt;&lt;/a&gt;&lt;code&gt;Session&lt;/code&gt;的传输媒介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;Cookie&lt;/code&gt;传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;URL&lt;/code&gt;地址重写&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;很多同学不知道&lt;code&gt;Session&lt;/code&gt;和&lt;code&gt;Cookie&lt;/code&gt;的区别，那么我来大概讲解一下我理解的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;存储位置不同：大多数情况&lt;code&gt;Cookie&lt;/code&gt;存储在浏览器，&lt;code&gt;Session&lt;/code&gt;存储在服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存储容量不同：单个&lt;code&gt;Cookie&lt;/code&gt;保存的数据不得超过&lt;code&gt;4kb&lt;/code&gt;，一个站点最多&lt;code&gt;20&lt;/code&gt;个&lt;code&gt;Cookie&lt;/code&gt;，&lt;code&gt;Session&lt;/code&gt;一般情况下没有上限，不过建议不要存放太多东西影响性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存取方式不同：&lt;code&gt;Cookie&lt;/code&gt;只能用&lt;code&gt;ASCII&lt;/code&gt;字符串。通过编码方式获取&lt;code&gt;Unicode&lt;/code&gt;字符或者&lt;code&gt;二进制&lt;/code&gt;数据。不好存储复杂的信息，&lt;code&gt;Session&lt;/code&gt;能存储任何类型的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;隐私策略不同：&lt;code&gt;Cookie&lt;/code&gt;放在客户端，可以进行&lt;code&gt;Cookie&lt;/code&gt;欺骗，所以不安全。&lt;code&gt;Session&lt;/code&gt;放在服务端，更加安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有效期不同：&lt;code&gt;Cookie&lt;/code&gt;可以设置属性达到长期有效，&lt;code&gt;Session&lt;/code&gt;依赖于&lt;code&gt;JSESSIONID&lt;/code&gt;的&lt;code&gt;Cookie&lt;/code&gt;，&lt;code&gt;Cookie JSESSIONID&lt;/code&gt;的过期时间默认为&lt;code&gt;-1&lt;/code&gt;，只需要关闭窗口&lt;code&gt;Session&lt;/code&gt;就会失效，，就算不依赖&lt;code&gt;Cookie&lt;/code&gt;，&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;用&lt;code&gt;UrL&lt;/code&gt;重写也不能完成，如果&lt;code&gt;Session&lt;/code&gt;超时时间过长，容易导致内存溢出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;服务器压力不同：&lt;code&gt;Cookie&lt;/code&gt;保存子本地。不存在服务端压力。&lt;code&gt;Session&lt;/code&gt;保存在服务端，每个用户产生一个&lt;code&gt;Session&lt;/code&gt;，并发过多非常占用内存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;7.浏览器支持不同：如果浏览器禁用&lt;code&gt;Cookie&lt;/code&gt;，那么&lt;code&gt;Cookie&lt;/code&gt;直接失效。&lt;code&gt;Session&lt;/code&gt;比较好点。可以用&lt;code&gt;URL&lt;/code&gt;重写&lt;/p&gt;
&lt;p&gt;8.跨域不同：&lt;code&gt;Cookie&lt;/code&gt;支持跨域访问，&lt;code&gt;Session&lt;/code&gt;不支持跨域&lt;/p&gt;
&lt;h2 id=&#34;Token是什么：&#34;&gt;&lt;a href=&#34;#Token是什么：&#34; class=&#34;headerlink&#34; title=&#34;Token是什么：&#34;&gt;&lt;/a&gt;&lt;code&gt;Token&lt;/code&gt;是什么：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当客户端第一次请求的实话，发送用户信息到服务端，服务器对用户信息使用&lt;code&gt;HSA256&lt;/code&gt;算法以及密钥进行签名，再将这个签名和数据一次作为&lt;code&gt;Token&lt;/code&gt;返回给客户端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务端不保存&lt;code&gt;Token&lt;/code&gt;，客户端保存&lt;code&gt;Token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端再次请求的实话，将&lt;code&gt;Token&lt;/code&gt;发送给服务端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务端同样用&lt;code&gt;HSA256&lt;/code&gt;算法和同样的密钥对数据再一次计算签名，和&lt;code&gt;Token&lt;/code&gt;中的签名做比较（如果相同，直接登录，不相同，登录失败）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
