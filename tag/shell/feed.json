{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"shell\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/823298d2/",
            "url": "https://smile1231.github.io/posts/823298d2/",
            "title": "VsCode 如何Debug Shell",
            "date_published": "2022-07-01T02:58:13.000Z",
            "content_html": "<h2 id=\"1-下载Vscode插件-Bash-Debug\"><a href=\"#1-下载Vscode插件-Bash-Debug\" class=\"headerlink\" title=\"1. 下载Vscode插件 Bash Debug\"></a>1. 下载<code>Vscode</code>插件 <code>Bash Debug</code></h2><img data-src=\"/blog/posts/823298d2/2022-07-01-10-59-08.png\" class=\"\">\n\n<span id=\"more\"></span>\n\n<h2 id=\"2-create-launch-json-file\"><a href=\"#2-create-launch-json-file\" class=\"headerlink\" title=\"2. create launch.json file\"></a>2. <code>create launch.json file</code></h2><p>选择<code>Bash Debug</code></p>\n<img data-src=\"/blog/posts/823298d2/2022-07-01-11-04-35.png\" class=\"\">\n\n<h2 id=\"3-添加配置\"><a href=\"#3-添加配置\" class=\"headerlink\" title=\"3. 添加配置\"></a>3. 添加配置</h2><img data-src=\"/blog/posts/823298d2/2022-07-01-11-06-45.png\" class=\"\">\n\n<img data-src=\"/blog/posts/823298d2/2022-07-01-11-07-31.png\" class=\"\">\n\n<p>使用下拉菜单选中刚刚我们添加的 <code>select script from list of sh files</code>，点击播放键运行。</p>\n<p>选择想<code>debug</code>的脚本，然后开始</p>\n<h2 id=\"4-查看变量名\"><a href=\"#4-查看变量名\" class=\"headerlink\" title=\"4. 查看变量名\"></a>4. 查看变量名</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$&#123;变量名&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 格式来添加，要确认哪个就添加哪个。</span></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "VsCode",
                "Shell"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/55b095e0/",
            "url": "https://smile1231.github.io/posts/55b095e0/",
            "title": "The learning of Shell",
            "date_published": "2022-05-10T15:35:17.000Z",
            "content_html": "<p>Nowdays , i hava a task about how to use shell script ,so it is time to learn shell .</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamluZ21veHVrb25nL3AvNzg2NzM5Ny5odG1s\"> shell  入门 </span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3Rvb2wucmJ0cmVlLmNuLw==\"> 好用的工具网站 </span></p>\n<span id=\"more\"></span>\n\n<h2 id=\"ALL\"><a href=\"#ALL\" class=\"headerlink\" title=\"ALL\"></a><code>ALL</code></h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tYW5kLW1hbnVhbC5odG1s\">https://www.runoob.com/linux/linux-command-manual.html</span></p>\n<h2 id=\"zip和upzip\"><a href=\"#zip和upzip\" class=\"headerlink\" title=\"zip和upzip\"></a><code>zip</code>和<code>upzip</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># zip命令的选项说明</span></span><br><span class=\"line\"><span class=\"comment\"># -A：调整可执行的自动解压缩文件。</span></span><br><span class=\"line\"><span class=\"comment\"># -b&lt;工作目录&gt;：指定暂时存放文件的目录。</span></span><br><span class=\"line\"><span class=\"comment\"># -c：替每个被压缩的文件加上注释。</span></span><br><span class=\"line\"><span class=\"comment\"># -d：从压缩文件内删除指定的文件。</span></span><br><span class=\"line\"><span class=\"comment\"># -D：压缩文件内不建立目录名称。</span></span><br><span class=\"line\"><span class=\"comment\"># -f：此参数的效果和指定&quot;-u&quot;参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中。</span></span><br><span class=\"line\"><span class=\"comment\"># -F：尝试修复已损坏的压缩文件。</span></span><br><span class=\"line\"><span class=\"comment\"># -g：将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。</span></span><br><span class=\"line\"><span class=\"comment\"># -h：在线帮助。</span></span><br><span class=\"line\"><span class=\"comment\"># -i&lt;范本样式&gt;：只压缩符合条件的文件。</span></span><br><span class=\"line\"><span class=\"comment\"># -j：只保存文件名称及其内容，而不存放任何目录名称。</span></span><br><span class=\"line\"><span class=\"comment\"># -J：删除压缩文件前面不必要的数据。</span></span><br><span class=\"line\"><span class=\"comment\"># -k：使用MS-DOS兼容格式的文件名称。</span></span><br><span class=\"line\"><span class=\"comment\"># -l：压缩文件时，把LF字符置换成LF+CR字符。</span></span><br><span class=\"line\"><span class=\"comment\"># -ll：压缩文件时，把LF+CR字符置换成LF字符。</span></span><br><span class=\"line\"><span class=\"comment\"># -L：显示版权信息。</span></span><br><span class=\"line\"><span class=\"comment\"># -m：将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。</span></span><br><span class=\"line\"><span class=\"comment\"># -n&lt;字尾字符串&gt;：不压缩具有特定字尾字符串的文件。</span></span><br><span class=\"line\"><span class=\"comment\"># -o：以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。</span></span><br><span class=\"line\"><span class=\"comment\"># -q：不显示指令执行过程。</span></span><br><span class=\"line\"><span class=\"comment\"># -r：递归处理，将指定目录下的所有文件和子目录一并处理。</span></span><br><span class=\"line\"><span class=\"comment\"># -S：包含系统和隐藏文件。</span></span><br><span class=\"line\"><span class=\"comment\"># -t&lt;日期时间&gt;：把压缩文件的日期设成指定的日期。</span></span><br><span class=\"line\"><span class=\"comment\"># -T：检查备份文件内的每个文件是否正确无误。</span></span><br><span class=\"line\"><span class=\"comment\"># -u：更换较新的文件到压缩文件内。</span></span><br><span class=\"line\"><span class=\"comment\"># -v：显示指令执行过程或显示版本信息。</span></span><br><span class=\"line\"><span class=\"comment\"># -V：保存VMS操作系统的文件属性。</span></span><br><span class=\"line\"><span class=\"comment\"># -w：在文件名称里假如版本编号，本参数仅在VMS操作系统下有效。</span></span><br><span class=\"line\"><span class=\"comment\"># -x&lt;范本样式&gt;：压缩时排除符合条件的文件。</span></span><br><span class=\"line\"><span class=\"comment\"># -X：不保存额外的文件属性。</span></span><br><span class=\"line\"><span class=\"comment\"># -y：直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。</span></span><br><span class=\"line\"><span class=\"comment\"># -z：替压缩文件加上注释。</span></span><br><span class=\"line\"><span class=\"comment\"># -$：保存第一个被压缩文件所在磁盘的卷册名称。</span></span><br><span class=\"line\"><span class=\"comment\"># -&lt;压缩效率&gt;：压缩效率是一个介于1-9的数值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$zip</span> -m new_zip_name old_filename</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压到当前目录 如果文件已存在，会提示是否替换，可以使用 -o 或 -n 参数简化交互；</span></span><br><span class=\"line\"><span class=\"variable\">$unzip</span> test.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压到指定目录 解压后的文件路径:/&#123;targetPath&#125;/test</span></span><br><span class=\"line\"><span class=\"variable\">$unzip</span> -d &#123;targetPath&#125; test.zip </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不覆盖已经存在的文件</span></span><br><span class=\"line\"><span class=\"variable\">$unzip</span> -n test.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#强制覆盖已经存在的文件</span></span><br><span class=\"line\"><span class=\"variable\">$unzip</span> -o test.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看压缩包中的文件列表</span></span><br><span class=\"line\"><span class=\"comment\"># 文件大小、时间、文件名称 不进行解压缩</span></span><br><span class=\"line\"><span class=\"variable\">$unzip</span> -l test.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看压缩包中的文件信息【更详细】 </span></span><br><span class=\"line\"><span class=\"comment\"># 文件大小、压缩比、日期、文件名称</span></span><br><span class=\"line\"><span class=\"variable\">$unzip</span> -v test.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查压缩包是否损坏</span></span><br><span class=\"line\"><span class=\"variable\">$unzip</span> -t test.zip</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示压缩文件的备注</span></span><br><span class=\"line\"><span class=\"variable\">$unzip</span> -z test.zip</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行解压不显示任何信息</span></span><br><span class=\"line\"><span class=\"variable\">$unzip</span> -q test.zip</span><br><span class=\"line\"><span class=\"variable\">$unzip</span> -oq test.zip <span class=\"comment\"># 静默解压没有任何提示</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bash-shell脚本打印出正在执行的命令\"><a href=\"#Bash-shell脚本打印出正在执行的命令\" class=\"headerlink\" title=\"Bash shell脚本打印出正在执行的命令\"></a><code>Bash shell</code>脚本打印出正在执行的命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认情况下，bash脚本不会打印执行的每个命令，这个有时候不太方面。</span></span><br><span class=\"line\"><span class=\"comment\"># 如下的方法可以让bash脚本打印出执行的命令：</span></span><br><span class=\"line\">1） 在脚本里添加 </span><br><span class=\"line\">    <span class=\"built_in\">set</span> -v 或者</span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash -v</span></span><br><span class=\"line\"></span><br><span class=\"line\">    以加 <span class=\"built_in\">set</span> -v 最好。</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">set</span> -v  和 <span class=\"built_in\">set</span> -o verbose  是一样的</span><br><span class=\"line\"></span><br><span class=\"line\">2) 添加</span><br><span class=\"line\">    <span class=\"built_in\">set</span> -x </span><br><span class=\"line\"></span><br><span class=\"line\">    或者</span><br><span class=\"line\">    <span class=\"comment\">#!/bin/bash -x</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sed指令\"><a href=\"#sed指令\" class=\"headerlink\" title=\"sed指令\"></a><code>sed</code>指令</h2><p><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzQwMjguaHRtbA==\"> 参考地址 </span></p>\n<p><code>sed</code> 命令的基本格式如下：<code>sed [选项] [脚本命令] 文件名</code></p>\n<p>该命令常用的选项及含义:</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-e</code></td>\n<td>脚本命令    该选项会将其后跟的脚本命令添加到已有的命令中。</td>\n</tr>\n<tr>\n<td><code>-f</code></td>\n<td>脚本命令文件    该选项会将其后文件中的脚本命令添加到已有的命令中。</td>\n</tr>\n<tr>\n<td><code>-n</code></td>\n<td>默认情况下，<code>sed</code> 会在所有的脚本指定执行完毕后，会自动输出处理后的内容，而该选项会屏蔽启动输出，需使用 <code>print</code> 命令来完成输出。</td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>此选项会直接修改源文件，要慎用。</td>\n</tr>\n</tbody></table>\n<h3 id=\"sed-s-替换脚本命令\"><a href=\"#sed-s-替换脚本命令\" class=\"headerlink\" title=\"sed s 替换脚本命令\"></a><code>sed s </code>替换脚本命令</h3><p>此命令的基本格式为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 其中，address 表示指定要操作的具体行，pattern 指的是需要替换的内容，replacement 指的是要替换的新内容。</span></span><br><span class=\"line\">[address]s/pattern/replacement/flags</span><br></pre></td></tr></table></figure>\n<p>其中<code>flag</code>:</p>\n<table>\n<thead>\n<tr>\n<th><code>flags</code> 标记</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>n</code></td>\n<td><code>1~512</code> 之间的数字，表示指定要替换的字符串出现第几次时才进行替换，例如，一行中有 <code>3</code> 个 <code>A</code>，但用户只想替换第二个 <code>A</code>，这是就用到这个标记；</td>\n</tr>\n<tr>\n<td><code>g</code></td>\n<td>对数据中所有匹配到的内容进行替换，如果没有 <code>g</code>，则只会在第一次匹配成功时做替换操作。例如，一行数据中有 <code>3</code> 个 <code>A</code>，则只会替换第一个 <code>A</code>；</td>\n</tr>\n<tr>\n<td><code>p</code></td>\n<td>会打印与替换命令中指定的模式匹配的行。此标记通常与 <code>-n</code> 选项一起使用。</td>\n</tr>\n<tr>\n<td><code>w file</code></td>\n<td>将缓冲区中的内容写到指定的 <code>file</code> 文件中；</td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td>用正则表达式匹配的内容进行替换；</td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>匹配第 <code>n</code> 个子串，该子串之前在 <code>pattern</code> 中用 () 指定。</td>\n</tr>\n<tr>\n<td><code>\\</code></td>\n<td>转义（转义替换部分包含：<code>&amp;、\\</code> 等）。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><code>tips</code>  – 需要转义的一些字符:</p>\n</blockquote>\n<img data-src=\"/blog/posts/55b095e0/2022-05-13-00-07-09.png\" class=\"\">\n\n<ol>\n<li><p>比如，可以指定 <code>sed</code> 用新文本替换第几处模式匹配的地方：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sed</span> <span class=\"string\">&#x27;s/test/trial/2&#x27;</span> data4.txt</span><br><span class=\"line\">This is a <span class=\"built_in\">test</span> of the trial script.</span><br><span class=\"line\">This is the second <span class=\"built_in\">test</span> of the trial script.</span><br></pre></td></tr></table></figure>\n<p> 可以看到，使用数字 <code>2</code> 作为标记的结果就是，<code>sed</code> 编辑器只替换每行中第 <code>2</code> 次出现的匹配模式。</p>\n</li>\n<li><p>如果要用新文件替换所有匹配的字符串，可以使用 <code>g</code> 标记：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sed</span> <span class=\"string\">&#x27;s/test/trial/g&#x27;</span> data4.txt</span><br><span class=\"line\">This is a trial of the trial script.</span><br><span class=\"line\">This is the second trial of the trial script.</span><br></pre></td></tr></table></figure></li>\n<li><p>我们知道，<code>-n</code> 选项会禁止 <code>sed</code> 输出，但 <code>p</code> 标记会输出修改过的行，将二者匹配使用的效果就是只输出被替换命令修改过的行，例如：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cat</span> data5.txt</span><br><span class=\"line\">This is a <span class=\"built_in\">test</span> line.</span><br><span class=\"line\">This is a different line.</span><br><span class=\"line\"><span class=\"variable\">$sed</span> -n <span class=\"string\">&#x27;s/test/trial/p&#x27;</span> data5.txt</span><br><span class=\"line\">This is a trial line.</span><br></pre></td></tr></table></figure></li>\n<li><p><code>w</code> 标记会将匹配后的结果保存到指定文件中，比如：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sed</span> <span class=\"string\">&#x27;s/test/trial/w test.txt&#x27;</span> data5.txt</span><br><span class=\"line\">This is a trial line.</span><br><span class=\"line\">This is a different line.</span><br><span class=\"line\"><span class=\"variable\">$#cat</span> test.txt</span><br><span class=\"line\">This is a trial line.</span><br></pre></td></tr></table></figure></li>\n<li><p>在使用 <code>s</code> 脚本命令时，替换类似文件路径的字符串会比较麻烦，需要将路径中的正斜线进行转义，例如：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed <span class=\"string\">&#x27;s/\\/bin\\/bash/\\/bin\\/csh/&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>\n<h3 id=\"sed-d-替换脚本命令\"><a href=\"#sed-d-替换脚本命令\" class=\"headerlink\" title=\"sed d 替换脚本命令\"></a><code>sed d</code> 替换脚本命令</h3><p>此命令的基本格式为：<code>[address]d</code></p>\n</li>\n</ol>\n<p>如果需要删除文本中的特定行，可以用 <code>d</code> 脚本命令，它会删除指定行中的所有内容。但使用该命令时要特别小心，如果你忘记指定具体行的话，文件中的所有内容都会被删除，举个例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cat</span> data1.txt</span><br><span class=\"line\">The quick brown fox jumps over the lazy dog</span><br><span class=\"line\">The quick brown fox jumps over the lazy dog</span><br><span class=\"line\">The quick brown fox jumps over the lazy dog</span><br><span class=\"line\">The quick brown fox jumps over the lazy dog</span><br><span class=\"line\"><span class=\"variable\">$sed</span> <span class=\"string\">&#x27;d&#x27;</span> data1.txt</span><br><span class=\"line\"><span class=\"comment\">#什么也不输出，证明成了空文件</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>通过行号指定，比如删除 <code>data6.txt</code> 文件内容中的第 <code>3</code> 行：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cat</span> data6.txt</span><br><span class=\"line\">This is line number 1.</span><br><span class=\"line\">This is line number 2.</span><br><span class=\"line\">This is line number 3.</span><br><span class=\"line\">This is line number 4.</span><br><span class=\"line\"><span class=\"variable\">$sed</span> <span class=\"string\">&#x27;3d&#x27;</span> data6.txt</span><br><span class=\"line\">This is line number 1.</span><br><span class=\"line\">This is line number 2.</span><br><span class=\"line\">This is line number 4.</span><br></pre></td></tr></table></figure></li>\n<li><p>或者通过特定行区间指定，比如删除 <code>data6.txt</code> 文件内容中的第 <code>2、3</code> 行：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sed</span> <span class=\"string\">&#x27;2,3d&#x27;</span> data6.txt</span><br><span class=\"line\">This is line number 1.</span><br><span class=\"line\">This is line number 4.</span><br></pre></td></tr></table></figure></li>\n<li><p>也可以使用两个文本模式来删除某个区间内的行，但这么做时要小心，你指定的第一个模式会“打开”行删除功能，第二个模式会“关闭”行删除功能，因此，<code>sed</code> 会删除两个指定行之间的所有行（包括指定的行），例如：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sed</span> <span class=\"string\">&#x27;/1/,/3/d&#x27;</span> data6.txt</span><br><span class=\"line\"><span class=\"comment\">#删除第 1~3 行的文本数据</span></span><br><span class=\"line\">This is line number 4.</span><br></pre></td></tr></table></figure></li>\n<li><p>或者通过特殊的文件结尾字符，比如删除 <code>data6.txt</code> 文件内容中第 <code>3</code> 行开始的所有的内容：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sed</span> <span class=\"string\">&#x27;3,$d&#x27;</span> data6.txt</span><br><span class=\"line\">This is line number 1.</span><br><span class=\"line\">This is line number 2.</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在此强调，在默认情况下 <code>sed</code> 并不会修改原始文件，这里被删除的行只是从 <code>sed</code> 的输出中消失了，原始文件没做任何改变。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzQwMjguaHRtbA==\"> 完整版参考地址 </span></p>\n<h2 id=\"Grep指令\"><a href=\"#Grep指令\" class=\"headerlink\" title=\"Grep指令\"></a><code>Grep</code>指令</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWdyZXAuaHRtbA==\"> 菜鸟链接 </span></p>\n<h2 id=\"awk指令\"><a href=\"#awk指令\" class=\"headerlink\" title=\"awk指令\"></a><code>awk</code>指令</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWF3ay5odG1s\"> 菜鸟链接 </span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ2dqdWNoZW5nL2FyY2hpdmUvMjAxMy8wMS8xMy8yODU4NDcwLmh0bWw=\"> good 1 </span></p>\n<h2 id=\"cut指令\"><a href=\"#cut指令\" class=\"headerlink\" title=\"cut指令\"></a><code>cut</code>指令</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWN1dC5odG1s\"> 菜鸟链接 </span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWxvbmcyMS9wLzEwMzY2ODg2Lmh0bWw=\"> 三剑客链接 </span></p>\n<h2 id=\"JSON格式化工具jq指令\"><a href=\"#JSON格式化工具jq指令\" class=\"headerlink\" title=\"JSON格式化工具jq指令\"></a><code>JSON</code>格式化工具<code>jq</code>指令</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2V2aW5ncmFjZS9wLzc1NjUzNzEuaHRtbA==\"> 参考链接 </span></p>\n<h2 id=\"awk内置函数-split-substr-length-gsub\"><a href=\"#awk内置函数-split-substr-length-gsub\" class=\"headerlink\" title=\"awk内置函数(split/substr/length/gsub)\"></a><code>awk</code>内置函数<code>(split/substr/length/gsub)</code></h2><p>一、<code>split</code> 初始化和类型强制</p>\n<p><code>awk</code>的内建函数<code>split</code>允许你把一个字符串分隔为单词并存储在数组中。你可以自己定义域分隔符或者使用现在<code>FS(域分隔符)</code>的值。<br>格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">split (string, array, field separator)</span><br><span class=\"line\">split (string, array) –&gt;如果第三个参数没有提供，awk就默认使用当前FS值。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例子：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash  </span></span><br><span class=\"line\">time=<span class=\"string\">&quot;12:34:56&quot;</span>  </span><br><span class=\"line\">out=`<span class=\"built_in\">echo</span> <span class=\"variable\">$time</span> | awk <span class=\"string\">&#x27;&#123;split($0,a,&quot;:&quot;);print a[1],a[2],a[3]&#125;&#x27;</span>`  </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$out</span>  </span><br><span class=\"line\"><span class=\"comment\">#输出：</span></span><br><span class=\"line\"><span class=\"comment\">#12 34 56  </span></span><br></pre></td></tr></table></figure>\n\n<p>计算指定范围内的和(计算每个人<code>1</code>月份的工资之和)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># test.txt:</span></span><br><span class=\"line\"><span class=\"comment\"># Tom　　  2012-12-11      car     53000  </span></span><br><span class=\"line\"><span class=\"comment\"># John　　 2013-01-13      bike    41000  </span></span><br><span class=\"line\"><span class=\"comment\"># vivi    2013-01-18      car     42800  </span></span><br><span class=\"line\"><span class=\"comment\"># Tom　　  2013-01-20      car     32500  </span></span><br><span class=\"line\"><span class=\"comment\"># John　　 2013-01-28      bike    63500  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#`awk`处理命令：</span></span><br><span class=\"line\"></span><br><span class=\"line\">awk <span class=\"string\">&#x27;&#123;split($2,a,&quot;-&quot;);if(a[2]==01)&#123;b[$1]=b[$1]+$4&#125;&#125;END&#123;for(i in b)print i,b[i]&#125;&#x27;</span> test.txt   </span><br><span class=\"line\"><span class=\"comment\">#输出结果：</span></span><br><span class=\"line\"><span class=\"comment\"># Tom　　 32500  </span></span><br><span class=\"line\"><span class=\"comment\"># vivi 42800  </span></span><br><span class=\"line\"><span class=\"comment\"># John　　 104500  </span></span><br></pre></td></tr></table></figure>\n\n<p>二、<code>substr</code> 截取字符串</p>\n<p>返回从起始位置起，指定长度之子字符串；若未指定长度，则返回从起始位置到字符串末尾的子字符串。<br>格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">substr(s,p) 返回字符串s中从p开始的后缀部分</span><br><span class=\"line\">substr(s,p,n) 返回字符串s中从p开始长度为n的后缀部分</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例子：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;abc&quot;</span> | awk <span class=\"string\">&#x27;&#123;print substr($0,2,2)&#125;&#x27;</span>  </span><br><span class=\"line\"><span class=\"comment\">#输出结果：</span></span><br><span class=\"line\"><span class=\"comment\"># bc  </span></span><br><span class=\"line\"><span class=\"comment\"># 解释：</span></span><br><span class=\"line\"><span class=\"comment\"># awk -F &#x27;,&#x27; &#x27;&#123;print substr($3,6)&#125;&#x27;    ---&gt;  表示是从第3个字段里的第6个字符开始，一直到设定的分隔符&quot;,&quot;结束.</span></span><br><span class=\"line\"><span class=\"comment\"># substr($3,10,8)  ---&gt;  表示是从第3个字段里的第10个字符开始，截取8个字符结束.</span></span><br><span class=\"line\"><span class=\"comment\"># substr($3,6)     ---&gt;  表示是从第3个字段里的第6个字符开始，一直到结尾</span></span><br></pre></td></tr></table></figure>\n<p>三、<code>length</code> 字符串长度</p>\n<p><code>length</code>函数返回没有参数的字符串的长度。<code>length</code>函数返回整个记录中的字符数。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;abc&quot;</span> | awk <span class=\"string\">&#x27;&#123;print length&#125;&#x27;</span>   </span><br><span class=\"line\"><span class=\"comment\"># 结果：</span></span><br><span class=\"line\"><span class=\"comment\"># 3  </span></span><br></pre></td></tr></table></figure>\n\n\n<p>四、<code>gsub</code>函数</p>\n<p>gsub函数则使得在所有正则表达式被匹配的时候都发生替换。<code>gsub(regular expression, subsitution string, target string);简称 gsub（r,s,t)</code>。</p>\n<p>举例：把一个文件里面所有包含 <code>abc</code> 的行里面的 <code>abc</code> 替换成 <code>def</code>，然后输出第一列和第三列</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;abc cde abr&quot;</span> | awk <span class=\"string\">&#x27;$0 ~ /abc/ &#123;gsub(&quot;abc&quot;,&quot;def&quot;,$0); print $1, $3&#125;&#x27;</span>  </span><br><span class=\"line\"><span class=\"comment\"># 输出结果：</span></span><br><span class=\"line\"><span class=\"comment\"># def abr </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux-shell-将字符串分割成数组\"><a href=\"#Linux-shell-将字符串分割成数组\" class=\"headerlink\" title=\"Linux shell 将字符串分割成数组\"></a><code>Linux shell</code> 将字符串分割成数组</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=<span class=\"string\">&quot;one,two,three,four&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 要将$a分割开，可以这样：</span></span><br><span class=\"line\"></span><br><span class=\"line\">OLD_IFS=<span class=\"string\">&quot;<span class=\"variable\">$IFS</span>&quot;</span></span><br><span class=\"line\">IFS=<span class=\"string\">&quot;,&quot;</span></span><br><span class=\"line\">arr=(<span class=\"variable\">$a</span>)</span><br><span class=\"line\">IFS=<span class=\"string\">&quot;<span class=\"variable\">$OLD_IFS</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;arr[@]&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$s</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># arr=($a)用于将字符串$a分割到数组$arr $&#123;arr[0]&#125; $&#123;arr[1]&#125; ... 分别存储分割后的数组第1 2 ... 项 ，$&#123;arr[@]&#125;存储整个数组。变量$IFS存储着分隔符，这里我们将其设为逗号 &quot;,&quot; OLD_IFS用于备份默认的分隔符，使用完后将之恢复默认。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"linux截取中间字符串-shell截取指定字符串之间的内容\"><a href=\"#linux截取中间字符串-shell截取指定字符串之间的内容\" class=\"headerlink\" title=\"linux截取中间字符串,shell截取指定字符串之间的内容\"></a><code>linux</code>截取中间字符串,<code>shell</code>截取指定字符串之间的内容</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#截取字符串</span></span><br><span class=\"line\"><span class=\"comment\">#path=ss/usr/share/src/root/home/admin</span></span><br><span class=\"line\">path=ss/usr/share/src/root/home/admin/src/add</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$path</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path%src*&#125;</span> <span class=\"comment\">#从右向左截取第一个 src 后的字符串</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path%/*&#125;</span>从右向左截取 第一个 / 后的字符串</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path%%/*&#125;</span>从右向左截取 最后一个 / 后的字符串</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path#*/&#125;</span>从左向右截取第一个 / 后的字符串</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path##*/&#125;</span>从左向右截取最后一个 / 后的字符串</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path:3&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path:6:60&#125;</span>截取变量path从前三个字符串</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;#path&#125;</span>计算 path变量 一共有几个字符串</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path/root/kyo&#125;</span>把path变量里的第一个root字符串，替换为 kyo字符串</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path//s/m&#125;</span>把path变量里的所有的s字符，替换为 m 字符</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;path&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Shell环境生成UUID\"><a href=\"#Shell环境生成UUID\" class=\"headerlink\" title=\"Shell环境生成UUID\"></a><code>Shell</code>环境生成<code>UUID</code></h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=$(uuidgen |sed <span class=\"string\">&#x27;s/-//g&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$UUID</span></span><br><span class=\"line\"><span class=\"comment\"># 918c61bd48914f0e8fb1295208b6e87e</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Shell中-各种含义\"><a href=\"#Shell中-各种含义\" class=\"headerlink\" title=\"Shell中$ 各种含义\"></a><code>Shell</code>中<code>$</code> 各种含义</h2><table>\n<thead>\n<tr>\n<th>符 号</th>\n<th>含 义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$0</code></td>\n<td>脚本名</td>\n</tr>\n<tr>\n<td><code>$#</code></td>\n<td>参数个数</td>\n</tr>\n<tr>\n<td><code>$n</code></td>\n<td>传递给脚本的参数值，<code>$1</code>第<code>1</code>参数、<code>$2</code>第<code>2</code>参数</td>\n</tr>\n<tr>\n<td><code>$?</code></td>\n<td>上次退出的状态（返回值），<code>0</code>没有错误，<code>1</code>错误</td>\n</tr>\n<tr>\n<td><code>$*</code></td>\n<td>所有参数列表。<code>&quot;$*&quot;</code>时，是<code>&quot;$1 $2 … $n&quot;</code>的形式</td>\n</tr>\n<tr>\n<td><code>$@</code></td>\n<td>所有参数列表。<code>&quot;$@&quot;</code>时，是<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; </code>的形式</td>\n</tr>\n<tr>\n<td><code>$$</code></td>\n<td>当前进程的编号<code>（ProcessID）</code></td>\n</tr>\n<tr>\n<td><code>$!</code></td>\n<td><code>shell</code>最后运行的后台<code>Process</code>的<code>PID</code></td>\n</tr>\n<tr>\n<td><code>$var</code></td>\n<td>变量，会与后面的连接，如<code>$var_a</code>，会当做变量<code>var_a</code></td>\n</tr>\n<tr>\n<td><code>$&#123;var&#125;</code></td>\n<td>变量，界定范围</td>\n</tr>\n<tr>\n<td><code>$()</code></td>\n<td>与<code>(反引号)类似，里面执行完再返回值，</code>所有<code>shell</code>通用</td>\n</tr>\n<tr>\n<td><code>$[]</code></td>\n<td>可进行算术运算和逻辑运算，不支持浮点和字符串</td>\n</tr>\n<tr>\n<td><code>$(())</code></td>\n<td>可进行算术运算和逻辑运算，不支持浮点和字符串。里面的变量可以省略<code>$</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"linux-下shell中if的“-e，-d，-f”是什么意思\"><a href=\"#linux-下shell中if的“-e，-d，-f”是什么意思\" class=\"headerlink\" title=\"linux 下shell中if的“-e，-d，-f”是什么意思\"></a><code>linux</code> 下<code>shell</code>中<code>if</code>的<code>“-e，-d，-f”</code>是什么意思</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">文件表达式</span><br><span class=\"line\">-e filename 如果 filename存在，则为真</span><br><span class=\"line\">-d filename 如果 filename为目录，则为真 </span><br><span class=\"line\">-f filename 如果 filename为常规文件，则为真</span><br><span class=\"line\">-L filename 如果 filename为符号链接，则为真</span><br><span class=\"line\">-r filename 如果 filename可读，则为真 </span><br><span class=\"line\">-w filename 如果 filename可写，则为真 </span><br><span class=\"line\">-x filename 如果 filename可执行，则为真</span><br><span class=\"line\">-s filename 如果文件长度不为0，则为真</span><br><span class=\"line\">-h filename 如果文件是软链接，则为真</span><br><span class=\"line\">filename1 -nt filename2 如果 filename1比 filename2新，则为真。</span><br><span class=\"line\">filename1 -ot filename2 如果 filename1比 filename2旧，则为真。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">整数变量表达式</span><br><span class=\"line\">-eq 等于</span><br><span class=\"line\">-ne 不等于</span><br><span class=\"line\">-gt 大于</span><br><span class=\"line\">-ge 大于等于</span><br><span class=\"line\">-lt 小于</span><br><span class=\"line\">-le 小于等于</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">字符串变量表达式</span><br><span class=\"line\">If  [ <span class=\"variable\">$a</span> = <span class=\"variable\">$b</span> ]                 如果string1等于string2，则为真</span><br><span class=\"line\">                                字符串允许使用赋值号做等号</span><br><span class=\"line\"><span class=\"keyword\">if</span>  [ <span class=\"variable\">$string1</span> !=  <span class=\"variable\">$string2</span> ]   如果string1不等于string2，则为真       </span><br><span class=\"line\"><span class=\"keyword\">if</span>  [ -n <span class=\"variable\">$string</span>  ]             如果string 非空(非0），返回0(<span class=\"literal\">true</span>)  </span><br><span class=\"line\"><span class=\"keyword\">if</span>  [ -z <span class=\"variable\">$string</span>  ]             如果string 为空，则为真</span><br><span class=\"line\"><span class=\"keyword\">if</span>  [ <span class=\"variable\">$sting</span> ]                  如果string 非空，返回0 (和-n类似) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    逻辑非 !                   条件表达式的相反</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! 表达式 ]</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d <span class=\"variable\">$num</span> ]               如果不存在目录<span class=\"variable\">$num</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    逻辑与 –a                   条件表达式的并列</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ 表达式1  –a  表达式2 ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    逻辑或 -o                   条件表达式的或</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ 表达式1  –o 表达式2 ]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shell获取文件扩展名\"><a href=\"#shell获取文件扩展名\" class=\"headerlink\" title=\"shell获取文件扩展名\"></a><code>shell</code>获取文件扩展名</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">basename example.tar.a.b.c.gz .c.gz</span><br><span class=\"line\"><span class=\"comment\"># =&gt; example.tar.a.b</span></span><br><span class=\"line\"> </span><br><span class=\"line\">FILE=<span class=\"string\">&quot;example.tar.gz&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;FILE%%.*&#125;</span>&quot;</span>     取头   example </span><br><span class=\"line\"><span class=\"comment\"># =&gt; example</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;FILE%.*&#125;</span>&quot;</span>      去尾   example.tar.a.b.c</span><br><span class=\"line\"><span class=\"comment\"># =&gt; example.tar</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;FILE#*.&#125;</span>&quot;</span>      去头   tar.a.b.c.gz</span><br><span class=\"line\"><span class=\"comment\"># =&gt; tar.gz</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;FILE##*.&#125;</span>&quot;</span>     取尾   gz</span><br><span class=\"line\"><span class=\"comment\"># =&gt; gz</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 在bash中可以这么写</span></span><br><span class=\"line\">filename=$(basename <span class=\"string\">&quot;<span class=\"variable\">$fullfile</span>&quot;</span>)   </span><br><span class=\"line\">extension=<span class=\"string\">&quot;<span class=\"variable\">$&#123;filename##*.&#125;</span>&quot;</span></span><br><span class=\"line\">filename=<span class=\"string\">&quot;<span class=\"variable\">$&#123;filename%.*&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux-shell-中获取当前目录的方法\"><a href=\"#Linux-shell-中获取当前目录的方法\" class=\"headerlink\" title=\"Linux shell 中获取当前目录的方法\"></a><code>Linux shell</code> 中获取当前目录的方法</h2><blockquote>\n<p>当前目录</p>\n</blockquote>\n<p>每当你在终端进行操作时，你都会有一个当前工作目录。 使用pwd来判定当前目录在文件系统内的确切位置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$pwd</span></span><br><span class=\"line\">/root</span><br></pre></td></tr></table></figure>\n<p>在<code>shell</code>中也可以使用<code>pwd</code>来获取当前目录，并赋值给变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">CRTDIR=$(<span class=\"built_in\">pwd</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>工作目录</p>\n</blockquote>\n<p>获取当前执行的脚本文件的父目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workdir=$(<span class=\"built_in\">cd</span> $(dirname <span class=\"variable\">$0</span>); <span class=\"built_in\">pwd</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>复杂点的工作目录获取</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRG=<span class=\"string\">&quot;<span class=\"variable\">$0</span>&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ -h <span class=\"string\">&quot;<span class=\"variable\">$PRG</span>&quot;</span> ] ; <span class=\"keyword\">do</span></span><br><span class=\"line\">  ls=`ls -ld <span class=\"string\">&quot;<span class=\"variable\">$PRG</span>&quot;</span>`</span><br><span class=\"line\">  link=`expr <span class=\"string\">&quot;<span class=\"variable\">$ls</span>&quot;</span> : <span class=\"string\">&#x27;.*-&gt; \\(.*\\)$&#x27;</span>`</span><br><span class=\"line\">  <span class=\"keyword\">if</span> expr <span class=\"string\">&quot;<span class=\"variable\">$link</span>&quot;</span> : <span class=\"string\">&#x27;/.*&#x27;</span> &gt; /dev/null; <span class=\"keyword\">then</span></span><br><span class=\"line\">    PRG=<span class=\"string\">&quot;<span class=\"variable\">$link</span>&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    PRG=`dirname <span class=\"string\">&quot;<span class=\"variable\">$PRG</span>&quot;</span>`/<span class=\"string\">&quot;<span class=\"variable\">$link</span>&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">PRGDIR=$(<span class=\"built_in\">cd</span> $(dirname <span class=\"variable\">$PRG</span>); <span class=\"built_in\">pwd</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux-Shell获取文件夹下的文件名\"><a href=\"#Linux-Shell获取文件夹下的文件名\" class=\"headerlink\" title=\"Linux Shell获取文件夹下的文件名\"></a><code>Linux Shell</code>获取文件夹下的文件名</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># get all filename in specified path</span></span><br><span class=\"line\">path=<span class=\"variable\">$1</span></span><br><span class=\"line\">files=$(ls <span class=\"variable\">$path</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> <span class=\"variable\">$files</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"variable\">$filename</span> &gt;&gt; filename.txt</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shell获取目录下所有文件夹的名称并输出\"><a href=\"#shell获取目录下所有文件夹的名称并输出\" class=\"headerlink\" title=\"shell获取目录下所有文件夹的名称并输出\"></a><code>shell</code>获取目录下所有文件夹的名称并输出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#方法一 </span></span><br><span class=\"line\">dir=$(ls -l /usr/ |awk <span class=\"string\">&#x27;/^d/ &#123;print $NF&#125;&#x27;</span>)</span><br><span class=\"line\">or i <span class=\"keyword\">in</span> <span class=\"variable\">$dir</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$i</span></span><br><span class=\"line\"><span class=\"keyword\">done</span>   </span><br><span class=\"line\"><span class=\"comment\">#######</span></span><br><span class=\"line\"><span class=\"comment\">#方法二</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> dir <span class=\"keyword\">in</span> $(ls /usr/)</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    [ -d <span class=\"variable\">$dir</span> ] &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$dir</span></span><br><span class=\"line\"><span class=\"keyword\">done</span>        </span><br><span class=\"line\"><span class=\"comment\">##方法三</span></span><br><span class=\"line\">ls -l /usr/ |awk <span class=\"string\">&#x27;/^d/ &#123;print $NF&#125;&#x27;</span>   <span class=\"comment\">## 其实同方法一，直接就可以显示不用for循环</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"常用-Linux-jq命令语法整理\"><a href=\"#常用-Linux-jq命令语法整理\" class=\"headerlink\" title=\"常用 Linux jq命令语法整理\"></a>常用 <code>Linux jq</code>命令语法整理</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoZWF0MTE3MzAxMDI1Ni9hcnRpY2xlL2RldGFpbHMvMTE4MjMwNTYyIzp+OnRleHQ9SlElMjAlRTYlOTglQUYlRTQlQjglODAlRTQlQjglQUElMjAlRTUlOTElQkQlRTQlQkIlQTQlMjAlRTglQTElOEMlRTUlQjclQTUlRTUlODUlQjclRUYlQkMlOEMlRTQlQjglQkIlRTglQTYlODElRTclOTQlQTglRTQlQkElOEUlRTUlQTQlODQlRTclOTAlODZqc29uJUU2JTk2JTg3JUU2JTlDJUFDJUUzJTgwJTgyJTIwJUU4JUFGJUFEJUU2JUIzJTk1LCVFNSVCRSU4OCVFNyVBRSU4MCVFNSU4RCU5NSVFRiVCQyU4QyVFNSVBNiU4MiVFNCVCOCU4QiVFRiVCQyU5QSUyMGpxJTIwJTVCb3B0aW9ucy4uLiU1RCUyMGZpbHRlciUyMCU1QmZpbGVzLi4uJTVE\">参考链接</span></p>\n<img data-src=\"/blog/posts/55b095e0/2022-05-13-20-25-50.png\" class=\"\">\n\n<img data-src=\"/blog/posts/55b095e0/2022-05-13-20-26-18.png\" class=\"\">\n\n<img data-src=\"/blog/posts/55b095e0/2022-05-13-20-26-42.png\" class=\"\">\n\n<img data-src=\"/blog/posts/55b095e0/2022-05-13-20-27-00.png\" class=\"\">\n\n\n<h2 id=\"shell脚本中整数型变量自增（加1）的实现方式\"><a href=\"#shell脚本中整数型变量自增（加1）的实现方式\" class=\"headerlink\" title=\"shell脚本中整数型变量自增（加1）的实现方式\"></a><code>shell</code>脚本中整数型变量自增（加<code>1</code>）的实现方式</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">本脚本测试shell脚本中整型变量自增 加1的几种方法</span></span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">定义整型变量</span></span><br><span class=\"line\">a=1</span><br><span class=\"line\">echo $a</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">第一种整型变量自增方式</span></span><br><span class=\"line\">a=$(($a+1))</span><br><span class=\"line\">echo $a</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">第二种整型变量自增方式</span></span><br><span class=\"line\">a=$[$a+1]</span><br><span class=\"line\">echo $a</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">第三种整型变量自增方式</span></span><br><span class=\"line\">a=`expr $a + 1`</span><br><span class=\"line\">echo $a</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">第四种整型变量自增方式</span></span><br><span class=\"line\">let a++</span><br><span class=\"line\">echo $a</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">第五种整型变量自增方式</span></span><br><span class=\"line\">let a+=1</span><br><span class=\"line\">echo $a</span><br><span class=\"line\"><span class=\"meta\"> </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">第六种整型变量自增方式</span></span><br><span class=\"line\">((a++))</span><br><span class=\"line\">echo $a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"shell判断一个变量是否为空\"><a href=\"#shell判断一个变量是否为空\" class=\"headerlink\" title=\"shell判断一个变量是否为空\"></a><code>shell</code>判断一个变量是否为空</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ ! $a ] &amp;&amp; echo &quot;a is null&quot; </span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span> </span><br><span class=\"line\">a= </span><br><span class=\"line\">if [ ! -n &quot;$a&quot; ]; then </span><br><span class=\"line\">echo &quot;IS NULL&quot; </span><br><span class=\"line\">else </span><br><span class=\"line\">echo &quot;NOT NULL&quot; </span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span> </span><br><span class=\"line\">a= </span><br><span class=\"line\">if [ ! $a ]; then</span><br><span class=\"line\">echo &quot;IS NULL&quot; </span><br><span class=\"line\">else </span><br><span class=\"line\">echo &quot;NOT NULL&quot; </span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span> </span><br><span class=\"line\">a= </span><br><span class=\"line\">if test -z &quot;$a&quot; then </span><br><span class=\"line\">echo &quot;a is not set!&quot; </span><br><span class=\"line\">else </span><br><span class=\"line\">echo &quot;a is set !&quot; </span><br><span class=\"line\">fi</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span> </span><br><span class=\"line\">a= </span><br><span class=\"line\">if [ &quot;$a&quot; = &quot;&quot; ]; then </span><br><span class=\"line\">echo &quot;a is not set!&quot; </span><br><span class=\"line\">else </span><br><span class=\"line\">echo &quot;a is set !&quot; </span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出到文件\"><a href=\"#输出到文件\" class=\"headerlink\" title=\"输出到文件\"></a>输出到文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">两种方法：</span></span><br><span class=\"line\"><span class=\"meta\">2&gt;</span><span class=\"bash\">&amp;1 | tee mylog.log</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> test.txt</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">举例：</span></span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">sh batchjob.sh 2&gt;&amp;1 | tee mylog.log</span><br><span class=\"line\">ls * &gt; test.txt</span><br><span class=\"line\">-------------------------------------------------------------</span><br><span class=\"line\">find ./ -name &quot;*.xml&quot; &gt; result.txt</span><br><span class=\"line\">find ./ -name &quot;*.xml&quot; 2&gt;&amp;1 | tee mylog.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Shell-实现多线程（多任务）\"><a href=\"#Shell-实现多线程（多任务）\" class=\"headerlink\" title=\"Shell 实现多线程（多任务）\"></a><code>Shell</code> 实现多线程（多任务）</h2><ol>\n<li>命令结尾添加：<code>&amp;</code></li>\n<li>解决主线程提前退出问题，添加 <code>wait</code></li>\n<li>控制后台执行数（线程数），<code>mkfifo</code></li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemhlbmdiaW4vcC85NTEzNzYyLmh0bWw=\">https://www.cnblogs.com/zhengbin/p/9513762.html</span></p>\n",
            "tags": [
                "Shell"
            ]
        }
    ]
}