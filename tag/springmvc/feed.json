{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"springmvc\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/f976ebe7/",
            "url": "https://smile1231.github.io/posts/f976ebe7/",
            "title": "SpringMvc中标准的后端接口格式",
            "date_published": "2022-02-19T05:46:06.000Z",
            "content_html": "<h1 id=\"用springboot手把手教你写出优雅的后端接口\"><a class=\"markdownIt-Anchor\" href=\"#用springboot手把手教你写出优雅的后端接口\">#</a> 用 <code>SpringBoot</code>  手把手教你写出优雅的后端接口</h1>\n<p>一个后端接口大致分为四个部分组成： <code>接口地址（url）</code> 、 <code>接口请求方式（get、post等）</code> 、 <code>请求数据（request）</code> 、 <code>响应数据（response）</code> 。如何构建这几个部分每个公司要求都不同，没有什么 “一定是最好的” 标准，但一个优秀的后端接口和一个糟糕的后端接口对比起来差异还是蛮大的，其中最重要的关键点就是看是否规范！</p>\n<p>本文就一步一步演示如何构建起一个优秀的后端接口体系，体系构建好了自然就有了规范，同时再构建新的后端接口也会十分轻松。</p>\n<p>所需依赖包</p>\n<span id=\"more\"></span>\n<p>这里用的是 <code>SpringBoot</code>  配置项目，本文讲解的重点是后端接口，所以只需要导入一个 <code>spring-boot-starter-web</code>  包就可以了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--web依赖包，web应用必备--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--StringUtils的使用--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>本文还用了 <code>swagger</code>  来生成 <code>API</code>  文档， <code>lombok</code>  来简化类，不过这两者不是必须的，可用可不用。</p>\n<h2 id=\"一-参数校验\"><a class=\"markdownIt-Anchor\" href=\"#一-参数校验\">#</a> 一、参数校验</h2>\n<p>一个接口一般对参数（请求数据）都会进行安全校验，参数校验的重要性自然不必多说，那么如何对参数进行校验就有讲究了。</p>\n<h2 id=\"二-业务层校验\"><a class=\"markdownIt-Anchor\" href=\"#二-业务层校验\">#</a> 二、业务层校验</h2>\n<p>首先我们来看一下最常见的做法，就是在业务层进行参数校验：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user == <span class=\"keyword\">null</span> || user.getId() == <span class=\"keyword\">null</span> || user.getAccount() == <span class=\"keyword\">null</span> || user.getPassword() == <span class=\"keyword\">null</span> || user.getEmail() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;对象或者对象字段不能为空&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getAccount()) || StringUtils.isEmpty(user.getPassword()) || StringUtils.isEmpty(user.getEmail())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;不能输入空字符串&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.getAccount().length() &lt; <span class=\"number\">6</span> || user.getAccount().length() &gt; <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;账号长度必须是6-11个字符&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.getPassword().length() &lt; <span class=\"number\">6</span> || user.getPassword().length() &gt; <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;密码长度必须是6-16个字符&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Pattern.matches(<span class=\"string\">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+$&quot;</span>, user.getEmail())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;邮箱格式不正确&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 参数校验完毕后这里就写上业务逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做当然是没有什么错的，而且格式排版整齐也一目了然，不过这样太繁琐了，这还没有进行业务操作呢光是一个参数校验就已经这么多行代码，实在不够优雅。</p>\n<p>我们来改进一下，使用 <code>Spring Validator</code>  和 <code>Hibernate Validator</code>  这两套 <code>Validator</code>  来进行方便的参数校验！这两套 <code>Validator</code>  依赖包已经包含在前面所说的 <code>web</code>  依赖包里了，所以可以直接使用。<br>\n但是从 <code>springboot-2.3</code>  开始，校验包被独立成了一个 <code>starter</code>  组件<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdC93aWtpL1NwcmluZy1Cb290LTIuMy1SZWxlYXNlLU5vdGVzI3ZhbGlkYXRpb24tc3RhcnRlci1uby1sb25nZXItaW5jbHVkZWQtaW4td2ViLXN0YXJ0ZXJz\">参见：validation-starter-no-longer-included-in-web-starters</span>，<br>\n所以需要引入如下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--校验组件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-validation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>内置的校验有很多</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>校验功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@AssertFalse</td>\n<td>必须是 false</td>\n</tr>\n<tr>\n<td>@AssertTrue</td>\n<td>必须是 true</td>\n</tr>\n<tr>\n<td>@DecimalMax</td>\n<td>小于等于给定的值</td>\n</tr>\n<tr>\n<td>@DecimalMin</td>\n<td>大于等于给定的值</td>\n</tr>\n<tr>\n<td>@Digits</td>\n<td>可设定最大整数位数和最大小数位数</td>\n</tr>\n<tr>\n<td>@Email</td>\n<td>校验是否符合 Email 格式</td>\n</tr>\n<tr>\n<td>@Future</td>\n<td>必须是将来的时间</td>\n</tr>\n<tr>\n<td>@FutureOrPresent</td>\n<td>当前或将来时间</td>\n</tr>\n<tr>\n<td>@Max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>@Min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>@Negative</td>\n<td>负数（不包括 0）</td>\n</tr>\n<tr>\n<td>@NegativeOrZero</td>\n<td>负数或 0</td>\n</tr>\n<tr>\n<td>@NotBlank</td>\n<td>不为 null 并且包含至少一个非空白字符</td>\n</tr>\n<tr>\n<td>@NotEmpty</td>\n<td>不为 null 并且不为空</td>\n</tr>\n<tr>\n<td>@NotNull</td>\n<td>不为 null</td>\n</tr>\n<tr>\n<td>@Null</td>\n<td>为 null</td>\n</tr>\n<tr>\n<td>@Past</td>\n<td>必须是过去的时间</td>\n</tr>\n<tr>\n<td>@PastOrPresent</td>\n<td>必须是过去的时间，包含现在</td>\n</tr>\n<tr>\n<td>@Pattern</td>\n<td>必须满足正则表达式</td>\n</tr>\n<tr>\n<td>@PositiveOrZero</td>\n<td>正数或 0</td>\n</tr>\n<tr>\n<td>@Size</td>\n<td>校验容器的元素个数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三-validator-bindresult进行校验\"><a class=\"markdownIt-Anchor\" href=\"#三-validator-bindresult进行校验\">#</a> 三、 <code>Validator</code>  +  <code>BindResult</code>  进行校验</h2>\n<p><code>Validator</code>  可以非常方便的制定校验规则，并自动帮你完成校验。首先在入参里需要校验的字段加上注解，每个注解对应不同的校验规则，并可制定校验失败后的信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户id不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户账号不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Size(min = 6, max = 11, message = &quot;账号长度必须是6-11个字符&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String account;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户密码不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Size(min = 6, max = 11, message = &quot;密码长度必须是6-16个字符&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户邮箱不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>校验规则和错误提示信息配置完毕后，接下来只需要在接口需要校验的参数上加上 <code>@Valid</code>  注解，并添加 <code>BindResult</code>  参数即可方便完成验证：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> <span class=\"meta\">@Valid</span> User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有参数校验失败，会将错误信息封装成对象组装在BindingResult里</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> error.getDefaultMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.addUser(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样当请求数据传递到接口的时候 <code>Validator</code>  就自动完成校验了，校验的结果就会封装到 <code>BindingResult</code>  中去，如果有错误信息我们就直接返回给前端，业务逻辑代码也根本没有执行下去。</p>\n<p>此时，业务层里的校验代码就已经不需要了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 直接编写业务逻辑</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>现在可以看一下参数校验效果。我们故意给这个接口传递一个不符合校验规则的参数，先传递一个错误数据给接口，故意将 <code>password</code>  这个字段不满足校验条件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;account&quot;</span>: <span class=\"string\">&quot;12345678&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;123@qq.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再来看一下接口的响应数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-08-48.png\" class=\"\">\n<p>这样是不是方便很多？不难看出使用 <code>Validator</code>  校验有如下几个好处：</p>\n<ul>\n<li>\n<p>简化代码，之前业务层那么一大段校验代码都被省略掉了。</p>\n</li>\n<li>\n<p>使用方便，那么多校验规则可以轻而易举的实现，比如邮箱格式验证，之前自己手写正则表达式要写那么一长串，还容易出错，用 <code>Validator</code>  直接一个注解搞定。（还有更多校验规则注解，可以自行去了解哦）</p>\n</li>\n<li>\n<p>减少耦合度，使用 <code>Validator</code>  能够让业务层只关注业务逻辑，从基本的参数校验逻辑中脱离出来。</p>\n</li>\n</ul>\n<p>使用 <code>Validator + BindingResult</code>  已经是非常方便实用的参数校验方式了，在实际开发中也有很多项目就是这么做的，不过这样还是不太方便，因为你每写一个接口都要添加一个 <code>BindingResult</code>  参数，然后再提取错误信息返回给前端。</p>\n<p>这样有点麻烦，并且重复代码很多（尽管可以将这个重复代码封装成方法）。我们能否去掉 <code>BindingResult</code>  这一步呢？当然是可以的！</p>\n<h2 id=\"validator-自动抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#validator-自动抛出异常\">#</a>  <code>Validator</code>  + 自动抛出异常</h2>\n<p>将 <code>BindingResult</code>  去掉：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> <span class=\"meta\">@Valid</span> User user)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;sucess&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>去掉之后会发生什么事情呢？直接来试验一下，还是按照之前一样故意传递一个不符合校验规则的参数给接口。此时我们观察控制台可以发现接口已经引发 <code>MethodArgumentNotValidException</code>  异常了：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-00.png\" class=\"\">\n<p>其实这样就已经达到我们想要的效果了，参数校验不通过自然就不执行接下来的业务逻辑，去掉 <code>BindingResult</code>  后会自动引发异常，异常发生了自然而然就不会执行业务逻辑。也就是说，我们完全没必要添加相关 <code>BindingResult</code>  相关操作嘛。</p>\n<p>不过事情还没有完，异常是引发了，可我们并没有编写返回错误信息的代码呀，那参数校验失败了会响应什么数据给前端呢？</p>\n<p>我们来看一下刚才异常发生后接口响应的数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-15.png\" class=\"\">\n<p>没错，是直接将整个错误对象相关信息都响应给前端了！这样就很难受，不过解决这个问题也很简单，就是我们接下来要讲的全局异常处理！</p>\n<h2 id=\"五-全局异常处理\"><a class=\"markdownIt-Anchor\" href=\"#五-全局异常处理\">#</a> 五、全局异常处理</h2>\n<p>参数校验失败会自动引发异常，我们当然不可能再去手动捕捉异常进行处理，不然还不如用之前 <code>BindingResult</code>  方式呢。又不想手动捕捉这个异常，又要对这个异常进行处理，那正好使用 <code>SpringBoot</code>  全局异常处理来达到一劳永逸的效果！</p>\n<h2 id=\"六-基本使用\"><a class=\"markdownIt-Anchor\" href=\"#六-基本使用\">#</a> 六、基本使用</h2>\n<p>首先，我们需要新建一个类，在这个类上加上 <code>@ControllerAdvice</code>  或 <code>@RestControllerAdvice</code>  注解，这个类就配置成全局处理类了。（这个根据你的 <code>Controller</code>  层用的是 <code>@Controller</code>  还是 <code>@RestController</code>  来决定）</p>\n<p>然后在类中新建方法，在方法上加上 <code>@ExceptionHandler</code>  注解并指定你想处理的异常类型，接着在方法内编写对该异常的操作逻辑，就完成了对该异常的全局处理！</p>\n<p>我们现在就来演示一下对参数校验失败抛出的 <code>MethodArgumentNotValidException</code>  全局处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionControllerAdvice</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">MethodArgumentNotValidExceptionHandler</span><span class=\"params\">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从异常对象中拿到ObjectError对象</span></span><br><span class=\"line\">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 然后提取错误提示信息进行返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectError.getDefaultMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看下这次校验失败后的响应数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-28.png\" class=\"\">\n<p>没错，这次返回的就是我们制定的错误提示信息！我们通过全局异常处理优雅的实现了我们想要的功能！以后我们再想写接口参数校验，就只需要在入参的成员变量上加上 <code>Validator</code>  校验规则注解，然后在参数上加上 <code>@Valid</code>  注解即可完成校验，校验失败会自动返回错误提示信息，无需任何其他代码！更多的校验思路： <code>SpringBoot</code>  实现通用的接口参数校验</p>\n<h2 id=\"七-自定义异常\"><a class=\"markdownIt-Anchor\" href=\"#七-自定义异常\">#</a> 七、自定义异常</h2>\n<p>全局处理当然不会只能处理一种异常，用途也不仅仅是对一个参数校验方式进行优化。在实际开发中，如何对异常处理其实是一个很麻烦的事情。传统处理异常一般有以下烦恼：</p>\n<ul>\n<li>\n<p>是捕获异常 <code>(try…catch)</code>  还是抛出异常 <code>(throws)</code></p>\n</li>\n<li>\n<p>是在 <code>controller</code>  层做处理还是在 <code>service</code>  层处理又或是在 <code>dao</code>  层做处理</p>\n</li>\n<li>\n<p>处理异常的方式是啥也不做，还是返回特定数据，如果返回又返回什么数据</p>\n</li>\n<li>\n<p>不是所有异常我们都能预先进行捕捉，如果发生了没有捕捉到的异常该怎么办？</p>\n</li>\n</ul>\n<p>以上这些问题都可以用全局异常处理来解决，全局异常处理也叫统一异常处理，全局和统一处理代表什么？代表规范！规范有了，很多问题就会迎刃而解！</p>\n<p>全局异常处理的基本使用方式大家都已经知道了，我们接下来更进一步的规范项目中的异常处理方式：自定义异常。</p>\n<p>在很多情况下，我们需要手动抛出异常，比如在业务层当有些条件并不符合业务逻辑，我这时候就可以手动抛出异常从而触发事务回滚。那手动抛出异常最简单的方式就是 <code>throw new RuntimeException(&quot;异常信息&quot;)</code>  了，不过使用自定义会更好一些：</p>\n<ul>\n<li>\n<p>自定义异常可以携带更多的信息，不像这样只能携带一个字符串。</p>\n</li>\n<li>\n<p>项目开发中经常是很多人负责不同的模块，使用自定义异常可以统一了对外异常展示的方式。</p>\n</li>\n<li>\n<p>自定义异常语义更加清晰明了，一看就知道是项目中手动抛出的异常。</p>\n</li>\n</ul>\n<p>我们现在就来开始写一个自定义异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span> <span class=\"comment\">//只要getter方法，无需setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">APIException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">APIException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1001</span>, <span class=\"string\">&quot;接口错误&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">APIException</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1001</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">APIException</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在刚才的全局异常处理类中记得添加对我们自定义异常的处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(APIException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">APIExceptionHandler</span><span class=\"params\">(APIException e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e.getMsg();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就对异常的处理就比较规范了，当然还可以添加对 <code>Exception</code>  的处理，这样无论发生什么异常我们都能屏蔽掉然后响应数据给前端，不过建议最后项目上线时这样做，能够屏蔽掉错误信息暴露给前端，在开发中为了方便调试还是不要这样做。</p>\n<p>现在全局异常处理和自定义异常已经弄好了，不知道大家有没有发现一个问题，就是当我们抛出自定义异常的时候全局异常处理只响应了异常中的错误信息 <code>msg</code>  给前端，并没有将错误代码 <code>code</code>  返回。这就要引申出我们接下来要讲的东西了：数据统一响应</p>\n<h2 id=\"八-数据统一响应\"><a class=\"markdownIt-Anchor\" href=\"#八-数据统一响应\">#</a> 八、数据统一响应</h2>\n<p>现在我们规范好了参数校验方式和异常处理方式，然而还没有规范响应数据！比如我要获取一个分页信息数据，获取成功了呢自然就返回的数据列表，获取失败了后台就会响应异常信息，即一个字符串，就是说前端开发者压根就不知道后端响应过来的数据会是啥样的！所以，统一响应数据是前后端规范中必须要做的！</p>\n<h2 id=\"九-自定义统一响应\"><a class=\"markdownIt-Anchor\" href=\"#九-自定义统一响应\">#</a> 九、自定义统一响应</h2>\n<p>统一数据响应第一步肯定要做的就是我们自己自定义一个响应体类，无论后台是运行正常还是发生异常，响应给前端的数据格式是不变的！那么如何定义响应体呢？关于异常的设计：如何更优雅的设计异常</p>\n<p>可以参考我们自定义异常类，也来一个响应信息代码 <code>code</code>  和响应信息说明 <code>msg</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultVO</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码，比如1000代表响应成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 响应信息，用来说明响应情况</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 响应的具体数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1000</span>, <span class=\"string\">&quot;success&quot;</span>, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg, T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们修改一下全局异常处理那的返回值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(APIException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">APIExceptionHandler</span><span class=\"params\">(APIException e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里返回类型是自定义响应体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(e.getCode(), <span class=\"string\">&quot;响应失败&quot;</span>, e.getMsg());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">MethodArgumentNotValidExceptionHandler</span><span class=\"params\">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class=\"line\">    ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里返回类型是自定义响应体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(<span class=\"number\">1001</span>, <span class=\"string\">&quot;参数校验失败&quot;</span>, objectError.getDefaultMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看一下此时如果发生异常了会响应什么数据给前端：</p>\n<p>OK，这个异常信息响应就非常好了，状态码和响应说明还有错误提示数据都返给了前端，并且是所有异常都会返回相同的格式！异常这里搞定了，别忘了我们到接口那也要修改返回类型，我们新增一个接口好来看看效果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;User&gt; <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    user.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    user.setAccount(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;123@qq.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一下如果响应正确返回的是什么效果：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-48.png\" class=\"\">\n<p>这样无论是正确响应还是发生异常，响应数据的格式都是统一的，十分规范！</p>\n<p>数据格式是规范了，不过响应码 <code>code</code>  和响应信息 <code>msg</code>  还没有规范呀！大家发现没有，无论是正确响应，还是异常响应，响应码和响应信息是想怎么设置就怎么设置，要是 <code>10</code>  个开发人员对同一个类型的响应写 <code>10</code>  个不同的响应码，那这个统一响应体的格式规范就毫无意义！所以，必须要将响应码和响应信息给规范起来。</p>\n<h2 id=\"十-响应码枚举\"><a class=\"markdownIt-Anchor\" href=\"#十-响应码枚举\">#</a> 十、响应码枚举</h2>\n<p>要规范响应体中的响应码和响应信息用枚举简直再恰当不过了，我们现在就来创建一个响应码枚举类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ResultCode</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SUCCESS(<span class=\"number\">1000</span>, <span class=\"string\">&quot;操作成功&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    FAILED(<span class=\"number\">1001</span>, <span class=\"string\">&quot;响应失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    VALIDATE_FAILED(<span class=\"number\">1002</span>, <span class=\"string\">&quot;参数校验失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    ERROR(<span class=\"number\">5000</span>, <span class=\"string\">&quot;未知错误&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    ResultCode(<span class=\"keyword\">int</span> code, String msg) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后修改响应体的构造方法，让其只准接受响应码枚举来设置响应码和响应信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(ResultCode.SUCCESS, data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(ResultCode resultCode, T data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.code = resultCode.getCode();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.msg = resultCode.getMsg();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后同时修改全局异常处理的响应码设置方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(APIException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">APIExceptionHandler</span><span class=\"params\">(APIException e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里传递的响应码枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(ResultCode.FAILED, e.getMsg());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">MethodArgumentNotValidExceptionHandler</span><span class=\"params\">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class=\"line\">    ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里传递的响应码枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(ResultCode.VALIDATE_FAILED, objectError.getDefaultMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样响应码和响应信息只能是枚举规定的那几个，就真正做到了响应数据格式、响应码和响应信息规范化、统一化！这些可以参考： <code>Java</code>  项目构建基础：统一结果，统一异常，统一日志</p>\n<h2 id=\"十一-全局处理响应数据\"><a class=\"markdownIt-Anchor\" href=\"#十一-全局处理响应数据\">#</a> 十一、全局处理响应数据</h2>\n<p>接口返回统一响应体 + 异常也返回统一响应体，其实这样已经很好了，但还是有可以优化的地方。要知道一个项目下来定义的接口搞个几百个太正常不过了，要是每一个接口返回数据时都要用响应体来包装一下好像有点麻烦，有没有办法省去这个包装过程呢？当然是有滴，还是要用到全局处理。</p>\n<p>首先，先创建一个类加上注解使其成为全局处理类。然后继承 <code>ResponseBodyAdvice</code>  接口重写其中的方法，即可对我们的 <code>controller</code>  进行增强操作，具体看代码和注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice(basePackages = &#123;&quot;com.cy.controller&quot;&#125;)</span> <span class=\"comment\">// 注意哦，这里要加上需要扫描的包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseControllerAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResponseBodyAdvice</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// supports方法是来给定条件判断是否该调用beforeBodyWrite，MethodParameter里面有各种数据，false就不调用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果接口返回的类型本身就是ResultVO那就没有必要进行额外的操作，返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> !returnType.getGenericParameterType().equals(ResultVO.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 响应结果拦截根据业务去封装返回体</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">beforeBodyWrite</span><span class=\"params\">(Object data, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// String类型不能直接包装，所以要进行些特别的处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (returnType.getGenericParameterType().equals(String.class)) &#123;</span><br><span class=\"line\">            ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将数据包装在ResultVO里后，再转换为json字符串响应给前端</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> objectMapper.writeValueAsString(<span class=\"keyword\">new</span> ResultVO&lt;&gt;(data));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JsonProcessingException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> APIException(<span class=\"string\">&quot;返回String类型错误&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将原本的数据包装在ResultVO里</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重写的这两个方法是用来在 <code>controller</code>  将数据进行返回前进行增强操作， <code>supports</code>  方法要返回为 <code>true</code>  才会执行 <code>beforeBodyWrite</code>  方法，所以如果有些情况不需要进行增强操作可以在 <code>supports</code>  方法里进行判断。对返回数据进行真正的操作还是在 <code>beforeBodyWrite</code>  方法中，我们可以直接在该方法里包装数据，这样就不需要每个接口都进行数据包装了，省去了很多麻烦。</p>\n<p>我们可以现在去掉接口的数据包装来看下效果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    user.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    user.setAccount(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;123@qq.com&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里是直接返回的User类型，并没有用ResultVO进行包装</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们来看下响应数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-10-03.png\" class=\"\">\n<p>成功对数据进行了包装！</p>\n<blockquote>\n<p>注意： <code>beforeBodyWrite</code>  方法里包装数据无法对 <code>String</code>  类型的数据直接进行强转，所以要进行特殊处理，这里不讲过多的细节，有兴趣可以自行深入了解。</p>\n</blockquote>\n<h2 id=\"十二-总结\"><a class=\"markdownIt-Anchor\" href=\"#十二-总结\">#</a> 十二、总结</h2>\n<p>自此整个后端接口基本体系就构建完毕了</p>\n<ul>\n<li>\n<p>通过 <code>Validator</code>  + 自动抛出异常来完成了方便的参数校验</p>\n</li>\n<li>\n<p>通过全局异常处理 + 自定义异常完成了异常操作的规范</p>\n</li>\n<li>\n<p>通过数据统一响应完成了响应数据的规范</p>\n</li>\n<li>\n<p>多个方面组装非常优雅的完成了后端接口的协调，让开发人员有更多的经历注重业务逻辑代码，轻松构建后端接口</p>\n</li>\n</ul>\n",
            "tags": [
                "SpringBoot",
                "接口",
                "SpringMvc"
            ]
        }
    ]
}