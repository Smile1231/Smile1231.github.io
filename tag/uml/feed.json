{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"uml\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/f610585/",
            "url": "https://smile1231.github.io/posts/f610585/",
            "title": "UML:类图关系总结",
            "date_published": "2022-02-13T13:52:04.000Z",
            "content_html": "<h1 id=\"UML-类图关系总结\"><a href=\"#UML-类图关系总结\" class=\"headerlink\" title=\"UML:类图关系总结\"></a><code>UML</code>:类图关系总结</h1><p>UML类图几种关系的总结，泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖<br>在UML类图中，常见的有以下几种关系: <code>泛化（Generalization）</code>, <code>实现（Realization）</code>，<code>关联（Association)</code>，<code>聚合（Aggregation）</code>，<code>组合(Composition)</code>，<code>依赖(Dependency)</code></p>\n<span id=\"more\"></span>\n\n<h2 id=\"1-泛化（Generalization）\"><a href=\"#1-泛化（Generalization）\" class=\"headerlink\" title=\"1. 泛化（Generalization）\"></a>1. 泛化（<code>Generalization</code>）</h2><ul>\n<li>【泛化关系】：是一种<strong>继承</strong>关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。</li>\n<li>【箭头指向】：带三角箭头的实线，箭头指向父类.  <img data-src=\"/blog/posts/f610585/2022-02-13-23-24-28.png\" class=\"\"></li>\n</ul>\n<h2 id=\"2-实现（Realization）\"><a href=\"#2-实现（Realization）\" class=\"headerlink\" title=\"2.实现（Realization）\"></a>2.实现（<code>Realization</code>）</h2><p>【实现关系】：在这里插入图片描述是一种类与接口的关系，表示类是接口所有特征和行为的实现.</p>\n<p>【箭头指向】：带三角箭头的虚线，箭头指向接口</p>\n<img data-src=\"/blog/posts/f610585/2022-02-13-23-24-40.png\" class=\"\">\n\n\n<h2 id=\"3-关联（Association\"><a href=\"#3-关联（Association\" class=\"headerlink\" title=\"3.关联（Association)\"></a>3.关联（<code>Association</code>)</h2><p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p>\n<p>【代码体现】：成员变量</p>\n<p>【箭头及指向】：带普通箭头的实心线，指向被拥有者</p>\n  <img data-src=\"/blog/posts/f610585/2022-02-13-23-24-49.png\" class=\"\">\n\n<h2 id=\"4-聚合（Aggregation）\"><a href=\"#4-聚合（Aggregation）\" class=\"headerlink\" title=\"4.聚合（Aggregation）\"></a>4.聚合（<code>Aggregation</code>）</h2><p>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。<br>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。<br>【代码体现】：成员变量<br>【箭头及指向】：带空心菱形的实心线，菱形指向整体</p>\n<img data-src=\"/blog/posts/f610585/2022-02-13-23-24-59.png\" class=\"\">\n<h2 id=\"5-组合-Composition\"><a href=\"#5-组合-Composition\" class=\"headerlink\" title=\"5.组合(Composition)\"></a>5.组合(<code>Composition</code>)</h2><p>【组合关系】：是<strong>整体与部分</strong>的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。<br>组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。<br>【代码体现】：成员变量</p>\n<p>【箭头及指向】：带实心菱形的实线，菱形指向整体</p>\n<img data-src=\"/blog/posts/f610585/2022-02-13-23-25-08.png\" class=\"\">\n\n<h2 id=\"6-依赖-Dependency\"><a href=\"#6-依赖-Dependency\" class=\"headerlink\" title=\"6. 依赖(Dependency)\"></a>6. 依赖(<code>Dependency</code>)</h2><p> 只要在类中用到了对方，他们之间就存在依赖关系</p>\n<img data-src=\"/blog/posts/f610585/2022-02-13-23-25-20.png\" class=\"\">\n\n\n<img data-src=\"/blog/posts/f610585/2022-02-13-23-25-27.png\" class=\"\">\n\n\n",
            "tags": [
                "UML"
            ]
        }
    ]
}