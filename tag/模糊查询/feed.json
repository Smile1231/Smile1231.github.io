{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"模糊查询\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/105c245f/",
            "url": "https://smile1231.github.io/posts/105c245f/",
            "title": "Mybatis使用Sql进行模糊查询",
            "date_published": "2022-02-13T13:39:52.000Z",
            "content_html": "<h1 id=\"mybatis使用sql进行模糊查询\"><a class=\"markdownIt-Anchor\" href=\"#mybatis使用sql进行模糊查询\">#</a>  <code>Mybatis</code>  使用 <code>Sql</code>  进行模糊查询</h1>\n<h2 id=\"方式一\"><a class=\"markdownIt-Anchor\" href=\"#方式一\">#</a> 方式一</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from user where username like #&#123;username&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>模糊查询的测试方法</p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; users = userDao.findByName(<span class=\"string\">&quot;%王%&quot;</span>);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/105c245f/2022-02-13-22-29-15.png\" class=\"\">\n<p>我们在配置文件中没有加入 <code>%</code>  来作为模糊查询的条件，所以在传入字符串实参时，就需要给定模糊查询的标<br>\n识 %。配置文件中的 <code>#&#123;username&#125;</code>  也只是一个占位符，所以  <code>SQL</code>  语句显示为 <code>“？”</code> 。</p>\n<h2 id=\"方式二\"><a class=\"markdownIt-Anchor\" href=\"#方式二\">#</a> 方式二</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;string&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span>&gt;</span></span><br><span class=\"line\"> select * from user where username like &#x27;%$&#123;value&#125;%&#x27;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们在上面将原来的 <code>#&#123;&#125;</code>  占位符，改成了 <code>&#123;value&#125;</code> 。注意如果用模糊查询的这种写法，那么 <code>$&#123;value&#125;</code>  的写法就是固定的，不能写成其它名字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行查询一个方法</span></span><br><span class=\"line\">List&lt;User&gt; users = userDao.findByName(<span class=\"string\">&quot;王&quot;</span>);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/105c245f/2022-02-13-22-29-25.png\" class=\"\">\n<p>可以发现，我们在程序代码中就不需要加入模糊查询的匹配符 % 了，这两种方式的实现效果是一样的，但执行<br>\n的语句是不一样的。</p>\n<h2 id=\"方式三\"><a class=\"markdownIt-Anchor\" href=\"#方式三\">#</a> 方式三</h2>\n<p>说明：通过前两种写法，虽然可以解决模糊查询的问题，但是还是不好，因为通过 <code>%</code>  的方式会引发 <code>sql</code>  注入的问题，现在的期望是：既能够解决 <code>sql</code>  注入又能在配置文件中写 <code>%</code>  该如何实现呢，可以借助 <code>mysql</code>  的函数。</p>\n<p>修改  <code>SQL</code>  语句的配置，配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;string&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span>&gt;</span></span><br><span class=\"line\"> select * from user where username like concat(&#x27;%&#x27;,#&#123;username&#125;,&#x27;%&#x27;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>*#&#123; &#125;</code>  是预编译处理， <code>MyBatis</code>  在处理 <code>#&#123; &#125;</code>  时，它会将 <code>sql</code>  中的 <code>#&#123; &#125;</code>  替换为 <code>？</code> ，然后调用 <code>PreparedStatement</code>  的 <code>set</code>  方法来赋值，传入字符串后，会在值两边加上单引号，使用占位符的方式提高效率，可以防止 <code>sql</code>  注入。<br>\n <code>$&#123;&#125;:</code>  表示拼接 <code>sql</code>  串，将接收到参数的内容不加任何修饰拼接在 <code>sql</code>  中，可能引发 <code>sql</code>  注入。</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "模糊查询"
            ]
        }
    ]
}