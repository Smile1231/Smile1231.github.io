{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"javascript\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/7b604068/",
            "url": "https://smile1231.github.io/posts/7b604068/",
            "title": "Html页面插入地图",
            "date_published": "2022-02-14T14:11:32.000Z",
            "content_html": "<h1 id=\"html页面插入百度谷歌地图-react中插入百度地图\"><a href=\"#html页面插入百度谷歌地图-react中插入百度地图\" class=\"headerlink\" title=\"html页面插入百度谷歌地图,react中插入百度地图\"></a><code>html</code>页面插入百度谷歌地图,<code>react</code>中插入百度地图</h1><h2 id=\"Google地图\"><a href=\"#Google地图\" class=\"headerlink\" title=\"Google地图\"></a><code>Google</code>地图</h2><ol>\n<li>在谷歌地图中 <code>http://www.google.cn/maps/</code></li>\n</ol>\n<p>输入地址，搜索到指定地点之后，点击“共享”按钮</p>\n<span id=\"more\"></span>\n\n<img data-src=\"/blog/posts/7b604068/2022-02-14-22-35-40.png\" class=\"\">\n\n<ol start=\"2\">\n<li>然后使用嵌入地图</li>\n</ol>\n<img data-src=\"/blog/posts/7b604068/2022-02-14-22-35-49.png\" class=\"\">\n\n<ol start=\"3\">\n<li>将复制的<code>HTML</code>代码粘贴到相应位置，根据自己需求修改宽高</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;contact-map&quot;</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;contact-map-size&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3392.8449822382095!2d119.92011513973418!3d31.747432000000007!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x35b46cf8c886febb%3A0x54a85cdf7ef32ab9!2z5rGf6IuP55CG5bel5a2m6Zmi55S15rCU5L-h5oGv5bel56iL5a2m6Zmi!5e0!3m2!1szh-CN!2sus!4v1617931666774!5m2!1szh-CN!2sus&quot;</span>   <span class=\"attr\">allowfullscreen</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">loading</span>=<span class=\"string\">&quot;lazy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "前端",
                "JavaScript",
                "Html"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/4aa00b9a/",
            "url": "https://smile1231.github.io/posts/4aa00b9a/",
            "title": "Js中的some、find、findindex、includes、filter的使用",
            "date_published": "2022-02-14T13:30:46.000Z",
            "content_html": "<h1 id=\"js中的some、find、findindex、includes、filter的使用\"><a href=\"#js中的some、find、findindex、includes、filter的使用\" class=\"headerlink\" title=\"js中的some、find、findindex、includes、filter的使用\"></a><code>js</code>中的<code>some、find、findindex、includes、filter</code>的使用</h1><blockquote>\n<p>类似于<code>foreach</code>的方法<br>为什么把这类方法归到一起讲，因为我在使用的过程中发现其实这些方法的用法和参数其实都是一样的，底层应该都是和<code>foreach</code>差不多，差别只是在于返回的东西不一样，那么再来看看这些方法的差别以及用法。</p>\n</blockquote>\n<ul>\n<li>语法<br><code>array.方法名(function(currentValue, index, arr),thisValue)</code></li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li>参数</li>\n</ul>\n<img data-src=\"/blog/posts/4aa00b9a/2022-02-14-22-33-00.png\" class=\"\">\n\n<p>以上是这些方法共同的基本的语法以及参数</p>\n<p>那么再来看看这些方法的不同点</p>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a><code>forEach()</code></h2><p><code>forEach()</code> 方法用于调用数组的每个元素，并将元素传递给回调函数。</p>\n<p>注意: <code>forEach()</code> 对于空数组是不会执行回调函数的。</p>\n<blockquote>\n<p>也就是说 <code>forEach()</code> 这个方法是没有任何限制的，回调函数最终返回的值是完全由自己决定的，也就是说其实后面介绍到的所有的方法其实也都可以通过<code>forEach()</code>来实现相同的功能，只不过要自己写更多的代码量。<br><code>forEach()</code>可以通过<code>return</code>来提前退出循环，同时返回相应的值</p>\n</blockquote>\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a><code>map()</code></h2><p><code>map()</code> 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p>\n<p><code>map()</code> 方法按照原始数组元素顺序依次处理元素。</p>\n<ul>\n<li><p>注意： <code>map()</code> 不会对空数组进行检测。</p>\n</li>\n<li><p>注意： <code>map()</code> 不会改变原始数组。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>map</code>和<code>foreach</code>很像，差别就在于<code>map</code>所得到的所有符合条件的结果都会通过一个数组来返回。在我们需要将结果放到一个数组中的时候直接使用<code>map</code>就会更加的方便。</p>\n</blockquote>\n<blockquote>\n<p>在<code>map()</code>中<code>return</code>无论如何都会返回一个数组，可以通过<code>return</code>来对原数组进行操作返回一个新数组</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;     <span class=\"comment\">//[[true, true, true, true, true, true, true, true, true]]</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item*<span class=\"number\">2</span>;     <span class=\"comment\">//[2, 4, 6, 8, 10, 12, 14, 16, 18]</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a><code>some()</code></h2><p><code>some()</code> 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p>\n<p><code>some()</code> 方法会依次执行数组的每个元素：</p>\n<p>如果有一个元素满足条件，则表达式返回<code>true</code> , 剩余的元素不会再执行检测。<br>如果没有满足条件的元素，则返回<code>false</code>。<br>注意： <code>some()</code> 不会对空数组进行检测。<br>注意： <code>some()</code> 不会改变原始数组。</p>\n<p>也就是说<code>some</code>并不一定会遍历完数组中全部的元素，当遍历到由符合条件的元素时就会返回<code>true</code>并终止，否则返回<code>false</code>，所以也就可以通过利用此特性来对数组中特定一部分的元素进行操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过some可以对数组中符合要求的之前的元素进行操作</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item &gt; <span class=\"number\">5</span>;  <span class=\"comment\">//可以通过return来设置返回值的条件</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//读取缓存是否收藏</span></span><br><span class=\"line\"><span class=\"comment\">// || 意思为强转为 数组格式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> collect = wx.getStorageSync(<span class=\"string\">&quot;collect&quot;</span>)||[];</span><br><span class=\"line\"><span class=\"comment\">// 使用 some 遍历数组 判断 是否有id的值相等，只要有一个相等的 ， isCollect 都为true</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isCollect = collect.some(<span class=\"function\"><span class=\"params\">v</span>=&gt;</span>v.id === <span class=\"built_in\">this</span>.data.courseDetails.id);</span><br></pre></td></tr></table></figure>\n<p><strong>还有一个相对的方法叫做 <code>every()</code> ,条件时数组中所有的元素都满足条件。</strong></p>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"``find()\"></a>``find()</h2><p><code>find()</code> 方法返回通过测试（函数内判断）的数组的第一个元素的值。</p>\n<p><code>find()</code> 方法为数组中的每个元素都调用一次函数执行：</p>\n<ul>\n<li>当数组中的元素在测试条件时返回 <code>true</code> 时, <code>find()</code> 返回符合条件的元素，之后的值不会再调用执行函数。</li>\n<li>如果没有符合条件的元素返回 <code>undefined</code>  注意: <code>find()</code> 对于空数组，函数是不会执行的。</li>\n</ul>\n<p>注意: <code>find()</code> 并没有改变数组的原始值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.find(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过find也可以对数组中符合要求的之前的元素进行操作</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item&gt;<span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a><code>findIndex()</code></h2><p><code>findIndex()</code> 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</p>\n<p><code>findIndex()</code> 方法为数组中的每个元素都调用一次函数执行：</p>\n<ul>\n<li><p>当数组中的元素在测试条件时返回 <code>true</code> 时, <code>findIndex()</code> 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。</p>\n</li>\n<li><p>如果没有符合条件的元素返回<code> -1</code></p>\n<p>  注意: <code>findIndex()</code> 对于空数组，函数是不会执行的。</p>\n</li>\n</ul>\n<p>注意: <code>findIndex()</code> 并没有改变数组的原始值。</p>\n<blockquote>\n<p>与<code>find</code>方法类似，区别只在于这个方法返回的时元素在数组中的索引。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.findIndex(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item&gt;<span class=\"number\">5</span>;          </span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// || 意思为强转为 数组格式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> collect = wx.getStorageSync(<span class=\"string\">&quot;collect&quot;</span>)||[];</span><br><span class=\"line\"><span class=\"comment\">// 使用findIndex遍历, 返回 数组中和 目标id 相等的 索引</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> index = collect.findIndex(<span class=\"function\"><span class=\"params\">v</span>=&gt;</span>v.id === <span class=\"built_in\">this</span>.data.courseDetails.id) ;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a><code>filter()</code></h2><p><code>filter()</code> 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>\n<p>注意： <code>filter()</code> 不会对空数组进行检测。</p>\n<p>注意： <code>filter()</code> 不会改变原始数组。</p>\n<blockquote>\n<p>这个方法与<code>map</code>方法类似，<code>map</code>方法没有返回的条件，而这个方法可以直接通过<code>return</code>来设置过滤条件。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt;<span class=\"number\">2</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes()\"></a><code>includes()</code></h2><p>这个方法是<code>es6</code>中新增的一个方法，可以用来判断一个数组或者是字符串中是否包含某一元素，如果是返回 <code>true</code>，否则<code>false</code>。</p>\n<p>语法:</p>\n<ul>\n<li><code>arr.includes(searchElement)</code></li>\n<li><code>arr.includes(searchElement, fromIndex)</code></li>\n</ul>\n<p>参数:</p>\n<ul>\n<li><code>searchElement</code> 必须。需要查找的元素值。</li>\n<li><code>fromIndex</code> 可选。从该索引处开始查找 <code>searchElement</code>。如果为负值，则按升序从 <code>array.length + fromIndex </code>的索引开始搜索。默认为<code> 0</code>。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.includes(<span class=\"number\">5</span>)); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "前端",
                "JavaScript"
            ]
        }
    ]
}