{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"操作系统\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/c7cf6e41/",
            "url": "https://smile1231.github.io/posts/c7cf6e41/",
            "title": "面试之旅关于计算机网络",
            "date_published": "2022-02-16T13:13:16.000Z",
            "content_html": "<h1 id=\"常见面试题整理–计算机网络篇（每位开发者必备）\"><a href=\"#常见面试题整理–计算机网络篇（每位开发者必备）\" class=\"headerlink\" title=\"常见面试题整理–计算机网络篇（每位开发者必备）\"></a>常见面试题整理–计算机网络篇（每位开发者必备）</h1><img data-src=\"/posts/c7cf6e41/2022-02-16-21-31-41.png\" class=\"\">\n\n<h2 id=\"1-请简述TCP-UDP的区别\"><a href=\"#1-请简述TCP-UDP的区别\" class=\"headerlink\" title=\"1. 请简述TCP\\UDP的区别\"></a>1. 请简述<code>TCP\\UDP</code>的区别</h2><p><code>TCP</code>和<code>UDP</code>是<code>OSI</code>模型中的运输层中的协议。<code>TCP</code>提供可靠的通信传输，而<code>UDP</code>则常被用于让广播和细节控制交给应用的通信传输。</p>\n<p>两者的区别大致如下：</p>\n<ul>\n<li><code>TCP</code>面向连接，<code>UDP</code>面向非连接即发送数据前不需要建立链接</li>\n<li><code>TCP</code>提供可靠的服务（数据传输），<code>UDP</code>无法保证</li>\n<li><code>TCP</code>面向字节流，<code>UDP</code>面向报文</li>\n<li><code>TCP</code>数据传输慢，<code>UDP</code>数据传输快</li>\n</ul>\n<h2 id=\"2-请简单说一下你了解的端口及对应的服务？\"><a href=\"#2-请简单说一下你了解的端口及对应的服务？\" class=\"headerlink\" title=\"2. 请简单说一下你了解的端口及对应的服务？\"></a>2. 请简单说一下你了解的端口及对应的服务？</h2><span id=\"more\"></span>\n\n<img data-src=\"/posts/c7cf6e41/2022-02-16-21-31-53.png\" class=\"\">\n\n<p><strong>端口简介：本文介绍端口的概念，分类，以及如何关闭/开启一个端口</strong></p>\n<ul>\n<li><p><code>21端口</code>：21端口主要用于<code>FTP（File Transfer Protocol，文件传输协议）</code>服务。</p>\n</li>\n<li><p><code>23</code>端口：23端口主要用于<code>Telnet（远程登录）</code>服务，是<code>Internet</code>上普遍采用的登录和仿真程序。</p>\n</li>\n<li><p><code>25端口</code>：25端口为<code>SMTP（Simple Mail Transfer Protocol，简单邮件传输协议）</code>服务器所开放，主要用于发送邮件，如今绝大多数邮件服务器都使用该协议。</p>\n</li>\n<li><p><code>53端口</code>：53端口为<code>DNS（Domain Name Server，域名服务器）</code>服务器所开放，主要用于域名解析，<code>DNS</code>服务在<code>NT</code>系统中使用的最为广泛。</p>\n</li>\n<li><p><code>67、68端口</code>：67、68端口分别是为<code>Bootstrap</code>服务的<code>Bootstrap Protocol Server（引导程序协议服务端）</code>和<code>Bootstrap Protocol Client（引导程序协议客户端）</code>开放的端口。</p>\n</li>\n<li><p><code>69端口</code>：<code>TFTP</code>是Cisco公司开发的一个<code>简单文件传输协议</code>，类似于<code>FTP</code>。</p>\n</li>\n<li><p><code>79端口</code>：79端口是为<code>Finger</code>服务开放的，主要用于查询远程主机在线用户、操作系统类型以及是否缓冲区溢出等用户的详细信息。</p>\n</li>\n<li><p><code>80端口</code>：80端口是为<code>HTTP（HyperText Transport Protocol，超文本传输协议）</code>开放的，这是上网冲浪使用最多的协议，主要用于在<code>WWW（World Wide Web，万维网）</code>服务上传输信息的协议。</p>\n</li>\n<li><p><code>99端口</code>：99端口是用于一个名为<code>“Metagram Relay”（亚对策延时）</code>的服务，该服务比较少见，一般是用不到的。</p>\n</li>\n<li><p><code>109、110端口</code>：109端口是为<code>POP2（Post Office Protocol Version 2，邮局协议2）</code>服务开放的，<code>110端口是为POP3（邮件协议3）</code>服务开放的，<code>POP2、POP3</code>都是主要用于接收邮件的。</p>\n</li>\n<li><p><code>111端口</code>：111端口是<code>SUN</code>公司的<code>RPC（Remote Procedure Call，远程过程调用）</code>服务所开放的端口，主要用于分布式系统中不同计算机的内部进程通信，RPC在多种网络服务中都是很重要的组件。</p>\n</li>\n<li><p><code>113端口</code>：113端口主要用于<code>Windows</code>的<code>“Authentication Service”（验证服务）</code>。</p>\n</li>\n<li><p><code>119端口</code>：119端口是为<code>“Network News Transfer Protocol”（网络新闻组传输协议，简称NNTP）</code>开放的。</p>\n</li>\n<li><p><code>135端口</code>：135端口主要用于使用<code>RPC（Remote Procedure Call，远程过程调用）</code>协议并提供<code>DCOM（分布式组件对象模型）</code>服务。</p>\n</li>\n<li><p><code>137端口</code>：137端口主要用于<code>“NetBIOS Name Service”（NetBIOS名称服务）</code>。</p>\n</li>\n<li><p><code>139端口</code>：139端口是为<code>“NetBIOS Session Service”</code>提供的，主要用于提供<code>Windows</code>文件和打印机共享以及<code>Unix</code>中的<code>Samba</code>服务。</p>\n</li>\n<li><p><code>143端口</code>：143端口主要是用于<code>“Internet Message Access Protocol”v2（Internet消息访问协议，简称IMAP）</code>。</p>\n</li>\n<li><p><code>161端口</code>：161端口是用于<code>“Simple Network Management Protocol”（简单网络管理协议，简称SNMP）</code>。</p>\n</li>\n<li><p><code>443端口</code>：43端口即网页浏览端口，主要是用于<code>HTTPS</code>服务，是提供加密和通过安全端口传输的另一种<code>HTTP</code>。</p>\n</li>\n<li><p><code>554端口</code>：554端口默认情况下用于<code>“Real Time Streaming Protocol”（实时流协议，简称RTSP）</code>。</p>\n</li>\n<li><p><code>1024端口</code>：1024端口一般不固定分配给某个服务，在英文中的解释是<code>“Reserved”（保留）</code>。</p>\n</li>\n<li><p><code>1080端口</code>：1080端口是Socks代理服务使用的端口，大家平时上网使用的WWW服务使用的是HTTP协议的代理服务。</p>\n</li>\n<li><p><code>1755端口</code>：1755端口默认情况下用于<code>“Microsoft Media Server”（微软媒体服务器，简称MMS）</code>。</p>\n</li>\n<li><p><code>4000端口</code>：4000端口是用于大家经常使用的<code>QQ</code>聊天工具的，再细说就是为<code>QQ</code>客户端开放的端口，<code>QQ</code>服务端使用的端口是<code>8000</code>。</p>\n</li>\n<li><p><code>5554端口</code>：在今年4月30日就报道出现了一种针对微软<code>lsass服务</code>的新蠕虫病毒——震荡波（Worm.Sasser），该病毒可以利用<code>TCP 5554端口</code>开启一个<code>FTP</code>服务，主要被用于病毒的传播。</p>\n</li>\n<li><p><code>5632端口</code>：5632端口是被大家所熟悉的远程控制软件<code>pcAnywhere</code>所开启的端口。</p>\n</li>\n<li><p><code>8080端口</code>：8080端口同80端口，是被用于<code>WWW</code>代理服务的，可以实现网页</p>\n</li>\n</ul>\n<h2 id=\"3-说一说TCP的三次握手\"><a href=\"#3-说一说TCP的三次握手\" class=\"headerlink\" title=\"3. 说一说TCP的三次握手\"></a>3. 说一说<code>TCP</code>的三次握手</h2><p>在<code>TCP/IP</code>协议中，<code>TCP协议</code>提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换<code>TCP</code>窗口大小信息。</p>\n<p>下面详细说一下三次握手（来自简析<code>TCP</code>的三次握手与四次分手）</p>\n<img data-src=\"/posts/c7cf6e41/2022-02-16-21-32-08.png\" class=\"\">\n\n<img data-src=\"/posts/c7cf6e41/2022-02-16-21-32-16.png\" class=\"\">\n\n<h2 id=\"4-有哪些私有（保留）地址？\"><a href=\"#4-有哪些私有（保留）地址？\" class=\"headerlink\" title=\"4. 有哪些私有（保留）地址？\"></a>4. 有哪些私有（保留）地址？</h2><ul>\n<li><code>A</code>类：<code>10.0.0.0 - 10.255.255.255</code></li>\n<li><code>B</code>类：<code>172.16.0.0 - 172.31.255.255</code></li>\n<li><code>C</code>类：<code>192.168.0.0 - 192.168.255.255</code></li>\n</ul>\n<h2 id=\"5-IP地址分为哪几类？简单说一下各个分类\"><a href=\"#5-IP地址分为哪几类？简单说一下各个分类\" class=\"headerlink\" title=\"5. IP地址分为哪几类？简单说一下各个分类\"></a>5. <code>IP</code>地址分为哪几类？简单说一下各个分类</h2><img data-src=\"/posts/c7cf6e41/2022-02-16-21-32-36.png\" class=\"\">\n\n<p><code>IPv6 </code>– 采用<code>128bit</code>，首部固定部分为<code>40</code>字节。</p>\n<h2 id=\"6-在浏览器中输入网址之后执行会发生什么？\"><a href=\"#6-在浏览器中输入网址之后执行会发生什么？\" class=\"headerlink\" title=\"6. 在浏览器中输入网址之后执行会发生什么？\"></a>6. 在浏览器中输入网址之后执行会发生什么？</h2><ul>\n<li>查找域名对应的<code>IP</code>地址。这一步会依次查找浏览器缓存，系统缓存，路由器缓存，<code>ISPNDS</code>缓存，根域名服务器</li>\n<li>浏览器向<code>IP</code>对应的<code>web</code>服务器发送一个<code>HTTP</code>请求</li>\n<li>服务器响应请求，发回网页内容</li>\n<li>浏览器解析网页内容</li>\n</ul>\n<p>更加详细的一种说法（以百度为例）（来自计算机网络之面试常考 - 牛客网）</p>\n<img data-src=\"/posts/c7cf6e41/2022-02-16-21-32-47.png\" class=\"\">\n\n<h2 id=\"7-简单解释一些ARP协议的工作过程\"><a href=\"#7-简单解释一些ARP协议的工作过程\" class=\"headerlink\" title=\"7. 简单解释一些ARP协议的工作过程\"></a>7. 简单解释一些<code>ARP</code>协议的工作过程</h2><img data-src=\"/posts/c7cf6e41/2022-02-16-21-33-01.png\" class=\"\">\n\n<h2 id=\"8-说一说OSI七层模型\"><a href=\"#8-说一说OSI七层模型\" class=\"headerlink\" title=\"8. 说一说OSI七层模型\"></a>8. 说一说<code>OSI</code>七层模型</h2><img data-src=\"/posts/c7cf6e41/2022-02-16-21-33-15.png\" class=\"\">\n\n<h2 id=\"9-说一说TCP-IP四层模型\"><a href=\"#9-说一说TCP-IP四层模型\" class=\"headerlink\" title=\"9. 说一说TCP/IP四层模型\"></a>9. 说一说<code>TCP/IP</code>四层模型</h2><p><code>ISO</code>制定的<code>OSI</code>参考模型的过于庞大、复杂招致了许多批评。与此对照，由技术人员自己开发的<code>TCP/IP</code>协议栈获得了更为广泛的应用。如图所示，是<code>TCP/IP</code>参考模型和<code>OSI</code>参考模型的对比示意图。</p>\n<img data-src=\"/posts/c7cf6e41/2022-02-16-21-33-24.png\" class=\"\">\n\n<img data-src=\"/posts/c7cf6e41/2022-02-16-21-33-31.png\" class=\"\">\n\n<p>具体讲解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQmx1ZVR6YXIvYXJ0aWNsZXMvODExMTYwLmh0bWw=\">链接</span></p>\n<h2 id=\"10-HTTP-协议包括哪些请求？\"><a href=\"#10-HTTP-协议包括哪些请求？\" class=\"headerlink\" title=\"10. HTTP 协议包括哪些请求？\"></a>10. <code>HTTP</code> 协议包括哪些请求？</h2><ul>\n<li><p><code>GET</code>：对服务器资源的简单请求</p>\n</li>\n<li><p><code>POST</code>：用于发送包含用户提交数据的请求</p>\n</li>\n<li><p>———–以及————</p>\n</li>\n<li><p><code>HEAD</code>：类似于GET请求，不过返回的响应中没有具体内容，用于获取报头</p>\n</li>\n<li><p><code>PUT</code>：传说中请求文档的一个版本</p>\n</li>\n<li><p><code>DELETE</code>：发出一个删除指定文档的请求</p>\n</li>\n<li><p><code>TRACE</code>：发送一个请求副本，以跟踪其处理进程</p>\n</li>\n<li><p><code>OPTIONS</code>：返回所有可用的方法，检查服务器支持哪些方法</p>\n</li>\n<li><p><code>CONNECT</code>：用于<code>ssl</code>隧道的基于代理的请求</p>\n</li>\n</ul>\n<h2 id=\"11-简述HTTP中GET和POST的区别\"><a href=\"#11-简述HTTP中GET和POST的区别\" class=\"headerlink\" title=\"11. 简述HTTP中GET和POST的区别\"></a>11. 简述<code>HTTP</code>中<code>GET</code>和<code>POST</code>的区别</h2><p>从原理性看：</p>\n<ul>\n<li>根据<code>HTTP</code>规范，<code>GET</code>用于信息获取，而且应该是安全和幂等的</li>\n<li>根据<code>HTTP</code>规范，<code>POST</code>请求表示可能修改服务器上资源的请求</li>\n</ul>\n<p>从表面上看：</p>\n<ul>\n<li><code>GET</code>请求的数据会附在<code>URL</code>后面，<code>POST</code>的数据放在<code>HTTP</code>包体</li>\n<li><code>POST</code>安全性比<code>GET</code>安全性高</li>\n</ul>\n",
            "tags": [
                "Java面试",
                "操作系统"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/4847d2e5/",
            "url": "https://smile1231.github.io/posts/4847d2e5/",
            "title": "面试之旅关于操作系统",
            "date_published": "2022-02-16T13:10:40.000Z",
            "content_html": "<h1 id=\"常见面试题整理–操作系统篇（每位开发者必备）\"><a href=\"#常见面试题整理–操作系统篇（每位开发者必备）\" class=\"headerlink\" title=\"常见面试题整理–操作系统篇（每位开发者必备）\"></a>常见面试题整理–操作系统篇（每位开发者必备）</h1><img data-src=\"/posts/4847d2e5/2022-02-16-21-18-10.png\" class=\"\">\n\n<h2 id=\"1-请分别简单说一说进程和线程以及它们的区别。\"><a href=\"#1-请分别简单说一说进程和线程以及它们的区别。\" class=\"headerlink\" title=\"1. 请分别简单说一说进程和线程以及它们的区别。\"></a>1. 请分别简单说一说进程和线程以及它们的区别。</h2><blockquote>\n<p>进程是具有一定功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源调度和分配的一个独立单位。线程是进程的实体，是<code>CPU</code>调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。一个进程可以有多个线程，多个线程也可以并发执行</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"2-线程同步的方式有哪些？\"><a href=\"#2-线程同步的方式有哪些？\" class=\"headerlink\" title=\"2. 线程同步的方式有哪些？\"></a>2. 线程同步的方式有哪些？</h2><ul>\n<li>互斥量：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。</li>\n<li>信号量：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。</li>\n<li>事件（信号): 通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。</li>\n</ul>\n<h2 id=\"3-进程的通信方式有哪些？\"><a href=\"#3-进程的通信方式有哪些？\" class=\"headerlink\" title=\"3. 进程的通信方式有哪些？\"></a>3. 进程的通信方式有哪些？</h2><p>主要分为：管道、系统<code>IPC</code>（包括消息队列、信号量、共享存储）、<code>SOCKET</code></p>\n<p>管道主要分为：普通管道<code>PIPE</code> 、流管道（<code>s_pipe</code>）、命名管道（<code>name_pipe</code>）</p>\n<ul>\n<li>管道是一种半双工的通信方式，数据只能单项流动，并且只能在具有亲缘关系的进程间流动，进程的亲缘关系通常是父子进程</li>\n<li>命名管道也是半双工的通信方式，它允许无亲缘关系的进程间进行通信</li>\n<li>信号量是一个计数器，用来控制多个进程对资源的访问，它通常作为一种锁机制。</li>\n<li>消息队列是消息的链表，存放在内核中并由消息队列标识符标识。</li>\n<li>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li>\n<li>共享内存就是映射一段能被其它进程访问的内存，这段共享内存由一个进程创建，但是多个进程可以访问。</li>\n</ul>\n<h2 id=\"4-什么是缓冲区溢出？有什么危害？其原因是什么？\"><a href=\"#4-什么是缓冲区溢出？有什么危害？其原因是什么？\" class=\"headerlink\" title=\"4. 什么是缓冲区溢出？有什么危害？其原因是什么？\"></a>4. 什么是缓冲区溢出？有什么危害？其原因是什么？</h2><p>缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据上。</p>\n<p>危害有以下两点：</p>\n<ul>\n<li>程序崩溃，导致拒绝额服务</li>\n<li>跳转并且执行一段恶意代码</li>\n</ul>\n<p>造成缓冲区溢出的主要原因是程序中没有仔细检查用户输入。</p>\n<h2 id=\"5-什么是死锁？死锁产生的条件\"><a href=\"#5-什么是死锁？死锁产生的条件\" class=\"headerlink\" title=\"5. 什么是死锁？死锁产生的条件\"></a>5. 什么是死锁？死锁产生的条件</h2><p>在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲就是两个或多个进程无限期的阻塞、相互等待的一种状态。</p>\n<p>死锁产生的四个条件（有一个条件不成立，则不会产生死锁）</p>\n<ol>\n<li>互斥条件：一个资源一次只能被一个进程使用</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得资源保持不放</li>\n<li>不剥夺条件：进程获得的资源，在未完全使用完之前，不能强行剥夺</li>\n<li>循环等待条件：若干进程之间形成一种头尾相接的环形等待资源关系</li>\n</ol>\n<h2 id=\"6-进程有哪几种状态？\"><a href=\"#6-进程有哪几种状态？\" class=\"headerlink\" title=\"6. 进程有哪几种状态？\"></a>6. 进程有哪几种状态？</h2><ul>\n<li>就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源</li>\n<li>运行状态：占用处理机资源运行，处于此状态的进程数小于等于<code>CPU</code>数</li>\n<li>阻塞状态： 进程等待某种条件，在条件满足之前无法执行</li>\n</ul>\n<h2 id=\"7-分页和分段有什么区别？\"><a href=\"#7-分页和分段有什么区别？\" class=\"headerlink\" title=\"7. 分页和分段有什么区别？\"></a>7. 分页和分段有什么区别？</h2><ul>\n<li>段是信息的逻辑单位，它是根据用户的需要划分的，因此段对用户是可见的 ；页是信息的物理单位，是为了管理主存的方便而划分的，对用户是透明的。</li>\n<li>段的大小不固定，有它所完成的功能决定；页大大小固定，由系统决定</li>\n<li>段向用户提供二维地址空间；页向用户提供的是一维地址空间</li>\n<li>段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制。</li>\n</ul>\n<h2 id=\"8-操作系统中进程调度策略有哪几种？\"><a href=\"#8-操作系统中进程调度策略有哪几种？\" class=\"headerlink\" title=\"8. 操作系统中进程调度策略有哪几种？\"></a>8. 操作系统中进程调度策略有哪几种？</h2><p><code>FCFS</code>(先来先服务)，优先级，时间片轮转，多级反馈</p>\n<h2 id=\"9-说一说进程同步有哪几种机制\"><a href=\"#9-说一说进程同步有哪几种机制\" class=\"headerlink\" title=\"9. 说一说进程同步有哪几种机制?\"></a>9. 说一说进程同步有哪几种机制?</h2><p>原子操作、信号量机制、自旋锁管程、会合、分布式系统</p>\n<h2 id=\"10-说一说死锁的处理基本策略和常用方法\"><a href=\"#10-说一说死锁的处理基本策略和常用方法\" class=\"headerlink\" title=\"10. 说一说死锁的处理基本策略和常用方法\"></a>10. 说一说死锁的处理基本策略和常用方法</h2><ul>\n<li><p>解决死锁的基本方法如下：<br>预防死锁、避免死锁、检测死锁、解除死锁</p>\n</li>\n<li><p>解决四多的常用策略如下：<br>鸵鸟策略、预防策略、避免策略、检测与解除死锁</p>\n</li>\n</ul>\n",
            "tags": [
                "Java面试",
                "操作系统"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/166a1445/",
            "url": "https://smile1231.github.io/posts/166a1445/",
            "title": "位，字节， 字符",
            "date_published": "2022-02-15T13:37:36.000Z",
            "content_html": "<h2 id=\"位，字节，-字符\"><a href=\"#位，字节，-字符\" class=\"headerlink\" title=\"位，字节， 字符\"></a>位，字节， 字符</h2><h3 id=\"1-位\"><a href=\"#1-位\" class=\"headerlink\" title=\"1. 位\"></a>1. 位</h3><pre><code> 数据存储的最小单位。每个二进制数字0或者1就是1个位,比特为 bit ，简称 b\n \n</code></pre>\n<span id=\"more\"></span>\n\n<h3 id=\"2-字节\"><a href=\"#2-字节\" class=\"headerlink\" title=\"2. 字节\"></a>2. 字节</h3><pre><code> 8个位构成一个字节；即：1 byte (字节)= 8 bit(位)；\n Byte(字节)，简称B。byte是基本数据类型，Byte是byte的包装类\n</code></pre>\n<p>     <code>1 KB</code> = <code>1024 B</code>(字节)；</p>\n<p>     <code>1 MB</code> = <code>1024 KB</code>;  (<code>2^20 B</code>)</p>\n<p>     <code>1 GB</code> = <code>1024 MB</code>;  (<code>2^20 KB</code>)</p>\n<p>     <code>1 TB</code> = <code>1024 GB</code>;  (<code>2^30 KB</code>)</p>\n<h3 id=\"3-字符\"><a href=\"#3-字符\" class=\"headerlink\" title=\"3.字符\"></a>3.字符</h3><p> <code>a、A、中、+、*、の......</code>均表示一个字符；</p>\n<p> 字符(汉字和汉字标点符号都算字符)</p>\n<pre><code> 一般 utf-8 编码下，一个汉字 字符 占用 3 个 字节；\n\n 一般 gbk 编码下，一个汉字  字符  占用 2 个 字节；\n</code></pre>\n<h3 id=\"4-字符集\"><a href=\"#4-字符集\" class=\"headerlink\" title=\"4.字符集\"></a>4.字符集</h3><pre><code> 即各种各个字符的集合，也就是说哪些汉字，字母（A、b、c）和符号（空格、引号..）会被收入标准中；\n</code></pre>\n<h3 id=\"5-编码\"><a href=\"#5-编码\" class=\"headerlink\" title=\"5.编码\"></a>5.编码</h3><blockquote>\n<p><code>ASCII</code>码：一个英文字母（不分大小写）占<code>一个字节</code>的空间，一个中文汉字占<code>两个字节</code>的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为8位二进制数，换算为十进制。最小值<code>-128</code>，最大值<code>127</code>。如一个<code>ASCII</code>码就是<code>一个字节</code>,<code>0~127</code>(总共有<code>128</code>个<code>ASCII</code>码)。</p>\n</blockquote>\n<blockquote>\n<p><code>UTF-8</code>编码：一个<code>英文字符</code>等于<code>一个字节</code>，一个<code>中文（含繁体）</code>等于<code>三个字节</code>。<code>中文标点</code>占<code>三个字节</code>，英文标点占<code>一个字节</code></p>\n</blockquote>\n<blockquote>\n<p><code>Unicode</code>编码：一个<code>英文</code>等于<code>两个字节</code>，一个<code>中文</code>（含繁体）等于<code>两个字节</code>。<code>中文标点</code>占<code>两个字节</code>，<code>英文标点</code>占<code>两个字节</code></p>\n</blockquote>\n<h2 id=\"基本数据类型范围\"><a href=\"#基本数据类型范围\" class=\"headerlink\" title=\"基本数据类型范围\"></a>基本数据类型范围</h2><p>在<code>JAVA</code>中一共有八种基本数据类型，他们分别是：<code>byte、short、int、long、float、double、char、boolean</code></p>\n<ul>\n<li><code>byte</code>的取值范围为 <code>-128</code> ~ <code>127</code>, 占用<code>一个</code>字节(<code>-2^7</code> 到 <code>(2^7)-1</code> )</li>\n<li><code>short</code> 的取值范围为 <code>-32768</code> ～ <code>32767</code>， 占用 <code>两个</code> 字节 (<code>-2^15</code> 到 <code>(2^31)-1</code>)</li>\n<li><code>int</code> 的取值范围为 <code>-2147483648</code><del><code>2147483647</code>(<code>-2^31</code></del><code>(2^31)-1</code>) , 占用<code>四个个</code>字节</li>\n<li><code>long</code>的取值范围为（<code>-9223372036854774808</code> ~ <code>9223372036854774807</code>）, 占用<code>8个字节</code>（<code>-2^63</code> 到 <code>(2^63)-1</code>）</li>\n</ul>\n<p>可以看到<code>byte</code>和<code>short</code>的取值范围比较小，而<code>long</code>的取值范围太大，占用的空间多，基本上<code>int</code>可以满足我们的日常的计算了，而且<code>int</code>也是使用的最多的整型类型了。 在通常情况下，如果<code>JAVA</code>中出现了一个整数数字比如<code>35</code>，那么这个数字就是<code>int</code>型的，如果我们希望它是<code>byte</code>型的，可以在数据后加上大写的 <code>B</code>：<code>35B</code>，表示它是<code>byte</code>型的. 同样的<code>35S</code>表示<code>short</code>型，<code>35L</code>表示<code>long</code>型的，表示<code>int</code>我们可以什么都不用加，但是如果要表示<code>long</code>型的，就一定要在数据后面加<code>“L”</code>。</p>\n<p>浮点型 <code>float</code>和<code>double</code>是表示浮点型的数据类型，他们之间的区别在于他们的精确度不同</p>\n<ul>\n<li><code>float</code> <code>3.402823e+38 ~ 1.401298e-45</code>（<code>e+38</code>表示是乘以<code>10</code>的<code>38</code>次方，同样，<code>e-45</code>表示乘以<code>10</code>的负<code>45</code>次方）, 占用<code>4个字节 </code></li>\n<li><code>double</code> <code>1.797693e+308 ~ 4.9000000e-324</code> 占用<code>8个字节</code> . <code>double</code>型比<code>float</code>型存储范围更大，精度更高，所以通常的浮点型的数据在不声明的情况下都是<code>double</code>型的，如果要表示一个数据是<code>float</code>型的，可以在数据后面加上<code>“F”</code>。 浮点型的数据是不能完全精确的，所以有的时候在计算的时候可能会在小数点最后几位出现浮动，这是正常的。</li>\n<li><code>boolean</code>型（布尔型） 这个类型只有两个值，<code>true</code>和<code>false</code>（真和非真） <code>boolean t = true</code>； <code>boolean f = false；</code></li>\n<li><code>char</code>型（文本型） 用于存放字符的数据类型，占用<code>2个字节</code>，采用<code>unicode</code>编码，它的前<code>128字节</code>编码与<code>ASCII</code>兼容 字符的存储范围在<code>\\u0000~\\uFFFF</code>，在定义字符型的数据时候要注意加<code>&#39; &#39;</code>，比如<code> &#39;1&#39;</code>表示字符<code>&#39;1&#39;</code>而不是数值<code>1</code><ul>\n<li><code>char c = &#39; 1 &#39;</code>; 我们试着输出<code>c</code>看看，<code>System.out.println(c)</code>;</li>\n<li>结果就是<code>1</code></li>\n<li>而如果我们这样输出呢<code>System.out.println(c+0)</code>; 结果却变成了<code>49</code>。 如果我们这样定义<code>c</code>看看 <code>char c = &#39; \\u0031 &#39;</code>;</li>\n<li>输出的结果仍然是<code>1</code>，</li>\n<li>这是因为字符<code>&#39;1&#39;</code>对应着unicode编码就是<code>\\u0031</code>, <code>char c1 = &#39;h&#39;</code>,<code>c2 = &#39;e&#39;</code>,<code>c3=&#39;l&#39;</code>,<code>c4=&#39;l&#39;</code>,<code>c5 = &#39;o&#39;</code>;</li>\n<li><code> System.out.print(c1);</code> <code>System.out.print(c2);</code> <code>System.out.print(c3);</code> <code>System.out.print(c4);</code> <code>Sytem.out.print(c5);</code></li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimitiveTypeTest</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// byte  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// short  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// int  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// long  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// float  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// double  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// char  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Character.MIN_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"keyword\">int</span>) Character.MIN_VALUE);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Character.MAX_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"keyword\">int</span>) Character.MAX_VALUE);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型：<span class=\"keyword\">byte</span> 二进制位数：<span class=\"number\">8</span></span><br><span class=\"line\">包装类：java.lang.Byte</span><br><span class=\"line\">最小值：Byte.MIN_VALUE=-<span class=\"number\">128</span></span><br><span class=\"line\">最大值：Byte.MAX_VALUE=<span class=\"number\">127</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">short</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Short</span><br><span class=\"line\">最小值：Short.MIN_VALUE=-<span class=\"number\">32768</span></span><br><span class=\"line\">最大值：Short.MAX_VALUE=<span class=\"number\">32767</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">int</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Integer</span><br><span class=\"line\">最小值：Integer.MIN_VALUE=-<span class=\"number\">2147483648</span></span><br><span class=\"line\">最大值：Integer.MAX_VALUE=<span class=\"number\">2147483647</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">long</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Long</span><br><span class=\"line\">最小值：Long.MIN_VALUE=-<span class=\"number\">9223372036854775808</span></span><br><span class=\"line\">最大值：Long.MAX_VALUE=<span class=\"number\">9223372036854775807</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">float</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Float</span><br><span class=\"line\">最小值：Float.MIN_VALUE=<span class=\"number\">1.4E-45</span></span><br><span class=\"line\">最大值：Float.MAX_VALUE=<span class=\"number\">3.4028235E38</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">double</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Double</span><br><span class=\"line\">最小值：Double.MIN_VALUE=<span class=\"number\">4.9E-324</span></span><br><span class=\"line\">最大值：Double.MAX_VALUE=<span class=\"number\">1.7976931348623157E308</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">char</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Character</span><br><span class=\"line\">最小值：Character.MIN_VALUE=<span class=\"number\">0</span></span><br><span class=\"line\">最大值：Character.MAX_VALUE=<span class=\"number\">65535</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": [
                "Java",
                "Java面试",
                "操作系统"
            ]
        }
    ]
}