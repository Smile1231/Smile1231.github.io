{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"事务\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/4ca5bfdf/",
            "url": "https://smile1231.github.io/posts/4ca5bfdf/",
            "title": "Spring手动回滚事务",
            "date_published": "2021-12-16T10:49:45.000Z",
            "content_html": "<p>转载<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbXlpdG5ld3MvcC8xMzM3MDg5OS5odG1s\">https://www.cnblogs.com/myitnews/p/13370899.html</span></p>\n<p>这边是讲解如何手动回滚事务</p>\n<span id=\"more\"></span>\n<h1 id=\"一、手动回滚事务\"><a href=\"#一、手动回滚事务\" class=\"headerlink\" title=\"一、手动回滚事务\"></a>一、手动回滚事务</h1><p>有时我们需要捕获一些错误信息，又需要进行事务回滚，这时我们就需要用到<code>Spring</code>提供的事务切面支持类<code>TransactionAspectSupport</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveEntity</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        userDao.saveUser();</span><br><span class=\"line\">        studentDao.saveStudent();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异常了=====&quot;</span> + e);</span><br><span class=\"line\">        <span class=\"comment\">//手动强制回滚事务，这里一定要第一时间处理</span></span><br><span class=\"line\">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>手动回滚事务一定要加上<code>@Transactional</code>，不然会报以下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.transaction.NoTransactionException: No transaction aspect-managed TransactionStatus in scope</span><br></pre></td></tr></table></figure>\n<p>想想也是，不开启事务，何来手动回滚，所以<code>@Transactional</code>必不可少。</p>\n<h1 id=\"二、回滚部分异常\"><a href=\"#二、回滚部分异常\" class=\"headerlink\" title=\"二、回滚部分异常\"></a>二、回滚部分异常</h1><p>使用<code>Object savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint()</code>; 设置回滚点。<br>使用<code>TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint)</code>; 回滚到<code>savePoint</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveEntity</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Object savePoint = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        userDao.saveUser();</span><br><span class=\"line\">        <span class=\"comment\">//设置回滚点</span></span><br><span class=\"line\">        savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint();</span><br><span class=\"line\">        studentDao.saveStudent(); <span class=\"comment\">//执行成功</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>/<span class=\"number\">0</span>; <span class=\"comment\">//这里因为除数0会报异常,进入catch块</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异常了=====&quot;</span> + e);</span><br><span class=\"line\">        <span class=\"comment\">//手工回滚异常</span></span><br><span class=\"line\">        TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、DataSourceTransactionManager\"><a href=\"#三、DataSourceTransactionManager\" class=\"headerlink\" title=\"三、DataSourceTransactionManager\"></a>三、<code>DataSourceTransactionManager</code></h1><p><code>spring</code> 开启事务以及手动提交事务，可以在服务类上加上两个注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">DataSourceTransactionManager dataSourceTransactionManager;</span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">TransactionDefinition transactionDefinition;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>手动开启事务<br>  <code>TransactionStatus transactionStatus = dataSourceTransactionManager.getTransaction(transactionDefinition);</code></li>\n<li>手动提交事务<br>  <code>dataSourceTransactionManager.commit(transactionStatus);//提交</code></li>\n<li>手动回滚事务<br>  <code>dataSourceTransactionManager.rollback(transactionStatus);</code>//最好是放在<code>catch</code> 里面,防止程序异常而事务一直卡在哪里未提交</li>\n</ul>\n",
            "tags": [
                "Java",
                "Spring",
                "事务"
            ]
        }
    ]
}