{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"jenkins\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/d05062ae/",
            "url": "https://smile1231.github.io/posts/d05062ae/",
            "title": "Java 操作Jenkins",
            "date_published": "2022-08-10T16:47:15.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamVua2lucy5pby9kb2MvYm9vay91c2luZy9yZW1vdGUtYWNjZXNzLWFwaS8=\">Jenkins-WIKI</span></p>\n<p>参考文章: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5teWRscS5jbHViL2FydGljbGUvMjMv\">利用 Java 操作 Jenkins API 实现对 Jenkins 的控制详解</span></p>\n",
            "tags": [
                "Java",
                "Jenkins",
                "CI/CD"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/171f1b7f/",
            "url": "https://smile1231.github.io/posts/171f1b7f/",
            "title": "Jenkins/CICD",
            "date_published": "2022-08-08T14:40:05.000Z",
            "content_html": "<p><a href=\"https://smile1231.github.io/posts/11faeb76/\"> <code>Docker</code>  中安装 <code>Jenkins</code> </a></p>\n<p><a href=\"https://www.cnblogs.com/yungyu16/p/12928802.html#%E6%93%8D%E4%BD%9C%E4%BB%BB%E5%8A%A1\"> <code>Java</code>  操作 <code>Jenkins</code>  参考</a></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pY29kZS5iZXN0L2kvODI4MDAwNDYwNDU0MDk=\">参考文章</span></p>\n<p>完成 <code>jenkins</code>  在 docker 中的启动安装对应的插件之后</p>\n<p>由于我是使用的 <code>docker</code>  启动的 <code>Jenkins</code> , 所以需要在容器中装相应的环境： <code>jdk</code> , <code>maven</code> , <code>git</code>  等等</p>\n<p>进入容器内部: <code>docker exec -u root -it myJenkins10242 bash</code></p>\n<h2 id=\"安装vim\"><a class=\"markdownIt-Anchor\" href=\"#安装vim\">#</a> 安装 <code>vim</code></h2>\n<blockquote>\n<p>在这之前需要对 <code>apt</code>  进行一下升级</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n<p>安装指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install vim</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/171f1b7f/2022-08-10-23-41-19.png\" class=\"\">\n<h2 id=\"安装jdk\"><a class=\"markdownIt-Anchor\" href=\"#安装jdk\">#</a> 安装 <code>jdk</code></h2>\n<p>这里只讲解手动安装</p>\n<p>查看架构，下载 arm64 版本的 jdk，这里下载 jdk11，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamRrMTEtYXJjaGl2ZS1kb3dubG9hZHMuaHRtbCNsaWNlbnNlLWxpZ2h0Ym94\">jdk 11 aarch64_bin.tar.gz</span></p>\n<img data-src=\"/posts/171f1b7f/2022-08-10-22-18-27.png\" class=\"\">\n<p>我这边将包放在了 <code>docker</code>  的挂载目录上</p>\n<img data-src=\"/posts/171f1b7f/2022-08-10-23-52-53.png\" class=\"\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf jdk-11.0.15_linux-aarch64_bin.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量</span></span><br><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在最后加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/var/jenkins_home/install_package/jdk-11.0.15/</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n<p>最后： <code>source /etc/profile</code>  即可</p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-02-07.png\" class=\"\">\n<h2 id=\"安装maven\"><a class=\"markdownIt-Anchor\" href=\"#安装maven\">#</a> 安装 <code>maven</code></h2>\n<p>安装 <code>maven</code>  的方法也类似，下载版本为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNoaXZlLmFwYWNoZS5vcmcvZGlzdC9tYXZlbi9tYXZlbi0zLzMuNS40L2JpbmFyaWVzL2FwYWNoZS1tYXZlbi0zLjUuNC1iaW4udGFyLmd6\"> maven-3.5.4</span></p>\n<p>依然放在了挂在目录中的 <code>install_package</code>  中</p>\n<p>解压： <code>tar -zxvf apache-maven-3.5.4-bin.tar.gz</code></p>\n<p>配置环境变量:  <code>vim /etc/profile</code> <br>\n 加上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> MAVEN_HOME=/var/jenkins_home/install_package/apache-maven-3.5.4</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$MAVEN_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n<p>最后： <code>source /etc/profile</code>  即可</p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-06-59.png\" class=\"\">\n<h2 id=\"git\"><a class=\"markdownIt-Anchor\" href=\"#git\">#</a>  <code>Git</code></h2>\n<p>容器中自带了 <code>git</code> ，所以无需安装，但是需要查看路径:  <code>which git</code> ，路径为： <code>/usr/bin/git</code></p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-10-10.png\" class=\"\">\n<h2 id=\"配置jenkins\"><a class=\"markdownIt-Anchor\" href=\"#配置jenkins\">#</a> 配置 <code>Jenkins</code></h2>\n<p>打开 <code>Global Tool Configuration</code> :</p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-12-49.png\" class=\"\">\n<p>这边是配置 <code>maven</code>  中的 <code>settings</code>  文件地址，我地址为： <code>/var/jenkins_home/install_package/apache-maven-3.5.4/conf/settings.xml</code></p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-15-24.png\" class=\"\">\n<p>分别配置上 <code>jdk</code> , <code>git</code> , <code>maven</code>  的本地目录，然后 <code>Apply</code>  和 <code>Save</code> ：</p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-17-12.png\" class=\"\">\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-17-47.png\" class=\"\">\n<h2 id=\"安装plugin\"><a class=\"markdownIt-Anchor\" href=\"#安装plugin\">#</a> 安装 <code>plugin</code></h2>\n<p>我们会发现新建一个 <code>Item</code>  是没有 <code>Maven</code>  项目的，需要安装一下对应的插件: <code>Maven Integration</code></p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-20-56.png\" class=\"\">\n<p>等待安装完成即可</p>\n<h2 id=\"maven项目部署测试\"><a class=\"markdownIt-Anchor\" href=\"#maven项目部署测试\">#</a>  <code>Maven</code>  项目部署测试</h2>\n<h3 id=\"新建一个maven名字自取\"><a class=\"markdownIt-Anchor\" href=\"#新建一个maven名字自取\">#</a> 新建一个 <code>Maven</code> ，名字自取</h3>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-22-22.png\" class=\"\">\n<h3 id=\"项目描述\"><a class=\"markdownIt-Anchor\" href=\"#项目描述\">#</a> 项目描述：</h3>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-26-00.png\" class=\"\">\n<h3 id=\"配置github\"><a class=\"markdownIt-Anchor\" href=\"#配置github\">#</a> 配置 <code>github</code></h3>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-29-23.png\" class=\"\">\n<blockquote>\n<p>关于 <code>GitHub</code>  凭证配置</p>\n</blockquote>\n<p>配置地址：  <code>https://github.com/settings/tokens</code></p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-30-37.png\" class=\"\">\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-31-02.png\" class=\"\">\n<p>将生成的 <code>token</code>  记载到本地</p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-31-43.png\" class=\"\">\n<blockquote>\n<p><code>Jenkins</code>  添加凭据</p>\n</blockquote>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-33-43.png\" class=\"\">\n<h3 id=\"github访问超时时间\"><a class=\"markdownIt-Anchor\" href=\"#github访问超时时间\">#</a>  <code>github</code>  访问超时时间</h3>\n<p>检出超时时间：</p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-34-52.png\" class=\"\">\n<p><code>clone</code>  超时时间：</p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-36-01.png\" class=\"\">\n<h3 id=\"build阶段\"><a class=\"markdownIt-Anchor\" href=\"#build阶段\">#</a>  <code>Build</code>  阶段</h3>\n<p><code>clean package -Dmaven.test.skip=true -Prd -U</code></p>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-39-04.png\" class=\"\">\n<h3 id=\"配置构建项目后执行的shell脚本\"><a class=\"markdownIt-Anchor\" href=\"#配置构建项目后执行的shell脚本\">#</a> 配置构建项目后执行的 <code>Shell</code>  脚本</h3>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-42-20.png\" class=\"\">\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#输入Maven打包后的项目名称</span></span><br><span class=\"line\">app=xxx-0.0.1-SNAPSHOT</span><br><span class=\"line\"><span class=\"comment\">#项目移动的目的地址</span></span><br><span class=\"line\">path=/usr/xxx</span><br><span class=\"line\"><span class=\"built_in\">echo</span> this is app : <span class=\"variable\">$app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#若项目已启动，杀死旧进程</span></span><br><span class=\"line\">api_pid=`ps -ef | grep <span class=\"string\">&quot;<span class=\"variable\">$app</span>.jar&quot;</span> | grep -v grep | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> api_pid = <span class=\"variable\">$api_pid</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$api_pid</span>&quot;</span> != <span class=\"string\">&quot;&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"built_in\">kill</span> api</span><br><span class=\"line\">        <span class=\"built_in\">kill</span> -9 <span class=\"variable\">$api_pid</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> sleep 3s</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> sleep 2s</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> sleep 1s</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#将jar包从jenkins工作空间中移动到指定路径下</span></span><br><span class=\"line\">mv /root/.jenkins/workspace/项目名/target/<span class=\"variable\">$app</span>.jar <span class=\"variable\">$path</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#防止进程被杀死</span></span><br><span class=\"line\">BUILD_ID=dontKillMe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#后台进程形式启动项目，日志文件为out.log</span></span><br><span class=\"line\">nohup java -jar <span class=\"variable\">$app</span>.jar &gt;&gt; out.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$app</span> start success</span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"jenkins运行\"><a class=\"markdownIt-Anchor\" href=\"#jenkins运行\">#</a>  <code>Jenkins</code>  运行</h2>\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-43-49.png\" class=\"\">\n<img data-src=\"/posts/171f1b7f/2022-08-11-00-45-15.png\" class=\"\">\n",
            "tags": [
                "Jenkins",
                "CI/CD"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/273d98ce/",
            "url": "https://smile1231.github.io/posts/273d98ce/",
            "title": "The learning of Jenkins Grammer",
            "date_published": "2022-07-10T05:44:11.000Z",
            "content_html": "<p>Recently , i use jenkinsFile to realize some function</p>\n<h2 id=\"处理json\"><a class=\"markdownIt-Anchor\" href=\"#处理json\">#</a> 处理 <code>JSON</code></h2>\n<h2 id=\"压缩方法\"><a class=\"markdownIt-Anchor\" href=\"#压缩方法\">#</a> 压缩方法</h2>\n<p>可能是自带的方法</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip <span class=\"attr\">zipFile:</span> <span class=\"string\">&#x27;&lt;zipFileName&gt;&#x27;</span>, <span class=\"attr\">archive:</span> <span class=\"literal\">true</span>, <span class=\"attr\">glob:</span> <span class=\"string\">&#x27;&lt;file_path&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example： zip zipFile: &#x27;upload.zip&#x27;, archive: true, glob: &#x27;/binary/&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"json操作\"><a class=\"markdownIt-Anchor\" href=\"#json操作\">#</a>  <code>JSON</code>  操作</h2>\n<blockquote>\n<p>读取：从文件中读取   <code>JSON</code>  字符串，并直接解析为对象</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从文件中读取</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> dataObject = readJSON <span class=\"attr\">file:</span> <span class=\"string\">&#x27;message2.json&#x27;</span></span><br><span class=\"line\">echo <span class=\"string\">&quot;color: $&#123;dataObject.attachments[0].color&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从文本中读取</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> dataObject = readJSON <span class=\"attr\">text:</span> <span class=\"string\">&#x27;message2.json&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>写入文件</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//保存：将对象直接写入文件，无需先转化为 JSON 字符串</span></span><br><span class=\"line\"><span class=\"comment\">// Building json from code and write it to file</span></span><br><span class=\"line\">writeJSON(<span class=\"attr\">file:</span> <span class=\"string\">&#x27;message1.json&#x27;</span>, <span class=\"attr\">json:</span> dataObject)</span><br></pre></td></tr></table></figure>\n<h2 id=\"groovy获取shell执行结果和执行状态码\"><a class=\"markdownIt-Anchor\" href=\"#groovy获取shell执行结果和执行状态码\">#</a> groovy 获取 shell 执行结果和执行状态码</h2>\n<blockquote>\n<p>获取执行结果</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;shell command&quot;</span>, <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>获取执行状态码（0 或者非 0）</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">excuteCode = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;shell command&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"jenkins声明式pipeline中单引号和双引号的区别\"><a class=\"markdownIt-Anchor\" href=\"#jenkins声明式pipeline中单引号和双引号的区别\">#</a>  <code>Jenkins</code>  声明式 <code>Pipeline</code>  中单引号和双引号的区别</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzE5MzkyL2FydGljbGUvZGV0YWlscy8xMjE0NzI4OTQ=\">原文地址</span></p>\n<ol>\n<li>\n<p>如果使用三个单引号，那么其中的字符，除了 <code>'\\'</code>  会被解析为转义字符外，其他都会被原封不动地传递给 <code>P</code> owershell`，不作任何解析</p>\n</li>\n<li>\n<p>如果使用三个双引号，则绝大部分字符也会被原封不动地传递给 <code>Powershel</code> l，但如下三个字符除外：</p>\n<p>①  <code>'$'</code> （美元字符） <code>：</code> 用于引用 <code>Jenkinsfile</code>  中的环境变量。</p>\n<p>②  <code>'\\'</code> （反斜杠字符） <code>：</code> 用于转义。</p>\n<p>③  <code>' &quot; '</code> （双引号字符）：本身无特殊含义，但是三个双引号之间不允许出现非转义的双引号字符，否则将导致语法错误。</p>\n</li>\n</ol>\n<p>如果确实需要使用上述三个字符本身，而不是使用其特殊含义，则必须在前面加上 <code>'\\'</code>  字符进行转义，即： <code>'\\$'</code> 、 <code>'\\\\'</code> 、 <code>'\\&quot;'</code> 。</p>\n<blockquote>\n<p>总结 <code>：</code></p>\n</blockquote>\n<p>三单引号的优点是，语法简洁，不存在过多转义；缺点是，无法引用 <code>Jenkins</code>  中的环境变量。而三双引号的优缺点与此正好相反。</p>\n<p>个人对于使用三双引号的建议是：仅在必须声明和引用 <code>Powershell</code>  变量（而非 <code>Jenkins</code>  环境变量）时，才使用三单引号或三双引号。其他时候，每一条命令都应拆分，并以 <code>powershell</code>  开头。这样做的好处是便于调试（尤其是使用 <code>Blue Ocean</code>  调试时）。在这一前提下，如果需要在三引号中引用 <code>Jenkins</code>  环境变量，则必须使用三双引号；否则，使用三单引号表达更为简洁。</p>\n<h2 id=\"jenkins-pipeline中获取shell命令的标准输出或者状态\"><a class=\"markdownIt-Anchor\" href=\"#jenkins-pipeline中获取shell命令的标准输出或者状态\">#</a>  <code>jenkins pipeline</code>  中获取 <code>shell</code>  命令的标准输出或者状态</h2>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取标准输出</span></span><br><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\">result = sh <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span> ,<span class=\"attr\">script:</span> <span class=\"string\">&quot;&lt;shell command&gt;&quot;</span></span><br><span class=\"line\">result = result.trim()</span><br><span class=\"line\"><span class=\"comment\">//第二种</span></span><br><span class=\"line\">result = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;&lt;shell command&gt;&quot;</span>, <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span>).trim()</span><br><span class=\"line\"><span class=\"comment\">//第三种</span></span><br><span class=\"line\">sh <span class=\"string\">&quot;&lt;shell command&gt; &gt; commandResult&quot;</span></span><br><span class=\"line\">result = readFile(<span class=\"string\">&#x27;commandResult&#x27;</span>).trim()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取执行状态</span></span><br><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\">result = sh <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span> ,<span class=\"attr\">script:</span> <span class=\"string\">&quot;&lt;shell command&gt;&quot;</span></span><br><span class=\"line\">result = result.trim()</span><br><span class=\"line\"><span class=\"comment\">//第二种</span></span><br><span class=\"line\">result = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;&lt;shell command&gt;&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>).trim()</span><br><span class=\"line\"><span class=\"comment\">//第三种</span></span><br><span class=\"line\">sh <span class=\"string\">&#x27;&lt;shell command&gt;; echo $? &gt; status&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> r = readFile(<span class=\"string\">&#x27;status&#x27;</span>).trim()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//无需返回值，仅执行shell命令</span></span><br><span class=\"line\"><span class=\"comment\">//最简单的方式</span></span><br><span class=\"line\">sh <span class=\"string\">&#x27;&lt;shell command&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<blockquote>\n<p>工作中需要获取 <code>shell </code> 命令的执行状态，返回 0 或者非 0<br>\n <code>groovy</code>  语句写法为：</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> exitValue = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;grep -i &#x27;xxx&#x27; /etc/myfolder&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\">echo <span class=\"string\">&quot;return exitValue :$&#123;exitValue&#125;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(exitValue != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    执行操作</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果 <code>grep</code>  命令执行没有报错，正常情况下 <code>exitValue</code>  为 <code>0</code> ，报错则为非 <code>0</code></p>\n<p>需要注意的是当命令中存在重定向的时候，会出现返回状态异常，因为我们要返回状态，删除重定向（ <code>&amp;&gt;/dev/null</code> ）即可，比如：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> exitValue = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;grep -i &#x27;xxx&#x27; /etc/myfolder &amp;&gt;/dev/null&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\">xxx不存在，正常逻辑是返回非<span class=\"number\">0</span>，但是实际中返回的是<span class=\"number\">0</span> 。可以理解为先执行命令然后赋值操作，类似下面的动作：（个人理解）</span><br><span class=\"line\">sh <span class=\"string\">&quot;ls -l &gt; commandResult&quot;</span></span><br><span class=\"line\">result = readFile(<span class=\"string\">&#x27;commandResult&#x27;</span>).trim()</span><br></pre></td></tr></table></figure>\n<p><code>groovy</code>  中存在另外一种解析 <code>shell</code>  脚本的方法，在 <code>jenkins pipeline</code>  中会使用会报异常， <code>jenkins</code>  相关资料中也没有看到此种用法，应该是不支持</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groovy<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.MissingPropertyException</span>: No such property: rhel <span class=\"keyword\">for</span> class: groovy<span class=\"selector-class\">.lang</span>.Binding</span><br></pre></td></tr></table></figure>\n<p>写法为：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> command = <span class=\"string\">&quot;git log&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> proc = command.execute()</span><br><span class=\"line\">proc.waitFor()</span><br><span class=\"line\"><span class=\"keyword\">def</span> status = proc.exitValue()</span><br></pre></td></tr></table></figure>\n<h2 id=\"pipleline讲解\"><a class=\"markdownIt-Anchor\" href=\"#pipleline讲解\">#</a>  <code>pipleline</code>  讲解</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * agent none ，这样可以在具体的stages中定义</span><br><span class=\"line\">agent：指定流水线的执行位置，流水线中的每个阶段都必须在某个地方（物理机，虚拟机或 Docker 容器）执行，agent 部分即指定具体在哪里执行。</span><br><span class=\"line\">    */</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">    *说明某项目要在jdk8的环境中创建</span><br><span class=\"line\">    *实际上agent &#123; label <span class=\"string\">&#x27;jdk8&#x27;</span> &#125;是 agent &#123; node &#123; label <span class=\"string\">&#x27;jdk8&#x27;</span> &#125; &#125; 的简写。 </span><br><span class=\"line\">    */</span><br><span class=\"line\">    label <span class=\"string\">&#x27;jdk8&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /*</span><br><span class=\"line\">  environment指令指定一系列键值对，这些对值将被定义为所有步骤的环境变量或阶段特定步骤</span><br><span class=\"line\"></span><br><span class=\"line\">environment&#123;…&#125;, 大括号里面写一些键值对，也就是定义一些变量并赋值，这些变量就是环境变量。环境变量的作用范围，取决你environment&#123;…&#125;所写的位置，你可以写在顶层环境变量，让所有的stage下的step共享这些变量，也可以单独定义在某一个stage下，只能供这个stage去调用变量，其他的stage不能共享这些变量。一般来说，我们基本上上定义全局环境变量，如果是局部环境变量，我们直接用def关键字声明就可以，没必要放environment&#123;…&#125;里面。</span><br><span class=\"line\">*/</span><br><span class=\"line\">  environment&#123;</span><br><span class=\"line\">    project = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    staticname = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    appname= <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    version=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">//  需要配置jdk环境，那这个里面的jdk环境与agent label有啥区别</span><br><span class=\"line\">tools&#123;</span><br><span class=\"line\">   jdk <span class=\"string\">&#x27;jdk1.8.0_121&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 定义阶段，可以设置并行和串行，默认情况就是串行的，默认的如下举例</span><br><span class=\"line\">/**</span><br><span class=\"line\">* stage(<span class=\"string\">&#x27;Parallel Stage&#x27;</span>) &#123;</span><br><span class=\"line\">*           failFast <span class=\"literal\">true</span></span><br><span class=\"line\">*            parallel &#123;</span><br><span class=\"line\">*                stage(<span class=\"string\">&#x27;并行一&#x27;</span>) &#123;</span><br><span class=\"line\">*                    steps &#123;</span><br><span class=\"line\">*                        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;并行一&quot;</span></span><br><span class=\"line\">*                    &#125;</span><br><span class=\"line\">*                stage(<span class=\"string\">&#x27;并行2&#x27;</span>) &#123;</span><br><span class=\"line\">*                    steps &#123;</span><br><span class=\"line\">*                        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;并行2&quot;</span></span><br><span class=\"line\">*                    &#125;</span><br><span class=\"line\">*            &#125;</span><br><span class=\"line\">*&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">**/</span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">     stage (<span class=\"string\">&#x27;build&#x27;</span>) &#123;</span><br><span class=\"line\">         steps &#123;</span><br><span class=\"line\">            <span class=\"built_in\">echo</span> <span class=\"string\">&#x27;build&#x27;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Jenkins",
                "Groovy"
            ]
        }
    ]
}