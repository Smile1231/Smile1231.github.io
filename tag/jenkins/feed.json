{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"jenkins\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/273d98ce/",
            "url": "https://smile1231.github.io/posts/273d98ce/",
            "title": "The learning of Jenkins Grammer",
            "date_published": "2022-07-10T05:44:11.000Z",
            "content_html": "<p>Recently , i use jenkinsFile to realize some function</p>\n<h2 id=\"处理json\"><a class=\"markdownIt-Anchor\" href=\"#处理json\">#</a> 处理 <code>JSON</code></h2>\n<h2 id=\"压缩方法\"><a class=\"markdownIt-Anchor\" href=\"#压缩方法\">#</a> 压缩方法</h2>\n<p>可能是自带的方法</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip <span class=\"attr\">zipFile:</span> <span class=\"string\">&#x27;&lt;zipFileName&gt;&#x27;</span>, <span class=\"attr\">archive:</span> <span class=\"literal\">true</span>, <span class=\"attr\">glob:</span> <span class=\"string\">&#x27;&lt;file_path&gt;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example： zip zipFile: &#x27;upload.zip&#x27;, archive: true, glob: &#x27;/binary/&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"json操作\"><a class=\"markdownIt-Anchor\" href=\"#json操作\">#</a>  <code>JSON</code>  操作</h2>\n<blockquote>\n<p>读取：从文件中读取   <code>JSON</code>  字符串，并直接解析为对象</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从文件中读取</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> dataObject = readJSON <span class=\"attr\">file:</span> <span class=\"string\">&#x27;message2.json&#x27;</span></span><br><span class=\"line\">echo <span class=\"string\">&quot;color: $&#123;dataObject.attachments[0].color&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从文本中读取</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> dataObject = readJSON <span class=\"attr\">text:</span> <span class=\"string\">&#x27;message2.json&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>写入文件</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//保存：将对象直接写入文件，无需先转化为 JSON 字符串</span></span><br><span class=\"line\"><span class=\"comment\">// Building json from code and write it to file</span></span><br><span class=\"line\">writeJSON(<span class=\"attr\">file:</span> <span class=\"string\">&#x27;message1.json&#x27;</span>, <span class=\"attr\">json:</span> dataObject)</span><br></pre></td></tr></table></figure>\n<h2 id=\"groovy获取shell执行结果和执行状态码\"><a class=\"markdownIt-Anchor\" href=\"#groovy获取shell执行结果和执行状态码\">#</a> groovy 获取 shell 执行结果和执行状态码</h2>\n<blockquote>\n<p>获取执行结果</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;shell command&quot;</span>, <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>获取执行状态码（0 或者非 0）</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">excuteCode = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;shell command&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"jenkins声明式pipeline中单引号和双引号的区别\"><a class=\"markdownIt-Anchor\" href=\"#jenkins声明式pipeline中单引号和双引号的区别\">#</a>  <code>Jenkins</code>  声明式 <code>Pipeline</code>  中单引号和双引号的区别</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzE5MzkyL2FydGljbGUvZGV0YWlscy8xMjE0NzI4OTQ=\">原文地址</span></p>\n<ol>\n<li>\n<p>如果使用三个单引号，那么其中的字符，除了 <code>'\\'</code>  会被解析为转义字符外，其他都会被原封不动地传递给 <code>P</code> owershell`，不作任何解析</p>\n</li>\n<li>\n<p>如果使用三个双引号，则绝大部分字符也会被原封不动地传递给 <code>Powershel</code> l，但如下三个字符除外：</p>\n<p>①  <code>'$'</code> （美元字符） <code>：</code> 用于引用 <code>Jenkinsfile</code>  中的环境变量。</p>\n<p>②  <code>'\\'</code> （反斜杠字符） <code>：</code> 用于转义。</p>\n<p>③  <code>' &quot; '</code> （双引号字符）：本身无特殊含义，但是三个双引号之间不允许出现非转义的双引号字符，否则将导致语法错误。</p>\n</li>\n</ol>\n<p>如果确实需要使用上述三个字符本身，而不是使用其特殊含义，则必须在前面加上 <code>'\\'</code>  字符进行转义，即： <code>'\\$'</code> 、 <code>'\\\\'</code> 、 <code>'\\&quot;'</code> 。</p>\n<blockquote>\n<p>总结 <code>：</code></p>\n</blockquote>\n<p>三单引号的优点是，语法简洁，不存在过多转义；缺点是，无法引用 <code>Jenkins</code>  中的环境变量。而三双引号的优缺点与此正好相反。</p>\n<p>个人对于使用三双引号的建议是：仅在必须声明和引用 <code>Powershell</code>  变量（而非 <code>Jenkins</code>  环境变量）时，才使用三单引号或三双引号。其他时候，每一条命令都应拆分，并以 <code>powershell</code>  开头。这样做的好处是便于调试（尤其是使用 <code>Blue Ocean</code>  调试时）。在这一前提下，如果需要在三引号中引用 <code>Jenkins</code>  环境变量，则必须使用三双引号；否则，使用三单引号表达更为简洁。</p>\n<h2 id=\"jenkins-pipeline中获取shell命令的标准输出或者状态\"><a class=\"markdownIt-Anchor\" href=\"#jenkins-pipeline中获取shell命令的标准输出或者状态\">#</a>  <code>jenkins pipeline</code>  中获取 <code>shell</code>  命令的标准输出或者状态</h2>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取标准输出</span></span><br><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\">result = sh <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span> ,<span class=\"attr\">script:</span> <span class=\"string\">&quot;&lt;shell command&gt;&quot;</span></span><br><span class=\"line\">result = result.trim()</span><br><span class=\"line\"><span class=\"comment\">//第二种</span></span><br><span class=\"line\">result = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;&lt;shell command&gt;&quot;</span>, <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span>).trim()</span><br><span class=\"line\"><span class=\"comment\">//第三种</span></span><br><span class=\"line\">sh <span class=\"string\">&quot;&lt;shell command&gt; &gt; commandResult&quot;</span></span><br><span class=\"line\">result = readFile(<span class=\"string\">&#x27;commandResult&#x27;</span>).trim()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取执行状态</span></span><br><span class=\"line\"><span class=\"comment\">//第一种</span></span><br><span class=\"line\">result = sh <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span> ,<span class=\"attr\">script:</span> <span class=\"string\">&quot;&lt;shell command&gt;&quot;</span></span><br><span class=\"line\">result = result.trim()</span><br><span class=\"line\"><span class=\"comment\">//第二种</span></span><br><span class=\"line\">result = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;&lt;shell command&gt;&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>).trim()</span><br><span class=\"line\"><span class=\"comment\">//第三种</span></span><br><span class=\"line\">sh <span class=\"string\">&#x27;&lt;shell command&gt;; echo $? &gt; status&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> r = readFile(<span class=\"string\">&#x27;status&#x27;</span>).trim()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//无需返回值，仅执行shell命令</span></span><br><span class=\"line\"><span class=\"comment\">//最简单的方式</span></span><br><span class=\"line\">sh <span class=\"string\">&#x27;&lt;shell command&gt;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<blockquote>\n<p>工作中需要获取 <code>shell </code> 命令的执行状态，返回 0 或者非 0<br>\n <code>groovy</code>  语句写法为：</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> exitValue = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;grep -i &#x27;xxx&#x27; /etc/myfolder&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\">echo <span class=\"string\">&quot;return exitValue :$&#123;exitValue&#125;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(exitValue != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    执行操作</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果 <code>grep</code>  命令执行没有报错，正常情况下 <code>exitValue</code>  为 <code>0</code> ，报错则为非 <code>0</code></p>\n<p>需要注意的是当命令中存在重定向的时候，会出现返回状态异常，因为我们要返回状态，删除重定向（ <code>&amp;&gt;/dev/null</code> ）即可，比如：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> exitValue = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;grep -i &#x27;xxx&#x27; /etc/myfolder &amp;&gt;/dev/null&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>)</span><br><span class=\"line\">xxx不存在，正常逻辑是返回非<span class=\"number\">0</span>，但是实际中返回的是<span class=\"number\">0</span> 。可以理解为先执行命令然后赋值操作，类似下面的动作：（个人理解）</span><br><span class=\"line\">sh <span class=\"string\">&quot;ls -l &gt; commandResult&quot;</span></span><br><span class=\"line\">result = readFile(<span class=\"string\">&#x27;commandResult&#x27;</span>).trim()</span><br></pre></td></tr></table></figure>\n<p><code>groovy</code>  中存在另外一种解析 <code>shell</code>  脚本的方法，在 <code>jenkins pipeline</code>  中会使用会报异常， <code>jenkins</code>  相关资料中也没有看到此种用法，应该是不支持</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groovy<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.MissingPropertyException</span>: No such property: rhel <span class=\"keyword\">for</span> class: groovy<span class=\"selector-class\">.lang</span>.Binding</span><br></pre></td></tr></table></figure>\n<p>写法为：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> command = <span class=\"string\">&quot;git log&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> proc = command.execute()</span><br><span class=\"line\">proc.waitFor()</span><br><span class=\"line\"><span class=\"keyword\">def</span> status = proc.exitValue()</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Jenkins",
                "Groovy"
            ]
        }
    ]
}