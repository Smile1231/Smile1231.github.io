<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>JIN MAO &#39;s Blog • Posts by &#34;执行计划&#34; tag</title>
        <link>https://smile1231.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Mon, 08 Nov 2021 16:54:09 +0800</pubDate>
        <lastBuildDate>Mon, 08 Nov 2021 16:54:09 +0800</lastBuildDate>
        <category>Java</category>
        <category>Cache</category>
        <category>Cookie</category>
        <category>Session</category>
        <category>Java面试</category>
        <category>SAP</category>
        <category>Corn</category>
        <category>生物信息</category>
        <category>基因编辑</category>
        <category>前端</category>
        <category>Css</category>
        <category>Docker</category>
        <category>DDD</category>
        <category>领域驱动设计</category>
        <category>FastJson</category>
        <category>blog</category>
        <category>hexo</category>
        <category>next</category>
        <category>DisPlay属性</category>
        <category>IDEA</category>
        <category>SpringBoot</category>
        <category>JavaScript</category>
        <category>Html</category>
        <category>函数式接口</category>
        <category>Assert</category>
        <category>map</category>
        <category>Stream流</category>
        <category>Jvm</category>
        <category>java</category>
        <category>calender</category>
        <category>Springboot</category>
        <category>LeetCode</category>
        <category>算法</category>
        <category>递归</category>
        <category>Linux</category>
        <category>Mybatis</category>
        <category>分页查询</category>
        <category>模糊查询</category>
        <category>文件上传</category>
        <category>SrpingBoot</category>
        <category>Spring</category>
        <category>事务</category>
        <category>TypeScript</category>
        <category>WebPack</category>
        <category>Nginx</category>
        <category>master</category>
        <category>Jenkins</category>
        <category>Groovy</category>
        <category>UML</category>
        <category>Ubuntu</category>
        <category>Mysql</category>
        <category>VsCode</category>
        <category>Shell</category>
        <category>VSCODE</category>
        <category>快捷键</category>
        <category>Vue</category>
        <category>Stream</category>
        <category>线程池</category>
        <category>日期</category>
        <category>ubuntu</category>
        <category>虚拟机</category>
        <category>二分查找</category>
        <category>数据挖掘</category>
        <category>操作系统</category>
        <category>EasyExcel</category>
        <category>node</category>
        <category>Hadoop</category>
        <category>Yaml</category>
        <category>junit</category>
        <category>JVM</category>
        <category>Hexo</category>
        <category>数据库</category>
        <category>Git</category>
        <category>Mysql事务</category>
        <category>冒泡排序</category>
        <category>git,npm,node</category>
        <category>动态规划</category>
        <category>堆排序</category>
        <category>Google</category>
        <category>幂等性</category>
        <category>流</category>
        <category>归并排序</category>
        <category>快速排序</category>
        <category>多线程</category>
        <category>直接插入排序</category>
        <category>正则表达式</category>
        <category>Spring事务</category>
        <category>选择排序</category>
        <category>Java 面试</category>
        <category>数据结构</category>
        <category>阻塞队列</category>
        <category>JDK</category>
        <category>动态代理</category>
        <category>Date</category>
        <category>ArrayList</category>
        <category>接口</category>
        <category>SpringMvc</category>
        <category>排序</category>
        <category>执行计划</category>
        <category>HashMap</category>
        <category>设计模式</category>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/60f024c8/</guid>
            <title>关于sql执行计划</title>
            <link>https://smile1231.github.io/posts/60f024c8/</link>
            <category>数据库</category>
            <category>执行计划</category>
            <pubDate>Mon, 08 Nov 2021 16:54:09 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最近受到客服的一个反馈：某个功能长时间无反馈，响应时间达到了 &lt;code&gt;20s&lt;/code&gt;  以上，通过调用日志发现，某条 &lt;code&gt;sql&lt;/code&gt;  查询竟然花费了 &lt;code&gt;12s&lt;/code&gt;  的时间，而且查询了两次，于是准备通过执行计划对此进行找方向调优.&lt;/p&gt;
&lt;h1 id=&#34;什么是执行计划&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是执行计划&#34;&gt;#&lt;/a&gt; 什么是执行计划&lt;/h1&gt;
&lt;h2 id=&#34;1-mysql逻辑结构先知&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-mysql逻辑结构先知&#34;&gt;#&lt;/a&gt; 1.  &lt;code&gt;MySQL&lt;/code&gt;  逻辑结构先知&lt;/h2&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;关于 &lt;code&gt;MySQL&lt;/code&gt;  的逻辑结构，将其理解为四层，就像项目分层一样，每一层处理不同的业务逻辑，先看图后说话：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-17-15-24-30.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;上图概述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;客户端：这里指连接 &lt;code&gt;MySQL&lt;/code&gt;  各种形式，如 &lt;code&gt;.Net&lt;/code&gt;  中使用的 &lt;code&gt;ADO&lt;/code&gt;  连接、 &lt;code&gt;Java&lt;/code&gt;  使用 &lt;code&gt;JDBC&lt;/code&gt;  连接等； &lt;code&gt;MySQL&lt;/code&gt;  是客户端和服务器模式，前提先建立连接，才能传输数据，处理相关逻辑；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务逻辑：在 &lt;code&gt;MySQL&lt;/code&gt;  内部有很多模块组成，分别处理相关业务逻辑；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接管理：负责连接认证、连接数判断、连接池处理等业务逻辑处理；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询缓存：当一个 &lt;code&gt;SQL&lt;/code&gt;  进来时，如果开启查询缓存功能， &lt;code&gt;MySQL&lt;/code&gt;  会优先去查询缓存中检查是否有数据匹配，如果匹配上，就不会再去解析对应的 &lt;code&gt;SQL&lt;/code&gt;  啦，但如果语句中有用户自定义函数、存储函数、用户变量、临时表、 &lt;code&gt;mysql&lt;/code&gt;  库中的系统表时，都不会走缓存； 对于查询缓存来说，在 &lt;code&gt;MySQL8.0&lt;/code&gt;  已经去除，官方回应的是在一定场景上，查询缓存会导致性能上的瓶颈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解析器：对于一个 &lt;code&gt;SQL&lt;/code&gt;  语句， &lt;code&gt;MySql&lt;/code&gt;  根据语法规则需要对其进行解析，并生成一个内部能识别的解析树；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化器：负责对解析器得到的解析树进行优化， &lt;code&gt;MySQL&lt;/code&gt;  会根据内部算法找到一个 &lt;code&gt;MySQL&lt;/code&gt;  认为最优的执行计划，后续就按照这个执行计划执行。所以后续我们分析的就是 &lt;code&gt;MySQL&lt;/code&gt;  针对 &lt;code&gt;SQL&lt;/code&gt;  语句选择出来的最优执行计划，结合业务，根据规则对 &lt;code&gt;SQL&lt;/code&gt;  进行优化，从而让 &lt;code&gt;SQL&lt;/code&gt;  语句在 &lt;code&gt;MySQL&lt;/code&gt;  内部达到真正的最优。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行器：得到执行计划之后，就会找到对应的存储引擎，根据执行计划给出的指令依次执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储引擎：数据的存储和提取最后是靠存储引擎； &lt;code&gt;MySQL&lt;/code&gt;  内部实现可插拔式的存储引擎机制，不同的存储引擎执行不同的逻辑；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理文件：数据存储的最终位置，即磁盘上；协同存储引擎对数据进行读写操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于 &lt;code&gt;MySql&lt;/code&gt;  的逻辑结构，以上只是简单描述，业务逻辑层的功能模块远不止上面提到的，小伙伴有兴趣可以专门研究一下，这里的目的就是为了体现 &lt;code&gt;SQL&lt;/code&gt;  语句到服务器上时经过的几个关键步骤，方便后续优化的理解。&lt;/p&gt;
&lt;h2 id=&#34;2sql语句的中关键字执行顺序须知&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2sql语句的中关键字执行顺序须知&#34;&gt;#&lt;/a&gt; 2. &lt;code&gt;SQL&lt;/code&gt;  语句的中关键字执行顺序须知&lt;/h2&gt;
&lt;p&gt;在编写一条查询语句时，习惯性的从头到尾开始敲出来，应该都是从 &lt;code&gt;select&lt;/code&gt;  开始吧，但似乎没太注意它们真正的执行顺序；既然要优化，肯定需要得知道一条 &lt;code&gt;SQL&lt;/code&gt;  语句大概的执行流程，结合执行计划，目的就更加清晰啦；上一张一看就明白的图：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-15-55-16.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;关键字简述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM&lt;/code&gt; ：确定数据来源，即指定表；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JOIN...ON&lt;/code&gt; ：确定关联表和关联条件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WHERE&lt;/code&gt; ：指定过滤条件，过滤出满足条件的数据；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GROUP BY&lt;/code&gt; ：按指定的字段对过滤后的数据进行分组；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HAVING&lt;/code&gt; ：对分组之后的数据指定过滤条件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; ：查找想要的字段数据；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DISTINCT&lt;/code&gt; ：针对查找出来的数据进行去重；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ORDER BY&lt;/code&gt; ：对去重后的数据指定字段进行排序；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LIMIT&lt;/code&gt; ：对去重后的数据限制获取到的条数，即分页；&lt;br&gt;
好啦，大概了解 &lt;code&gt;MySQL&lt;/code&gt;  的逻辑结构和 &lt;code&gt;SQL&lt;/code&gt;  查询关键字执行顺序之后，接下来就可以好好说说执行计划啦。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-好好说说执行计划&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-好好说说执行计划&#34;&gt;#&lt;/a&gt; 3. 好好说说执行计划&lt;/h2&gt;
&lt;p&gt;通过上面的逻辑结构，当一个 &lt;code&gt;SQL&lt;/code&gt;  发送到 &lt;code&gt;MySQL&lt;/code&gt;  执行时，需要经过内部优化器进行优化，而使用 &lt;code&gt;explain&lt;/code&gt;  关键字可以模拟优化器执行 &lt;code&gt;SQL&lt;/code&gt;  查询语句，从而知道 &lt;code&gt;MySQL&lt;/code&gt;  是如何处理 &lt;code&gt;SQL&lt;/code&gt;  的，即 &lt;code&gt;SQL&lt;/code&gt;  的执行计划；根据 &lt;code&gt;explain&lt;/code&gt;  提供的执行计划信息分析 &lt;code&gt;SQL&lt;/code&gt;  语句，然后进行相关优化操作。接下来的示例演示用到五张表： &lt;code&gt;USER(用户表)、MENU(菜单表)、ROLE(角色表)、USER_ROLE(用户角色关系表)、ROLE_MENU(角色菜单关系表)、ADDR(用户地址表，这里认为和用户一一对应)、FRIEND(朋友表，一对多关系)&lt;/code&gt; ，它们的关系这里就不详细说了吧，小伙伴肯定都明白，这是管控菜单权限的五张基础表和两个基础信息表；&lt;/p&gt;
&lt;p&gt;表 DDL&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;SQLyog Ultimate - MySQL GUI v8.2 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;MySQL - 5.5.27 : Database - sql_optimization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*********************************************************************&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40101 SET NAMES utf8 */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40101 SET SQL_MODE=&amp;#x27;&amp;#x27;*/&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&amp;#x27;NO_AUTO_VALUE_ON_ZERO&amp;#x27; */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; DATABASE &lt;span class=&#34;comment&#34;&gt;/*!32312 IF NOT EXISTS*/&lt;/span&gt;`sql_optimization` &lt;span class=&#34;comment&#34;&gt;/*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;USE `sql_optimization`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Table structure for table `addr` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; IF &lt;span class=&#34;keyword&#34;&gt;EXISTS&lt;/span&gt; `addr`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; `addr` (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ADDR` &lt;span class=&#34;type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt; utf8_bin &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;PRIMARY&lt;/span&gt; KEY (`ID`)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;) ENGINE&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;InnoDB &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8 &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8_bin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Data for the table `addr` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Table structure for table `friend` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; IF &lt;span class=&#34;keyword&#34;&gt;EXISTS&lt;/span&gt; `friend`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; `friend` (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `USER_ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `FRIEND_ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  KEY `idx_user_id` (`USER_ID`)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;) ENGINE&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;InnoDB &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8 &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8_bin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Data for the table `friend` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Table structure for table `menu` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; IF &lt;span class=&#34;keyword&#34;&gt;EXISTS&lt;/span&gt; `menu`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; `menu` (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `MENU_NAME` &lt;span class=&#34;type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt; utf8_bin &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `MENU_URL` &lt;span class=&#34;type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt; utf8_bin &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;PRIMARY&lt;/span&gt; KEY (`ID`)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;) ENGINE&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;InnoDB &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8 &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8_bin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Data for the table `menu` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;insert&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;into&lt;/span&gt; `menu`(`ID`,`MENU_NAME`,`MENU_URL`) &lt;span class=&#34;keyword&#34;&gt;values&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;用户新增&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;api/User/Add&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;用户删除&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;api/User/Delete&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;用户修改&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;api/User/Update&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;用户查询&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;api/User/Query&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;角色新增&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;api/Role/Add&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;角色修改&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;api/Role/Update&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;角色删除&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;api/Role/Delete&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;角色查询&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;api/Role/Query&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Table structure for table `role` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; IF &lt;span class=&#34;keyword&#34;&gt;EXISTS&lt;/span&gt; `role`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; `role` (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ROLE_NAME` &lt;span class=&#34;type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt; utf8_bin &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;PRIMARY&lt;/span&gt; KEY (`ID`)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;) ENGINE&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;InnoDB &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8 &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8_bin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Data for the table `role` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;insert&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;into&lt;/span&gt; `role`(`ID`,`ROLE_NAME`) &lt;span class=&#34;keyword&#34;&gt;values&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;admin&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;custmor&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;role1&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;role2&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Table structure for table `role_menu` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; IF &lt;span class=&#34;keyword&#34;&gt;EXISTS&lt;/span&gt; `role_menu`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; `role_menu` (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ROLE_ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `MENU_ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;PRIMARY&lt;/span&gt; KEY (`ID`)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;) ENGINE&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;InnoDB &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8 &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8_bin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Data for the table `role_menu` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;insert&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;into&lt;/span&gt; `role_menu`(`ID`,`ROLE_ID`,`MENU_ID`) &lt;span class=&#34;keyword&#34;&gt;values&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Table structure for table `user` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; IF &lt;span class=&#34;keyword&#34;&gt;EXISTS&lt;/span&gt; `&lt;span class=&#34;keyword&#34;&gt;user&lt;/span&gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; `&lt;span class=&#34;keyword&#34;&gt;user&lt;/span&gt;` (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `USER_NAME` &lt;span class=&#34;type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt; utf8_bin &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `USER_PWD` &lt;span class=&#34;type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt; utf8_bin &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;PRIMARY&lt;/span&gt; KEY (`ID`),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  KEY `idx_user_name` (`USER_NAME`)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;) ENGINE&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;InnoDB &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8 &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8_bin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Data for the table `user` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;insert&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;into&lt;/span&gt; `&lt;span class=&#34;keyword&#34;&gt;user&lt;/span&gt;`(`ID`,`USER_NAME`,`USER_PWD`) &lt;span class=&#34;keyword&#34;&gt;values&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;Zoe&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;123456&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;Coder&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;23452a&amp;#x27;&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;Code综艺圈&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;231235&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Table structure for table `user_role` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;DROP&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; IF &lt;span class=&#34;keyword&#34;&gt;EXISTS&lt;/span&gt; `user_role`;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;TABLE&lt;/span&gt; `user_role` (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `USER_ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  `ROLE_ID` &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;PRIMARY&lt;/span&gt; KEY (`ID`)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;) ENGINE&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;InnoDB &lt;span class=&#34;keyword&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8 &lt;span class=&#34;keyword&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;utf8_bin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*Data for the table `user_role` */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;insert&lt;/span&gt;  &lt;span class=&#34;keyword&#34;&gt;into&lt;/span&gt; `user_role`(`ID`,`USER_ID`,`ROLE_ID`) &lt;span class=&#34;keyword&#34;&gt;values&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;),(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40101 SET SQL_MODE=@OLD_SQL_MODE */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;演示用的版本是 &lt;code&gt;MySql5.5&lt;/code&gt; ，各版本之间会有不同，所以小伙伴用的版本测试结果不一样的时候，千万别骂我渣哦；其实重要的是查看的思路，整体是大同小异。(求原谅…)&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;explain&lt;/code&gt;  会输出如下信息，很多小伙伴只关注红框标注部分 (即索引)，但其实是不够的，接下来就一个一个好好说说。&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-00-46.png&#34; class=&#34;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个 &lt;code&gt;id&lt;/code&gt;  和咱们平时表结构设计的主键 &lt;code&gt;ID&lt;/code&gt;  不太一样，这里的 &lt;code&gt;id&lt;/code&gt;  代表了每一条 &lt;code&gt;SQL&lt;/code&gt;  语句执行计划中表加载的顺序，分为三种情况：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt;  相同的时候：这时是从上到下依次执行；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;EXPLAIN &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; t.ID,t.USER_NAME,r.ROLE_NAME &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;USER&lt;/span&gt; t &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;JOIN&lt;/span&gt; USER_ROLE tr &lt;span class=&#34;keyword&#34;&gt;ON&lt;/span&gt; t.ID &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; tr.USER_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;JOIN&lt;/span&gt; ROLE r &lt;span class=&#34;keyword&#34;&gt;ON&lt;/span&gt; tr.ROLE_ID &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; r.ID&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行如下语句，得如下结果：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-03-34.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;如上图所示， &lt;code&gt;id&lt;/code&gt;  一样，从上到下依次执行，所对应表加载顺序为 &lt;code&gt;t-&amp;gt;tr-&amp;gt;r&lt;/code&gt;  (这里的表是别名)；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; `id`不同的时候：当`id`不同的时，`id`越大的越先执行；
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;EXPLAIN &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; t.ID,t.MENU_NAME,t.MENU_URL &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; MENU t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; t.ID &lt;span class=&#34;keyword&#34;&gt;IN&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; MENU_ID &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; ROLE_MENU rm &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; rm.ROLE_ID &lt;span class=&#34;keyword&#34;&gt;IN&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; ROLE_ID &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; USER_ROLE ur &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; ur.USER_ID&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;子查询会导致 &lt;code&gt;id&lt;/code&gt;  递增，结果如下：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-05-35.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;如上图所示， &lt;code&gt;id&lt;/code&gt;  递增啦，所对应表的加载顺序为 &lt;code&gt;ur-&amp;gt;rm-&amp;gt;t&lt;/code&gt;  (这里的表是别名)；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; `id`相同和不同同时存在时：id相同的认为是同一组，还是从上往下加载；不一样的情况还是越大越优先执行
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;EXPLAIN &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; t.ROLE_ID,m.ID,m.MENU_NAME,m.MENU_URL &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	(&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; ROLE_ID &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; USER_ROLE &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; USER_ID&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) t,ROLE_MENU rm,MENU m&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; t.ROLE_ID&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;rm.ROLE_ID&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;AND&lt;/span&gt; rm.MENU_ID&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;m.ID&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果如下：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-06-53.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;如上图所示， &lt;code&gt;id&lt;/code&gt;  有一样的，也有不同的，则对应表的加载顺序为 &lt;code&gt;USER_ROLE-&amp;gt;derived2 (衍生表)-&amp;gt;rm-&amp;gt;m&lt;/code&gt; ；衍生表表名后面的 &lt;code&gt;2&lt;/code&gt;  代表的是 &lt;code&gt;id&lt;/code&gt; ，所以可以通过衍生表表名后面的 &lt;code&gt;id&lt;/code&gt;  知道是哪一步产生的，即 &lt;code&gt;derived2&lt;/code&gt;  衍生表是 &lt;code&gt;id&lt;/code&gt;  为 &lt;code&gt;2&lt;/code&gt;  的这一步产生的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select_type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;select_type&lt;/code&gt;  是表示每一步的查询类型，方便分析人员很直接的看到当前步骤执行的是什么查询，有多种类型，见下图：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1&amp;gt;  &lt;code&gt;SIMPLE&lt;/code&gt; ：简单的 &lt;code&gt;SELECT&lt;/code&gt;  查询，不包含子查询或 &lt;code&gt;UNION&lt;/code&gt;  的那种；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;EXPLAIN &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;USER&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-13-44.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;2&amp;gt;  &lt;code&gt;PRIMARY&lt;/code&gt; ：查询语句中包含其他子查询或 &lt;code&gt;UNION&lt;/code&gt;  操作，那最外层的 &lt;code&gt;SELECT&lt;/code&gt;  就被标记为该类型；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-15-17.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;如上图所示，查询中包含子查询，最外层查询被标记为 &lt;code&gt;PRIMARY&lt;/code&gt; ；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3&amp;gt;  &lt;code&gt;SUBQUERY&lt;/code&gt; ：在 &lt;code&gt;SELECT&lt;/code&gt;  或 &lt;code&gt;WHERE&lt;/code&gt;  中包含的子查询会被标记为该类型；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;见 &lt;code&gt;PRIMARY&lt;/code&gt;  图，当存在子查询时，会将子查询标记为 &lt;code&gt;SUBQUERY&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4&amp;gt;  &lt;code&gt;MATERIALIZED&lt;/code&gt; ：被物化的子查询，即针对对应的子查询将其物化为一个临时表；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;EXPLAIN &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; t.ID,t.MENU_NAME,t.MENU_URL &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; MENU t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; t.ID &lt;span class=&#34;keyword&#34;&gt;IN&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; MENU_ID &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; ROLE_MENU rm &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; rm.ROLE_ID &lt;span class=&#34;keyword&#34;&gt;IN&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; ROLE_ID &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; USER_ROLE ur &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; ur.USER_ID&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试物化用的是 &lt;code&gt;MySQL8.0&lt;/code&gt; ，和 &lt;code&gt;5.*&lt;/code&gt;  版本有所不同，输出结果如下：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-16-49.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;如上图所示，将子查询物化为一个临时表 &lt;code&gt;subquery2&lt;/code&gt; ，这个功能是可以通过设置优化器对应的开关的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5&amp;gt;  &lt;code&gt;DERIVED&lt;/code&gt; ：在 &lt;code&gt;FROM&lt;/code&gt;  之后的子查询会被标记为该类型，同样会把结果放在一个临时表中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;EXPLAIN &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; tm.MENU_NAME,rm.ROLE_ID &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	(&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; MENU &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; ID &lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; ) tm ,ROLE_MENU rm &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; tm.ID&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;rm.MENU_ID &lt;span class=&#34;keyword&#34;&gt;AND&lt;/span&gt; rm.ROLE_ID&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-17-39.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;如图所示， &lt;code&gt;FROM&lt;/code&gt;  后面跟的子查询就被标记为 &lt;code&gt;DERIVED&lt;/code&gt; ，对应步骤产生的衍生表为 &lt;code&gt;derived2&lt;/code&gt; 。高版本好像对其进行了优化， &lt;code&gt;8.0&lt;/code&gt;  版本这种形式认为是简单查询。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6&amp;gt;  &lt;code&gt;UNION：UNION&lt;/code&gt;  操作中，查询中处于内层的 &lt;code&gt;SELECT&lt;/code&gt; ；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;EXPLAIN &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; USER_ROLE T1 &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; T1.USER_ID&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;UNION&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; USER_ROLE T2 &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; T2.USER_ID&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-18-35.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;如上图所示，将第二个 &lt;code&gt;SELECT&lt;/code&gt;  标注为 &lt;code&gt;UNION&lt;/code&gt;  ，即对应加载的表为 &lt;code&gt;T2&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;7&amp;gt;  &lt;code&gt;UNIOIN RESULT：UNION&lt;/code&gt;  操作的结果，对应的 &lt;code&gt;id&lt;/code&gt;  为空，代表的是一个结果集；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;见 &lt;code&gt;UNIOIN&lt;/code&gt;  图， &lt;code&gt;UNIOIN RESULT&lt;/code&gt;  代表的是 &lt;code&gt;UNION&lt;/code&gt;  之后的结果，对应 &lt;code&gt;id&lt;/code&gt;  为空。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;table&lt;/code&gt;  代表对应步骤加载的是哪张表，中间会出现一些临时表，比如 &lt;code&gt;subquery2、derived2&lt;/code&gt;  等这种，最后的数字代表产生该表对应步骤的 &lt;code&gt;id&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代表访问类型， &lt;code&gt;MySQL&lt;/code&gt;  内部将其分为多类型，常用的类型从好到差的顺序展示如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;system-&amp;gt;const-&amp;gt;eq_ef-&amp;gt;ref-&amp;gt;fulltext-&amp;gt;ref_or_null-&amp;gt;index_merge-&amp;gt;unique_subquery-&amp;gt;index_subquery-&amp;gt;range-&amp;gt;index-&amp;gt;ALL;&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而在实际开发场景中，比较常见的几种类型如下： &lt;code&gt;const-&amp;gt;eq_ref-&amp;gt;ref-&amp;gt;range-&amp;gt;index-&amp;gt;ALL&lt;/code&gt;  (顺序从好到差)，通常优化至少在 &lt;code&gt;range&lt;/code&gt;  级别或以上，比如 &lt;code&gt;ref&lt;/code&gt;  算是比较不错的啦；&lt;/p&gt;
&lt;p&gt;上面说到的从好到差指的是查询性能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1&amp;gt; &lt;code&gt;const&lt;/code&gt; ：表示通过索引一次就找到数据，用于比较 &lt;code&gt;primary key&lt;/code&gt;  或者 &lt;code&gt;unique&lt;/code&gt;  索引，很快就能找到对应的数据；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-21-32.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;2&amp;gt; &lt;code&gt;eq_ref&lt;/code&gt; ：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常用于主键或唯一索引扫描；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-22-02.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;3&amp;gt; &lt;code&gt;ref&lt;/code&gt; ：非唯一索引扫描，返回匹配的所有行，如建立一个朋友维护表，维护用户对应的朋友，而在用户 &lt;code&gt;ID&lt;/code&gt;  建立非唯一索引；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-22-32.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;4&amp;gt; &lt;code&gt;range&lt;/code&gt; ：使用一个索引检索指定范围的行，一般在 &lt;code&gt;where&lt;/code&gt;  语句中会出现 &lt;code&gt;between、&amp;lt;、&amp;gt;、in&lt;/code&gt;  等范围查询；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-22-59.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;5&amp;gt; &lt;code&gt;index&lt;/code&gt; ：全索引扫描，只遍历索引树；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-23-30.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;6&amp;gt; &lt;code&gt;ALL&lt;/code&gt; ：全表扫描，找到匹配行。与 &lt;code&gt;index&lt;/code&gt;  比较， &lt;code&gt;ALL&lt;/code&gt;  需要扫描磁盘数据， &lt;code&gt;index&lt;/code&gt;  值需要遍历索引树。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-23-57.png&#34; class=&#34;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;possible_keys&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显示可能被用到的索引，但在实际查询中不一定能用到； 查询涉及到字段，如果存在索引，会被列出，但如果使用的是覆盖索引，只会在 &lt;code&gt;key&lt;/code&gt;  中列出；&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-24-29.png&#34; class=&#34;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际使用到的索引，如果为 &lt;code&gt;NULL&lt;/code&gt;  代表没有使用到索引；这也是平时小伙伴判断是否用上索引的关键。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;key_len&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;key_len&lt;/code&gt;  表示索引使用的字节数，根据这个值可以判断索引的使用情况，特别是在组合索引的时候，判断该索引有多少部分被使用到，非常重要； &lt;code&gt;key_len&lt;/code&gt;  是根据表定义计算而得。这里测试在 &lt;code&gt;USER&lt;/code&gt;  表中对 &lt;code&gt;USER_NAME&lt;/code&gt;  创建一个非唯一索引，如下：&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-25-14.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;这里 &lt;code&gt;key_len&lt;/code&gt;  是这么计算的，前提是指定的字符串集是 &lt;code&gt;utf8&lt;/code&gt; ，可变长 且允许为空，计算过程如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;128(设置的可变长度)*3(utf8占3字节)+1(允许为空标识占一个字节)+2(长度信息占两个字节)=387；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;key_len&lt;/code&gt;  针对不同类型字段的计算规则不一样，这里用 &lt;code&gt;USER(用户表)&lt;/code&gt;  简单计算为例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;Key_len&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ID(int，不为空)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;  为 &lt;code&gt;4&lt;/code&gt;  个字节，不为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;USER_NAME(varchar(128)，utf8，可为空)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;128*3+1+2=387&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可变为 &lt;code&gt;128，utf8&lt;/code&gt;  每个占 &lt;code&gt;3&lt;/code&gt;  字节， &lt;code&gt;1&lt;/code&gt;  个字节标识可控，两个字节标识长度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不同类型占用的字节不一样，字符集不一样占用的字节也不一样，允许为空的字段需要 &lt;code&gt;1&lt;/code&gt;  个字节做标识，可变长度的字段需要 &lt;code&gt;2&lt;/code&gt;  个字节标识长度。小伙伴照着这个思路就可以计算其他类型啦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ef&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显示索引的哪些列被引用了，通常是对应字段或 &lt;code&gt;const&lt;/code&gt; ；&lt;/p&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-30-20.png&#34; class=&#34;&#34;&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-30-30.png&#34; class=&#34;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rows&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据表统计信息和索引的使用情况，大概估算出找到所需记录数据所扫描的数据行数；不是所需数据的行数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Extra&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个字段里包含一些其他信息，但也是优化 &lt;code&gt;SQL&lt;/code&gt;  的重要参考，通常会出现以下几种信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Using index&lt;/code&gt; ：表示查询语句中用到了覆盖索引，不访问表的数据行，查询效率比较好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-31-08.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;如果用 &lt;code&gt;SELECT *&lt;/code&gt;  进行查询，就不会有 &lt;code&gt;Using index&lt;/code&gt; ，关于索引的介绍下篇好好说说。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Using filesort&lt;/code&gt; ：代表 &lt;code&gt;MySQL&lt;/code&gt;  会使用一个外部索引对数据进行排序 (文件排序)，而不是使用表内索引。这种情况在 &lt;code&gt;SQL&lt;/code&gt;  查询需要避免，最好不要在 &lt;code&gt;Extra&lt;/code&gt;  中出现此类型：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-32-01.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;通常会是使用 &lt;code&gt;ORDER BY&lt;/code&gt;  语句导致，上图中使用无索引的字段进行排序会出现，同样如果使用有索引的字段，但用法不对也会出现，比如使用组合索引不规范时。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Using temporary&lt;/code&gt; ：产生临时表保存中间结果，这种 SQL 是不允许的，遇见数据量大的场景，基本就跑不动啦；&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-32-30.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;这种类型常常因为 &lt;code&gt;ORDER BY&lt;/code&gt;  和  &lt;code&gt;GROUP BY&lt;/code&gt;  导致，所以在进行数据排序和分组查询时，要注意索引的合理利用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Using where&lt;/code&gt; ：使用 &lt;code&gt;where&lt;/code&gt;  过滤数据，小伙伴试一把。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Using join buffer&lt;/code&gt; ：表示使用到了表连接缓存； 当表数据量大，可能导致 &lt;code&gt;buffer&lt;/code&gt;  过大，查询效率比较低，这种情况注意在表连接字段上正确使用索引。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-33-30.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;如果表连接查询慢时，在连接字段上加个索引试试，药到病除；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;impossible where&lt;/code&gt; ：代表 &lt;code&gt;where&lt;/code&gt;  后面的条件永远为 &lt;code&gt;false&lt;/code&gt; ，匹配不到数据；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/60f024c8/2021-11-22-16-33-42.png&#34; class=&#34;&#34;&gt;
 ]]></description>
        </item>
    </channel>
</rss>
