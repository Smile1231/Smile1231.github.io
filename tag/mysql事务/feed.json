{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"mysql事务\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/69c17d37/",
            "url": "https://smile1231.github.io/posts/69c17d37/",
            "title": "关于事务提交中踩坑",
            "date_published": "2022-02-10T15:38:00.000Z",
            "content_html": "<p>今天在处理一个问题时始终都没有头绪，主要场景是自己的方法中最后需要调用别人的方法进行回调，但是又同时处在一个大事务中，主要我做了以下场景来模拟</p>\n<span id=\"more\"></span>\n<p>数据库表结构：</p>\n<img data-src=\"/posts/69c17d37/2022-02-10-23-42-40.png\" class=\"\">\n<p>测试代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentMapperTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StudentDao studentDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@Rollback(false)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">context01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//查询张三</span></span><br><span class=\"line\">        LambdaUpdateWrapper&lt;Student&gt; updateWrapper0 = <span class=\"keyword\">new</span> LambdaUpdateWrapper&lt;&gt;();</span><br><span class=\"line\">        updateWrapper0.eq(Student::getName,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Student&gt; students = studentDao.selectList(updateWrapper0);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//对张三进行修改为张三改</span></span><br><span class=\"line\">        LambdaUpdateWrapper&lt;Student&gt; updateWrapper = <span class=\"keyword\">new</span> LambdaUpdateWrapper&lt;&gt;();</span><br><span class=\"line\">        updateWrapper.eq(Student::getName,<span class=\"string\">&quot;张三&quot;</span>)</span><br><span class=\"line\">                .set(Student::getName,<span class=\"string\">&quot;张三改&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        studentDao.update(Student.builder().build(), updateWrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//再度查询张三</span></span><br><span class=\"line\">        LambdaUpdateWrapper&lt;Student&gt; updateWrapper1 = <span class=\"keyword\">new</span> LambdaUpdateWrapper&lt;&gt;();</span><br><span class=\"line\">        updateWrapper1.eq(Student::getName,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        List&lt;Student&gt; students1 = studentDao.selectList(updateWrapper1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//尝试查询修改后的张三改</span></span><br><span class=\"line\">        LambdaUpdateWrapper&lt;Student&gt; updateWrapper2 = <span class=\"keyword\">new</span> LambdaUpdateWrapper&lt;&gt;();</span><br><span class=\"line\">        updateWrapper2.eq(Student::getName,<span class=\"string\">&quot;张三改&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Student&gt; students2 = studentDao.selectList(updateWrapper2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>debug</code>  结果：</p>\n<img data-src=\"/posts/69c17d37/2022-02-10-23-47-46.png\" class=\"\">\n<img data-src=\"/posts/69c17d37/2022-02-10-23-47-01.png\" class=\"\">\n<p><strong>我们可以得到虽然事务没有提交但是同一会话查询时依然是修改后的值，但是此时如果为多线程下，别的线程将不会读取到提交事物之前的结果，这就是数据库的隔离性问题</strong>，此时事务没有提交，数据库结果未改变</p>\n<img data-src=\"/posts/69c17d37/2022-02-10-23-50-42.png\" class=\"\">\n<p>当然，只有当程序正常运行结束之后，事务才会提交，数据库才会改变：</p>\n<img data-src=\"/posts/69c17d37/2022-02-10-23-51-07.png\" class=\"\">\n",
            "tags": [
                "Java",
                "Mysql事务"
            ]
        }
    ]
}