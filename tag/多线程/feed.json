{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"多线程\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/12fecb94/",
            "url": "https://smile1231.github.io/posts/12fecb94/",
            "title": "多线程笔记",
            "date_published": "2022-02-14T14:46:41.000Z",
            "content_html": "<blockquote>\n<p>线程的实现方式</p>\n</blockquote>\n<ol>\n<li><p>继承Thread类</p>\n</li>\n<li><p>实现Runnable接口</p>\n</li>\n<li><p>使用Callable和Future</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>Thread 类中的<code>start()</code> 和 <code>run() </code>方法有什么区别?</p>\n</blockquote>\n<ol>\n<li>start（）方法来启动线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码；通过调用Thread类的start()方法来启动一个线程， 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行操作的， 这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。</li>\n<li>run（）方法当作普通方法的方式调用。程序还是要顺序执行，要等待run方法体执行完毕后，才可继续执行下面的代码； 程序中只有主线程——这一个线程， 其程序执行路径还是只有一条， 这样就没有达到写线程的目的。</li>\n</ol>\n<blockquote>\n<p>线程<code>RUNNABLE</code>状态</p>\n</blockquote>\n<p>线程对象通过start方法进入runnable状态，启动的线程不一定会立即得到执行，线程的运行与否要看cpu的调度，我们把这个中间状态叫可执行状态（RUNNABLE)。</p>\n<blockquote>\n<p>线程的<code>BLOCKED</code>状态</p>\n</blockquote>\n<p>线程正在等待获取锁。</p>\n<p>进入<code>BLOCKED</code>状态，比如调用了<code>sleep</code>,或者<code>wait</code>方法<br>进行某个阻塞的<code>io</code>操作，比如因网络数据的读写进入<code>BLOCKED</code>状态<br>获取某个锁资源，从而加入到该锁的阻塞队列中而进入<code>BLOCKED</code>状态</p>\n<blockquote>\n<p>线程的<code>TERMINATED</code>状态</p>\n</blockquote>\n<p>`TERMINATED``是一个线程的最终状态，在该状态下线程不会再切换到其他任何状态了，代表整个生命周期都结束了。</p>\n<p>下面几种情况会进入<code>TERMINATED</code>状态:</p>\n<p>线程运行正常结束，结束生命周期<br>线程运行出错意外结束<br><code>JVM Crash</code> 导致所有的线程都结束</p>\n<blockquote>\n<p>如何知道代码段被哪个线程调用？</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Thread.currentThread().getName());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>停止线程</p>\n</blockquote>\n<p><code>run</code>方法执行完成，自然终止。</p>\n<p><code>stop()</code>方法，<code>suspend()</code>以及<code>resume()</code>都是过期作废方法，使用它们结果不可预期。</p>\n<p>大多数停止一个线程的操作使用<code>Thread.interrupt()</code>等于说给线程打一个停止的标记, 此方法不回去终止一个正在运行的线程，需要加入一个判断才能可以完成线程的停止。</p>\n<blockquote>\n<p><code>interrupted</code> 和 <code>isInterrupted</code></p>\n</blockquote>\n<p><code>interrupted</code> : 判断当前线程是否已经中断,会清除状态。</p>\n<p><code>isInterrupted</code> ：判断线程是否已经中断，不会清除状态。</p>\n<blockquote>\n<p><code>yield</code></p>\n</blockquote>\n<p>放弃当前cpu资源，将它让给其他的任务占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片。</p>\n<blockquote>\n<p>线程的优先级</p>\n</blockquote>\n<p>在操作系统中，线程可以划分优先级，优先级较高的线程得到cpu资源比较多，也就是cpu有限执行优先级较高的线程对象中的任务，但是不能保证一定优先级高，就先执行。</p>\n<p>Java的优先级分为1～10个等级，数字越大优先级越高，默认优先级大小为5。超出范围则抛出：<code>java.lang.IllegalArgumentException</code>。</p>\n<blockquote>\n<p>优先级继承特性</p>\n</blockquote>\n<p>线程的优先级具有继承性，比如<code>a</code>线程启动<code>b</code>线程，<code>b</code>线程与<code>a</code>优先级是一样的。</p>\n<blockquote>\n<p>线程种类</p>\n</blockquote>\n<p><code>Java</code>线程有两种，一种是用户线程，一种是守护线程。</p>\n<blockquote>\n<p>守护线程的特点</p>\n</blockquote>\n<p>守护线程是一个比较特殊的线程，主要被用做程序中后台调度以及支持性工作。当<code>Java</code>虚拟机中不存在非守护线程时，守护线程才会随着<code>JVM</code>一同结束工作。</p>\n<blockquote>\n<p><code>Java</code>中典型的守护线程</p>\n</blockquote>\n<p><code>GC</code>（垃圾回收器）</p>\n<blockquote>\n<p>如何设置守护线程<br><code>Thread.setDaemon(true)</code></p>\n</blockquote>\n<p><code>PS:Daemon</code>属性需要再启动线程之前设置，不能再启动后设置。</p>\n<blockquote>\n<p>join</p>\n</blockquote>\n<p>join是指把指定的线程加入到当前线程，比如join某个线程a,会让当前线程b进入等待,直到a的生命周期结束，此期间b线程是处于blocked状态。</p>\n<blockquote>\n<p>什么是synchronized?</p>\n</blockquote>\n<p>synchronized关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。</p>\n<blockquote>\n<p>synchronized包括哪两个jvm重要的指令？</p>\n</blockquote>\n<p>monitor enter 和 monitor exit</p>\n<blockquote>\n<p>synchronized关键字用法?</p>\n</blockquote>\n<p>可以用于对代码块或方法的修饰</p>\n<blockquote>\n<p>synchronized锁的是什么?</p>\n</blockquote>\n<p>普通同步方法 —————&gt; 锁的是当前实力对象。</p>\n<p>静态同步方法—————&gt; 锁的是当前类的Class对象。</p>\n<p>同步方法 块—————&gt; 锁的是synchonized括号里配置的对象。</p>\n<blockquote>\n<p>Java对象头</p>\n</blockquote>\n<p>synchronized用的锁是存在Java对象头里的。对象如果是数组类型，虚拟机用3个字宽(Word)存储对象头，如果对象是非数组类型，用2字宽存储对象头。</p>\n<p>Tips:32位虚拟机中一个字宽等于4字节。</p>\n<blockquote>\n<p>volatile关键字</p>\n</blockquote>\n<p>volatile 是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性“。</p>\n<p>Java语言规范第3版对volatile定义如下，Java允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为volatile,Java线程内存模型所有线程看到这个变量的值是一致的。</p>\n<blockquote>\n<p>重入锁 ReentrantLock</p>\n</blockquote>\n<p>支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁的还支持获取锁时的公平和非公平性选择。</p>\n<blockquote>\n<p>重进入是什么意思？</p>\n</blockquote>\n<p>重进入是指任意线程在获取到锁之后能够再次获锁而不被锁阻塞。</p>\n<p>该特性主要解决以下两个问题：</p>\n<ol>\n<li><p>锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是则再次成功获取。</p>\n</li>\n<li><p>所得最终释放。线程重复n次是获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。</p>\n</li>\n</ol>\n<blockquote>\n<p>ReentrantLock默认锁？</p>\n</blockquote>\n<p>默认非公平锁</p>\n<blockquote>\n<p>公平锁和非公平锁的区别</p>\n</blockquote>\n<p>公平性与否针对获取锁来说的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是<code>FIFO</code>。</p>\n<blockquote>\n<p>读写锁</p>\n</blockquote>\n<p>读写锁允许同一时刻多个读线程访问，但是写线程和其他写线程均被阻塞。读写锁维护一个读锁一个写锁，读写分离，并发性得到了提升。<br><code>Java</code>中提供读写锁的实现类是<code>ReentrantReadWriteLock</code>。</p>\n<blockquote>\n<p>Java并发容器，你知道几个？</p>\n</blockquote>\n<p>ConcurrentHashMap、CopyOnWriteArrayList 、CopyOnWriteArraySet 、ConcurrentLinkedQueue、</p>\n<p>ConcurrentLinkedDeque、ConcurrentSkipListMap、ConcurrentSkipListSet、ArrayBlockingQueue、</p>\n<p>LinkedBlockingQueue、LinkedBlockingDeque、PriorityBlockingQueue、SynchronousQueue、</p>\n<p>LinkedTransferQueue、DelayQueue</p>\n<blockquote>\n<p>Java里的阻塞的队列</p>\n</blockquote>\n\n\n<blockquote>\n<p>工作窃取算法</p>\n</blockquote>\n<p>是指某个线程从其他队列里窃取任务来执行。当大任务被分割成小任务时，有的线程可能提前完成任务，此时闲着不如去帮其他没完成工作线程。此时可以去其他队列窃取任务，为了减少竞争，通常使用双端队列，被窃取的线程从头部拿，窃取的线程从尾部拿任务执行。</p>\n<blockquote>\n<p>创建线程池参数有哪些，作用？</p>\n</blockquote>\n\n\n<ol>\n<li><p>corePoolSize:核心线程池大小，当提交一个任务时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建，等待需要执行的任务数大于线程核心大小就不会继续创建。</p>\n</li>\n<li><p>maximumPoolSize:线程池最大数，允许创建的最大线程数，如果队列满了，并且已经创建的线程数小于最大线程数，则会创建新的线程执行任务。如果是无界队列，这个参数基本没用。</p>\n</li>\n<li><p>keepAliveTime: 线程保持活动时间，线程池工作线程空闲后，保持存活的时间，所以如果任务很多，并且每个任务执行时间较短，可以调大时间，提高线程利用率。</p>\n</li>\n<li><p>unit: 线程保持活动时间单位，天（DAYS)、小时(HOURS)、分钟(MINUTES、毫秒MILLISECONDS)、微秒(MICROSECONDS)、纳秒(NANOSECONDS)</p>\n</li>\n<li><p>workQueue: 任务队列，保存等待执行的任务的阻塞队列。</p>\n</li>\n</ol>\n<p>一般来说可以选择如下阻塞队列：</p>\n<p><code>ArrayBlockingQueue</code>:基于数组的有界阻塞队列。</p>\n<p><code>LinkedBlockingQueue</code>:基于链表的阻塞队列。</p>\n<p><code>SynchronizedQueue</code>:一个不存储元素的阻塞队列。</p>\n<p><code>PriorityBlockingQueue</code>:一个具有优先级的阻塞队列。</p>\n<blockquote>\n<p>向线程池提交任务</p>\n</blockquote>\n<p>可以使用<code>execute()</code>和<code>submit()</code> 两种方式提交任务。</p>\n<p><code>execute()</code>:无返回值，所以无法判断任务是否被执行成功。</p>\n<p><code>submit()</code>:用于提交需要有返回值的任务。线程池返回一个<code>future</code>类型的对象，通过这个<code>future</code>对象可以判断任务是否执行成功，并且可以通过<code>future的get()</code>来获取返回值，<code>get()</code>方法会阻塞当前线程知道任务完成。<code>get(long timeout,TimeUnit unit)</code>可以设置超市时间。</p>\n<blockquote>\n<p>关闭线程池</p>\n</blockquote>\n<p>可以通过shutdown()或shutdownNow()来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt来中断线程，所以无法响应终端的任务可以能永远无法停止。</p>\n<p>shutdownNow首先将线程池状态设置成STOP,然后尝试停止所有的正在执行或者暂停的线程，并返回等待执行任务的列表。</p>\n<p>shutdown只是将线程池的状态设置成shutdown状态，然后中断所有没有正在执行任务的线程。</p>\n<p>只要调用两者之一，isShutdown就会返回true,当所有任务都已关闭，isTerminaed就会返回true。</p>\n<p>一般来说调用shutdown方法来关闭线程池，如果任务不一定要执行完，可以直接调用shutdownNow方法。</p>\n<blockquote>\n<p>线程池如何合理设置</p>\n</blockquote>\n<p>配置线程池可以从以下几个方面考虑。</p>\n<ul>\n<li><p>任务是cpu密集型、IO密集型或者混合型</p>\n</li>\n<li><p>任务优先级，高中低。</p>\n</li>\n<li><p>任务时间执行长短。</p>\n</li>\n<li><p>任务依赖性：是否依赖其他系统资源。</p>\n<ul>\n<li><p>cpu密集型可以配置可能小的线程,比如 n + 1个线程。</p>\n</li>\n<li><p>io密集型可以配置较多的线程，如 2n个线程。</p>\n</li>\n<li><p>混合型可以拆成io密集型任务和cpu密集型任务，</p>\n</li>\n<li><p>如果两个任务执行时间相差大，否-&gt;分解后执行吞吐量将高于串行执行吞吐量。<br>否-&gt;没必要分解。</p>\n</li>\n<li><p>可以通过Runtime.getRuntime().availableProcessors()来获取cpu个数。</p>\n</li>\n<li><p>建议使用有界队列，增加系统的预警能力和稳定性。</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>JDK 内置的拒绝策略</p>\n</blockquote>\n<ul>\n<li><p>AbortPolicy 抛出异常。</p>\n</li>\n<li><p>DiscardPolicy 直接静悄悄的丢弃这个任务，不触发任何动作。这个策略基本不会使用</p>\n</li>\n<li><p>DiscardOldestPolicy 丢弃队列最前面（最旧）的任务，然后重新尝试执行任务（重复此过程）。</p>\n</li>\n<li><p>CallerRunsPolicy 由调用线程处理该任务 。</p>\n</li>\n</ul>\n",
            "tags": [
                "Java",
                "Java面试",
                "多线程"
            ]
        }
    ]
}