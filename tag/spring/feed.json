{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"spring\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/89080a8e/",
            "url": "https://smile1231.github.io/posts/89080a8e/",
            "title": "Spring Bean的生命周期",
            "date_published": "2022-02-15T14:34:55.000Z",
            "content_html": "<h1 id=\"Spring-Bean的生命周期\"><a href=\"#Spring-Bean的生命周期\" class=\"headerlink\" title=\"Spring Bean的生命周期\"></a><code>Spring Bean</code>的生命周期</h1><p>大致流程：</p>\n<p>本文将从以下两方面去帮助理解 <code>Bean</code> 的生命周期：</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>生命周期的概要流程：对 <code>Bean</code> 的生命周期进行概括，并且结合代码来理解；</li>\n<li>扩展点的作用：详细介绍 <code>Bean</code> 生命周期中所涉及到的扩展点的作用。</li>\n</ul>\n<h2 id=\"生命周期的概要流程\"><a href=\"#生命周期的概要流程\" class=\"headerlink\" title=\"生命周期的概要流程\"></a>生命周期的概要流程</h2><p><code>Bean</code> 的生命周期概括起来就是 <code>4</code> 个阶段：</p>\n<ul>\n<li>实例化（<code>Instantiation</code>）</li>\n<li>属性赋值（<code>Populate</code>）</li>\n<li>初始化（<code>Initialization</code>）</li>\n<li>销毁（<code>Destruction</code>）</li>\n</ul>\n<ul>\n<li>实例化：第 <code>1</code> 步，实例化一个 <code>bean</code> 对象；</li>\n<li>属性赋值：第 <code>2</code> 步，为 <code>bean</code> 设置相关属性和依赖；</li>\n<li>初始化：第 <code>3~7</code> 步，步骤较多，其中第 <code>5、6</code> 步为初始化操作，第 <code>3、4</code> 步为在初始化前执行，第 <code>7</code> 步在初始化后执行，该阶段结束，才能被用户使用；</li>\n<li>销毁：第 <code>8~10</code>步，第<code>8</code>步不是真正意义上的销毁（还没使用呢），而是先在使用前注册了销毁的相关调用接口，为了后面第<code>9、10</code>步真正销毁 <code>bean</code> 时再执行相应的方法。</li>\n</ul>\n<p>下面我们结合代码来直观的看下，在 <code>doCreateBean()</code> 方法中能看到依次执行了这 <code>4</code> 个阶段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd, <span class=\"keyword\">final</span> <span class=\"meta\">@Nullable</span> Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> BeanCreationException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 1. 实例化</span></span><br><span class=\"line\">    BeanWrapper instanceWrapper = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Object exposedObject = bean;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 属性赋值</span></span><br><span class=\"line\">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 初始化</span></span><br><span class=\"line\">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 4. 销毁-注册回调接口</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> exposedObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于初始化包含了第 <code>3~7</code>步，较复杂，所以我们进到 <code>initializeBean()</code> 方法里具体看下其过程（注释的序号对应图中序号）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">initializeBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> Object bean, <span class=\"meta\">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 检查 Aware 相关接口并设置相关依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">            invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;, getAccessControlContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 4. BeanPostProcessor 前置处理</span></span><br><span class=\"line\">    Object wrappedBean = bean;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 5. 若实现 InitializingBean 接口，调用 afterPropertiesSet() 方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 6. 若配置自定义的 init-method方法，则执行</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">            (mbd != <span class=\"keyword\">null</span> ? mbd.getResourceDescription() : <span class=\"keyword\">null</span>),</span><br><span class=\"line\">            beanName, <span class=\"string\">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 7. BeanPostProceesor 后置处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrappedBean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">initializeBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> Object bean, <span class=\"meta\">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 检查 Aware 相关接口并设置相关依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">            invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;, getAccessControlContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 4. BeanPostProcessor 前置处理</span></span><br><span class=\"line\">    Object wrappedBean = bean;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 5. 若实现 InitializingBean 接口，调用 afterPropertiesSet() 方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 6. 若配置自定义的 init-method方法，则执行</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">            (mbd != <span class=\"keyword\">null</span> ? mbd.getResourceDescription() : <span class=\"keyword\">null</span>),</span><br><span class=\"line\">            beanName, <span class=\"string\">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 7. BeanPostProceesor 后置处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrappedBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>invokInitMethods()</code> 方法中会检查 <code>InitializingBean</code> 接口和 <code>init-method</code> 方法，销毁的过程也与其类似：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DisposableBeanAdapter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 9. 若实现 DisposableBean 接口，则执行 destory()方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.invokeDisposableBean) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">                    ((DisposableBean) <span class=\"keyword\">this</span>.bean).destroy();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;, <span class=\"keyword\">this</span>.acc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ((DisposableBean) <span class=\"keyword\">this</span>.bean).destroy();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 10. 若配置自定义的 detory-method 方法，则执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.destroyMethod != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        invokeCustomDestroyMethod(<span class=\"keyword\">this</span>.destroyMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.destroyMethodName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Method methodToInvoke = determineDestroyMethod(<span class=\"keyword\">this</span>.destroyMethodName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (methodToInvoke != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            invokeCustomDestroyMethod(ClassUtils.getInterfaceMethodIfPossible(methodToInvoke));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>从 <code>Spring</code> 的源码我们可以直观的看到其执行过程，而我们记忆其过程便可以从这 <code>4</code> 个阶段出发，实例化、属性赋值、初始化、销毁。其中细节较多的便是初始化，涉及了 <code>Aware、BeanPostProcessor、InitializingBean、init-method</code> 的概念。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3psMXpsMnpsMy9hcnRpY2xlL2RldGFpbHMvMTA1MDQ0OTU0\">拓展点讲解</span></p>\n",
            "tags": [
                "Java面试",
                "Spring"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/b536fa7f/",
            "url": "https://smile1231.github.io/posts/b536fa7f/",
            "title": "关于junit测试类防止事务回滚",
            "date_published": "2022-02-12T04:24:55.000Z",
            "content_html": "<blockquote>\n<p>背景<br>昨晚在做一个<code>Junit</code>测试时，使用了事务来测试某个业务，但是意外发现，在``SpringBoot<code>测试中会自定帮你回滚掉</code>CUD`操作，下面是自己做的简单测试:</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<img data-src=\"/blog/posts/b536fa7f/2022-02-12-16-03-00.png\" class=\"\">\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentMapperTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">context02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        LambdaUpdateWrapper&lt;Student&gt; updateWrapper = <span class=\"keyword\">new</span> LambdaUpdateWrapper&lt;&gt;();</span><br><span class=\"line\">        updateWrapper.eq(Student::getName,<span class=\"string\">&quot;张三&quot;</span>)</span><br><span class=\"line\">                .set(Student::getName,<span class=\"string\">&quot;张三改&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        studentDao.update(Student.builder().build(), updateWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这边做了一个简单的更新操作，然后进行操作时</p>\n<img data-src=\"/blog/posts/b536fa7f/2022-02-12-16-22-47.png\" class=\"\">\n\n<p>此时观察数据库的确也没有被更新掉</p>\n<p>只需要在测试方法上添加<code>@Rollback(false)</code>，我们试一试</p>\n<img data-src=\"/blog/posts/b536fa7f/2022-02-12-16-39-25.png\" class=\"\">\n\n<p>运行结果</p>\n<img data-src=\"/blog/posts/b536fa7f/2022-02-12-18-43-01.png\" class=\"\">\n\n<p>也算是一个小坑嘛，哈哈！</p>\n",
            "tags": [
                "Java",
                "Spring",
                "junit"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/4ca5bfdf/",
            "url": "https://smile1231.github.io/posts/4ca5bfdf/",
            "title": "Spring手动回滚事务",
            "date_published": "2021-12-16T10:49:45.000Z",
            "content_html": "<p>转载<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbXlpdG5ld3MvcC8xMzM3MDg5OS5odG1s\">https://www.cnblogs.com/myitnews/p/13370899.html</span></p>\n<p>这边是讲解如何手动回滚事务</p>\n<span id=\"more\"></span>\n<h1 id=\"一、手动回滚事务\"><a href=\"#一、手动回滚事务\" class=\"headerlink\" title=\"一、手动回滚事务\"></a>一、手动回滚事务</h1><p>有时我们需要捕获一些错误信息，又需要进行事务回滚，这时我们就需要用到<code>Spring</code>提供的事务切面支持类<code>TransactionAspectSupport</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveEntity</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        userDao.saveUser();</span><br><span class=\"line\">        studentDao.saveStudent();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异常了=====&quot;</span> + e);</span><br><span class=\"line\">        <span class=\"comment\">//手动强制回滚事务，这里一定要第一时间处理</span></span><br><span class=\"line\">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>手动回滚事务一定要加上<code>@Transactional</code>，不然会报以下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.transaction.NoTransactionException: No transaction aspect-managed TransactionStatus in scope</span><br></pre></td></tr></table></figure>\n<p>想想也是，不开启事务，何来手动回滚，所以<code>@Transactional</code>必不可少。</p>\n<h1 id=\"二、回滚部分异常\"><a href=\"#二、回滚部分异常\" class=\"headerlink\" title=\"二、回滚部分异常\"></a>二、回滚部分异常</h1><p>使用<code>Object savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint()</code>; 设置回滚点。<br>使用<code>TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint)</code>; 回滚到<code>savePoint</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveEntity</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Object savePoint = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        userDao.saveUser();</span><br><span class=\"line\">        <span class=\"comment\">//设置回滚点</span></span><br><span class=\"line\">        savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint();</span><br><span class=\"line\">        studentDao.saveStudent(); <span class=\"comment\">//执行成功</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>/<span class=\"number\">0</span>; <span class=\"comment\">//这里因为除数0会报异常,进入catch块</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异常了=====&quot;</span> + e);</span><br><span class=\"line\">        <span class=\"comment\">//手工回滚异常</span></span><br><span class=\"line\">        TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三、DataSourceTransactionManager\"><a href=\"#三、DataSourceTransactionManager\" class=\"headerlink\" title=\"三、DataSourceTransactionManager\"></a>三、<code>DataSourceTransactionManager</code></h1><p><code>spring</code> 开启事务以及手动提交事务，可以在服务类上加上两个注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">DataSourceTransactionManager dataSourceTransactionManager;</span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">TransactionDefinition transactionDefinition;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>手动开启事务<br>  <code>TransactionStatus transactionStatus = dataSourceTransactionManager.getTransaction(transactionDefinition);</code></li>\n<li>手动提交事务<br>  <code>dataSourceTransactionManager.commit(transactionStatus);//提交</code></li>\n<li>手动回滚事务<br>  <code>dataSourceTransactionManager.rollback(transactionStatus);</code>//最好是放在<code>catch</code> 里面,防止程序异常而事务一直卡在哪里未提交</li>\n</ul>\n",
            "tags": [
                "Java",
                "Spring",
                "事务"
            ]
        }
    ]
}