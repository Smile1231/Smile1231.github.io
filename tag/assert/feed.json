{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"assert\" tag",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/c3733521/",
            "url": "https://smile1231.github.io/posts/c3733521/",
            "title": "Java之assert关键字",
            "date_published": "2022-02-13T13:35:24.000Z",
            "content_html": "<h1 id=\"Java之assert关键字\"><a href=\"#Java之assert关键字\" class=\"headerlink\" title=\"Java之assert关键字\"></a><code>Java</code>之<code>assert</code>关键字</h1><p>在<code>Java</code>中，<code>assert</code>关键字是从<code>JAVA SE 1.4</code> 引入的，为了避免和老版本的<code>Java</code>代码中使用了<code>assert</code>关键字导致错误，<code>Java</code>在执行的时候默认是不启动断言检查的（这个时候，所有的断言语句都 将忽略！），如果要开启断言检查，则需要用开关<code>-enableassertions</code>或<code>-ea</code>来开启。</p>\n<p><code>assert</code>关键字语法很简单，有两种用法：</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><p><code>assert</code> <code>&lt;boolean表达式&gt;</code></p>\n<p> 如果<code>&lt;boolean表达式&gt;</code>为<code>true</code>，则程序继续执行。</p>\n<p> 如果为<code>false</code>，则程序抛出<code>AssertionError</code>，并终止执行。</p>\n</li>\n<li><p><code>assert &lt;boolean表达式&gt;</code> : &lt;错误信息表达式&gt;</p>\n<p> 如果<code>&lt;boolean表达式&gt;</code>为<code>true</code>，则程序继续执行。</p>\n<p> 如果为<code>false</code>，则程序抛出<code>java.lang.AssertionError</code>，并输入&lt;错误信息表达式&gt;。</p>\n</li>\n</ol>\n<h2 id=\"简单实例\"><a href=\"#简单实例\" class=\"headerlink\" title=\"简单实例\"></a>简单实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//断言1结果为true，则继续往下执行</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    System. out.println(<span class=\"string\">&quot;断言1没有问题，Go！&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System. out.println(<span class=\"string\">&quot;\\n-----------------\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//断言2结果为false,程序终止</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"keyword\">false</span> : <span class=\"string\">&quot;断言失败，此表达式的信息将会在抛出异常的时候输出！&quot;</span>;</span><br><span class=\"line\">    System. out.println(<span class=\"string\">&quot;断言2没有问题，Go！&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于上述所说,在<code>IDEA</code>中需要手动开启 断言机制</p>\n<p>开启方法:</p>\n<img data-src=\"/blog/posts/c3733521/2022-02-13-22-04-43.png\" class=\"\">\n\n<img data-src=\"/blog/posts/c3733521/2022-02-13-22-04-59.png\" class=\"\">\n\n<img data-src=\"/blog/posts/c3733521/2022-02-13-22-05-23.png\" class=\"\">\n\n<p>输入<code>-ea</code></p>\n<img data-src=\"/blog/posts/c3733521/2022-02-13-22-05-35.png\" class=\"\">\n\n<p>运行结果</p>\n<img data-src=\"/blog/posts/c3733521/2022-02-13-22-05-42.png\" class=\"\">\n\n<h2 id=\"陷阱\"><a href=\"#陷阱\" class=\"headerlink\" title=\"陷阱\"></a>陷阱</h2><p><code>assert</code>关键字用法简单，但是使用<code>assert</code>往往会让你陷入越来越深的陷阱中。应避免使用。笔者经过研究，总结了以下原因：</p>\n<p>1、<code>assert</code>关键字需要在运行时候显式开启才能生效，否则你的断言就没有任何意义。而现在主流的<code>Java IDE</code>工具默认都没有开启<code>-ea</code>断言检查功能。这就意味着你如果使用<code>IDE</code>工具编码，调试运行时候会有一定的麻烦。并且，对于<code>Java Web</code>应用，程序代码都是部署在容器里面，你没法直接去控制程序的运行，如果一定要开启<code>-ea</code>的开关，则需要更改<code>Web</code>容器的运行配置参数。这对程序的移 植和部署都带来很大的不便。</p>\n<p>2、用<code>assert</code>代替<code>if</code>是陷阱之二。<code>assert</code>的判断和<code>if</code>语句差不多，但两者的作用有着本质的区别：<code>assert</code>关键字本意上是为测试 调试程序时使用的，但如果不小心用<code>assert</code>来控制了程序的业务流程，那在测试调试结束后去掉<code>assert</code>关键字就意味着修改了程序的正常的逻辑。</p>\n<p>3、<code>assert</code>断言失败将面临程序的退出。这在一个生产环境下的应用是绝不能容忍的。一般都是通过异常处理来解决程序中潜在的错误。但是使用断言就很危险，一旦失败系统就挂了。</p>\n<h2 id=\"对assert的思考\"><a href=\"#对assert的思考\" class=\"headerlink\" title=\"对assert的思考\"></a>对<code>assert</code>的思考</h2><p><code>assert</code>既然是为了调试测试程序用，不在正式生产环境下用，那应该考虑更好的测试<code>JUint</code>来代替其做用，<code>JUint</code>相对<code>assert</code>关键的所提供的功能是有过之而无不及。当然完全可以通过<code>IDE debug</code>来进行调试测试。在此看来，<code>assert</code>的前途一片昏暗。</p>\n<p>因此，应当避免在<code>Java</code>中使用<code>assert</code>关键字，除非哪一天<code>Java</code>默认支持开启<code>-ea</code>的开关，这时候可以考虑。对比一下，<code>assert</code>能给你带来多少好处，多少麻烦，这是我们选择是否使用的的原则。</p>\n",
            "tags": [
                "Java",
                "Assert"
            ]
        }
    ]
}