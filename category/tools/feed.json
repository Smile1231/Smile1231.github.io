{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"tools\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/6714b4a9/",
            "url": "https://smile1231.github.io/posts/6714b4a9/",
            "title": "FastJson序列化使用",
            "date_published": "2022-02-15T14:29:52.000Z",
            "content_html": "<h2 id=\"需要导入依赖\"><a href=\"#需要导入依赖\" class=\"headerlink\" title=\"需要导入依赖\"></a>需要导入依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!--fastJson--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.75<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n\n<h2 id=\"实体类转换为Json字符串\"><a href=\"#实体类转换为Json字符串\" class=\"headerlink\" title=\"实体类转换为Json字符串\"></a>实体类转换为<code>Json</code>字符串</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.toJSONString(实体类)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Json字符串转换为实体类\"><a href=\"#Json字符串转换为实体类\" class=\"headerlink\" title=\"Json字符串转换为实体类\"></a><code>Json</code>字符串转换为实体类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.parseObject(str(json字符串), (实体类).class);</span><br></pre></td></tr></table></figure>\n\n\n<img data-src=\"/posts/6714b4a9/2022-02-16-00-24-22.png\" class=\"\">\n\n\n\n\n<h2 id=\"常见使用\"><a href=\"#常见使用\" class=\"headerlink\" title=\"常见使用\"></a>常见使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把JSON文本parse为JSONObject或者JSONArray </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object <span class=\"title\">parse</span><span class=\"params\">(String text)</span></span>; </span><br><span class=\"line\"><span class=\"comment\">// 把JSON文本parse成JSONObject    </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> JSONObject <span class=\"title\">parseObject</span><span class=\"params\">(String text)</span>； </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 把JSON文本parse为JavaBean </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;T&gt; T <span class=\"title\">parseObject</span><span class=\"params\">(String text, Class&lt;T&gt; clazz)</span></span>; </span><br><span class=\"line\"><span class=\"comment\">// 把JSON文本parse成JSONArray </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> JSONArray <span class=\"title\">parseArray</span><span class=\"params\">(String text)</span></span>; </span><br><span class=\"line\"><span class=\"comment\">//把JSON文本parse成JavaBean集合 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">parseArray</span><span class=\"params\">(String text, Class&lt;T&gt; clazz)</span></span>; </span><br><span class=\"line\"> <span class=\"comment\">// 将JavaBean序列化为JSON文本 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">toJSONString</span><span class=\"params\">(Object object)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 将JavaBean序列化为带格式的JSON文本 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String <span class=\"title\">toJSONString</span><span class=\"params\">(Object object, <span class=\"keyword\">boolean</span> prettyFormat)</span></span>; </span><br><span class=\"line\"><span class=\"comment\">//将JavaBean转换为JSONObject或者JSONArray。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object <span class=\"title\">toJSON</span><span class=\"params\">(Object javaObject)</span></span>; </span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "Java面试",
                "FastJson"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/b246d3ce/",
            "url": "https://smile1231.github.io/posts/b246d3ce/",
            "title": "Java自带的好用的工具类",
            "date_published": "2022-02-13T13:39:11.000Z",
            "content_html": "<h1 id=\"Java自带的好用的工具类\"><a href=\"#Java自带的好用的工具类\" class=\"headerlink\" title=\"Java自带的好用的工具类\"></a><code>Java</code>自带的好用的工具类</h1><h2 id=\"List集合拼接成以逗号分隔的字符串\"><a href=\"#List集合拼接成以逗号分隔的字符串\" class=\"headerlink\" title=\"List集合拼接成以逗号分隔的字符串\"></a><code>List</code>集合拼接成以逗号分隔的字符串</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如何把list集合拼接成以逗号分隔的字符串 a,b,c </span></span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);  </span><br><span class=\"line\"><span class=\"comment\">// 第一种方法，可以用stream流 </span></span><br><span class=\"line\">String join = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;,&quot;</span>));  </span><br><span class=\"line\">System.out.println(join); <span class=\"comment\">// 输出 a,b,c </span></span><br><span class=\"line\"><span class=\"comment\">// 第二种方法，其实String也有join方法可以实现这个功能 </span></span><br><span class=\"line\">String join = String.join(<span class=\"string\">&quot;,&quot;</span>, list);  </span><br><span class=\"line\">System.out.println(join); <span class=\"comment\">// 输出 a,b,c</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"比较两个字符串是否相等，忽略大小写\"><a href=\"#比较两个字符串是否相等，忽略大小写\" class=\"headerlink\" title=\"比较两个字符串是否相等，忽略大小写\"></a>比较两个字符串是否相等，忽略大小写</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (strA.equalsIgnoreCase(strB)) &#123;  </span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;相等&quot;</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"比较两个对象是否相等\"><a href=\"#比较两个对象是否相等\" class=\"headerlink\" title=\"比较两个对象是否相等\"></a>比较两个对象是否相等</h2><p>当我们用 <code>equals</code> 比较两个对象是否相等的时候，还需要对左边的对象进行判空，不然可能会报空指针异常，我们可以用 <code>java.util</code> 包下 <code>Objects</code> 封装好的比较是否相等的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Objects.equals(strA, strB);</span><br><span class=\"line\"><span class=\"comment\">//源码是这样的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object a, Object b)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a == b) || (a != <span class=\"keyword\">null</span> &amp;&amp; a.equals(b));  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两个List取交集\"><a href=\"#两个List取交集\" class=\"headerlink\" title=\"两个List取交集\"></a>两个<code>List</code>取交集</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();  </span><br><span class=\"line\">list1.add(<span class=\"string\">&quot;a&quot;</span>);  </span><br><span class=\"line\">list1.add(<span class=\"string\">&quot;b&quot;</span>);  </span><br><span class=\"line\">list1.add(<span class=\"string\">&quot;c&quot;</span>);  </span><br><span class=\"line\">List&lt;String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();  </span><br><span class=\"line\">list2.add(<span class=\"string\">&quot;a&quot;</span>);  </span><br><span class=\"line\">list2.add(<span class=\"string\">&quot;b&quot;</span>);  </span><br><span class=\"line\">list2.add(<span class=\"string\">&quot;d&quot;</span>);  </span><br><span class=\"line\">list1.retainAll(list2);  </span><br><span class=\"line\">System.out.println(list1);</span><br><span class=\"line\"><span class=\"comment\">// 输出[a, b]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用apache-commons-工具类库\"><a href=\"#使用apache-commons-工具类库\" class=\"headerlink\" title=\"使用apache commons 工具类库\"></a>使用<code>apache commons</code> 工具类库</h1><h2 id=\"字符串判空\"><a href=\"#字符串判空\" class=\"headerlink\" title=\"字符串判空\"></a>字符串判空</h2><p>传参 <code>CharSequence</code> 类型是 <code>String、StringBuilder、StringBuffer</code> 的父类，都可以直接下面方法判空，以下是源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(<span class=\"keyword\">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> cs == <span class=\"keyword\">null</span> || cs.length() == <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNotEmpty</span><span class=\"params\">(<span class=\"keyword\">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> !isEmpty(cs);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 判空的时候，会去除字符串中的空白字符，比如空格、换行、制表符 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBlank</span><span class=\"params\">(<span class=\"keyword\">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> strLen = length(cs);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strLen == <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strLen; i++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Character.isWhitespace(cs.charAt(i))) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNotBlank</span><span class=\"params\">(<span class=\"keyword\">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> !isBlank(cs);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"首字母转成大写\"><a href=\"#首字母转成大写\" class=\"headerlink\" title=\"首字母转成大写\"></a>首字母转成大写</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = <span class=\"string\">&quot;yideng&quot;</span>;  </span><br><span class=\"line\">String capitalize = StringUtils.capitalize(str);  </span><br><span class=\"line\">System.out.println(capitalize); <span class=\"comment\">// 输出Yideng</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重复拼接字符串\"><a href=\"#重复拼接字符串\" class=\"headerlink\" title=\"重复拼接字符串\"></a>重复拼接字符串</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = StringUtils.repeat(<span class=\"string\">&quot;ab&quot;</span>, <span class=\"number\">2</span>);  </span><br><span class=\"line\">System.out.println(str); <span class=\"comment\">// 输出abab</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"格式化日期\"><a href=\"#格式化日期\" class=\"headerlink\" title=\"格式化日期\"></a>格式化日期</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Date类型转String类型 </span></span><br><span class=\"line\">String date = DateFormatUtils.format(<span class=\"keyword\">new</span> Date(), <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  </span><br><span class=\"line\">System.out.println(date); <span class=\"comment\">// 输出 2021-05-01 01:01:01 </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// String类型转Date类型 </span></span><br><span class=\"line\">Date date = DateUtils.parseDate(<span class=\"string\">&quot;2021-05-01 01:01:01&quot;</span>, <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 计算一个小时后的日期 </span></span><br><span class=\"line\">Date date = DateUtils.addHours(<span class=\"keyword\">new</span> Date(), <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包装临时对象\"><a href=\"#包装临时对象\" class=\"headerlink\" title=\"包装临时对象\"></a>包装临时对象</h2><p>当一个方法需要返回两个及以上字段时，我们一般会封装成一个临时对象返回，现在有了 <code>Pair</code> 和 <code>Triple</code> 就不需要了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回两个字段 </span></span><br><span class=\"line\">ImmutablePair&lt;Integer, String&gt; pair = ImmutablePair.of(<span class=\"number\">1</span>, <span class=\"string\">&quot;yideng&quot;</span>);  </span><br><span class=\"line\">System.out.println(pair.getLeft() + <span class=\"string\">&quot;,&quot;</span> + pair.getRight()); <span class=\"comment\">// 输出 1,yideng </span></span><br><span class=\"line\"><span class=\"comment\">// 返回三个字段 </span></span><br><span class=\"line\">ImmutableTriple&lt;Integer, String, Date&gt; triple = ImmutableTriple.of(<span class=\"number\">1</span>, <span class=\"string\">&quot;yideng&quot;</span>, <span class=\"keyword\">new</span> Date());  </span><br><span class=\"line\">System.out.println(triple.getLeft() + <span class=\"string\">&quot;,&quot;</span> + triple.getMiddle() + <span class=\"string\">&quot;,&quot;</span> + triple.getRight()); <span class=\"comment\">// 输出 1,yideng,Wed Apr 07 23:30:00 CST 2021</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"commons-collections-集合工具类\"><a href=\"#commons-collections-集合工具类\" class=\"headerlink\" title=\"commons-collections 集合工具类\"></a><code>commons-collections</code> 集合工具类</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-collections4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"集合判空\"><a href=\"#集合判空\" class=\"headerlink\" title=\"集合判空\"></a>集合判空</h2><p>封装了集合判空的方法，以下是源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection&lt;?&gt; coll)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> coll == <span class=\"keyword\">null</span> || coll.isEmpty();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNotEmpty</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection&lt;?&gt; coll)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> !isEmpty(coll);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 两个集合取交集 </span></span><br><span class=\"line\">Collection&lt;String&gt; collection = CollectionUtils.retainAll(listA, listB);  </span><br><span class=\"line\"><span class=\"comment\">// 两个集合取并集 </span></span><br><span class=\"line\">Collection&lt;String&gt; collection = CollectionUtils.union(listA, listB);  </span><br><span class=\"line\"><span class=\"comment\">// 两个集合取差集 </span></span><br><span class=\"line\">Collection&lt;String&gt; collection = CollectionUtils.subtract(listA, listB);</span><br></pre></td></tr></table></figure>\n<h1 id=\"common-beanutils-操作对象\"><a href=\"#common-beanutils-操作对象\" class=\"headerlink\" title=\"common-beanutils 操作对象\"></a><code>common-beanutils</code> 操作对象</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-beanutils<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-beanutils<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/******************************************************************/</span></span><br><span class=\"line\">User user = <span class=\"keyword\">new</span> User();  </span><br><span class=\"line\">BeanUtils.setProperty(user, <span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">1</span>);  </span><br><span class=\"line\">BeanUtils.setProperty(user, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;yideng&quot;</span>);  </span><br><span class=\"line\">System.out.println(BeanUtils.getProperty(user, <span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// 输出 yideng </span></span><br><span class=\"line\">System.out.println(user); <span class=\"comment\">// 输出 &#123;&quot;id&quot;:1,&quot;name&quot;:&quot;yideng&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">/******************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">//对象和 map 互转</span></span><br><span class=\"line\">Map&lt;String, String&gt; map = BeanUtils.describe(user);  </span><br><span class=\"line\">System.out.println(map); <span class=\"comment\">// 输出 &#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;yideng&quot;&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// map转对象 </span></span><br><span class=\"line\">User newUser = <span class=\"keyword\">new</span> User();  </span><br><span class=\"line\">BeanUtils.populate(newUser, map);  </span><br><span class=\"line\">System.out.println(newUser); <span class=\"comment\">// 输出 &#123;&quot;id&quot;:1,&quot;name&quot;:&quot;yideng&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"commons-io-文件流处理\"><a href=\"#commons-io-文件流处理\" class=\"headerlink\" title=\"commons-io 文件流处理\"></a><code>commons-io</code> 文件流处理</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>文件处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;demo1.txt&quot;</span>);  </span><br><span class=\"line\"><span class=\"comment\">// 读取文件 </span></span><br><span class=\"line\">List&lt;String&gt; lines = FileUtils.readLines(file, Charset.defaultCharset());  </span><br><span class=\"line\"><span class=\"comment\">// 写入文件 </span></span><br><span class=\"line\">FileUtils.writeLines(<span class=\"keyword\">new</span> File(<span class=\"string\">&quot;demo2.txt&quot;</span>), lines);  </span><br><span class=\"line\"><span class=\"comment\">// 复制文件 </span></span><br><span class=\"line\">FileUtils.copyFile(srcFile, destFile);</span><br><span class=\"line\">```   </span><br><span class=\"line\"># ``Google Guava`` 工具类库</span><br><span class=\"line\"></span><br><span class=\"line\">```xml</span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;guava&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">30.1</span><span class=\"number\">.1</span>-jre&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Lists.newArrayList();  </span><br><span class=\"line\">List&lt;Integer&gt; list = Lists.newArrayList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);  </span><br><span class=\"line\"><span class=\"comment\">// 反转list </span></span><br><span class=\"line\">List&lt;Integer&gt; reverse = Lists.reverse(list);  </span><br><span class=\"line\">System.out.println(reverse); <span class=\"comment\">// 输出 [3, 2, 1] </span></span><br><span class=\"line\"><span class=\"comment\">// list集合元素太多，可以分成若干个集合，每个集合10个元素 </span></span><br><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; partition = Lists.partition(list, <span class=\"number\">10</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">Map&lt;String, String&gt; map = Maps.newHashMap();  </span><br><span class=\"line\">Set&lt;String&gt; set = Sets.newHashSet();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Multimap-一个-key-可以映射多个-value-的-HashMap\"><a href=\"#Multimap-一个-key-可以映射多个-value-的-HashMap\" class=\"headerlink\" title=\"Multimap 一个 key 可以映射多个 value 的 HashMap\"></a><code>Multimap</code> 一个 <code>key</code> 可以映射多个 <code>value</code> 的 <code>HashMap</code></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Multimap&lt;String, Integer&gt; map = ArrayListMultimap.create();  </span><br><span class=\"line\">map.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">1</span>);  </span><br><span class=\"line\">map.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">2</span>);  </span><br><span class=\"line\">Collection&lt;Integer&gt; values = map.get(<span class=\"string\">&quot;key&quot;</span>);  </span><br><span class=\"line\">System.out.println(map); <span class=\"comment\">// 输出 &#123;&quot;key&quot;:[1,2]&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// 还能返回你以前使用的臃肿的Map </span></span><br><span class=\"line\">Map&lt;String, Collection&lt;Integer&gt;&gt; collectionMap = map.asMap();</span><br></pre></td></tr></table></figure>\n<p>多省事，多简洁，省得你再创建 Map&lt;String, List&gt;</p>\n<h2 id=\"BiMap-一种连-value-也不能重复的-HashMap\"><a href=\"#BiMap-一种连-value-也不能重复的-HashMap\" class=\"headerlink\" title=\"BiMap 一种连 value 也不能重复的 HashMap\"></a><code>BiMap</code> 一种连 <code>value</code> 也不能重复的 <code>HashMap</code></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BiMap&lt;String, String&gt; biMap = HashBiMap.create();  </span><br><span class=\"line\"><span class=\"comment\">// 如果value重复，put方法会抛异常，除非用forcePut方法 </span></span><br><span class=\"line\">biMap.put(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);  </span><br><span class=\"line\">System.out.println(biMap); <span class=\"comment\">// 输出 &#123;&quot;key&quot;:&quot;value&quot;&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// 既然value不能重复，何不实现个翻转key/value的方法，已经有了 </span></span><br><span class=\"line\">BiMap&lt;String, String&gt; inverse = biMap.inverse();  </span><br><span class=\"line\">System.out.println(inverse); <span class=\"comment\">// 输出 &#123;&quot;value&quot;:&quot;key&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这其实是双向映射，在某些场景还是很实用的。</p>\n<img data-src=\"/posts/b246d3ce/2022-02-13-22-22-23.png\" class=\"\">\n\n<h2 id=\"Table-一种有两个-key-的-HashMap\"><a href=\"#Table-一种有两个-key-的-HashMap\" class=\"headerlink\" title=\"Table 一种有两个 key 的 HashMap\"></a><code>Table</code> 一种有两个 <code>key</code> 的 <code>HashMap</code></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一批用户，同时按年龄和性别分组 </span></span><br><span class=\"line\">Table&lt;Integer, String, String&gt; table = HashBasedTable.create();  </span><br><span class=\"line\">table.put(<span class=\"number\">18</span>, <span class=\"string\">&quot;男&quot;</span>, <span class=\"string\">&quot;yideng&quot;</span>);  </span><br><span class=\"line\">table.put(<span class=\"number\">18</span>, <span class=\"string\">&quot;女&quot;</span>, <span class=\"string\">&quot;Lily&quot;</span>);  </span><br><span class=\"line\">System.out.println(table.get(<span class=\"number\">18</span>, <span class=\"string\">&quot;男&quot;</span>)); <span class=\"comment\">// 输出 yideng </span></span><br><span class=\"line\"><span class=\"comment\">// 这其实是一个二维的Map，可以查看行数据 </span></span><br><span class=\"line\">Map&lt;String, String&gt; row = table.row(<span class=\"number\">18</span>);  </span><br><span class=\"line\">System.out.println(row); <span class=\"comment\">// 输出 &#123;&quot;男&quot;:&quot;yideng&quot;,&quot;女&quot;:&quot;Lily&quot;&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// 查看列数据 </span></span><br><span class=\"line\">Map&lt;Integer, String&gt; column = table.column(<span class=\"string\">&quot;男&quot;</span>);  </span><br><span class=\"line\">System.out.println(column); <span class=\"comment\">// 输出 &#123;18:&quot;yideng&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Multiset-一种用来计数的-Set\"><a href=\"#Multiset-一种用来计数的-Set\" class=\"headerlink\" title=\"Multiset 一种用来计数的 Set\"></a><code>Multiset</code> 一种用来计数的 <code>Set</code></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Multiset&lt;String&gt; multiset = HashMultiset.create();  </span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;apple&quot;</span>);  </span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;apple&quot;</span>);  </span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;orange&quot;</span>);  </span><br><span class=\"line\">System.out.println(multiset.count(<span class=\"string\">&quot;apple&quot;</span>)); <span class=\"comment\">// 输出 2 </span></span><br><span class=\"line\"><span class=\"comment\">// 查看去重的元素 </span></span><br><span class=\"line\">Set&lt;String&gt; set = multiset.elementSet();  </span><br><span class=\"line\">System.out.println(set); <span class=\"comment\">// 输出 [&quot;orange&quot;,&quot;apple&quot;] </span></span><br><span class=\"line\"><span class=\"comment\">// 还能查看没有去重的元素 </span></span><br><span class=\"line\">Iterator&lt;String&gt; iterator = multiset.iterator();  </span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;  </span><br><span class=\"line\">    System.out.println(iterator.next());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 还能手动设置某个元素出现的次数 </span></span><br><span class=\"line\">multiset.setCount(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/817eab42/",
            "url": "https://smile1231.github.io/posts/817eab42/",
            "title": "java中产生指定范围内的随机数",
            "date_published": "2022-01-27T09:57:25.000Z",
            "content_html": "<ol>\n<li><p><code>Math.random()</code>方法返回一个<code>[0.0 , 1.0)</code>的伪随机<code>double</code>类型的随机数</p>\n</li>\n<li><p><code>[min,max]</code>范围内的数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>    num = min + (<span class=\"keyword\">int</span>)(Math.random() * (max-min));</span><br><span class=\"line\"><span class=\"keyword\">double</span> num = min + (Math.random() * (max-min));</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li><p>用<code>nextInt</code>方法生成区间范围内的随机整数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random rand=<span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n1=rand.nextInt(<span class=\"number\">100</span>);<span class=\"comment\">//返回值在范围[0,100) 即[0,99]</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n2=rand.nextInt(<span class=\"number\">100</span>)+<span class=\"number\">1</span>;<span class=\"comment\">//[1,100]内的随机整数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n3=rand.nextInt(<span class=\"number\">80</span>)+<span class=\"number\">10</span>;<span class=\"comment\">//[10,89]内的随机整数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n4=rand.nextInt(<span class=\"number\">27</span>)+<span class=\"number\">82</span>;<span class=\"comment\">//[82,108]内的随机整数</span></span><br></pre></td></tr></table></figure>\n<p>注意<code>rand.nextInt(n)</code>中的参数<code>n</code>代表的是生成随机整数的数量，与生成随机整数的范围无关。比如代码中的<code>n4</code>,整数取值为<code>[82,108]</code>,共<code>27</code>个数，加上后面的<code>82</code>表示区间最小值</p>\n</li>\n</ol>\n<p>生成<code>[min,max]</code>范围内随机整数的通用公式为：**<code>n=rand.nextInt(max-min+1)+min。</code>**</p>\n<p>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dzal9qZXJyeTUyMS9hcnRpY2xlL2RldGFpbHMvMTA5NzM1ODAx\">https://blog.csdn.net/wsj_jerry521/article/details/109735801</span></p>\n",
            "tags": []
        },
        {
            "id": "https://smile1231.github.io/posts/ba83fda/",
            "url": "https://smile1231.github.io/posts/ba83fda/",
            "title": "超级好用的StringJoiner",
            "date_published": "2022-01-26T15:00:04.000Z",
            "content_html": "<h1 id=\"超级好用的StringJoiner\"><a href=\"#超级好用的StringJoiner\" class=\"headerlink\" title=\"超级好用的StringJoiner\"></a>超级好用的<code>StringJoiner</code></h1><p>主要先说一下自己的最近的需求,类似于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&amp;lt;402162465.20106.1625035747695.JavaMail.saicapp@deployment-invoiceservice-7bc58468c5-gtqb7&amp;gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//其实是读取的时候 &lt;&gt; 大小于号 变成了字符串,所以现在要做的就是把他还原成</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;402162465.20106.1625035747695.JavaMail.saicapp@deployment-invoiceservice-7bc58468c5-gtqb7&gt;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>需要做的有两步,将<code>&amp;lt;</code> <code>&amp;gt;</code> 去掉,然后再加前后缀 <code>&lt;</code>,<code>&gt;</code></p>\n<p>基本上的做法就是:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">messageIdHandle</span><span class=\"params\">(String messageId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//&amp;lt;402162465.20106.1625035747695.JavaMail.saicapp@deployment-invoiceservice-7bc58468c5-gtqb7&amp;gt;</span></span><br><span class=\"line\">    <span class=\"comment\">//去除前后缀</span></span><br><span class=\"line\">    String noPreMessageId = StrUtil.removePrefix(messageId, <span class=\"string\">&quot;&amp;lt;&quot;</span>);</span><br><span class=\"line\">    String noPreAndSufMessageId = StrUtil.removeSuffix(noPreMessageId, <span class=\"string\">&quot;&amp;gt;&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//拼接&lt;&gt; 号</span></span><br><span class=\"line\">    StringJoiner stringJoiner = <span class=\"keyword\">new</span> StringJoiner(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&lt;&quot;</span>, <span class=\"string\">&quot;&gt;&quot;</span>);</span><br><span class=\"line\">    StringJoiner realMessageId = stringJoiner.add(<span class=\"string\">&quot;&quot;</span>).add(noPreAndSufMessageId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> realMessageId.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以我觉得<code>StringJoiner</code>挺好玩的!</p>\n<h2 id=\"StringJoiner类详解\"><a href=\"#StringJoiner类详解\" class=\"headerlink\" title=\"StringJoiner类详解\"></a><code>StringJoiner</code>类详解</h2><img data-src=\"/posts/ba83fda/2022-01-26-23-02-22.png\" class=\"\">\n\n<p>我们可以构造由定界符分隔的字符序列，并可选地以提供的前缀开头并以提供的后缀结尾。然后调用<code>add</code>方法添加字符串。例子代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringJoiner stringJoiner = <span class=\"keyword\">new</span> StringJoiner(<span class=\"string\">&quot;:&quot;</span>, <span class=\"string\">&quot;[&quot;</span>, <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">stringJoiner.add(<span class=\"string\">&quot;George&quot;</span>).add(<span class=\"string\">&quot;Sally&quot;</span>).add(<span class=\"string\">&quot;Fred&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(stringJoiner);</span><br></pre></td></tr></table></figure>\n<p>打印结果:</p>\n<img data-src=\"/posts/ba83fda/2022-01-26-23-02-31.png\" class=\"\">\n\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>StringJoiner总共有五个参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix;    <span class=\"comment\">//前缀</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String delimiter; <span class=\"comment\">//分隔符</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String suffix;    <span class=\"comment\">//后缀</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> StringBuilder value;  </span><br><span class=\"line\"><span class=\"keyword\">private</span> String emptyValue;   </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> StringBuilder value; </span><br><span class=\"line\"><span class=\"comment\">//其实是Joiner的底层，说到底StringJoiner还是调用的StringBuiler方法，只是这层封装里加上了有关于前缀，后缀和连接符的操作，让我们可以方便一些。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* By default, the string consisting of prefix+suffix, returned by</span></span><br><span class=\"line\"><span class=\"comment\">* toString(), or properties of value, when no elements have yet been added,</span></span><br><span class=\"line\"><span class=\"comment\">* i.e. when it is empty.  This may be overridden by the user to be some</span></span><br><span class=\"line\"><span class=\"comment\">* other value including the empty String.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> <span class=\"keyword\">private</span> String emptyValue;</span><br><span class=\"line\"><span class=\"comment\">//emptyValue 你可以把它看作是当你的StringJoiner对象没有进行任何add的操作时，调用toString() 方法会return 这个字符串而不是空。具体的用法后面看到setEmptyValue的时候再举例子。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><img data-src=\"/posts/ba83fda/2022-01-26-23-02-42.png\" class=\"\">\n<p>参数比较多的构造器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(CharSequence delimiter,CharSequence prefix,CharSequence suffix)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(prefix, <span class=\"string\">&quot;The prefix must not be null&quot;</span>);</span><br><span class=\"line\">    Objects.requireNonNull(delimiter, <span class=\"string\">&quot;The delimiter must not be null&quot;</span>);</span><br><span class=\"line\">    Objects.requireNonNull(suffix, <span class=\"string\">&quot;The suffix must not be null&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// make defensive copies of arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.prefix = prefix.toString();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delimiter = delimiter.toString();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.suffix = suffix.toString();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emptyValue = <span class=\"keyword\">this</span>.prefix + <span class=\"keyword\">this</span>.suffix;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面三个参数分别是前缀后缀和连接符，然后这里有一个操作就是将<code>emptyValue</code>赋值了前缀+后缀的字符串。也就是说当你用了这个构造器的时候，<code>emptyValue</code>就已经有值了，就是前缀+后缀拼接。当你<code>StringJoiner</code>不执行<code>add</code>方法直接<code>toString()</code>时，会<code>return</code>的对象就是你的前缀+后缀。例子：</p>\n<img data-src=\"/posts/ba83fda/2022-01-26-23-02-52.png\" class=\"\">\n<p>参数比较少的构造器:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StringJoiner</span><span class=\"params\">(CharSequence delimiter)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(delimiter, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实还是调用的三参构造器，只不过前后缀默认值为<code>&quot;&quot;</code>,也就是没有前后缀。这种情况下<code>emptyValue</code>是什么呢？ 其实和上面一样的，<code>&quot;&quot;+&quot;&quot;</code>就是<code>&quot;&quot;</code>,不难理解。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>先看上面提到最多的<code>toString().</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> emptyValue;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (suffix.equals(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> value.toString();</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> initialLength = value.length();</span><br><span class=\"line\">               String result = value.append(suffix).toString();</span><br><span class=\"line\">               <span class=\"comment\">// reset value to pre-append initialLength</span></span><br><span class=\"line\">               value.setLength(initialLength);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>当<code>value</code>为空(也就是<code>StringBuilder</code>为空)时，会<code>return emptyVaule</code>， 如果不为空，就会加上一个给你加后缀的操作。当然这里加后缀你可以看作一次性的，他在加之前会取一个长度，不管你后缀多长，加完之后会<code>set</code>到初始长度。</p>\n<p>知道了后缀是这里加的，那前缀呢。</p>\n<p>来看最核心的<code>add</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">add</span><span class=\"params\">(CharSequence newElement)</span> </span>&#123;</span><br><span class=\"line\">    prepareBuilder().append(newElement);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> StringBuilder <span class=\"title\">prepareBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        value.append(delimiter);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        value = <span class=\"keyword\">new</span> StringBuilder().append(prefix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>前缀就是在你调用第一个add的时候就加上了，为什么是第一个呢，因为第一次调用<code>add</code>的时候，你的<code>value</code>肯定是空的，所以它会走<code>else</code>的逻辑给你构造一个<code>StringBuilder</code>出来，这个时候会把前缀加好。所以你后面不管有几个<code>add</code>，都是基于一个<code>StringBuilder</code>上在加字符串。当你的<code>value</code>不为空了，就会给你拼接上连接符，最后再拼接上<code>add()</code>方法里的参数。完美。</p>\n<p>再结合<code>toString</code>方法来看，当你没有调用过<code>add</code>方法而直接<code>toString</code>时，<code>value</code>为空，它就会<code>return emptyValue</code>了。</p>\n<p>再来看个和<code>emptyValue</code>有关的方法<code>setEmptyValue(CharSequence emptyValue)：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">setEmptyValue</span><span class=\"params\">(CharSequence emptyValue)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emptyValue = Objects.requireNonNull(emptyValue,</span><br><span class=\"line\">        <span class=\"string\">&quot;The empty value must not be null&quot;</span>).toString();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法其实是暴露给开发者主动设置<code>emptyValue</code>值的方法，也就是说，当你没有调用<code>set</code>方法，<code>emptyValue</code>默认值为前缀+后缀，不管前后缀是否为空；当你调用了<code>set</code>方法，<code>emptyValue</code>就是设置的值。 举个例子：</p>\n<img data-src=\"/posts/ba83fda/2022-01-26-23-03-07.png\" class=\"\">\n<p>这里的打印结果就是<code>anson</code>，注意不是<code>[anson]</code>哦。</p>\n<p>还有一个有关字符串操作的方法 <code>merge(StringJoiner)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> StringJoiner <span class=\"title\">merge</span><span class=\"params\">(StringJoiner other)</span> </span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(other);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (other.value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> length = other.value.length();</span><br><span class=\"line\">        <span class=\"comment\">// lock the length so that we can seize the data to be appended</span></span><br><span class=\"line\">        <span class=\"comment\">// before initiate copying to avoid interference, especially when</span></span><br><span class=\"line\">        <span class=\"comment\">// merge &#x27;this&#x27;</span></span><br><span class=\"line\">        StringBuilder builder = prepareBuilder();</span><br><span class=\"line\">        builder.append(other.value, other.prefix.length(), length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面调用了一个<code>StringBuilder</code>的<code>append()</code>重载方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> StringBuilder <span class=\"title\">append</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.append(s, start, end);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说<code>merge</code>操作是把另一个<code>StringJoiner(简称sj2)</code>的从前缀开始(不包括前缀)包括连接符但是不包括后缀的字符串加进去<code>sj1</code>里面。</p>\n<p>上个例子:  </p>\n<img data-src=\"/posts/ba83fda/2022-01-26-23-03-17.png\" class=\"\">\n<p>前后缀都是<code>sj1</code>的，<code>ac</code>间的连接符是<code>sj2</code>的。</p>\n<p>最后再看个简单的方法收尾</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Remember that we never actually append the suffix unless we return</span></span><br><span class=\"line\">    <span class=\"comment\">// the full (present) value or some sub-string or length of it, so that</span></span><br><span class=\"line\">    <span class=\"comment\">// we can add on more if we need to.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (value != <span class=\"keyword\">null</span> ? value.length() + suffix.length() :</span><br><span class=\"line\">            emptyValue.length());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>length()</code>方法大家最熟悉，获取长度。这里能看到有一个好处就是当你没有调用<code>add</code>方法也就是没有初始化<code>StringBuilder</code>时，调用这个方法不会空指针，因为有默认的<code>emptyValue。</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，<code>Java 8</code>的新类<code>StringJoiner</code>用法很简单，其实就是一个披着<code>StringJoiner</code>皮的<code>StringBuilder</code>而已嘛。不过有人帮你封装好了加减后缀和连接符的方法也是好的！</p>\n",
            "tags": []
        },
        {
            "id": "https://smile1231.github.io/posts/49b96938/",
            "url": "https://smile1231.github.io/posts/49b96938/",
            "title": "Java获取一天时间的起始",
            "date_published": "2021-12-16T09:36:55.000Z",
            "content_html": "<p>如何获取一个指定日期的一天起始时间呢:<code>hutool</code>中有自带的方法:</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"keyword\">group</span>: <span class=\"string\">&#x27;cn.hutool&#x27;</span>, name: <span class=\"string\">&#x27;hutool-all&#x27;</span>, version: <span class=\"string\">&#x27;5.7.16&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"获取当天的开始时间\"><a href=\"#获取当天的开始时间\" class=\"headerlink\" title=\"获取当天的开始时间\"></a>获取当天的开始时间</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateUtil.beginOfDay(<span class=\"keyword\">new</span> Date())</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取当天的结束时间\"><a href=\"#获取当天的结束时间\" class=\"headerlink\" title=\"获取当天的结束时间\"></a>获取当天的结束时间</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DateUtil.endOfDay(<span class=\"keyword\">new</span> Date())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在这里获取昨天的开始和结束时间需要结合Calendar和hutool一起使用\"><a href=\"#在这里获取昨天的开始和结束时间需要结合Calendar和hutool一起使用\" class=\"headerlink\" title=\"在这里获取昨天的开始和结束时间需要结合Calendar和hutool一起使用\"></a>在这里获取昨天的开始和结束时间需要结合<code>Calendar</code>和<code>hutool</code>一起使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleDateFormat simpleDateFormat=<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例如今天是 2021-12-16 16:55:45</span></span><br><span class=\"line\"><span class=\"comment\">//获取昨天开始的时间</span></span><br><span class=\"line\">Date beginOfDay = DateUtil.beginOfDay(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">Calendar c = Calendar.getInstance();</span><br><span class=\"line\">c.setTime(beginOfDay);</span><br><span class=\"line\">c.add(Calendar.DAY_OF_MONTH,-<span class=\"number\">1</span>);</span><br><span class=\"line\">Date yesterBeginDay = c.getTime();</span><br><span class=\"line\">String a = simpleDateFormat.format(yesterBeginDay);</span><br><span class=\"line\">System.out.println(a);</span><br><span class=\"line\"></span><br><span class=\"line\">输出结果：<span class=\"number\">2021</span>-<span class=\"number\">12</span>-<span class=\"number\">15</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//获取昨天结束的时间</span></span><br><span class=\"line\">Date endOfDay = DateUtil.endOfDay(<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">c.setTime(endOfDay);</span><br><span class=\"line\">c.add(Calendar.DAY_OF_MONTH,-<span class=\"number\">1</span>);</span><br><span class=\"line\">Date yesterEndDay = c.getTime();</span><br><span class=\"line\">String b = simpleDateFormat.format(yesterEndDay);</span><br><span class=\"line\">System.out.println(b);</span><br><span class=\"line\"></span><br><span class=\"line\">输出结果：<span class=\"number\">2021</span>-<span class=\"number\">12</span>-<span class=\"number\">15</span> <span class=\"number\">23</span>:<span class=\"number\">59</span>:<span class=\"number\">59</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "calender"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/13370746/",
            "url": "https://smile1231.github.io/posts/13370746/",
            "title": "使用EasyExcel读取excel文件为Java实体类",
            "date_published": "2021-12-15T08:02:49.000Z",
            "content_html": "<p><a href=\"https://www.yuque.com/easyexcel/doc/read\">附赠<code>EasyExcel</code>的官方文档</a></p>\n<p>最近用到了需要使用<code>Excel</code>的<code>InputStream</code>流转化为Java实体类,然后再进行一些业务上的操作,这边稍加学习了之后也做了一些整理:</p>\n<p>本次所用到的依赖:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">&#x27;org.projectlombok:lombok:1.18.20&#x27;</span></span><br><span class=\"line\">implementation <span class=\"keyword\">group</span>: <span class=\"string\">&#x27;cn.hutool&#x27;</span>, name: <span class=\"string\">&#x27;hutool-all&#x27;</span>, version: <span class=\"string\">&#x27;5.7.16&#x27;</span></span><br><span class=\"line\">implementation(<span class=\"string\">&#x27;com.alibaba:easyexcel:2.2.6&#x27;</span>)</span><br><span class=\"line\">implementation <span class=\"string\">&#x27;com.google.protobuf:protobuf-java:4.0.0-rc-2&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"首先需要建立一个和Excel相对应的实体类\"><a href=\"#首先需要建立一个和Excel相对应的实体类\" class=\"headerlink\" title=\"首先需要建立一个和Excel相对应的实体类\"></a>首先需要建立一个和<code>Excel</code>相对应的实体类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexOrNameData</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 强制读取第三个 这里不建议 index 和 name 同时用，要么一个对象只用index，要么一个对象只用name去匹配</span></span><br><span class=\"line\"><span class=\"comment\">     *  index 从0开始</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(index = 2)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double doubleData;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用名字去匹配，这里需要注意，如果名字重复，会导致只有一个字段读取到数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&quot;字符串标题&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String string;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&quot;日期标题&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date date;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h2><p>使用解析功能时需要使用到<code>easyExcel</code>提供给我们的一个监听器</p>\n<img data-src=\"/posts/13370746/2021-12-15-18-51-15.png\" class=\"\">\n\n<p>所以我这边选择的是继承<code>AnalysisEventListener</code>类,是一个通用泛型类</p>\n<p><strong>有个很重要的点<code>ExcelListener</code> 不能被<code>spring</code>管理，要每次读取<code>excel</code>都要<code>new</code>,然后里面用到<code>spring</code>可以构造方法传进去</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExcelListener</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AnalysisEventListener</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用来获取解析到的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;T&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">invoke</span><span class=\"params\">(T data, AnalysisContext context)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(data));</span><br><span class=\"line\">        dataList.add(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfterAllAnalysed</span><span class=\"params\">(AnalysisContext context)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;所有数据解析完成！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">getDataList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"工具类泛化使用\"><a href=\"#工具类泛化使用\" class=\"headerlink\" title=\"工具类泛化使用\"></a>工具类泛化使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExcelUtil</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取excel InputStream流 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">readExcel</span><span class=\"params\">(InputStream excelInputStream, Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class=\"line\">        ExcelListener&lt;T&gt; excelListener = <span class=\"keyword\">new</span> ExcelListener&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//此处的read方法也支持`file`类型,这边使用的是inputStream流</span></span><br><span class=\"line\">        ExcelReader excelReader = EasyExcel.read(excelInputStream, clazz, excelListener).build();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ObjectUtil.isNull(excelReader))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;T&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;ReadSheet&gt; readSheetList = excelReader.excelExecutor().sheetList();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ReadSheet readSheet : readSheetList) &#123;</span><br><span class=\"line\">            excelReader.read(readSheet);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        excelReader.finish();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.toList(clazz,excelListener.getDataList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于第二个参数 <code>clazz</code>的原因,只要传入了相应的泛型类,就会返回相应类型的<code>List</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;D:\\\\Download\\\\test.xlsx&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            InputStream fileInputStream = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">            List&lt;IndexOrNameData&gt; driverBlackListExcels = ExcelUtil.readExcel(fileInputStream, IndexOrNameData.class);</span><br><span class=\"line\">            System.out.println(driverBlackListExcels);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/13370746/2021-12-15-19-09-34.png\" class=\"\">\n\n\n<h2 id=\"JavaList封装为Excel返回\"><a href=\"#JavaList封装为Excel返回\" class=\"headerlink\" title=\"JavaList封装为Excel返回\"></a><code>JavaList</code>封装为<code>Excel</code>返回</h2><p>上面已经介绍完如果读取上传的<code>Excel</code>文件,接下来需要介绍如何将<code>List</code>数据输出为<code>Excel</code>文件</p>\n<p>一样需要建立一个和<code>Excel</code>对应的实体类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestExcelPojo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&quot;姓名&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&quot;年龄&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\">    <span class=\"meta\">@ExcelProperty(&quot;余额&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String money;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 忽略这个字段</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@ExcelIgnore</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String ignore;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这边有一个注意点,就是<code>@ExcelProperty</code>是把你的<code>Excel</code>头换成了对应的值,但是存在于这个实体类中属性都会被解析出来放到输出的<code>Excel</code>文件中.</p>\n<p>然后使用<code>EasyExcel</code>提供的方法来进行数据的写,一下是用例代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestEasyExcel</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;download.tmpPath&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Context01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ArrayList&lt;TestExcelPojo&gt; pojoArrayList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        TestExcelPojo pojo = <span class=\"keyword\">new</span> TestExcelPojo(<span class=\"string\">&quot;测试&quot;</span>, <span class=\"string\">&quot;21&quot;</span>, <span class=\"string\">&quot;100&quot;</span>);</span><br><span class=\"line\">        pojoArrayList.add(pojo);</span><br><span class=\"line\">        pojoArrayList.add(pojo);</span><br><span class=\"line\">        pojoArrayList.add(pojo);</span><br><span class=\"line\">        pojoArrayList.add(pojo);</span><br><span class=\"line\">        pojoArrayList.add(pojo);</span><br><span class=\"line\"></span><br><span class=\"line\">        String fileName = tmp + File.separator + IdUtil.simpleUUID() + <span class=\"string\">&quot;.xlsx&quot;</span>;</span><br><span class=\"line\">        ExcelWriter excelWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            excelWriter = EasyExcel.write(fileName,TestExcelPojo.class).build();</span><br><span class=\"line\">            WriteSheet writeSheet = EasyExcel.writerSheet(<span class=\"string\">&quot;模板&quot;</span>).build();</span><br><span class=\"line\">            excelWriter.write(pojoArrayList,writeSheet);</span><br><span class=\"line\">            FileInputStream fileInputStream = <span class=\"keyword\">new</span> FileInputStream(fileName);</span><br><span class=\"line\">            <span class=\"comment\">//转化为二进制流</span></span><br><span class=\"line\">            ByteString bytes = ByteString.readFrom(fileInputStream);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (excelWriter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                excelWriter.finish();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/13370746/2021-12-16-15-33-13.png\" class=\"\">\n",
            "tags": [
                "Java",
                "EasyExcel"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/45934af9/",
            "url": "https://smile1231.github.io/posts/45934af9/",
            "title": "使用vscode书写hexo博客粘贴图片解决方案",
            "date_published": "2021-11-17T06:22:03.000Z",
            "content_html": "<p>以前都是在<code>Vscode</code>中写一些<code>MarkDown</code>文档,然后上传到<code>GitHub</code>上做好目录供阅读使用:</p>\n<img data-src=\"/posts/45934af9/2021-11-17-14-35-44.png\" class=\"\">\n\n<p>如今搭建好了<code>Blog</code>,图片粘贴也是必不可少的,翻阅大量网站资料,目前本人是采用的如下方式:</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>修改<code>hexo</code>配置文件: <code>post_asset_folder: true</code>,开启之后,生成新的<code>post</code>时,会在<code>source/_posts/</code>下创建一个同名文件夹</p>\n <img data-src=\"/posts/45934af9/2021-11-17-14-41-29.png\" class=\"\"></li>\n<li><p>下载插件:<code>paste image</code> <img data-src=\"/posts/45934af9/2021-11-17-14-47-25.png\" class=\"\"><br>这个插件用来在md文档中粘贴图片，默认会在文档的同级目录下新建一个图片文件，并在<code>md</code>中插入一行相对路径的图片代码。迎合上述<code>hexo</code>的新图片插入方式，可以在<code>vscode</code>的<code>user-settings</code>里新增两条配置:</p>\n<img data-src=\"/posts/45934af9/2021-11-17-14-49-06.png\" class=\"\"> \n<img data-src=\"/posts/45934af9/2021-11-17-14-49-20.png\" class=\"\"> \n<img data-src=\"/posts/45934af9/2021-11-17-14-49-44.png\" class=\"\"> \n<img data-src=\"/posts/45934af9/2021-11-17-14-50-14.png\" class=\"\">\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;pasteImage.path&quot;</span>: <span class=\"string\">&quot;$&#123;currentFileNameWithoutExt&#125;/&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;pasteImage.insertPattern&quot;</span>: <span class=\"string\">&quot;&#123;% asset_img $&#123;imageFileName&#125; %&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n<p>这样以来，粘贴的图片就会保存到md文档的同名文件夹下，文档中将插入<code>hexo asset</code>语法的代码。然后再复制或者剪切之后的图片,使用快捷键.(<code>windows</code>是<code>ctrl+Alt+V</code>,<code>Mac</code>是<code>Command+option+V</code>),但是<code>hexo clean -&gt; hexo g -&gt; hexo s</code>之后图片就可以正常显示了</p>\n<img data-src=\"/posts/45934af9/2021-11-17-15-16-19.png\" class=\"\"></li>\n<li><p>(以下的步骤需要修改到<code>markdown</code>源码,慎重考虑),由于重新新建一个文件夹的特殊性,所以需要略微修改</p>\n<ul>\n<li>下载预览插件: <code>Markdown Preview Enhanced</code><img data-src=\"/posts/45934af9/2021-11-17-15-01-16.png\" class=\"\"></li>\n<li>现在就要利用这个功能来解决一个问题：<code>vscode</code>内无法预览代码的图片。<code>ctrl+shift+P</code>输入<code>Markdown Preview Enhanced: Extend Parser</code>调出插件的<code>parse.js</code>文件，修改其中的<code>onWillParseMarkdown</code>方法：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\"> <span class=\"attr\">onWillParseMarkdown</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">markdown</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">//markdown参数打印出来是整个文件的内容</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> a = markdown.split(<span class=\"string\">&quot;\\n&quot;</span>);<span class=\"comment\">//通过下面第一张图片内容通过换行符进行切割</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> b = a[<span class=\"number\">1</span>].substring(<span class=\"number\">6</span>); <span class=\"comment\">//获取到title行字符,然后再去除空格即可获得图片的路径</span></span><br><span class=\"line\">     markdown = markdown.replace(</span><br><span class=\"line\">       <span class=\"comment\">//以下为代码，注释是因为markdown语法会渲染出错，但是是正确代码</span></span><br><span class=\"line\">     <span class=\"comment\">//  /\\&#123;%\\s*asset_img\\s*(.*)\\s*%\\&#125;/g,</span></span><br><span class=\"line\">      <span class=\"comment\">// (whole, content) =&gt; (&#x27;{% asset_img &#x27;+content+&#x27;)&#x27;  %}</span></span><br><span class=\"line\">     )</span><br><span class=\"line\">     <span class=\"keyword\">return</span> resolve(markdown)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/45934af9/2021-11-17-18-00-53.png\" class=\"\">\n尝试过后,图片的预览功能就能实现啦.</li>\n</ul>\n <img data-src=\"/posts/45934af9/2021-11-17-18-03-07.png\" class=\"\"></li>\n</ul>\n<p>参考链接(图片重写预览功能有错误,本文已经修正):<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5iZWkudG9wL3ZzY29kZSVFNyVCQyU5NiVFNSU4NiU5OW1kLw==\">https://linbei.top/vscode%E7%BC%96%E5%86%99md/</span></p>\n",
            "tags": [
                "blog",
                "hexo",
                "next"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/3d071a12/",
            "url": "https://smile1231.github.io/posts/3d071a12/",
            "title": "使用hexo框架+next主题+githubPage搭建个人博客",
            "date_published": "2021-11-10T14:19:19.000Z",
            "content_html": "<p>我自己的博客是采用了<code>hexo</code>+ <code>Next</code>主题搭建完成，并做了一些简单的配置，这边也将全面从0-&gt;1介绍</p>\n<h1 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装<code>Node</code></h1><p><code>Node</code>的官网为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2FkLw==\">https://nodejs.org/zh-cn/download/</span>  </p>\n<img data-src=\"/posts/3d071a12/2021-11-13-00-33-44.png\" class=\"\"> \n\n<p>下载自己对应的版本即可，傻瓜式的下一步下一步之后，在终端控制台输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<img data-src=\"/posts/3d071a12/2021-11-13-00-34-52.png\" class=\"\">\n\n<p>说明安装成功，而在这个时候也会给你安装了<code>npm</code>环境，输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/3d071a12/2021-11-13-00-36-59.png\" class=\"\">\n\n<p>此时我们需要将原生的镜像源换为淘宝镜像源，这样能加快下载速度：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置镜像源</span><br><span class=\"line\">npm config set registry=https://registry.npm.taobao.org/</span><br><span class=\"line\"># 查看镜像源</span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n\n<p><code>Node</code>环境安装完毕</p>\n<h1 id=\"安装Git并创建github-pages\"><a href=\"#安装Git并创建github-pages\" class=\"headerlink\" title=\"安装Git并创建github pages\"></a>安装<code>Git</code>并创建<code>github pages</code></h1><p>git安装地址 ： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyLyVFOCVCNSVCNyVFNiVBRCVBNS0lRTUlQUUlODklRTglQTMlODUtR2l0\">https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git</span></p>\n<p><code>github</code>注册这边也不多赘述，不会的小伙伴可以自行百度</p>\n<h2 id=\"创建github项目\"><a href=\"#创建github项目\" class=\"headerlink\" title=\"创建github项目\"></a>创建<code>github</code>项目</h2><h2 id=\"创建responsibility\"><a href=\"#创建responsibility\" class=\"headerlink\" title=\"创建responsibility\"></a>创建<code>responsibility</code></h2><img data-src=\"/posts/3d071a12/2021-11-13-21-03-18.png\" class=\"\">\n\n<img data-src=\"/posts/3d071a12/2021-11-13-21-04-34.png\" class=\"\">\n\n<p>这边我踩了个坑，命名格式好像必须是 <code>owner/owner.github.io</code></p>\n<p>然后<code>responsibility</code>就创建好了</p>\n<h2 id=\"生成token\"><a href=\"#生成token\" class=\"headerlink\" title=\"生成token\"></a>生成<code>token</code></h2><p>按照图片步骤创建<code>token</code></p>\n<img data-src=\"/posts/3d071a12/2021-11-13-21-10-03.png\" class=\"\">\n\n<img data-src=\"/posts/3d071a12/2021-11-13-21-10-54.png\" class=\"\">\n\n<img data-src=\"/posts/3d071a12/2021-11-13-21-33-00.png\" class=\"\">\n\n<p>此时生成的<code>token</code>只会显示这一次，尽量复制保存到本地，据说这个<code>token</code>不开启<code>github Page</code>无法</p>\n<h2 id=\"设置page\"><a href=\"#设置page\" class=\"headerlink\" title=\"设置page\"></a>设置<code>page</code></h2><img data-src=\"/posts/3d071a12/2021-11-15-22-00-27.png\" class=\"\">\n<p>点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，此时点击图片中打码链接就是你的<code>GitHub Pages</code>地址了。应该是会跳出一个页面出来。</p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装<code>Hexo</code></h1><p>选择一个合适的本地位置存在你的<code>Blog</code>源码，比如我就存放在<code>/Users/jinmao/Documents/Blog/blog_source/</code>处，然后输入全局安装<code>hexo</code>脚手架</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>安装完后输入验证是否安装成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/3d071a12/2021-11-15-23-18-45.png\" class=\"\">\n<p>说明安装成功啦！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo 常用指令</span><br><span class=\"line\"></span><br><span class=\"line\">hexo init [folder]  //初始化本地文件夹为网站的根目录 - folder 为可选</span><br><span class=\"line\"></span><br><span class=\"line\">//hexo new 命令用于新建文章，&lt;title&gt;字段需要加双引号</span><br><span class=\"line\">hexo n [layout] &lt;title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">hexo generate //命令用于生成静态文件，一般可以简写为 hexo g</span><br><span class=\"line\">hexo d -g //指生成后再部署</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server //命令用于启动本地服务器，一般可以简写为hexo s</span><br><span class=\"line\">//-p 选项，指定服务器端口，默认为 4000</span><br><span class=\"line\">//-i 选项，指定服务器 IP 地址，默认为 0.0.0.0</span><br><span class=\"line\">//-s 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean //命令用于清理缓存文件，是一个比较常用的命令</span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy //命令用于部署网站，一般可以简写为 hexo d</span><br></pre></td></tr></table></figure>\n<p>说明 ：运行服务器前需要安装 <code>hexo-server </code>插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-server --save</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>hexo -d</code>前需要修改<code>_config.yml</code>配置文件，下面以 <code>git</code> 为例进行说明</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&lt;repository</span> <span class=\"string\">url&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">自定义提交消息，默认为Site</span> <span class=\"attr\">updated:</span> &#123;&#123; <span class=\"string\">now(&#x27;YYYY-MM-DD</span> <span class=\"string\">HH:mm:ss&#x27;)</span> &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"写文章、发布文章\"><a href=\"#写文章、发布文章\" class=\"headerlink\" title=\"写文章、发布文章\"></a>写文章、发布文章</h1><p>创建一篇新文章,例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n &quot;写在最前面&quot;</span><br></pre></td></tr></table></figure>\n<p>然后会在<code>source/_posts</code>下生成一个<code>markdown</code>文件，在这个文件中使用的是正常的<code>markdown</code>语法。<br>然后依次输入以下步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean //清理缓存</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g //编译生成静态文件</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s //启动本地服务器</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/3d071a12/2021-11-17-00-01-23.png\" class=\"\">\n\n<p><code>command + 左键</code>就可以在浏览器中浏览效果了</p>\n<h1 id=\"设置背景音乐\"><a href=\"#设置背景音乐\" class=\"headerlink\" title=\"设置背景音乐\"></a>设置背景音乐</h1><img data-src=\"/posts/3d071a12/2021-11-21-22-39-25.png\" class=\"\">\n<img data-src=\"/posts/3d071a12/2021-11-21-22-39-51.png\" class=\"\">\n<img data-src=\"/posts/3d071a12/2021-11-21-22-40-14.png\" class=\"\">\n\n<p>我们将音乐插件添加到侧边栏，效果类似于此<code>Blog</code><br>打开我们主题文件：<code>themes\\next\\layout\\_macro\\sidebar.swig找到sidebar-inner</code></p>\n<img data-src=\"/posts/3d071a12/2021-11-21-22-38-07.png\" class=\"\">\n<p>就可以啦！</p>\n",
            "tags": []
        }
    ]
}