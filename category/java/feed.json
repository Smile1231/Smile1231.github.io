{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"java\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/a54ed4b0/",
            "url": "https://smile1231.github.io/posts/a54ed4b0/",
            "title": "Java通过URL下载资源",
            "date_published": "2022-08-11T04:18:32.000Z",
            "content_html": "<p>关于如何通过下载 <code>URL</code>  下载网络资源，最近做了一些整理</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL2phdmEtZG93bmxvYWQtZmlsZQ==\">参考文章</span></p>\n<p>差不多以下的几个都是可以 <code>work</code>  的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadByUrl</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOWNLOAD_URL = <span class=\"string\">&quot;https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FILE_NAME = <span class=\"string\">&quot;download_file/maven-3.5.4-bin.tar.gz&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">downloadByJavaIO</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (BufferedInputStream in = <span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> URL(DOWNLOAD_URL).openStream()))&#123;</span><br><span class=\"line\">            FileOutputStream fileOutputStream = <span class=\"keyword\">new</span> FileOutputStream(FILE_NAME);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] dataBuffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> bytesRead;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((bytesRead = in.read(dataBuffer,<span class=\"number\">0</span>,<span class=\"number\">1024</span>)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                fileOutputStream.write(dataBuffer,<span class=\"number\">0</span>,bytesRead);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">downloadByJavaIOAndCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        InputStream in = <span class=\"keyword\">new</span> URL(DOWNLOAD_URL).openStream();</span><br><span class=\"line\">        Files.copy(in, Paths.get(FILE_NAME), StandardCopyOption.REPLACE_EXISTING);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">downloadByNIO</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (FileOutputStream fileOutputStream = <span class=\"keyword\">new</span> FileOutputStream(FILE_NAME))&#123;</span><br><span class=\"line\">            ReadableByteChannel readableByteChannel = Channels.newChannel(<span class=\"keyword\">new</span> URL(DOWNLOAD_URL).openStream());</span><br><span class=\"line\">            <span class=\"comment\">// get a file channel</span></span><br><span class=\"line\">            ;</span><br><span class=\"line\"><span class=\"comment\">//            FileChannel fileChannel = fileOutputStream.getChannel();</span></span><br><span class=\"line\">            fileOutputStream.getChannel()</span><br><span class=\"line\">                    .transferFrom(readableByteChannel,<span class=\"number\">0</span>,Long.MAX_VALUE);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">downloadByCommonsIO</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        FileUtils.copyURLToFile(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> URL(DOWNLOAD_URL)</span><br><span class=\"line\">                ,<span class=\"keyword\">new</span> File(FILE_NAME)</span><br><span class=\"line\">                ,<span class=\"number\">1000</span></span><br><span class=\"line\">                ,<span class=\"number\">2000</span></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/bd76a990/",
            "url": "https://smile1231.github.io/posts/bd76a990/",
            "title": "一图看懂Java中的PO,BO,VO,DTO,POJO,DAO,DO",
            "date_published": "2022-05-21T14:57:50.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTUyODQ4Njc1OTI0MDgyNzE4\"> 参考链接 </span></p>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/d6d1be75/",
            "url": "https://smile1231.github.io/posts/d6d1be75/",
            "title": "在Javadoc注释中引用方法",
            "date_published": "2022-05-21T14:00:19.000Z",
            "content_html": "<p>最近用到如何在注释中 <code>link</code>  到另一个类</p>\n<ol>\n<li><code>@link</code>  标签<br>\n <code>Javadoc</code>  提供了 <code>@link</code>  内联标记来引用 Java 类中的成员。我们可以认为 <code>@link</code>  标签类似于  <code>HTML</code>  中的锚标签，用于通过超链接将一个页面链接到另一个页面。</li>\n</ol>\n<p>让我们看看使用 <code>@link</code>  标记引用  <code>Javadoc</code>  注释中的方法的语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">@link</span> path_to_member label&#125;</span><br></pre></td></tr></table></figure>\n<p>与锚标签类似， <code>path_to_member</code>  是目的地，标签是显示文本。</p>\n<p>标签是可选的，但 <code>path_to_member</code>  是引用方法所必需的。但是，始终使用标签名称来避免复杂的参考链接是一种很好的做法。 <code>path_to_member</code>  的语法 根据我们引用的方法是否驻留在同一个类中而有所不同。</p>\n<p>需要注意的是，大括号 <code>&#123;</code> 和 <code>@link</code>  之间不能有空格。如果它们之间有空格， <code>Javadoc </code> 工具将无法正确生成引用。但是，  <code>path_to_member、label</code>  和右大括号之间没有空间限制。</p>\n<span id=\"more\"></span>\n<ol start=\"2\">\n<li>引用同一个类中的方法<br>\n引用方法的最简单方法是在同一个类中：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">@link</span> #methodName() LabelName&#125;</span><br></pre></td></tr></table></figure>\n<p>假设我们正在记录一个方法，并且我们想从同一个类中引用另一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Also, check the &#123;<span class=\"doctag\">@link</span> #move() Move&#125; method for more movement details.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">walk</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这种情况下， <code>walk()</code>  方法引用同一类中的 <code>move()</code>  实例方法。</p>\n<p>如果被引用的方法有参数，当我们想要引用一个重载或参数化的方法时，我们必须相应地指定其参数的类型。</p>\n<p>考虑以下引用重载方法的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Check this &#123;<span class=\"doctag\">@link</span> #move(String) Move&#125; method for direction-oriented movement.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(String direction)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>move()</code>  方法是指一种采用一个 String 参数的重载方法。</p>\n<ol start=\"3\">\n<li>引用另一个类中的方法<br>\n要引用另一个类中的方法，我们将使用类名，后跟标签，然后是方法名：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"meta\">@link</span> ClassName#methodName() LabelName&#125;</span><br></pre></td></tr></table></figure>\n<p>语法类似于引用同一类中的方法，除了在 <code>#</code> 符号之前提到类名。</p>\n<p>现在，让我们考虑在另一个类中引用方法的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Additionally, check this &#123;<span class=\"doctag\">@link</span> Animal#run(String) Run&#125; method for direction based run.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引用的方法在同一个包中的 <code>Animal</code>  类中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(String direction)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们想引用另一个包中的方法，我们有两个选择。一种方法是直接指定包以及类名：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Also consider checking &#123;<span class=\"doctag\">@link</span> com.baeldung.sealed.classes.Vehicle#Vehicle() Vehicle&#125; </span></span><br><span class=\"line\"><span class=\"comment\"> * constructor to initialize vehicle object.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">goToWork</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这种情况下，已经使用完整的包名称提到了 <code>Vehicle</code>  类，以引用 <code>Vehicle()</code>  方法。</p>\n<p>此外，我们可以导入包并单独提及类名：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baeldung.sealed.records.Car;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Have a look at &#123;<span class=\"doctag\">@link</span> Car#getNumberOfSeats() SeatsAvailability&#125; </span></span><br><span class=\"line\"><span class=\"comment\"> * method for checking the available seats needed for driving.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里，驻留在另一个包中的 <code>Car</code>  类已被导入。所以， <code>@link</code>  只需要包含类名和方法。</p>\n<p>我们可以选择两种方式中的任何一种来引用不同包中的方法。如果是单次使用包，那么我们可以使用第一种方式，否则，如果有多个依赖项，我们应该选择第二种方式。</p>\n<ol start=\"4\">\n<li><code>@linkplain</code>  标签<br>\n我们已经在注释中看到了用于引用方法的 <code>@link Javadoc</code>  标记。 <code>Javadoc</code>  提供了另一个名为 <code>@linkplain</code>  的标记，用于在注释中引用方法，类似于 <code>@link</code>  标记。主要区别在于，在生成文档时， <code>@link</code>  以等宽格式文本生成标签值，而 <code>@linkplain</code>  以标准格式（如纯文本）生成它。</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemRpdGVjdC5jb20vbWFpbi1hZHZhbmNlZC9qYXZhL2phdmEtbWV0aG9kLWluLWphdmFkb2MuaHRtbA==\"> 原文章地址 </span></p>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/f976ebe7/",
            "url": "https://smile1231.github.io/posts/f976ebe7/",
            "title": "SpringMvc中标准的后端接口格式",
            "date_published": "2022-02-19T05:46:06.000Z",
            "content_html": "<h1 id=\"用springboot手把手教你写出优雅的后端接口\"><a class=\"markdownIt-Anchor\" href=\"#用springboot手把手教你写出优雅的后端接口\">#</a> 用 <code>SpringBoot</code>  手把手教你写出优雅的后端接口</h1>\n<p>一个后端接口大致分为四个部分组成： <code>接口地址（url）</code> 、 <code>接口请求方式（get、post等）</code> 、 <code>请求数据（request）</code> 、 <code>响应数据（response）</code> 。如何构建这几个部分每个公司要求都不同，没有什么 “一定是最好的” 标准，但一个优秀的后端接口和一个糟糕的后端接口对比起来差异还是蛮大的，其中最重要的关键点就是看是否规范！</p>\n<p>本文就一步一步演示如何构建起一个优秀的后端接口体系，体系构建好了自然就有了规范，同时再构建新的后端接口也会十分轻松。</p>\n<p>所需依赖包</p>\n<span id=\"more\"></span>\n<p>这里用的是 <code>SpringBoot</code>  配置项目，本文讲解的重点是后端接口，所以只需要导入一个 <code>spring-boot-starter-web</code>  包就可以了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--web依赖包，web应用必备--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--StringUtils的使用--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>本文还用了 <code>swagger</code>  来生成 <code>API</code>  文档， <code>lombok</code>  来简化类，不过这两者不是必须的，可用可不用。</p>\n<h2 id=\"一-参数校验\"><a class=\"markdownIt-Anchor\" href=\"#一-参数校验\">#</a> 一、参数校验</h2>\n<p>一个接口一般对参数（请求数据）都会进行安全校验，参数校验的重要性自然不必多说，那么如何对参数进行校验就有讲究了。</p>\n<h2 id=\"二-业务层校验\"><a class=\"markdownIt-Anchor\" href=\"#二-业务层校验\">#</a> 二、业务层校验</h2>\n<p>首先我们来看一下最常见的做法，就是在业务层进行参数校验：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user == <span class=\"keyword\">null</span> || user.getId() == <span class=\"keyword\">null</span> || user.getAccount() == <span class=\"keyword\">null</span> || user.getPassword() == <span class=\"keyword\">null</span> || user.getEmail() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;对象或者对象字段不能为空&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getAccount()) || StringUtils.isEmpty(user.getPassword()) || StringUtils.isEmpty(user.getEmail())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;不能输入空字符串&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.getAccount().length() &lt; <span class=\"number\">6</span> || user.getAccount().length() &gt; <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;账号长度必须是6-11个字符&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.getPassword().length() &lt; <span class=\"number\">6</span> || user.getPassword().length() &gt; <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;密码长度必须是6-16个字符&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Pattern.matches(<span class=\"string\">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+$&quot;</span>, user.getEmail())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;邮箱格式不正确&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 参数校验完毕后这里就写上业务逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做当然是没有什么错的，而且格式排版整齐也一目了然，不过这样太繁琐了，这还没有进行业务操作呢光是一个参数校验就已经这么多行代码，实在不够优雅。</p>\n<p>我们来改进一下，使用 <code>Spring Validator</code>  和 <code>Hibernate Validator</code>  这两套 <code>Validator</code>  来进行方便的参数校验！这两套 <code>Validator</code>  依赖包已经包含在前面所说的 <code>web</code>  依赖包里了，所以可以直接使用。<br>\n但是从 <code>springboot-2.3</code>  开始，校验包被独立成了一个 <code>starter</code>  组件<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdC93aWtpL1NwcmluZy1Cb290LTIuMy1SZWxlYXNlLU5vdGVzI3ZhbGlkYXRpb24tc3RhcnRlci1uby1sb25nZXItaW5jbHVkZWQtaW4td2ViLXN0YXJ0ZXJz\">参见：validation-starter-no-longer-included-in-web-starters</span>，<br>\n所以需要引入如下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--校验组件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-validation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>内置的校验有很多</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>校验功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@AssertFalse</td>\n<td>必须是 false</td>\n</tr>\n<tr>\n<td>@AssertTrue</td>\n<td>必须是 true</td>\n</tr>\n<tr>\n<td>@DecimalMax</td>\n<td>小于等于给定的值</td>\n</tr>\n<tr>\n<td>@DecimalMin</td>\n<td>大于等于给定的值</td>\n</tr>\n<tr>\n<td>@Digits</td>\n<td>可设定最大整数位数和最大小数位数</td>\n</tr>\n<tr>\n<td>@Email</td>\n<td>校验是否符合 Email 格式</td>\n</tr>\n<tr>\n<td>@Future</td>\n<td>必须是将来的时间</td>\n</tr>\n<tr>\n<td>@FutureOrPresent</td>\n<td>当前或将来时间</td>\n</tr>\n<tr>\n<td>@Max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>@Min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>@Negative</td>\n<td>负数（不包括 0）</td>\n</tr>\n<tr>\n<td>@NegativeOrZero</td>\n<td>负数或 0</td>\n</tr>\n<tr>\n<td>@NotBlank</td>\n<td>不为 null 并且包含至少一个非空白字符</td>\n</tr>\n<tr>\n<td>@NotEmpty</td>\n<td>不为 null 并且不为空</td>\n</tr>\n<tr>\n<td>@NotNull</td>\n<td>不为 null</td>\n</tr>\n<tr>\n<td>@Null</td>\n<td>为 null</td>\n</tr>\n<tr>\n<td>@Past</td>\n<td>必须是过去的时间</td>\n</tr>\n<tr>\n<td>@PastOrPresent</td>\n<td>必须是过去的时间，包含现在</td>\n</tr>\n<tr>\n<td>@Pattern</td>\n<td>必须满足正则表达式</td>\n</tr>\n<tr>\n<td>@PositiveOrZero</td>\n<td>正数或 0</td>\n</tr>\n<tr>\n<td>@Size</td>\n<td>校验容器的元素个数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三-validator-bindresult进行校验\"><a class=\"markdownIt-Anchor\" href=\"#三-validator-bindresult进行校验\">#</a> 三、 <code>Validator</code>  +  <code>BindResult</code>  进行校验</h2>\n<p><code>Validator</code>  可以非常方便的制定校验规则，并自动帮你完成校验。首先在入参里需要校验的字段加上注解，每个注解对应不同的校验规则，并可制定校验失败后的信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户id不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户账号不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Size(min = 6, max = 11, message = &quot;账号长度必须是6-11个字符&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String account;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户密码不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Size(min = 6, max = 11, message = &quot;密码长度必须是6-16个字符&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户邮箱不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>校验规则和错误提示信息配置完毕后，接下来只需要在接口需要校验的参数上加上 <code>@Valid</code>  注解，并添加 <code>BindResult</code>  参数即可方便完成验证：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> <span class=\"meta\">@Valid</span> User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有参数校验失败，会将错误信息封装成对象组装在BindingResult里</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> error.getDefaultMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.addUser(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样当请求数据传递到接口的时候 <code>Validator</code>  就自动完成校验了，校验的结果就会封装到 <code>BindingResult</code>  中去，如果有错误信息我们就直接返回给前端，业务逻辑代码也根本没有执行下去。</p>\n<p>此时，业务层里的校验代码就已经不需要了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 直接编写业务逻辑</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>现在可以看一下参数校验效果。我们故意给这个接口传递一个不符合校验规则的参数，先传递一个错误数据给接口，故意将 <code>password</code>  这个字段不满足校验条件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;account&quot;</span>: <span class=\"string\">&quot;12345678&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;123@qq.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再来看一下接口的响应数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-08-48.png\" class=\"\">\n<p>这样是不是方便很多？不难看出使用 <code>Validator</code>  校验有如下几个好处：</p>\n<ul>\n<li>\n<p>简化代码，之前业务层那么一大段校验代码都被省略掉了。</p>\n</li>\n<li>\n<p>使用方便，那么多校验规则可以轻而易举的实现，比如邮箱格式验证，之前自己手写正则表达式要写那么一长串，还容易出错，用 <code>Validator</code>  直接一个注解搞定。（还有更多校验规则注解，可以自行去了解哦）</p>\n</li>\n<li>\n<p>减少耦合度，使用 <code>Validator</code>  能够让业务层只关注业务逻辑，从基本的参数校验逻辑中脱离出来。</p>\n</li>\n</ul>\n<p>使用 <code>Validator + BindingResult</code>  已经是非常方便实用的参数校验方式了，在实际开发中也有很多项目就是这么做的，不过这样还是不太方便，因为你每写一个接口都要添加一个 <code>BindingResult</code>  参数，然后再提取错误信息返回给前端。</p>\n<p>这样有点麻烦，并且重复代码很多（尽管可以将这个重复代码封装成方法）。我们能否去掉 <code>BindingResult</code>  这一步呢？当然是可以的！</p>\n<h2 id=\"validator-自动抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#validator-自动抛出异常\">#</a>  <code>Validator</code>  + 自动抛出异常</h2>\n<p>将 <code>BindingResult</code>  去掉：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> <span class=\"meta\">@Valid</span> User user)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;sucess&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>去掉之后会发生什么事情呢？直接来试验一下，还是按照之前一样故意传递一个不符合校验规则的参数给接口。此时我们观察控制台可以发现接口已经引发 <code>MethodArgumentNotValidException</code>  异常了：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-00.png\" class=\"\">\n<p>其实这样就已经达到我们想要的效果了，参数校验不通过自然就不执行接下来的业务逻辑，去掉 <code>BindingResult</code>  后会自动引发异常，异常发生了自然而然就不会执行业务逻辑。也就是说，我们完全没必要添加相关 <code>BindingResult</code>  相关操作嘛。</p>\n<p>不过事情还没有完，异常是引发了，可我们并没有编写返回错误信息的代码呀，那参数校验失败了会响应什么数据给前端呢？</p>\n<p>我们来看一下刚才异常发生后接口响应的数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-15.png\" class=\"\">\n<p>没错，是直接将整个错误对象相关信息都响应给前端了！这样就很难受，不过解决这个问题也很简单，就是我们接下来要讲的全局异常处理！</p>\n<h2 id=\"五-全局异常处理\"><a class=\"markdownIt-Anchor\" href=\"#五-全局异常处理\">#</a> 五、全局异常处理</h2>\n<p>参数校验失败会自动引发异常，我们当然不可能再去手动捕捉异常进行处理，不然还不如用之前 <code>BindingResult</code>  方式呢。又不想手动捕捉这个异常，又要对这个异常进行处理，那正好使用 <code>SpringBoot</code>  全局异常处理来达到一劳永逸的效果！</p>\n<h2 id=\"六-基本使用\"><a class=\"markdownIt-Anchor\" href=\"#六-基本使用\">#</a> 六、基本使用</h2>\n<p>首先，我们需要新建一个类，在这个类上加上 <code>@ControllerAdvice</code>  或 <code>@RestControllerAdvice</code>  注解，这个类就配置成全局处理类了。（这个根据你的 <code>Controller</code>  层用的是 <code>@Controller</code>  还是 <code>@RestController</code>  来决定）</p>\n<p>然后在类中新建方法，在方法上加上 <code>@ExceptionHandler</code>  注解并指定你想处理的异常类型，接着在方法内编写对该异常的操作逻辑，就完成了对该异常的全局处理！</p>\n<p>我们现在就来演示一下对参数校验失败抛出的 <code>MethodArgumentNotValidException</code>  全局处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionControllerAdvice</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">MethodArgumentNotValidExceptionHandler</span><span class=\"params\">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从异常对象中拿到ObjectError对象</span></span><br><span class=\"line\">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 然后提取错误提示信息进行返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectError.getDefaultMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看下这次校验失败后的响应数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-28.png\" class=\"\">\n<p>没错，这次返回的就是我们制定的错误提示信息！我们通过全局异常处理优雅的实现了我们想要的功能！以后我们再想写接口参数校验，就只需要在入参的成员变量上加上 <code>Validator</code>  校验规则注解，然后在参数上加上 <code>@Valid</code>  注解即可完成校验，校验失败会自动返回错误提示信息，无需任何其他代码！更多的校验思路： <code>SpringBoot</code>  实现通用的接口参数校验</p>\n<h2 id=\"七-自定义异常\"><a class=\"markdownIt-Anchor\" href=\"#七-自定义异常\">#</a> 七、自定义异常</h2>\n<p>全局处理当然不会只能处理一种异常，用途也不仅仅是对一个参数校验方式进行优化。在实际开发中，如何对异常处理其实是一个很麻烦的事情。传统处理异常一般有以下烦恼：</p>\n<ul>\n<li>\n<p>是捕获异常 <code>(try…catch)</code>  还是抛出异常 <code>(throws)</code></p>\n</li>\n<li>\n<p>是在 <code>controller</code>  层做处理还是在 <code>service</code>  层处理又或是在 <code>dao</code>  层做处理</p>\n</li>\n<li>\n<p>处理异常的方式是啥也不做，还是返回特定数据，如果返回又返回什么数据</p>\n</li>\n<li>\n<p>不是所有异常我们都能预先进行捕捉，如果发生了没有捕捉到的异常该怎么办？</p>\n</li>\n</ul>\n<p>以上这些问题都可以用全局异常处理来解决，全局异常处理也叫统一异常处理，全局和统一处理代表什么？代表规范！规范有了，很多问题就会迎刃而解！</p>\n<p>全局异常处理的基本使用方式大家都已经知道了，我们接下来更进一步的规范项目中的异常处理方式：自定义异常。</p>\n<p>在很多情况下，我们需要手动抛出异常，比如在业务层当有些条件并不符合业务逻辑，我这时候就可以手动抛出异常从而触发事务回滚。那手动抛出异常最简单的方式就是 <code>throw new RuntimeException(&quot;异常信息&quot;)</code>  了，不过使用自定义会更好一些：</p>\n<ul>\n<li>\n<p>自定义异常可以携带更多的信息，不像这样只能携带一个字符串。</p>\n</li>\n<li>\n<p>项目开发中经常是很多人负责不同的模块，使用自定义异常可以统一了对外异常展示的方式。</p>\n</li>\n<li>\n<p>自定义异常语义更加清晰明了，一看就知道是项目中手动抛出的异常。</p>\n</li>\n</ul>\n<p>我们现在就来开始写一个自定义异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span> <span class=\"comment\">//只要getter方法，无需setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">APIException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">APIException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1001</span>, <span class=\"string\">&quot;接口错误&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">APIException</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1001</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">APIException</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在刚才的全局异常处理类中记得添加对我们自定义异常的处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(APIException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">APIExceptionHandler</span><span class=\"params\">(APIException e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e.getMsg();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就对异常的处理就比较规范了，当然还可以添加对 <code>Exception</code>  的处理，这样无论发生什么异常我们都能屏蔽掉然后响应数据给前端，不过建议最后项目上线时这样做，能够屏蔽掉错误信息暴露给前端，在开发中为了方便调试还是不要这样做。</p>\n<p>现在全局异常处理和自定义异常已经弄好了，不知道大家有没有发现一个问题，就是当我们抛出自定义异常的时候全局异常处理只响应了异常中的错误信息 <code>msg</code>  给前端，并没有将错误代码 <code>code</code>  返回。这就要引申出我们接下来要讲的东西了：数据统一响应</p>\n<h2 id=\"八-数据统一响应\"><a class=\"markdownIt-Anchor\" href=\"#八-数据统一响应\">#</a> 八、数据统一响应</h2>\n<p>现在我们规范好了参数校验方式和异常处理方式，然而还没有规范响应数据！比如我要获取一个分页信息数据，获取成功了呢自然就返回的数据列表，获取失败了后台就会响应异常信息，即一个字符串，就是说前端开发者压根就不知道后端响应过来的数据会是啥样的！所以，统一响应数据是前后端规范中必须要做的！</p>\n<h2 id=\"九-自定义统一响应\"><a class=\"markdownIt-Anchor\" href=\"#九-自定义统一响应\">#</a> 九、自定义统一响应</h2>\n<p>统一数据响应第一步肯定要做的就是我们自己自定义一个响应体类，无论后台是运行正常还是发生异常，响应给前端的数据格式是不变的！那么如何定义响应体呢？关于异常的设计：如何更优雅的设计异常</p>\n<p>可以参考我们自定义异常类，也来一个响应信息代码 <code>code</code>  和响应信息说明 <code>msg</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultVO</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码，比如1000代表响应成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 响应信息，用来说明响应情况</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 响应的具体数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1000</span>, <span class=\"string\">&quot;success&quot;</span>, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg, T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们修改一下全局异常处理那的返回值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(APIException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">APIExceptionHandler</span><span class=\"params\">(APIException e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里返回类型是自定义响应体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(e.getCode(), <span class=\"string\">&quot;响应失败&quot;</span>, e.getMsg());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">MethodArgumentNotValidExceptionHandler</span><span class=\"params\">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class=\"line\">    ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里返回类型是自定义响应体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(<span class=\"number\">1001</span>, <span class=\"string\">&quot;参数校验失败&quot;</span>, objectError.getDefaultMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看一下此时如果发生异常了会响应什么数据给前端：</p>\n<p>OK，这个异常信息响应就非常好了，状态码和响应说明还有错误提示数据都返给了前端，并且是所有异常都会返回相同的格式！异常这里搞定了，别忘了我们到接口那也要修改返回类型，我们新增一个接口好来看看效果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;User&gt; <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    user.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    user.setAccount(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;123@qq.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一下如果响应正确返回的是什么效果：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-48.png\" class=\"\">\n<p>这样无论是正确响应还是发生异常，响应数据的格式都是统一的，十分规范！</p>\n<p>数据格式是规范了，不过响应码 <code>code</code>  和响应信息 <code>msg</code>  还没有规范呀！大家发现没有，无论是正确响应，还是异常响应，响应码和响应信息是想怎么设置就怎么设置，要是 <code>10</code>  个开发人员对同一个类型的响应写 <code>10</code>  个不同的响应码，那这个统一响应体的格式规范就毫无意义！所以，必须要将响应码和响应信息给规范起来。</p>\n<h2 id=\"十-响应码枚举\"><a class=\"markdownIt-Anchor\" href=\"#十-响应码枚举\">#</a> 十、响应码枚举</h2>\n<p>要规范响应体中的响应码和响应信息用枚举简直再恰当不过了，我们现在就来创建一个响应码枚举类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ResultCode</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SUCCESS(<span class=\"number\">1000</span>, <span class=\"string\">&quot;操作成功&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    FAILED(<span class=\"number\">1001</span>, <span class=\"string\">&quot;响应失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    VALIDATE_FAILED(<span class=\"number\">1002</span>, <span class=\"string\">&quot;参数校验失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    ERROR(<span class=\"number\">5000</span>, <span class=\"string\">&quot;未知错误&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    ResultCode(<span class=\"keyword\">int</span> code, String msg) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后修改响应体的构造方法，让其只准接受响应码枚举来设置响应码和响应信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(ResultCode.SUCCESS, data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(ResultCode resultCode, T data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.code = resultCode.getCode();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.msg = resultCode.getMsg();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后同时修改全局异常处理的响应码设置方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(APIException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">APIExceptionHandler</span><span class=\"params\">(APIException e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里传递的响应码枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(ResultCode.FAILED, e.getMsg());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">MethodArgumentNotValidExceptionHandler</span><span class=\"params\">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class=\"line\">    ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里传递的响应码枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(ResultCode.VALIDATE_FAILED, objectError.getDefaultMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样响应码和响应信息只能是枚举规定的那几个，就真正做到了响应数据格式、响应码和响应信息规范化、统一化！这些可以参考： <code>Java</code>  项目构建基础：统一结果，统一异常，统一日志</p>\n<h2 id=\"十一-全局处理响应数据\"><a class=\"markdownIt-Anchor\" href=\"#十一-全局处理响应数据\">#</a> 十一、全局处理响应数据</h2>\n<p>接口返回统一响应体 + 异常也返回统一响应体，其实这样已经很好了，但还是有可以优化的地方。要知道一个项目下来定义的接口搞个几百个太正常不过了，要是每一个接口返回数据时都要用响应体来包装一下好像有点麻烦，有没有办法省去这个包装过程呢？当然是有滴，还是要用到全局处理。</p>\n<p>首先，先创建一个类加上注解使其成为全局处理类。然后继承 <code>ResponseBodyAdvice</code>  接口重写其中的方法，即可对我们的 <code>controller</code>  进行增强操作，具体看代码和注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice(basePackages = &#123;&quot;com.cy.controller&quot;&#125;)</span> <span class=\"comment\">// 注意哦，这里要加上需要扫描的包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseControllerAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResponseBodyAdvice</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// supports方法是来给定条件判断是否该调用beforeBodyWrite，MethodParameter里面有各种数据，false就不调用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果接口返回的类型本身就是ResultVO那就没有必要进行额外的操作，返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> !returnType.getGenericParameterType().equals(ResultVO.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 响应结果拦截根据业务去封装返回体</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">beforeBodyWrite</span><span class=\"params\">(Object data, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// String类型不能直接包装，所以要进行些特别的处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (returnType.getGenericParameterType().equals(String.class)) &#123;</span><br><span class=\"line\">            ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将数据包装在ResultVO里后，再转换为json字符串响应给前端</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> objectMapper.writeValueAsString(<span class=\"keyword\">new</span> ResultVO&lt;&gt;(data));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JsonProcessingException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> APIException(<span class=\"string\">&quot;返回String类型错误&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将原本的数据包装在ResultVO里</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重写的这两个方法是用来在 <code>controller</code>  将数据进行返回前进行增强操作， <code>supports</code>  方法要返回为 <code>true</code>  才会执行 <code>beforeBodyWrite</code>  方法，所以如果有些情况不需要进行增强操作可以在 <code>supports</code>  方法里进行判断。对返回数据进行真正的操作还是在 <code>beforeBodyWrite</code>  方法中，我们可以直接在该方法里包装数据，这样就不需要每个接口都进行数据包装了，省去了很多麻烦。</p>\n<p>我们可以现在去掉接口的数据包装来看下效果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    user.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    user.setAccount(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;123@qq.com&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里是直接返回的User类型，并没有用ResultVO进行包装</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们来看下响应数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-10-03.png\" class=\"\">\n<p>成功对数据进行了包装！</p>\n<blockquote>\n<p>注意： <code>beforeBodyWrite</code>  方法里包装数据无法对 <code>String</code>  类型的数据直接进行强转，所以要进行特殊处理，这里不讲过多的细节，有兴趣可以自行深入了解。</p>\n</blockquote>\n<h2 id=\"十二-总结\"><a class=\"markdownIt-Anchor\" href=\"#十二-总结\">#</a> 十二、总结</h2>\n<p>自此整个后端接口基本体系就构建完毕了</p>\n<ul>\n<li>\n<p>通过 <code>Validator</code>  + 自动抛出异常来完成了方便的参数校验</p>\n</li>\n<li>\n<p>通过全局异常处理 + 自定义异常完成了异常操作的规范</p>\n</li>\n<li>\n<p>通过数据统一响应完成了响应数据的规范</p>\n</li>\n<li>\n<p>多个方面组装非常优雅的完成了后端接口的协调，让开发人员有更多的经历注重业务逻辑代码，轻松构建后端接口</p>\n</li>\n</ul>\n",
            "tags": [
                "SpringBoot",
                "接口",
                "SpringMvc"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/f23f1351/",
            "url": "https://smile1231.github.io/posts/f23f1351/",
            "title": "equals与==区别",
            "date_published": "2022-02-15T14:27:23.000Z",
            "content_html": "<h1 id=\"equals与-区别\"><a class=\"markdownIt-Anchor\" href=\"#equals与-区别\">#</a>  <code>equals</code>  与  <code>==</code>  区别</h1>\n<p><code>Java</code>  中数据类型分两种：</p>\n<ol>\n<li>基本类型： <code>long,int,byte,float,double</code></li>\n<li>对象类型： <code>Long,Integer,Byte,Float,Double</code>  其它一切 <code>java</code>  提供的，或者你自己创建的类。</li>\n</ol>\n<span id=\"more\"></span>\n<p>其中 <code>Long</code>  叫  <code>long</code>  的包装类。 <code>Integer、Byte</code>  和 <code>Float</code>  也类似，一般包装类的名字首写是数值名的大写开头。</p>\n<blockquote>\n<p>什么是包装类？</p>\n</blockquote>\n<p>在 <code>java</code>  中有时候的运算必须是两个类对象之间进行的，不允许对象与数字之间进行运算。所以需要有一个对象，这个对象把数字进行了一下包装，这样这个对象就可以和另一个对象进行运算了。</p>\n<p>比如我们可以定义一个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Long</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Long</span> <span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.i=i;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>这个 <code>Long</code>  就是一个包装类，它包装了一个整数值，然后可以在里面写一些运算符重载的方法使它支持某些运算。这个时候可以赋值：</p>\n<p><code>Long l = new Long(10);</code></p>\n<p>现在变量  <code>l</code>  就是一个对象，不是一个数字。</p>\n<p><code>long</code>  是原始数据类型，没有属性方法，只能进行数学运算， <code>Long</code>  是 <code>long</code>  相对应的引用数据类型，它有方法和属性，一个没方法属性，一个有方法属性，这就是它们的区别。</p>\n<h2 id=\"解读\"><a class=\"markdownIt-Anchor\" href=\"#解读\">#</a>  <code>==</code>  解读</h2>\n<p>对于基本类型和引用类型  <code>==</code>  的作用效果是不同的，如下所示：</p>\n<ul>\n<li>基本类型：比较的是值是否相同；</li>\n<li>引用类型：比较的是引用是否相同；</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String x = <span class=\"string\">&quot;string&quot;</span>;</span><br><span class=\"line\">String y = <span class=\"string\">&quot;string&quot;</span>;</span><br><span class=\"line\">String z = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;string&quot;</span>);</span><br><span class=\"line\">System.out.println(x==y); <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(x==z); <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(x.equals(y)); <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(x.equals(z)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>代码解读：因为  <code>x</code>  和  <code>y</code>  指向的是同一个引用，所以  <code>== </code> 也是  <code>true</code> ，而  <code>new String()</code>  方法则重写开辟了内存空间，所以  <code>== </code> 结果为  <code>false</code> ，而  <code>equals</code>  比较的一直是值，所以结果都为  <code>true</code> 。</p>\n<h2 id=\"equals-解读\"><a class=\"markdownIt-Anchor\" href=\"#equals-解读\">#</a>  <code>equals</code>  解读</h2>\n<p><code>equals</code>  本质上就是  <code>==</code> ，只不过 <code> String</code>  和  <code>Integer</code>  等重写了  <code>equals</code>  方法，把它变成了值比较。看下面的代码就明白了。</p>\n<p>首先来看默认情况下  <code>equals</code>  比较一个有相同值的对象，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Cat c1 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">&quot;王磊&quot;</span>);</span><br><span class=\"line\">Cat c2 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">&quot;王磊&quot;</span>);</span><br><span class=\"line\">System.out.println(c1.equals(c2)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>输出结果出乎我们的意料，竟然是  <code>false？</code> 这是怎么回事，看了  <code>equals </code> 源码就知道了，源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原来  <code>equals</code>  本质上就是 ==。<br>\n那问题来了，两个相同值的 <code>String</code>  对象，为什么返回的是 <code> true？</code> 代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;老王&quot;</span>);</span><br><span class=\"line\">String s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">&quot;老王&quot;</span>);</span><br><span class=\"line\">System.out.println(s1.equals(s2)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>同样的，当我们进入  <code>String</code>  的  <code>equals</code>  方法，找到了答案，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        String anotherString = (String)anObject;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原来是  <code>String</code>  重写了  <code>Object</code>  的  <code>equals</code>  方法，把引用比较改成了值比较。</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>总体来说，== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而  <code>equals</code>  默认情况下是引用比较，只是很多类重写了  <code>equals</code>  方法，比如  <code>String、Integer</code>  等把它变成了值比较，所以一般情况下  <code>equals</code>  比较的是值是否相等。</p>\n",
            "tags": [
                "Java",
                "Java面试"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/b42f0c87/",
            "url": "https://smile1231.github.io/posts/b42f0c87/",
            "title": "Cache、Cookie、Session、Token",
            "date_published": "2022-02-15T13:37:52.000Z",
            "content_html": "<h1 id=\"cache-cookie-session-token\"><a class=\"markdownIt-Anchor\" href=\"#cache-cookie-session-token\">#</a>  <code>Cache、Cookie、Session、Token</code></h1>\n<h2 id=\"协议是什么\"><a class=\"markdownIt-Anchor\" href=\"#协议是什么\">#</a> 协议是什么</h2>\n<p>在接口测试中，客户端发送的 <code>request</code>  至服务端反馈的 <code>response</code>  中传输的数据就是接口测试最重要的部分</p>\n<h2 id=\"cache是什么\"><a class=\"markdownIt-Anchor\" href=\"#cache是什么\">#</a>  <code>Cache</code>  是什么</h2>\n<span id=\"more\"></span>\n<p>打开浏览器或者应用的时候，用户的等待时间叫做响应时间，打开速度影响到用户体验，提高反应速度的一个方法就是使用缓存策略，缓存策略能带来什么好处呢？</p>\n<ol>\n<li>\n<p>减少延迟：因为网页请求指向的是更接近的客户端缓存，而不是资源服务器，所以花费的时间更短，提高用户体验</p>\n</li>\n<li>\n<p>降低网络负荷：因为缓存可以重复使用，节省带宽，降低网络负荷，也就可以更加节省用户的流量</p>\n</li>\n</ol>\n<blockquote>\n<p>缓存一般分为以下几种：</p>\n</blockquote>\n<ol>\n<li>\n<p>浏览器缓存　　　　<br>\n（缓存在本地）</p>\n</li>\n<li>\n<p>代理缓存　　　　　<br>\n（缓存在网络路由，也就是共享缓存）</p>\n</li>\n<li>\n<p>网关缓存　　　　　<br>\n(缓存在 CDN)</p>\n</li>\n</ol>\n<h2 id=\"缓存策略一般分两种情况\"><a class=\"markdownIt-Anchor\" href=\"#缓存策略一般分两种情况\">#</a> 缓存策略一般分两种情况：</h2>\n<ol>\n<li>\n<p>强缓存　　　　(直接在本地缓存中读取资源)</p>\n</li>\n<li>\n<p>协商缓存　　  (通过服务器告知是否能用本地缓存，先和服务器协商，如果可以，就从本地缓存中读取。如果不可以，就返回最新的资源)</p>\n</li>\n</ol>\n<h2 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\">#</a>  <code>Cookie</code></h2>\n<p><code>Cookie</code>  的内容是保存一小段文本信息。组成一个通行证，用来处理客户端无状态协议的一种解决方案</p>\n<p><code>Cookie</code>  使用原理如下：</p>\n<ol>\n<li>\n<p>用户会提供信息提交给服务器</p>\n</li>\n<li>\n<p>服务端向客户端回传相应数据的同时，也会发回 <code>Cookie</code></p>\n</li>\n<li>\n<p>客户端接收到服务器相应后，浏览器将 <code>Cookie</code>  保存在同一个位置</p>\n</li>\n<li>\n<p>客户端向服务端发送请求的实话，会把 <code>Cookie</code>  再次发回服务端</p>\n</li>\n</ol>\n<h2 id=\"获取cookie的途径\"><a class=\"markdownIt-Anchor\" href=\"#获取cookie的途径\">#</a> 获取 <code>Cookie</code>  的途径</h2>\n<ol>\n<li>\n<p>浏览器自带的开发工具或者抓包工具 <code>（Fiddler,Charles）</code></p>\n</li>\n<li>\n<p>本地获取（ <code>ie</code>  的路径为 <code>C</code>  盘 <code>appdata/Microsoft/Windows/Cookies，Firefox位于C盘appdata/Mozilla/Firefox/Profiles，Charome位于C盘appdata/Goole/Chrome/User Date /Default）</code></p>\n</li>\n<li>\n<p><code>js</code>  代码查看 (浏览器地址栏输入 <code>Javascript:alert(document.cookie)</code> )</p>\n</li>\n</ol>\n<h2 id=\"session是什么\"><a class=\"markdownIt-Anchor\" href=\"#session是什么\">#</a>  <code>Session</code>  是什么</h2>\n<p><code>Session</code>  是另外一种记录用户状态的机制，不同于 <code>Cookie</code>  的是 <code>Session</code>  是保存在服务器上，用来解决服务端对无状态协议</p>\n<p><code>Session</code>  的传输步骤</p>\n<ol>\n<li>\n<p>服务端创建 <code>Session</code> ，并创建唯一的 <code>id</code></p>\n</li>\n<li>\n<p>服务器将 <code>id</code>  发给客户端</p>\n</li>\n<li>\n<p>客户端再次发送请求的实话带上 <code>Session</code>  的 <code>id</code></p>\n</li>\n<li>\n<p>服务器接收到请求后根据 <code>Seesion</code>  的 <code>id</code>  找到相应的 <code>Session</code> ，完成相应</p>\n</li>\n</ol>\n<h2 id=\"session的传输媒介\"><a class=\"markdownIt-Anchor\" href=\"#session的传输媒介\">#</a>  <code>Session</code>  的传输媒介</h2>\n<ol>\n<li>\n<p>通过 <code>Cookie</code>  传输</p>\n</li>\n<li>\n<p>通过 <code>URL</code>  地址重写</p>\n</li>\n</ol>\n<blockquote>\n<p>很多同学不知道 <code>Session</code>  和 <code>Cookie</code>  的区别，那么我来大概讲解一下我理解的</p>\n</blockquote>\n<ol>\n<li>\n<p>存储位置不同：大多数情况 <code>Cookie</code>  存储在浏览器， <code>Session</code>  存储在服务器</p>\n</li>\n<li>\n<p>存储容量不同：单个 <code>Cookie</code>  保存的数据不得超过 <code>4kb</code> ，一个站点最多 <code>20</code>  个 <code>Cookie</code> ， <code>Session</code>  一般情况下没有上限，不过建议不要存放太多东西影响性能</p>\n</li>\n<li>\n<p>存取方式不同： <code>Cookie</code>  只能用 <code>ASCII</code>  字符串。通过编码方式获取 <code>Unicode</code>  字符或者 <code>二进制</code> 数据。不好存储复杂的信息， <code>Session</code>  能存储任何类型的数据</p>\n</li>\n<li>\n<p>隐私策略不同： <code>Cookie</code>  放在客户端，可以进行 <code>Cookie</code>  欺骗，所以不安全。 <code>Session</code>  放在服务端，更加安全</p>\n</li>\n<li>\n<p>有效期不同： <code>Cookie</code>  可以设置属性达到长期有效， <code>Session</code>  依赖于 <code>JSESSIONID</code>  的 <code>Cookie</code> ， <code>Cookie JSESSIONID</code>  的过期时间默认为 <code>-1</code> ，只需要关闭窗口 <code>Session</code>  就会失效，，就算不依赖 <code>Cookie</code> ，</p>\n</li>\n</ol>\n<blockquote>\n<p>用 <code>UrL</code>  重写也不能完成，如果 <code>Session</code>  超时时间过长，容易导致内存溢出</p>\n</blockquote>\n<ol start=\"6\">\n<li>服务器压力不同： <code>Cookie</code>  保存子本地。不存在服务端压力。 <code>Session</code>  保存在服务端，每个用户产生一个 <code>Session</code> ，并发过多非常占用内存</li>\n</ol>\n<p>7. 浏览器支持不同：如果浏览器禁用 <code>Cookie</code> ，那么 <code>Cookie</code>  直接失效。 <code>Session</code>  比较好点。可以用 <code>URL</code>  重写</p>\n<p>8. 跨域不同： <code>Cookie</code>  支持跨域访问， <code>Session</code>  不支持跨域</p>\n<h2 id=\"token是什么\"><a class=\"markdownIt-Anchor\" href=\"#token是什么\">#</a>  <code>Token</code>  是什么：</h2>\n<ol>\n<li>\n<p>当客户端第一次请求的实话，发送用户信息到服务端，服务器对用户信息使用 <code>HSA256</code>  算法以及密钥进行签名，再将这个签名和数据一次作为 <code>Token</code>  返回给客户端</p>\n</li>\n<li>\n<p>服务端不保存 <code>Token</code> ，客户端保存 <code>Token</code></p>\n</li>\n<li>\n<p>客户端再次请求的实话，将 <code>Token</code>  发送给服务端</p>\n</li>\n<li>\n<p>服务端同样用 <code>HSA256</code>  算法和同样的密钥对数据再一次计算签名，和 <code>Token</code>  中的签名做比较（如果相同，直接登录，不相同，登录失败）</p>\n</li>\n</ol>\n",
            "tags": [
                "Java",
                "Cache",
                "Cookie",
                "Session",
                "Java面试"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/166a1445/",
            "url": "https://smile1231.github.io/posts/166a1445/",
            "title": "位，字节， 字符",
            "date_published": "2022-02-15T13:37:36.000Z",
            "content_html": "<h2 id=\"位字节-字符\"><a class=\"markdownIt-Anchor\" href=\"#位字节-字符\">#</a> 位，字节， 字符</h2>\n<h3 id=\"1-位\"><a class=\"markdownIt-Anchor\" href=\"#1-位\">#</a> 1. 位</h3>\n<pre><code> 数据存储的最小单位。每个二进制数字0或者1就是1个位,比特为 bit ，简称 b\n</code></pre>\n<span id=\"more\"></span>\n<h3 id=\"2-字节\"><a class=\"markdownIt-Anchor\" href=\"#2-字节\">#</a> 2. 字节</h3>\n<pre><code> 8个位构成一个字节；即：1 byte (字节)= 8 bit(位)；\n Byte(字节)，简称B。byte是基本数据类型，Byte是byte的包装类\n</code></pre>\n<p><code>1 KB</code>  =  <code>1024 B</code>  (字节)；</p>\n<p><code>1 MB</code>  =  <code>1024 KB</code> ;  ( <code>2^20 B</code> )</p>\n<p><code>1 GB</code>  =  <code>1024 MB</code> ;  ( <code>2^20 KB</code> )</p>\n<p><code>1 TB</code>  =  <code>1024 GB</code> ;  ( <code>2^30 KB</code> )</p>\n<h3 id=\"3字符\"><a class=\"markdownIt-Anchor\" href=\"#3字符\">#</a> 3. 字符</h3>\n<p><code>a、A、中、+、*、の......</code>  均表示一个字符；</p>\n<p>字符 (汉字和汉字标点符号都算字符)</p>\n<pre><code> 一般 utf-8 编码下，一个汉字 字符 占用 3 个 字节；\n\n 一般 gbk 编码下，一个汉字  字符  占用 2 个 字节；\n</code></pre>\n<h3 id=\"4字符集\"><a class=\"markdownIt-Anchor\" href=\"#4字符集\">#</a> 4. 字符集</h3>\n<pre><code> 即各种各个字符的集合，也就是说哪些汉字，字母（A、b、c）和符号（空格、引号..）会被收入标准中；\n</code></pre>\n<h3 id=\"5编码\"><a class=\"markdownIt-Anchor\" href=\"#5编码\">#</a> 5. 编码</h3>\n<blockquote>\n<p><code>ASCII</code>  码：一个英文字母（不分大小写）占 <code>一个字节</code> 的空间，一个中文汉字占 <code>两个字节</code> 的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为 8 位二进制数，换算为十进制。最小值 <code>-128</code> ，最大值 <code>127</code> 。如一个 <code>ASCII</code>  码就是 <code>一个字节</code> ， <code>0~127</code>  (总共有 <code>128</code>  个 <code>ASCII</code>  码)。</p>\n</blockquote>\n<blockquote>\n<p><code>UTF-8</code>  编码：一个 <code>英文字符</code> 等于 <code>一个字节</code> ，一个 <code>中文（含繁体）</code> 等于 <code>三个字节</code> 。 <code>中文标点</code> 占 <code>三个字节</code> ，英文标点占 <code>一个字节</code></p>\n</blockquote>\n<blockquote>\n<p><code>Unicode</code>  编码：一个 <code>英文</code> 等于 <code>两个字节</code> ，一个 <code>中文</code> （含繁体）等于 <code>两个字节</code> 。 <code>中文标点</code> 占 <code>两个字节</code> ， <code>英文标点</code> 占 <code>两个字节</code></p>\n</blockquote>\n<h2 id=\"基本数据类型范围\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型范围\">#</a> 基本数据类型范围</h2>\n<p>在 <code>JAVA</code>  中一共有八种基本数据类型，他们分别是： <code>byte、short、int、long、float、double、char、boolean</code></p>\n<ul>\n<li><code>byte</code>  的取值范围为  <code>-128</code>  ~  <code>127</code> , 占用 <code>一个</code> 字节 ( <code>-2^7</code>  到  <code>(2^7)-1</code>  )</li>\n<li><code>short</code>  的取值范围为  <code>-32768</code>  ～  <code>32767</code> ， 占用  <code>两个</code>  字节 ( <code>-2^15</code>  到  <code>(2^31)-1</code> )</li>\n<li><code>int</code>  的取值范围为  <code>-2147483648</code> <sub>``2147483647``(``-2^31``</sub> <code>(2^31)-1</code> ) , 占用 <code>四个个</code> 字节</li>\n<li><code>long</code>  的取值范围为（ <code>-9223372036854774808</code>  ~  <code>9223372036854774807</code> ）, 占用 <code>8个字节</code> （ <code>-2^63</code>  到  <code>(2^63)-1</code> ）</li>\n</ul>\n<p>可以看到 <code>byte</code>  和 <code>short</code>  的取值范围比较小，而 <code>long</code>  的取值范围太大，占用的空间多，基本上 <code>int</code>  可以满足我们的日常的计算了，而且 <code>int</code>  也是使用的最多的整型类型了。 在通常情况下，如果 <code>JAVA</code>  中出现了一个整数数字比如 <code>35</code> ，那么这个数字就是 <code>int</code>  型的，如果我们希望它是 <code>byte</code>  型的，可以在数据后加上大写的  <code>B</code> ： <code>35B</code> ，表示它是 <code>byte</code>  型的。同样的 <code>35S</code>  表示 <code>short</code>  型， <code>35L</code>  表示 <code>long</code>  型的，表示 <code>int</code>  我们可以什么都不用加，但是如果要表示 <code>long</code>  型的，就一定要在数据后面加 <code>“L”</code> 。</p>\n<p>浮点型  <code>float</code>  和 <code>double</code>  是表示浮点型的数据类型，他们之间的区别在于他们的精确度不同</p>\n<ul>\n<li>\n<p><code>float</code>   <code>3.402823e+38 ~ 1.401298e-45</code> （ <code>e+38</code>  表示是乘以 <code>10</code>  的 <code>38</code>  次方，同样， <code>e-45</code>  表示乘以 <code>10</code>  的负 <code>45</code>  次方）, 占用 <code>4个字节 </code></p>\n</li>\n<li>\n<p><code>double</code>   <code>1.797693e+308 ~ 4.9000000e-324</code>  占用 <code>8个字节</code>  .  <code>double</code>  型比 <code>float</code>  型存储范围更大，精度更高，所以通常的浮点型的数据在不声明的情况下都是 <code>double</code>  型的，如果要表示一个数据是 <code>float</code>  型的，可以在数据后面加上 <code>“F”</code> 。 浮点型的数据是不能完全精确的，所以有的时候在计算的时候可能会在小数点最后几位出现浮动，这是正常的。</p>\n</li>\n<li>\n<p><code>boolean</code>  型（布尔型） 这个类型只有两个值， <code>true</code>  和 <code>false</code> （真和非真）  <code>boolean t = true</code> ；  <code>boolean f = false；</code></p>\n</li>\n<li>\n<p><code>char</code>  型（文本型） 用于存放字符的数据类型，占用 <code>2个字节</code> ，采用 <code>unicode</code>  编码，它的前 <code>128字节</code> 编码与 <code>ASCII</code>  兼容 字符的存储范围在 <code>\\u0000~\\uFFFF</code> ，在定义字符型的数据时候要注意加 <code>' '</code> ，比如 <code> '1'</code>  表示字符 <code>'1'</code>  而不是数值 <code>1</code></p>\n<ul>\n<li><code>char c = ' 1 '</code> ; 我们试着输出 <code>c</code>  看看， <code>System.out.println(c)</code> ;</li>\n<li>结果就是 <code>1</code></li>\n<li>而如果我们这样输出呢 <code>System.out.println(c+0)</code> ; 结果却变成了 <code>49</code> 。 如果我们这样定义 <code>c</code>  看看  <code>char c = ' \\u0031 '</code> ;</li>\n<li>输出的结果仍然是 <code>1</code> ，</li>\n<li>这是因为字符 <code>'1'</code>  对应着 unicode 编码就是 <code>\\u0031</code> ,  <code>char c1 = 'h'</code> , <code>c2 = 'e'</code> , <code>c3='l'</code> , <code>c4='l'</code> , <code>c5 = 'o'</code> ;</li>\n<li><code> System.out.print(c1);</code>   <code>System.out.print(c2);</code>   <code>System.out.print(c3);</code>   <code>System.out.print(c4);</code>   <code>Sytem.out.print(c5);</code></li>\n</ul>\n</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimitiveTypeTest</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">// byte  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// short  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// int  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// long  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// float  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// double  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// char  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Character.MIN_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"keyword\">int</span>) Character.MIN_VALUE);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Character.MAX_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"keyword\">int</span>) Character.MAX_VALUE);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型：<span class=\"keyword\">byte</span> 二进制位数：<span class=\"number\">8</span></span><br><span class=\"line\">包装类：java.lang.Byte</span><br><span class=\"line\">最小值：Byte.MIN_VALUE=-<span class=\"number\">128</span></span><br><span class=\"line\">最大值：Byte.MAX_VALUE=<span class=\"number\">127</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">short</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Short</span><br><span class=\"line\">最小值：Short.MIN_VALUE=-<span class=\"number\">32768</span></span><br><span class=\"line\">最大值：Short.MAX_VALUE=<span class=\"number\">32767</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">int</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Integer</span><br><span class=\"line\">最小值：Integer.MIN_VALUE=-<span class=\"number\">2147483648</span></span><br><span class=\"line\">最大值：Integer.MAX_VALUE=<span class=\"number\">2147483647</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">long</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Long</span><br><span class=\"line\">最小值：Long.MIN_VALUE=-<span class=\"number\">9223372036854775808</span></span><br><span class=\"line\">最大值：Long.MAX_VALUE=<span class=\"number\">9223372036854775807</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">float</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Float</span><br><span class=\"line\">最小值：Float.MIN_VALUE=<span class=\"number\">1.4E-45</span></span><br><span class=\"line\">最大值：Float.MAX_VALUE=<span class=\"number\">3.4028235E38</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">double</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Double</span><br><span class=\"line\">最小值：Double.MIN_VALUE=<span class=\"number\">4.9E-324</span></span><br><span class=\"line\">最大值：Double.MAX_VALUE=<span class=\"number\">1.7976931348623157E308</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"keyword\">char</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Character</span><br><span class=\"line\">最小值：Character.MIN_VALUE=<span class=\"number\">0</span></span><br><span class=\"line\">最大值：Character.MAX_VALUE=<span class=\"number\">65535</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java",
                "Java面试",
                "操作系统"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/59de1824/",
            "url": "https://smile1231.github.io/posts/59de1824/",
            "title": "spring中/和/*和/**的区别",
            "date_published": "2022-02-15T13:35:15.000Z",
            "content_html": "<h1 id=\"spring中和和的区别\"><a class=\"markdownIt-Anchor\" href=\"#spring中和和的区别\">#</a> spring 中 <code>/</code>  和 <code>/*</code>  和 <code>/**</code>  的区别</h1>\n<h2 id=\"和-区别\"><a class=\"markdownIt-Anchor\" href=\"#和-区别\">#</a>  <code>/</code>  和  <code>/*</code>  区别</h2>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ 拦截所有请求 包括静态资源和动态请求 但是不拦截jsp</span><br><span class=\"line\">/* 拦截所有请求 包括静态资源和动态请求 也拦截jsp</span><br><span class=\"line\">区别就在于<span class=\"regexp\">/ 不拦截jsp /</span>*拦截jsp</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"和-区别-2\"><a class=\"markdownIt-Anchor\" href=\"#和-区别-2\">#</a>  <code>/*</code>  和  <code>/**</code>  区别</h2>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"strong\">** 的意思是所有文件夹及里面的子文件夹</span></span><br><span class=\"line\"><span class=\"strong\">/*</span> 是所有文件夹，不含子文件夹</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意点案例\"><a class=\"markdownIt-Anchor\" href=\"#注意点案例\">#</a> 注意点案例</h2>\n<p>理解下面的案例有助于理解如何使用</p>\n<p>场景：当我在客户端调用 <code>URL</code> ： <code>/user/list</code>  然后返回 <code>user.jsp</code>  视图，</p>\n<ul>\n<li>当配置的是 <code>/</code> ： <code>DispathcherServlet</code>  拿到这个请求然后返回对应的 <code>controller</code> ，然后依据 <code>Dispather Type</code>  为 <code>Forward</code>  类型转发到 <code>user.jsp</code>  视图，即就是请求 <code>user.jsp</code>  视图 ( <code>/user/user.jsp</code> )，此时 <code>Dispather</code>  没有拦截 <code>/user/user.jsp</code> , 因为此时你配置的是默认的 <code>/</code> ，就顺利的交给 <code>ModleAndView</code>  去处理显示了。</li>\n<li>当配置的是 <code>/*</code> ： <code>DispathcherServlet</code>  拿到这个请求然后返回对应的 <code>controller</code> ，然后通过 <code>Dispather Type</code>  通过 <code>Forward</code>  转发到 <code>user.jsp</code>  视图，即就是请求 <code>user.jsp</code>  视图 ( <code>/user/user.jsp</code> )，此时 <code>Dispather</code>  已经拦截 <code>/user/user.jsp</code> ， <code>Dispatcher</code>  会把他当作 <code>Controller</code>  去匹配，没有匹配到就会报 <code>404</code>  错误。</li>\n</ul>\n<p>在 springboot 中建了一个过滤器，测试</p>\n\n<p>当请求为 <code>/user/login</code>  的时候可以被拦截，当为 <code>/page/login.html</code>  页面的时候不拦截</p>\n\n<p>当请求为 <code>/user/login</code>  的时候可以被拦截，当为 <code>/page/login.html</code>  页面的时候也会被拦截</p>\n<ul>\n<li>\n<p><code>/</code>  不会拦截页面，只会拦截路径。</p>\n</li>\n<li>\n<p><code>/*</code>  会路径和页面</p>\n</li>\n</ul>\n<p><strong>结论：在配置视图的时候尽量用 <code>/</code>  这种方式。</strong></p>\n",
            "tags": [
                "Java",
                "Java面试",
                "SpringBoot"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/5e7baeeb/",
            "url": "https://smile1231.github.io/posts/5e7baeeb/",
            "title": "过滤器和拦截器的区别",
            "date_published": "2022-02-15T13:34:17.000Z",
            "content_html": "<h1 id=\"过滤器和拦截器的区别\"><a class=\"markdownIt-Anchor\" href=\"#过滤器和拦截器的区别\">#</a> 过滤器和拦截器的区别</h1>\n<img data-src=\"/posts/5e7baeeb/2022-02-15-22-48-46.png\" class=\"\">\n<ol>\n<li>\n<p>过滤器和拦截器触发时机不一样，过滤器是在请求进入容器后，但请求进入 <code>servlet</code>  之前进行预处理的。请求结束返回也是，是在 <code>servlet</code>  处理完后，返回给前端之前。</p>\n</li>\n<li>\n<p>拦截器可以获取 <code>IOC</code>  容器中的各个 <code>bean</code> ，而过滤器就不行，因为拦截器是 <code>spring</code>  提供并管理的， <code>spring</code>  的功能可以被拦截器使用，在拦截器里注入一个 <code>service</code> ，可以调用业务逻辑。而过滤器是 <code>JavaEE</code>  标准，只需依赖 <code>servlet api</code>  ，不需要依赖 <code>spring</code> 。</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n<img data-src=\"/posts/5e7baeeb/2022-02-15-22-48-57.png\" class=\"\">\n<ol start=\"3\">\n<li>\n<p>过滤器的实现基于 <code>回调函数</code> 。而 <code>拦截器（代理模式）</code> 的实现基于反射</p>\n</li>\n<li>\n<p><code>Filter</code>  是依赖于 <code>Servlet</code>  容器，属于 <code>Servlet</code>  规范的一部分，而拦截器则是独立存在的，可以在任何情况下使用。</p>\n</li>\n<li>\n<p><code>Filter</code>  的执行由 <code>Servlet</code>  容器回调完成，而拦截器通常通过动态代理（反射）的方式来执行。</p>\n</li>\n<li>\n<p><code>Filter</code>  的生命周期由 <code>Servlet</code>  容器管理，而拦截器则可以通过 <code>IoC</code>  容器来管理，因此可以通过注入等方式来获取其他 <code>Bean</code>  的实例，因此使用会更方便。</p>\n</li>\n</ol>\n<h2 id=\"springboot使用过滤器\"><a class=\"markdownIt-Anchor\" href=\"#springboot使用过滤器\">#</a>  <code>SpringBoot</code>  使用过滤器</h2>\n<p>两种方式：</p>\n<ol>\n<li>使用 <code>spring boot</code>  提供的 <code>FilterRegistrationBean</code>  注册 <code>Filter </code></li>\n<li>使用原生 <code>servlet</code>  注解定义 <code>Filter </code> <br>\n两种方式的本质都是一样的，都是去 <code>FilterRegistrationBean</code>  注册自定义 <code>Filter</code></li>\n</ol>\n<blockquote>\n<p>方式一: （使用 <code>spring boot</code>  提供的 <code>FilterRegistrationBean</code>  注册 <code>Filter</code>  ）</p>\n</blockquote>\n<p>①. 先定义 <code>Filter</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.springboot01.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> cy</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-03-12-9:04 上午</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something 处理request 或response</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;filter1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 调用filter链中的下一个filter</span></span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>②、注册自定义 <code>Filter</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">registrationBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean filterRegistrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">        filterRegistrationBean.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>方式一的 <code>①②步骤</code> 可以用下面这段代码代替：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterConfig</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">registFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        registration.setFilter(<span class=\"keyword\">new</span> LogCostFilter());</span><br><span class=\"line\">        registration.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\">        registration.setName(<span class=\"string\">&quot;LogCostFilter&quot;</span>);</span><br><span class=\"line\">        registration.setOrder(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogCostFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Execute cost=&quot;</span>+(System.currentTimeMillis()-start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>方式二：（使用原生 <code>servlet</code>  注解定义 <code>Filter</code>  ）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注入spring容器</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"comment\">// 定义filterName 和过滤的url</span></span><br><span class=\"line\"><span class=\"meta\">@WebFilter(filterName = &quot;my2Filter&quot; ,urlPatterns = &quot;/*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">My2Filter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;filter2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里直接用 <code>@WebFilter</code>  就可以进行配置，同样，可以设置 <code>url</code>  匹配模式，过滤器名称等。这里需要注意一点的是 <code>@WebFilter</code>  这个注解是 <code>Servlet3.0</code>  的规范，并不是 <code>Spring boot</code>  提供的。<strong>除了这个注解以外，我们还需在启动类中加另外一个注解： <code>@ServletComponetScan</code> ，指定扫描的包。</strong></p>\n<h2 id=\"springboot配置拦截器\"><a class=\"markdownIt-Anchor\" href=\"#springboot配置拦截器\">#</a>  <code>SpringBoot</code>  配置拦截器</h2>\n<p>首先我们实现拦截器类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogCostInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        start = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Interceptor cost=&quot;</span>+(System.currentTimeMillis()-start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>我们还需要实现 <code>HandlerInterceptor</code>  这个接口</strong>，这个接口包括三个方法， <code>preHandle</code>  是请求执行前执行的， <code>postHandler</code>  是请求结束执行的，但只有 <code>preHandle</code>  方法返回 <code>true</code>  的时候才会执行， <code>afterCompletion</code>  是视图渲染完成后才执行，同样需要 <code>preHandle</code>  返回 <code>true</code> ，</p>\n<p>该方法通常用于清理资源等工作。除了实现上面的接口外，我们还需对其进行配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> LogCostInterceptor()).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.addInterceptors(registry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这里我们实现了 <code>WebMvcConfigurer</code> </strong>，这里我们重写了 <code>addInterceptors</code>  这个方法，进行拦截器的配置，主要配置项就两个，一个是指定拦截器，第二个是指定拦截的 <code>URL</code> 。</p>\n",
            "tags": [
                "Java",
                "Java面试",
                "SpringBoot"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/12fecb94/",
            "url": "https://smile1231.github.io/posts/12fecb94/",
            "title": "多线程笔记",
            "date_published": "2022-02-14T14:46:41.000Z",
            "content_html": "<blockquote>\n<p>线程的实现方式</p>\n</blockquote>\n<ol>\n<li>\n<p>继承 Thread 类</p>\n</li>\n<li>\n<p>实现 Runnable 接口</p>\n</li>\n<li>\n<p>使用 Callable 和 Future</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n<blockquote>\n<p>Thread 类中的 <code>start()</code>  和  <code>run() </code> 方法有什么区别？</p>\n</blockquote>\n<ol>\n<li>start（）方法来启动线程，真正实现了多线程运行。这时无需等待 run 方法体代码执行完毕，可以直接继续执行下面的代码；通过调用 Thread 类的 start () 方法来启动一个线程， 这时此线程是处于就绪状态， 并没有运行。 然后通过此 Thread 类调用方法 run () 来完成其运行操作的， 这里方法 run () 称为线程体，它包含了要执行的这个线程的内容， Run 方法运行结束， 此线程终止。然后 CPU 再调度其它线程。</li>\n<li>run（）方法当作普通方法的方式调用。程序还是要顺序执行，要等待 run 方法体执行完毕后，才可继续执行下面的代码； 程序中只有主线程 —— 这一个线程， 其程序执行路径还是只有一条， 这样就没有达到写线程的目的。</li>\n</ol>\n<blockquote>\n<p>线程 <code>RUNNABLE</code>  状态</p>\n</blockquote>\n<p>线程对象通过 start 方法进入 runnable 状态，启动的线程不一定会立即得到执行，线程的运行与否要看 cpu 的调度，我们把这个中间状态叫可执行状态（RUNNABLE)。</p>\n<blockquote>\n<p>线程的 <code>BLOCKED</code>  状态</p>\n</blockquote>\n<p>线程正在等待获取锁。</p>\n<p>进入 <code>BLOCKED</code>  状态，比如调用了 <code>sleep</code> , 或者 <code>wait</code>  方法<br>\n进行某个阻塞的 <code>io</code>  操作，比如因网络数据的读写进入 <code>BLOCKED</code>  状态<br>\n获取某个锁资源，从而加入到该锁的阻塞队列中而进入 <code>BLOCKED</code>  状态</p>\n<blockquote>\n<p>线程的 <code>TERMINATED</code>  状态</p>\n</blockquote>\n<p>`TERMINATED`` 是一个线程的最终状态，在该状态下线程不会再切换到其他任何状态了，代表整个生命周期都结束了。</p>\n<p>下面几种情况会进入 <code>TERMINATED</code>  状态:</p>\n<p>线程运行正常结束，结束生命周期<br>\n线程运行出错意外结束<br>\n <code>JVM Crash</code>  导致所有的线程都结束</p>\n<blockquote>\n<p>如何知道代码段被哪个线程调用？</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Thread.currentThread().getName());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>停止线程</p>\n</blockquote>\n<p><code>run</code>  方法执行完成，自然终止。</p>\n<p><code>stop()</code>  方法， <code>suspend()</code>  以及 <code>resume()</code>  都是过期作废方法，使用它们结果不可预期。</p>\n<p>大多数停止一个线程的操作使用 <code>Thread.interrupt()</code>  等于说给线程打一个停止的标记，此方法不回去终止一个正在运行的线程，需要加入一个判断才能可以完成线程的停止。</p>\n<blockquote>\n<p><code>interrupted</code>  和  <code>isInterrupted</code></p>\n</blockquote>\n<p><code>interrupted</code>  : 判断当前线程是否已经中断，会清除状态。</p>\n<p><code>isInterrupted</code>  ：判断线程是否已经中断，不会清除状态。</p>\n<blockquote>\n<p><code>yield</code></p>\n</blockquote>\n<p>放弃当前 cpu 资源，将它让给其他的任务占用 cpu 执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得 cpu 时间片。</p>\n<blockquote>\n<p>线程的优先级</p>\n</blockquote>\n<p>在操作系统中，线程可以划分优先级，优先级较高的线程得到 cpu 资源比较多，也就是 cpu 有限执行优先级较高的线程对象中的任务，但是不能保证一定优先级高，就先执行。</p>\n<p>Java 的优先级分为 1～10 个等级，数字越大优先级越高，默认优先级大小为 5。超出范围则抛出： <code>java.lang.IllegalArgumentException</code> 。</p>\n<blockquote>\n<p>优先级继承特性</p>\n</blockquote>\n<p>线程的优先级具有继承性，比如 <code>a</code>  线程启动 <code>b</code>  线程， <code>b</code>  线程与 <code>a</code>  优先级是一样的。</p>\n<blockquote>\n<p>线程种类</p>\n</blockquote>\n<p><code>Java</code>  线程有两种，一种是用户线程，一种是守护线程。</p>\n<blockquote>\n<p>守护线程的特点</p>\n</blockquote>\n<p>守护线程是一个比较特殊的线程，主要被用做程序中后台调度以及支持性工作。当 <code>Java</code>  虚拟机中不存在非守护线程时，守护线程才会随着 <code>JVM</code>  一同结束工作。</p>\n<blockquote>\n<p><code>Java</code>  中典型的守护线程</p>\n</blockquote>\n<p><code>GC</code> （垃圾回收器）</p>\n<blockquote>\n<p>如何设置守护线程<br>\n <code>Thread.setDaemon(true)</code></p>\n</blockquote>\n<p><code>PS:Daemon</code>  属性需要再启动线程之前设置，不能再启动后设置。</p>\n<blockquote>\n<p>join</p>\n</blockquote>\n<p>join 是指把指定的线程加入到当前线程，比如 join 某个线程 a, 会让当前线程 b 进入等待，直到 a 的生命周期结束，此期间 b 线程是处于 blocked 状态。</p>\n<blockquote>\n<p>什么是 synchronized?</p>\n</blockquote>\n<p>synchronized 关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。</p>\n<blockquote>\n<p>synchronized 包括哪两个 jvm 重要的指令？</p>\n</blockquote>\n<p>monitor enter 和 monitor exit</p>\n<blockquote>\n<p>synchronized 关键字用法？</p>\n</blockquote>\n<p>可以用于对代码块或方法的修饰</p>\n<blockquote>\n<p>synchronized 锁的是什么？</p>\n</blockquote>\n<p>普通同步方法 —————&gt; 锁的是当前实力对象。</p>\n<p>静态同步方法 —————&gt; 锁的是当前类的 Class 对象。</p>\n<p>同步方法 块 —————&gt; 锁的是 synchonized 括号里配置的对象。</p>\n<blockquote>\n<p>Java 对象头</p>\n</blockquote>\n<p>synchronized 用的锁是存在 Java 对象头里的。对象如果是数组类型，虚拟机用 3 个字宽 (Word) 存储对象头，如果对象是非数组类型，用 2 字宽存储对象头。</p>\n<p>Tips:32 位虚拟机中一个字宽等于 4 字节。</p>\n<blockquote>\n<p>volatile 关键字</p>\n</blockquote>\n<p>volatile 是轻量级的 synchronized, 它在多处理器开发中保证了共享变量的 “可见性 “。</p>\n<p>Java 语言规范第 3 版对 volatile 定义如下，Java 允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为 volatile,Java 线程内存模型所有线程看到这个变量的值是一致的。</p>\n<blockquote>\n<p>重入锁 ReentrantLock</p>\n</blockquote>\n<p>支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁的还支持获取锁时的公平和非公平性选择。</p>\n<blockquote>\n<p>重进入是什么意思？</p>\n</blockquote>\n<p>重进入是指任意线程在获取到锁之后能够再次获锁而不被锁阻塞。</p>\n<p>该特性主要解决以下两个问题：</p>\n<ol>\n<li>\n<p>锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是则再次成功获取。</p>\n</li>\n<li>\n<p>所得最终释放。线程重复 n 次是获取了锁，随后在第 n 次释放该锁后，其他线程能够获取到该锁。</p>\n</li>\n</ol>\n<blockquote>\n<p>ReentrantLock 默认锁？</p>\n</blockquote>\n<p>默认非公平锁</p>\n<blockquote>\n<p>公平锁和非公平锁的区别</p>\n</blockquote>\n<p>公平性与否针对获取锁来说的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是 <code>FIFO</code> 。</p>\n<blockquote>\n<p>读写锁</p>\n</blockquote>\n<p>读写锁允许同一时刻多个读线程访问，但是写线程和其他写线程均被阻塞。读写锁维护一个读锁一个写锁，读写分离，并发性得到了提升。<br>\n <code>Java</code>  中提供读写锁的实现类是 <code>ReentrantReadWriteLock</code> 。</p>\n<blockquote>\n<p>Java 并发容器，你知道几个？</p>\n</blockquote>\n<p>ConcurrentHashMap、CopyOnWriteArrayList 、CopyOnWriteArraySet 、ConcurrentLinkedQueue、</p>\n<p>ConcurrentLinkedDeque、ConcurrentSkipListMap、ConcurrentSkipListSet、ArrayBlockingQueue、</p>\n<p>LinkedBlockingQueue、LinkedBlockingDeque、PriorityBlockingQueue、SynchronousQueue、</p>\n<p>LinkedTransferQueue、DelayQueue</p>\n<blockquote>\n<p>Java 里的阻塞的队列</p>\n</blockquote>\n\n<blockquote>\n<p>工作窃取算法</p>\n</blockquote>\n<p>是指某个线程从其他队列里窃取任务来执行。当大任务被分割成小任务时，有的线程可能提前完成任务，此时闲着不如去帮其他没完成工作线程。此时可以去其他队列窃取任务，为了减少竞争，通常使用双端队列，被窃取的线程从头部拿，窃取的线程从尾部拿任务执行。</p>\n<blockquote>\n<p>创建线程池参数有哪些，作用？</p>\n</blockquote>\n\n<ol>\n<li>\n<p>corePoolSize: 核心线程池大小，当提交一个任务时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建，等待需要执行的任务数大于线程核心大小就不会继续创建。</p>\n</li>\n<li>\n<p>maximumPoolSize: 线程池最大数，允许创建的最大线程数，如果队列满了，并且已经创建的线程数小于最大线程数，则会创建新的线程执行任务。如果是无界队列，这个参数基本没用。</p>\n</li>\n<li>\n<p>keepAliveTime: 线程保持活动时间，线程池工作线程空闲后，保持存活的时间，所以如果任务很多，并且每个任务执行时间较短，可以调大时间，提高线程利用率。</p>\n</li>\n<li>\n<p>unit: 线程保持活动时间单位，天（DAYS)、小时 (HOURS)、分钟 (MINUTES、毫秒 MILLISECONDS)、微秒 (MICROSECONDS)、纳秒 (NANOSECONDS)</p>\n</li>\n<li>\n<p>workQueue: 任务队列，保存等待执行的任务的阻塞队列。</p>\n</li>\n</ol>\n<p>一般来说可以选择如下阻塞队列：</p>\n<p><code>ArrayBlockingQueue</code> : 基于数组的有界阻塞队列。</p>\n<p><code>LinkedBlockingQueue</code> : 基于链表的阻塞队列。</p>\n<p><code>SynchronizedQueue</code> : 一个不存储元素的阻塞队列。</p>\n<p><code>PriorityBlockingQueue</code> : 一个具有优先级的阻塞队列。</p>\n<blockquote>\n<p>向线程池提交任务</p>\n</blockquote>\n<p>可以使用 <code>execute()</code>  和 <code>submit()</code>  两种方式提交任务。</p>\n<p><code>execute()</code> : 无返回值，所以无法判断任务是否被执行成功。</p>\n<p><code>submit()</code> : 用于提交需要有返回值的任务。线程池返回一个 <code>future</code>  类型的对象，通过这个 <code>future</code>  对象可以判断任务是否执行成功，并且可以通过 <code>future的get()</code>  来获取返回值， <code>get()</code>  方法会阻塞当前线程知道任务完成。 <code>get(long timeout,TimeUnit unit)</code>  可以设置超市时间。</p>\n<blockquote>\n<p>关闭线程池</p>\n</blockquote>\n<p>可以通过 shutdown () 或 shutdownNow () 来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的 interrupt 来中断线程，所以无法响应终端的任务可以能永远无法停止。</p>\n<p>shutdownNow 首先将线程池状态设置成 STOP, 然后尝试停止所有的正在执行或者暂停的线程，并返回等待执行任务的列表。</p>\n<p>shutdown 只是将线程池的状态设置成 shutdown 状态，然后中断所有没有正在执行任务的线程。</p>\n<p>只要调用两者之一，isShutdown 就会返回 true, 当所有任务都已关闭，isTerminaed 就会返回 true。</p>\n<p>一般来说调用 shutdown 方法来关闭线程池，如果任务不一定要执行完，可以直接调用 shutdownNow 方法。</p>\n<blockquote>\n<p>线程池如何合理设置</p>\n</blockquote>\n<p>配置线程池可以从以下几个方面考虑。</p>\n<ul>\n<li>任务是 cpu 密集型、IO 密集型或者混合型</li>\n<li>任务优先级，高中低。</li>\n<li>任务时间执行长短。</li>\n<li>任务依赖性：是否依赖其他系统资源。\n<ul>\n<li>\n<p>cpu 密集型可以配置可能小的线程，比如 n + 1 个线程。</p>\n</li>\n<li>\n<p>io 密集型可以配置较多的线程，如 2n 个线程。</p>\n</li>\n<li>\n<p>混合型可以拆成 io 密集型任务和 cpu 密集型任务，</p>\n</li>\n<li>\n<p>如果两个任务执行时间相差大，否 -&gt; 分解后执行吞吐量将高于串行执行吞吐量。<br>\n否 -&gt; 没必要分解。</p>\n</li>\n<li>\n<p>可以通过 Runtime.getRuntime ().availableProcessors () 来获取 cpu 个数。</p>\n</li>\n<li>\n<p>建议使用有界队列，增加系统的预警能力和稳定性。</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>JDK 内置的拒绝策略</p>\n</blockquote>\n<ul>\n<li>\n<p>AbortPolicy 抛出异常。</p>\n</li>\n<li>\n<p>DiscardPolicy 直接静悄悄的丢弃这个任务，不触发任何动作。这个策略基本不会使用</p>\n</li>\n<li>\n<p>DiscardOldestPolicy 丢弃队列最前面（最旧）的任务，然后重新尝试执行任务（重复此过程）。</p>\n</li>\n<li>\n<p>CallerRunsPolicy 由调用线程处理该任务 。</p>\n</li>\n</ul>\n",
            "tags": [
                "Java",
                "Java面试",
                "多线程"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/b1231c9f/",
            "url": "https://smile1231.github.io/posts/b1231c9f/",
            "title": "java stream中Collectors的用法",
            "date_published": "2022-02-13T13:48:00.000Z",
            "content_html": "<h1 id=\"java-stream中collectors的用法\"><a class=\"markdownIt-Anchor\" href=\"#java-stream中collectors的用法\">#</a>  <code>java stream</code>  中 <code>Collectors</code>  的用法</h1>\n<ul>\n<li><a href=\"#java-stream%E4%B8%ADcollectors%E7%9A%84%E7%94%A8%E6%B3%95\"> <code>java stream</code>  中 <code>Collectors</code>  的用法</a>\n<ul>\n<li><a href=\"#%E7%AE%80%E4%BB%8B\"><span id=\"common\">简介</span></a></li>\n<li><a href=\"#collectorstolist\"><span id=\"toList\"> <code>Collectors.toList()</code> </span></a></li>\n<li><a href=\"#collectorstoset\"><span id=\"toSet\"> <code>Collectors.toSet()</code> </span></a></li>\n<li><a href=\"#collectorstocollection\"><span id=\"toColl\"> <code>Collectors.toCollection()</code> </span></a></li>\n<li><a href=\"#collectorstomap\"><span id=\"toMap\"> <code>Collectors.toMap()</code> </span></a></li>\n<li><a href=\"#collectorscollectingandthen\"><span id=\"toCollAndThen\"> <code>Collectors.collectingAndThen()</code> </span></a></li>\n<li><a href=\"#collectorsjoining\"><span id=\"join\"> <code>Collectors.joining()</code> </span></a></li>\n<li><a href=\"#collectorscounting\"><span id=\"count\"> <code>Collectors.counting()</code> </span></a></li>\n<li><a href=\"#collectorssummarizingdoublelongint\"><span id=\"sum\"> <code>Collectors.summarizingDouble/Long/Int()</code> </span></a></li>\n<li><a href=\"#collectorsaveragingdoublelongint\"><span id=\"average\"> <code>Collectors.averagingDouble/Long/Int()</code> </span></a></li>\n<li><a href=\"#collectorssummingdoublelongint\"><span id=\"summing\"> <code>Collectors.summingDouble/Long/Int()</code> </span></a></li>\n<li><a href=\"#collectorsmaxbyminby\"><span id=\"max\"> <code>Collectors.maxBy()/minBy()</code> </span></a></li>\n<li><a href=\"#collectorsgroupingby\"><span id=\"group\"> <code>Collectors.groupingBy()</code> </span></a></li>\n<li><a href=\"#collectorspartitioningby\"><span id=\"par\"> <code>Collectors.partitioningBy()</code> </span></a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"span-idcommon简介span\"><a class=\"markdownIt-Anchor\" href=\"#span-idcommon简介span\">#</a> <span id=\"common\">简介</span></h2>\n<p>在 <code>java stream</code>  中，我们通常需要将处理后的 <code>stream</code>  转换成集合类，这个时候就需要用到 <code>stream.collect</code>  方法。 <code>collect</code>  方法需要传入一个 <code>Collector</code>  类型，要实现 <code>Collector</code>  还是很麻烦的，需要实现好几个接口。</p>\n<p>于是 <code>java</code>  提供了更简单的 <code>Collectors</code>  工具类来方便我们构建 <code>Collector</code> 。</p>\n<p>下面我们将会具体讲解 <code>Collectors</code>  的用法。</p>\n<p>假如我们有这样两个 <code>list：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;bob&quot;</span>, <span class=\"string\">&quot;alice&quot;</span>, <span class=\"string\">&quot;mark&quot;</span>);</span><br><span class=\"line\">List&lt;String&gt; duplicateList = Arrays.asList(<span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;alice&quot;</span>, <span class=\"string\">&quot;mark&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>上面一个是无重复的 <code>list</code> ，一个是带重复数据的 <code>list</code> 。接下来的例子我们会用上面的两个 <code>list</code>  来讲解 <code>Collectors</code>  的用法。</p>\n<h2 id=\"span-idtolistcollectorstolistspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idtolistcollectorstolistspan\">#</a> <span id=\"toList\"> <code>Collectors.toList()</code> </span></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; listResult = list.stream().collect(Collectors.toList());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,listResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-13-35.png\" class=\"\">\n<p>将 <code>stream</code>  转换为 <code>list</code> 。这里转换的 <code>list</code>  是 <code>ArrayList</code> ，如果想要转换成特定的 <code>list</code> ，需要使用 <code>toCollection</code>  方法。</p>\n<h2 id=\"span-idtosetcollectorstosetspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idtosetcollectorstosetspan\">#</a> <span id=\"toSet\"> <code>Collectors.toSet()</code> </span></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Set&lt;String&gt; setResult = list.stream().collect(Collectors.toSet());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,setResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-13-55.png\" class=\"\">\n<h2 id=\"span-idtocollcollectorstocollectionspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idtocollcollectorstocollectionspan\">#</a> <span id=\"toColl\"> <code>Collectors.toCollection()</code> </span></h2>\n<p>上面的 <code>toMap,toSet</code>  转换出来的都是特定的类型，如果我们需要自定义，则可以使用 <code>toCollection()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; custListResult = list.stream().collect(Collectors.toCollection(LinkedList::<span class=\"keyword\">new</span>));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,custListResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-14-12.png\" class=\"\">\n<h2 id=\"span-idtomapcollectorstomapspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idtomapcollectorstomapspan\">#</a> <span id=\"toMap\"> <code>Collectors.toMap()</code> </span></h2>\n<p><code>toMap</code>  接收两个参数，第一个参数是 <code>keyMapper</code> ，第二个参数是 <code>valueMapper</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; mapResult = list.stream()</span><br><span class=\"line\">                .collect(Collectors.toMap(Function.identity(), String::length));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,mapResult);</span><br></pre></td></tr></table></figure>\n<p>如果 <code>stream</code>  中有重复的值，则转换会报 <code>IllegalStateException</code>  异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; duplicateMapResult = duplicateList.stream()</span><br><span class=\"line\">                .collect(Collectors.toMap(Function.identity(), String::length));</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-14-26.png\" class=\"\">\n<p>解决方案:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Integer&gt; duplicateMapResult2 = duplicateList.stream()</span><br><span class=\"line\">                .collect(Collectors.toMap(Function.identity(), String::length, (item, identicalItem) -&gt; item));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,duplicateMapResult2);</span><br></pre></td></tr></table></figure>\n<p>在 <code>toMap</code>  中添加第三个参数 <code>mergeFunction</code> ，来解决冲突的问题。</p>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-14-53.png\" class=\"\">\n<h2 id=\"span-idtocollandthencollectorscollectingandthenspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idtocollandthencollectorscollectingandthenspan\">#</a> <span id=\"toCollAndThen\">Collectors.collectingAndThen()</span></h2>\n<p><code>collectingAndThen</code>  允许我们对生成的集合再做一次操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; collectAndThenResult = list.stream()</span><br><span class=\"line\">                .collect(Collectors.collectingAndThen(Collectors.toList(), l -&gt; &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(l);&#125;));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,collectAndThenResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-15-04.png\" class=\"\">\n<h2 id=\"span-idjoincollectorsjoiningspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idjoincollectorsjoiningspan\">#</a> <span id=\"join\"> <code>Collectors.joining()</code> </span></h2>\n<p><code>Joining</code>  用来连接 <code>stream</code>  中的元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String joinResult = list.stream().collect(Collectors.joining());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,joinResult);</span><br><span class=\"line\">        String joinResult1 = list.stream().collect(Collectors.joining(<span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,joinResult1);</span><br><span class=\"line\">        String joinResult2 = list.stream().collect(Collectors.joining(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;prefix&quot;</span>,<span class=\"string\">&quot;suffix&quot;</span>));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,joinResult2);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-15-15.png\" class=\"\">\n<p>可以不带参数，也可以带一个参数，也可以带三个参数，根据我们的需要进行选择。</p>\n<h2 id=\"span-idcountcollectorscountingspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idcountcollectorscountingspan\">#</a> <span id=\"count\"> <code>Collectors.counting()</code> </span></h2>\n<p><code>counting</code>  主要用来统计 <code>stream</code>  中元素的个数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Long countResult = list.stream().collect(Collectors.counting());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,countResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-15-42.png\" class=\"\">\n<h2 id=\"span-idsumcollectorssummarizingdoublelongintspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idsumcollectorssummarizingdoublelongintspan\">#</a> <span id=\"sum\"> <code>Collectors.summarizingDouble/Long/Int()</code> </span></h2>\n<p><code>SummarizingDouble/Long/Int</code>  为 <code>stream</code>  中的元素生成了统计信息，返回的结果是一个统计类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IntSummaryStatistics intResult = list.stream()</span><br><span class=\"line\">                .collect(Collectors.summarizingInt(String::length));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,intResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-16-28.png\" class=\"\">\n<h2 id=\"span-idaveragecollectorsaveragingdoublelongintspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idaveragecollectorsaveragingdoublelongintspan\">#</a> <span id=\"average\"> <code>Collectors.averagingDouble/Long/Int()</code> </span></h2>\n<p><code>averagingDouble/Long/Int()</code>  对 <code>stream</code>  中的元素做平均：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Double averageResult = list.stream().collect(Collectors.averagingInt(String::length));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,averageResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-16-42.png\" class=\"\">\n<h2 id=\"span-idsummingcollectorssummingdoublelongintspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idsummingcollectorssummingdoublelongintspan\">#</a> <span id=\"summing\"> <code>Collectors.summingDouble/Long/Int()</code> </span></h2>\n<p><code>summingDouble/Long/Int()</code>  对 <code>stream</code>  中的元素做 <code>sum</code>  操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Double summingResult = list.stream().collect(Collectors.summingDouble(String::length));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,summingResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-17-11.png\" class=\"\">\n<h2 id=\"span-idmaxcollectorsmaxbyminbyspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idmaxcollectorsmaxbyminbyspan\">#</a> <span id=\"max\"> <code>Collectors.maxBy()/minBy()</code> </span></h2>\n<p><code>maxBy()/minBy()</code>  根据提供的 <code>Comparator</code> ，返回 <code>stream</code>  中的最大或者最小值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;String&gt; maxByResult = list.stream().collect(Collectors.maxBy(Comparator.naturalOrder()));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,maxByResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-17-22.png\" class=\"\">\n<h2 id=\"span-idgroupcollectorsgroupingbyspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idgroupcollectorsgroupingbyspan\">#</a> <span id=\"group\"> <code>Collectors.groupingBy()</code> </span></h2>\n<p><code>GroupingBy</code>  根据某些属性进行分组，并返回一个 <code>Map</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Set&lt;String&gt;&gt; groupByResult = list.stream()</span><br><span class=\"line\">                .collect(Collectors.groupingBy(String::length, Collectors.toSet()));</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,groupByResult);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-17-31.png\" class=\"\">\n<h2 id=\"span-idparcollectorspartitioningbyspan\"><a class=\"markdownIt-Anchor\" href=\"#span-idparcollectorspartitioningbyspan\">#</a> <span id=\"par\"> <code>Collectors.partitioningBy()</code> </span></h2>\n<p><code>PartitioningBy</code>  是一个特别的 <code>groupingBy，PartitioningBy</code>  返回一个 <code>Map</code> ，这个 <code>Map</code>  是以 <code>boolean</code>  值为 <code>key</code> ，从而将 <code>stream</code>  分成两部分，一部分是匹配 <code>PartitioningBy</code>  条件的，一部分是不满足条件的：</p>\n<img data-src=\"/posts/b1231c9f/2022-02-13-23-17-39.png\" class=\"\">\n",
            "tags": [
                "Java",
                "Stream"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/8b8fedea/",
            "url": "https://smile1231.github.io/posts/8b8fedea/",
            "title": "Stream流的介绍",
            "date_published": "2022-02-13T13:43:58.000Z",
            "content_html": "<h1 id=\"stream-流的介绍\"><a class=\"markdownIt-Anchor\" href=\"#stream-流的介绍\">#</a>  <code>Stream</code>  流的介绍</h1>\n<h2 id=\"11-java8-stream介绍\"><a class=\"markdownIt-Anchor\" href=\"#11-java8-stream介绍\">#</a> 1.1  <code>java8 stream</code>  介绍</h2>\n<p><code>java8</code>  新增了 <code>stream</code>  流的特性，能够让用户以函数式的方式、更为简单的操纵集合等数据结构，并实现了用户无感知的并行计算。</p>\n<h2 id=\"12-从零开始实现一个stream流\"><a class=\"markdownIt-Anchor\" href=\"#12-从零开始实现一个stream流\">#</a> 1.2 从零开始实现一个 <code>stream</code>  流</h2>\n<p>相信很多人在使用过 <code>java8</code>  的 <code>streamAPI</code>  接口之后，都会对其实现原理感到好奇，但往往在看到 <code>jdk</code>  的 <code>stream</code>  源码后却被其复杂的抽象、封装给弄糊涂了，而无法很好的理解其背后的原理。究其原因，是因为 <code>jdk</code>  的 <code>stream</code>  源码是高度工程化的代码，工程化的代码为了效率和满足各式各样的需求，会将代码实现的极其复杂，不易理解。</p>\n<p>在这里，我们将抛开 <code>jdk</code>  的实现思路，从零开始实现一个 <code>stream</code>  流。</p>\n<p>我们的 <code>stream</code>  流同样拥有惰性求值，函数式编程接口等特性，并兼容 <code>jdk</code>  的 <code>Collection</code>  等数据结构 (但不支持并行计算  <code>orz</code> )。</p>\n<p>相信在亲手实现一个 <code>stream</code>  流的框架之后，大家能更好的理解流计算的原理。</p>\n<span id=\"more\"></span>\n<h2 id=\"stream的优点\"><a class=\"markdownIt-Anchor\" href=\"#stream的优点\">#</a>  <code>stream</code>  的优点</h2>\n<p>在探讨探究 <code>stream</code>  的实现原理和动手实现之前，我们先要体会 <code>stream</code>  流计算的独特之处。</p>\n<blockquote>\n<p>举个例子： 有一个 <code>List&lt;Person&gt;</code>  列表，我们需要获得年龄为 <code>70</code>  岁的前 <code>10</code>  个 <code>Person</code>  的姓名。</p>\n</blockquote>\n<blockquote>\n<p>过程式的解决方案：</p>\n</blockquote>\n<p>稍加思考，我们很快就写出了一个过程式的解决方案 (伪代码)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Person&gt; personList = fromDB(); <span class=\"comment\">// 获得List&lt;Person&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> limit = <span class=\"number\">10</span>; <span class=\"comment\">// 限制条件</span></span><br><span class=\"line\">List&lt;String&gt; nameList = <span class=\"keyword\">new</span> ArrayList(); <span class=\"comment\">// 收集的姓名集合</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Person personItem : personList)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(personItem.age == <span class=\"number\">70</span>)&#123; <span class=\"comment\">// 满足条件</span></span><br><span class=\"line\">        nameList.add(personItem.name); <span class=\"comment\">// 加入姓名集合</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nameList.size() &gt;= <span class=\"number\">10</span>)&#123; <span class=\"comment\">// 判断是否超过限制</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> nameList;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>函数式 <code>stream</code>  解决方案：</p>\n</blockquote>\n<p>下面我们给出一种基于 <code>stream</code>  流的解决方案 (伪代码)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Person&gt; personList = fromDB(); <span class=\"comment\">// 获得List&lt;Person&gt;</span></span><br><span class=\"line\">List&lt;String&gt; nameList = personList.stream()</span><br><span class=\"line\">　　　　　　.filter(item-&gt;item.age == <span class=\"number\">70</span>) <span class=\"comment\">// 过滤条件</span></span><br><span class=\"line\">　　　　　　.limit(<span class=\"number\">10</span>)    <span class=\"comment\">// limit限制条件</span></span><br><span class=\"line\">　　　　　　.map(item-&gt;item.name) <span class=\"comment\">// 获得姓名</span></span><br><span class=\"line\">　　　　　　.collect(Collector.toList()); <span class=\"comment\">// 转化为list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> nameList;</span><br></pre></td></tr></table></figure>\n<p>两种方案的不同之处：</p>\n<p>从函数式的角度上看，过程式的代码实现将收集元素、循环迭代、各种逻辑判断耦合在一起，暴露了太多细节。当未来需求变动和变得更加复杂的情况下，过程式的代码将变得难以理解和维护 (需要控制台打印出 年龄为 <code>70</code>  岁的前 10 个 <code>Person</code>  中，姓王的 <code>Person</code>  的名称）。</p>\n<p>函数式的解决方案解开了代码细节和业务逻辑的耦合，类似于 <code>sql</code>  语句，表达的是 &quot;要做什么&quot; 而不是 &quot;如何去做&quot;，使程序员可以更加专注于业务逻辑，写出易于理解和维护的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Person&gt; personList = fromDB(); <span class=\"comment\">// 获得List&lt;Person&gt;</span></span><br><span class=\"line\">personList.stream()</span><br><span class=\"line\">    .filter(item-&gt;item.age == <span class=\"number\">70</span>) <span class=\"comment\">// 过滤条件</span></span><br><span class=\"line\">    .limit(<span class=\"number\">10</span>)    <span class=\"comment\">// limit限制条件</span></span><br><span class=\"line\">    .filter(item-&gt;item.name.startWith(<span class=\"string\">&quot;王&quot;</span>))  <span class=\"comment\">// 过滤条件</span></span><br><span class=\"line\">    .map(item-&gt;item.name) <span class=\"comment\">// 获得姓名</span></span><br><span class=\"line\">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<h1 id=\"stream-api接口介绍\"><a class=\"markdownIt-Anchor\" href=\"#stream-api接口介绍\">#</a>  <code>stream API</code>  接口介绍</h1>\n<p><code>stream API</code>  的接口是函数式的，尽管 <code>java 8</code>  也引入了 <code>lambda</code>  表达式，但 <code>java</code>  实质上依然是由接口 - 匿名内部类来实现函数传参的，所以需要事先定义一系列的函数式接口。</p>\n<blockquote>\n<p><code>Function:</code>  类似于  <code>y = F(x)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Function</span>&lt;<span class=\"title\">R</span>,<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 函数式接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 类似于 y = F(x)</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>BiFunction</code> : 类似于  <code>z = F(x,y)</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BiFunction</span>&lt;<span class=\"title\">R</span>, <span class=\"title\">T</span>, <span class=\"title\">U</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 函数式接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 类似于 z = F(x,y)</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t, U u)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>ForEach</code> : 遍历处理</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ForEach</span> &lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 迭代器遍历</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 被迭代的每一项</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(T item)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Comparator</code> : 比较器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">T</span>&gt;  </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 比较方法逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o1    参数1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o2    参数2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>      返回值大于0 ---&gt; (o1 &gt; o2)</span></span><br><span class=\"line\"><span class=\"comment\">     *              返回值等于0 ---&gt; (o1 = o2)</span></span><br><span class=\"line\"><span class=\"comment\">     *              返回值小于0 ---&gt; (o1 &lt; o2)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(T o1, T o2)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Predicate:</code>  条件判断</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Predicate</span> &lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 函数式接口</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> item 迭代的每一项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 满足条件</span></span><br><span class=\"line\"><span class=\"comment\">     *          false 不满足条件</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">satisfy</span><span class=\"params\">(T item)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Supplier：</code> 提供初始值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Supplier</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供初始值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 初始化的值</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>EvalFunction：stream</code>  求值函数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">EvalFunction</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * stream流的强制求值方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 求值返回一个新的stream</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">apply</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"stream-api接口\"><a class=\"markdownIt-Anchor\" href=\"#stream-api接口\">#</a>  <code>stream API</code>  接口：</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * stream流的API接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Stream</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 映射 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mapper 转换逻辑 T-&gt;R</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 一个新的流</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    &lt;R&gt; <span class=\"function\">MyStream&lt;R&gt; <span class=\"title\">map</span><span class=\"params\">(Function&lt;R,T&gt; mapper)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扁平化 映射 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mapper 转换逻辑 T-&gt;MyStream&lt;R&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  一个新的流(扁平化之后)</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    &lt;R&gt; <span class=\"function\">MyStream&lt;R&gt; <span class=\"title\">flatMap</span><span class=\"params\">(Function&lt;? extends MyStream&lt;R&gt;, T&gt; mapper)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> predicate 谓词判断</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 一个新的流，其中元素是满足predicate条件的</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">filter</span><span class=\"params\">(Predicate&lt;T&gt; predicate)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 截断 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> n 截断流，只获取部分</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 一个新的流，其中的元素不超过 n</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">limit</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 去重操作 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 一个新的流，其中的元素不重复(!equals）</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">distinct</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 窥视 lazy 惰性求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 同一个流，peek不改变流的任何行为</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">peek</span><span class=\"params\">(ForEach&lt;T&gt; consumer)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 遍历 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> consumer 遍历逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">(ForEach&lt;T&gt; consumer)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 浓缩 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initVal 浓缩时的初始值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> accumulator 浓缩时的 累加逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 浓缩之后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    &lt;R&gt; <span class=\"function\">R <span class=\"title\">reduce</span><span class=\"params\">(R initVal, BiFunction&lt;R, R, T&gt; accumulator)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 收集 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> collector 传入所需的函数组合子，生成高阶函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 收集之后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    &lt;R, A&gt; <span class=\"function\">R <span class=\"title\">collect</span><span class=\"params\">(Collector&lt;T,A,R&gt; collector)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最大值 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> comparator 大小比较逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 流中的最大值</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">max</span><span class=\"params\">(Comparator&lt;T&gt; comparator)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 最小值 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> comparator 大小比较逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 流中的最小值</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">min</span><span class=\"params\">(Comparator&lt;T&gt; comparator)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计数 eval 强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>  当前流的个数</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流中是否存在满足predicate的项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 匹配项</span></span><br><span class=\"line\"><span class=\"comment\">     *         false 不存在 匹配项</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">anyMatch</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流中的元素是否全部满足predicate</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 全部满足</span></span><br><span class=\"line\"><span class=\"comment\">     *          false 不全部满足</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">allMatch</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> T&gt; predicate)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回空的 stream</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 空stream</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">makeEmptyStream</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// isEnd = true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;T&gt;().isEnd(<span class=\"keyword\">true</span>).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"mystream-实现细节\"><a class=\"markdownIt-Anchor\" href=\"#mystream-实现细节\">#</a>  <code>MyStream</code>  实现细节</h2>\n<p>简单介绍了 <code>API</code>  接口定义之后，我们开始深入探讨流的内部实现。</p>\n<p>流由两个重要的部分所组成，当前数据项 (head)&quot;和&quot; 下一数据项的求值函数 <code>(nextItemEvalProcess)</code> 。</p>\n<p>其中， <code>nextItemEvalProcess</code>  是流能够实现 &quot;惰性求值&quot; 的关键。</p>\n<img data-src=\"/posts/8b8fedea/2022-02-13-23-00-11.png\" class=\"\">\n<blockquote>\n<p>流的基本属性：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStream</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Stream</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流的头部</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 流的下一项求值函数</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NextItemEvalProcess nextItemEvalProcess;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否是流的结尾</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isEnd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> MyStream&lt;T&gt; target;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.target = <span class=\"keyword\">new</span> MyStream&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder&lt;T&gt; <span class=\"title\">head</span><span class=\"params\">(T head)</span></span>&#123;</span><br><span class=\"line\">            target.head = head;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">Builder&lt;T&gt; <span class=\"title\">isEnd</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isEnd)</span></span>&#123;</span><br><span class=\"line\">            target.isEnd = isEnd;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder&lt;T&gt; <span class=\"title\">nextItemEvalProcess</span><span class=\"params\">(NextItemEvalProcess nextItemEvalProcess)</span></span>&#123;</span><br><span class=\"line\">            target.nextItemEvalProcess = nextItemEvalProcess;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> MyStream&lt;T&gt; <span class=\"title\">build</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前流强制求值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 求值之后返回一个新的流</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> MyStream&lt;T&gt; <span class=\"title\">eval</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.nextItemEvalProcess.eval();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当前流 为空</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptyStream</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.isEnd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 下一个元素求值过程</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NextItemEvalProcess</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 求值方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EvalFunction evalFunction;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NextItemEvalProcess</span><span class=\"params\">(EvalFunction evalFunction)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.evalFunction = evalFunction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">MyStream <span class=\"title\">eval</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> evalFunction.apply();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"41-stream流在使用过程中的三个阶段\"><a class=\"markdownIt-Anchor\" href=\"#41-stream流在使用过程中的三个阶段\">#</a> 4.1  <code>stream</code>  流在使用过程中的三个阶段</h3>\n<ol>\n<li>\n<p>生成并构造一个流 (List.stream () 等方法)</p>\n</li>\n<li>\n<p>在流的处理过程中添加、绑定惰性求值流程  (map、filter、limit 等方法)</p>\n</li>\n<li>\n<p>对流使用强制求值函数，生成最终结果 (max、collect、forEach 等方法)</p>\n</li>\n</ol>\n<h3 id=\"42-生成并构造一个流\"><a class=\"markdownIt-Anchor\" href=\"#42-生成并构造一个流\">#</a> 4.2 生成并构造一个流</h3>\n<p>流在生成时是 &quot;纯净&quot; 的，其最初的 <code>NextItemEvalProcess</code>  求值之后就是指向自己的下一个元素。</p>\n<p>我们以一个 <code>Integer</code>  整数流的生成为例。 <code>IntegerStreamGenerator.getIntegerStream(1,10) </code> 会返回一个流结构，其逻辑上等价于一个从 <code>1</code>  到 <code>10</code>  的整数流。但实质是一个惰性求值的 <code>stream</code>  对象，这里称其为 <code>IntStream</code> ，其 <code>NextItemEvalProcess</code>  是一个闭包，方法体是一个递归结构的求值函数，其中下界参数 <code>low = low + 1</code> 。</p>\n<p>当 <code>IntStream</code>  第一次被求值时，流开始初始化， <code>isStart = false</code> 。当初始化完成之后，每一次求值，都会生成一个新的流对象，其中 <code>head(low) = low + 1</code> 。当 <code>low &gt; high</code>  时，流被终止，返回空的流对象。</p>\n<img data-src=\"/posts/8b8fedea/2022-02-13-23-00-27.png\" class=\"\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 整数流生成器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerStreamGenerator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得一个有限的整数流 介于[low-high]之间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> low 下界</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> high 上界</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MyStream&lt;Integer&gt; <span class=\"title\">getIntegerStream</span><span class=\"params\">(<span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getIntegerStreamInner(low,high,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归函数。配合getIntegerStream(int low,int high)</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MyStream&lt;Integer&gt; <span class=\"title\">getIntegerStreamInner</span><span class=\"params\">(<span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">boolean</span> isStart)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(low &gt; high)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 到达边界条件，返回空的流</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Stream.makeEmptyStream();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isStart)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;Integer&gt;()</span><br><span class=\"line\">                    .process(<span class=\"keyword\">new</span> NextItemEvalProcess(()-&gt;getIntegerStreamInner(low,high,<span class=\"keyword\">false</span>)))</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;Integer&gt;()</span><br><span class=\"line\">                    <span class=\"comment\">// 当前元素 low</span></span><br><span class=\"line\">                    .head(low)</span><br><span class=\"line\">                    <span class=\"comment\">// 下一个元素 low+1</span></span><br><span class=\"line\">                    .process(<span class=\"keyword\">new</span> NextItemEvalProcess(()-&gt;getIntegerStreamInner(low+<span class=\"number\">1</span>,high,<span class=\"keyword\">false</span>)))</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，生成一个流的关键在于确定如何求值下一项元素。对于整数流来说， <code>low = low + 1</code>  就是其下一项的求值过程。</p>\n<p>那么对于我们非常关心的 <code>jdk</code>  集合容器，又该如何生成对应的流呢？</p>\n<p>答案是 <code>Iterator</code>  迭代器， <code>jdk</code>  的集合容器都实现了 <code>Iterator</code>  迭代器接口，通过迭代器我们可以轻易的取得容器的下一项元素，而不用关心容器内部实现细节。换句话说，只要实现过迭代器接口，就可以自然的转化为 <code>stream</code>  流，从而获得流计算的所有能力。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 集合流生成器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CollectionStreamGenerator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将一个List转化为stream流</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">getListStream</span><span class=\"params\">(List&lt;T&gt; list)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getListStream(list.iterator(),<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> iterator list 集合的迭代器</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> isStart 是否是第一次迭代</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">MyStream&lt;T&gt; <span class=\"title\">getListStream</span><span class=\"params\">(Iterator&lt;T&gt; iterator, <span class=\"keyword\">boolean</span> isStart)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!iterator.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不存在迭代的下一个元素，返回空的流</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Stream.makeEmptyStream();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isStart)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始化，只需要设置 求值过程</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;T&gt;()</span><br><span class=\"line\">                    .nextItemEvalProcess(<span class=\"keyword\">new</span> NextItemEvalProcess(()-&gt; getListStream(iterator,<span class=\"keyword\">false</span>)))</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 非初始化，设置head和接下来的求值过程</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyStream.Builder&lt;T&gt;()</span><br><span class=\"line\">                    .head(iterator.next())</span><br><span class=\"line\">                    .nextItemEvalProcess(<span class=\"keyword\">new</span> NextItemEvalProcess(()-&gt; getListStream(iterator,<span class=\"keyword\">false</span>)))</span><br><span class=\"line\">                    .build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"举例分析\"><a class=\"markdownIt-Anchor\" href=\"#举例分析\">#</a> 举例分析</h2>\n<p>我们选择一个简单而又不失一般性的例子，串联起这些内容。通过完整的描述一个流求值的全过程，加深大家对流的理解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    Integer sum = IntegerStreamGenerator.getIntegerStream(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">                .filter(item-&gt; item%<span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"comment\">// 过滤出偶数</span></span><br><span class=\"line\">                .map(item-&gt; item * item)    <span class=\"comment\">// 映射为平方</span></span><br><span class=\"line\">                .limit(<span class=\"number\">2</span>)                   <span class=\"comment\">// 截取前两个</span></span><br><span class=\"line\">                .reduce(<span class=\"number\">0</span>,(i1,i2)-&gt; i1+i2); <span class=\"comment\">// 最终结果累加求和(初始值为0)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(sum); <span class=\"comment\">// 20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由于我们的 <code>stream</code>  实现采用的是链式编程的方式，不太好理解，将其展开为逻辑等价的形式。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;　　　　 <span class=\"comment\">// 生成整数流 1-10</span></span><br><span class=\"line\">    Stream&lt;Integer&gt; intStream = IntegerStreamGenerator.getIntegerStream(<span class=\"number\">1</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">// intStream基础上过滤出偶数</span></span><br><span class=\"line\">    Stream&lt;Integer&gt; filterStream =  intStream.filter(item-&gt; item%<span class=\"number\">2</span> == <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// filterStream基础上映射为平方</span></span><br><span class=\"line\">    Stream&lt;Integer&gt; mapStream = filterStream.map(item-&gt; item * item);</span><br><span class=\"line\">    <span class=\"comment\">// mapStream基础上截取前两个</span></span><br><span class=\"line\">    Stream&lt;Integer&gt; limitStream = mapStream.limit(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 最终结果累加求和(初始值为0)</span></span><br><span class=\"line\">    Integer sum = limitStream.reduce(<span class=\"number\">0</span>,(i1,i2)-&gt; i1+i2);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(sum); <span class=\"comment\">// 20</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>reduce</code>  强制求值操作之前的执行过程图：</p>\n</blockquote>\n<img data-src=\"/posts/8b8fedea/2022-02-13-23-00-42.png\" class=\"\">\n<blockquote>\n<p><code>reduce</code>  强制求值过程中的执行过程图 ：</p>\n</blockquote>\n<img data-src=\"/posts/8b8fedea/2022-02-13-23-00-49.png\" class=\"\">\n<p>可以看到， <code>stream</code>  的求值过程并不会一口气将初始的流全部求值，而是按需的、一个一个的进行求值。</p>\n<p><code>stream</code>  的一次求值过程至多只会遍历流中元素一次；如果存在短路操作 ( <code>limit、anyMatch</code>  等)，实际迭代的次数会更少。</p>\n<p>因此不必担心多层的 <code>map、filter</code>  处理逻辑的嵌套会让流进行多次迭代，导致效率急剧下降。</p>\n<img data-src=\"/posts/8b8fedea/2022-02-13-23-00-59.png\" class=\"\">\n<hr/>\n<h2 id=\"具体用法\"><a class=\"markdownIt-Anchor\" href=\"#具体用法\">#</a> 具体用法</h2>\n<img data-src=\"/posts/8b8fedea/2022-02-13-23-01-07.png\" class=\"\">\n<ul>\n<li>\n<p>无状态：指元素的处理不受之前元素的影响；</p>\n</li>\n<li>\n<p>有状态：指该操作只有拿到所有元素之后才能继续下去。</p>\n</li>\n<li>\n<p>非短路操作：指必须处理所有元素才能得到最终结果；</p>\n</li>\n<li>\n<p>短路操作：指遇到某些符合条件的元素就可以得到最终结果，如 <code> A || B</code> ，只要 <code>A</code>  为 <code>true</code> ，则无需判断 <code>B</code>  的结果。</p>\n</li>\n</ul>\n<h3 id=\"1-流的常用创建方法\"><a class=\"markdownIt-Anchor\" href=\"#1-流的常用创建方法\">#</a> 1. 流的常用创建方法</h3>\n<h4 id=\"11-使用collection下的-stream-和-parallelstream-方法\"><a class=\"markdownIt-Anchor\" href=\"#11-使用collection下的-stream-和-parallelstream-方法\">#</a> 1.1 使用 <code>Collection</code>  下的  <code>stream()</code>  和  <code>parallelStream()</code>  方法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">Stream&lt;String&gt; stream = list.stream(); <span class=\"comment\">//获取一个顺序流</span></span><br><span class=\"line\">Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class=\"comment\">//获取一个并行流</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"12-使用arrays-中的-stream-方法将数组转成流\"><a class=\"markdownIt-Anchor\" href=\"#12-使用arrays-中的-stream-方法将数组转成流\">#</a> 1.2 使用 <code>Arrays</code>  中的  <code>stream()</code>  方法，将数组转成流</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer[] nums = <span class=\"keyword\">new</span> Integer[<span class=\"number\">10</span>];</span><br><span class=\"line\">Stream&lt;Integer&gt; stream = Arrays.stream(nums);</span><br></pre></td></tr></table></figure>\n<h4 id=\"13-使用stream中的静态方法of-iterate-generate\"><a class=\"markdownIt-Anchor\" href=\"#13-使用stream中的静态方法of-iterate-generate\">#</a> 1.3 使用 <code>Stream</code>  中的静态方法： <code>of()、iterate()、generate()</code></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; stream = Stream.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class=\"number\">0</span>, (x) -&gt; x + <span class=\"number\">2</span>).limit(<span class=\"number\">6</span>);</span><br><span class=\"line\">stream2.forEach(System.out::println); <span class=\"comment\">// 0 2 4 6 8 10</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class=\"number\">2</span>);</span><br><span class=\"line\">stream3.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<h4 id=\"14-使用-bufferedreaderlines-方法将每行内容转成流\"><a class=\"markdownIt-Anchor\" href=\"#14-使用-bufferedreaderlines-方法将每行内容转成流\">#</a> 1.4 使用  <code>BufferedReader.lines()</code>  方法，将每行内容转成流</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(<span class=\"string\">&quot;F:\\\\test_stream.txt&quot;</span>));</span><br><span class=\"line\">Stream&lt;String&gt; lineStream = reader.lines();</span><br><span class=\"line\">lineStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<h4 id=\"15-使用-patternsplitasstream-方法将字符串分隔成流\"><a class=\"markdownIt-Anchor\" href=\"#15-使用-patternsplitasstream-方法将字符串分隔成流\">#</a> 1.5 使用  <code>Pattern.splitAsStream()</code>  方法，将字符串分隔成流</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pattern pattern = Pattern.compile(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class=\"string\">&quot;a,b,c,d&quot;</span>);</span><br><span class=\"line\">stringStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-流的中间操作\"><a class=\"markdownIt-Anchor\" href=\"#2-流的中间操作\">#</a>  <code>2.</code>  流的中间操作</h3>\n<h4 id=\"21-筛选与切片\"><a class=\"markdownIt-Anchor\" href=\"#21-筛选与切片\">#</a>  <code>2.1</code>  筛选与切片</h4>\n<p><code>filter：</code> 过滤流中的某些元素</p>\n<p><code>limit(n)：</code> 获取 <code>n</code>  个元素</p>\n<p><code>skip(n)：</code> 跳过 <code>n</code>  元素，配合 <code>limit(n)</code>  可实现分页</p>\n<p><code>distinct：</code> 通过流中元素的  <code>hashCode()</code>  和  <code>equals()</code>  去除重复元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; stream = Stream.of(<span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">14</span>, <span class=\"number\">14</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Stream&lt;Integer&gt; newStream = stream.filter(s -&gt; s &gt; <span class=\"number\">5</span>) <span class=\"comment\">//6 6 7 9 8 10 12 14 14</span></span><br><span class=\"line\">        .distinct() <span class=\"comment\">//6 7 9 8 10 12 14</span></span><br><span class=\"line\">        .skip(<span class=\"number\">2</span>) <span class=\"comment\">//9 8 10 12 14</span></span><br><span class=\"line\">        .limit(<span class=\"number\">2</span>); <span class=\"comment\">//9 8</span></span><br><span class=\"line\">newStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<h4 id=\"22-映射\"><a class=\"markdownIt-Anchor\" href=\"#22-映射\">#</a>  <code>2.2</code>  映射</h4>\n<ul>\n<li><code>map：</code> 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</li>\n<li><code>flatMap：</code> 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;a,b,c&quot;</span>, <span class=\"string\">&quot;1,2,3&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//将每个元素转成一个新的且不带逗号的元素</span></span><br><span class=\"line\">Stream&lt;String&gt; s1 = list.stream().map(s -&gt; s.replaceAll(<span class=\"string\">&quot;,&quot;</span>, <span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\">s1.forEach(System.out::println); <span class=\"comment\">// abc  123</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Stream&lt;String&gt; s3 = list.stream().flatMap(s -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将每个元素转换成一个stream</span></span><br><span class=\"line\">    String[] split = s.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">    Stream&lt;String&gt; s2 = Arrays.stream(split);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">s3.forEach(System.out::println); <span class=\"comment\">// a b c 1 2 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"23-排序\"><a class=\"markdownIt-Anchor\" href=\"#23-排序\">#</a>  <code>2.3</code>  排序</h4>\n<ul>\n<li><code>sorted()：</code> 自然排序，流中元素需实现 <code>Comparable</code>  接口</li>\n<li><code>sorted(Comparator com)：</code> 定制排序，自定义 <code>Comparator</code>  排序器</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"string\">&quot;ff&quot;</span>, <span class=\"string\">&quot;dd&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//String 类自身已实现Compareable接口</span></span><br><span class=\"line\">list.stream().sorted().forEach(System.out::println);<span class=\"comment\">// aa dd ff</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Student s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">Student s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;bb&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">Student s3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">Student s4 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;dd&quot;</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\">List&lt;Student&gt; studentList = Arrays.asList(s1, s2, s3, s4);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//自定义排序：先按姓名升序，姓名相同则按年龄升序</span></span><br><span class=\"line\">studentList.stream().sorted(</span><br><span class=\"line\">        (o1, o2) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o1.getName().equals(o2.getName())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.getAge() - o2.getAge();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1.getName().compareTo(o2.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">).forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n<h4 id=\"24-消费\"><a class=\"markdownIt-Anchor\" href=\"#24-消费\">#</a> 2.4 消费</h4>\n<p><code>peek：</code> 如同于 <code>map</code> ，能得到流中的每一个元素。但 <code>map</code>  接收的是一个 <code>Function</code>  表达式，有返回值；而 <code>peek</code>  接收的是 <code>Consumer</code>  表达式，没有返回值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">Student s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;bb&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">List&lt;Student&gt; studentList = Arrays.asList(s1, s2);</span><br><span class=\"line\"> </span><br><span class=\"line\">studentList.stream()</span><br><span class=\"line\">        .peek(o -&gt; o.setAge(<span class=\"number\">100</span>))</span><br><span class=\"line\">        .forEach(System.out::println);   </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\">Student&#123;name=<span class=\"string\">&#x27;aa&#x27;</span>, age=<span class=\"number\">100</span>&#125;</span><br><span class=\"line\">Student&#123;name=<span class=\"string\">&#x27;bb&#x27;</span>, age=<span class=\"number\">100</span>&#125;            </span><br></pre></td></tr></table></figure>\n<h3 id=\"3-流的终止操作\"><a class=\"markdownIt-Anchor\" href=\"#3-流的终止操作\">#</a> 3. 流的终止操作</h3>\n<h4 id=\"31-匹配-聚合操作\"><a class=\"markdownIt-Anchor\" href=\"#31-匹配-聚合操作\">#</a> 3.1 匹配、聚合操作</h4>\n<p><code>allMatch</code> ：接收一个  <code>Predicate</code>  函数，当流中每个元素都符合该断言时才返回 <code>true</code> ，否则返回 <code>false</code></p>\n<ul>\n<li><code>noneMatch</code> ：接收一个  <code>Predicate</code>  函数，当流中每个元素都不符合该断言时才返回 <code>true</code> ，否则返回 <code>false</code></li>\n<li><code>anyMatch</code> ：接收一个  <code>Predicate</code>  函数，只要流中有一个元素满足该断言则返回 <code>true</code> ，否则返回 <code>false</code></li>\n<li><code>findFirst</code> ：返回流中第一个元素</li>\n<li><code>findAny</code> ：返回流中的任意元素</li>\n<li><code>count</code> ：返回流中元素的总个数</li>\n<li><code>max</code> ：返回流中元素最大值</li>\n<li><code>min</code> ：返回流中元素最小值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">boolean</span> allMatch = list.stream().allMatch(e -&gt; e &gt; <span class=\"number\">10</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> noneMatch = list.stream().noneMatch(e -&gt; e &gt; <span class=\"number\">10</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">boolean</span> anyMatch = list.stream().anyMatch(e -&gt; e &gt; <span class=\"number\">4</span>);  <span class=\"comment\">//true</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Integer findFirst = list.stream().findFirst().get(); <span class=\"comment\">//1</span></span><br><span class=\"line\">Integer findAny = list.stream().findAny().get(); <span class=\"comment\">//1</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">long</span> count = list.stream().count(); <span class=\"comment\">//5</span></span><br><span class=\"line\">Integer max = list.stream().max(Integer::compareTo).get(); <span class=\"comment\">//5</span></span><br><span class=\"line\">Integer min = list.stream().min(Integer::compareTo).get(); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"32-规约操作\"><a class=\"markdownIt-Anchor\" href=\"#32-规约操作\">#</a> 3.2 规约操作</h4>\n<p><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)：</code> 第一次执行时， <code>accumulator</code>  函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素；依次类推。</p>\n<p><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)：</code> 流程跟上面一样，只是第一次执行时， <code>accumulator</code>  函数的第一个参数为 <code>identity</code> ，而第二个参数为流中的第一个元素。</p>\n<p><code>&lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)：</code> 在串行流 ( <code>stream</code> ) 中，该方法跟第二个方法一样，即第三个参数 <code>combiner</code>  不会起作用。在并行流 ( <code>parallelStream</code> ) 中，我们知道流被 <code>fork join</code>  出多个线程进行执行，此时每个线程的执行流程就跟第二个方法 <code>reduce(identity,accumulator)</code>  一样，而第三个参数 <code>combiner</code>  函数，则是将每个线程的执行结果当成一个新的流，然后使用第一个方法 <code>reduce(accumulator)</code>  流程进行规约。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//经过测试，当元素个数小于24时，并行时线程数等于元素个数，当大于等于24时，并行时线程数为16</span></span><br><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">22</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Integer v = list.stream().reduce((x1, x2) -&gt; x1 + x2).get();</span><br><span class=\"line\">System.out.println(v);   <span class=\"comment\">// 300</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Integer v1 = list.stream().reduce(<span class=\"number\">10</span>, (x1, x2) -&gt; x1 + x2);</span><br><span class=\"line\">System.out.println(v1);  <span class=\"comment\">//310</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Integer v2 = list.stream().reduce(<span class=\"number\">0</span>,</span><br><span class=\"line\">        (x1, x2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;stream accumulator: x1:&quot;</span> + x1 + <span class=\"string\">&quot;  x2:&quot;</span> + x2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 - x2;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        (x1, x2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;stream combiner: x1:&quot;</span> + x1 + <span class=\"string\">&quot;  x2:&quot;</span> + x2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 * x2;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">System.out.println(v2); <span class=\"comment\">// -300</span></span><br><span class=\"line\"> </span><br><span class=\"line\">Integer v3 = list.parallelStream().reduce(<span class=\"number\">0</span>,</span><br><span class=\"line\">        (x1, x2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;parallelStream accumulator: x1:&quot;</span> + x1 + <span class=\"string\">&quot;  x2:&quot;</span> + x2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 - x2;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        (x1, x2) -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;parallelStream combiner: x1:&quot;</span> + x1 + <span class=\"string\">&quot;  x2:&quot;</span> + x2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x1 * x2;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">System.out.println(v3); <span class=\"comment\">//197474048</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"33-收集操作\"><a class=\"markdownIt-Anchor\" href=\"#33-收集操作\">#</a> 3.3 收集操作</h4>\n<ul>\n<li><code>collect</code> ：接收一个 <code>Collector</code>  实例，将流中元素收集成另外一个数据结构。</li>\n<li><code>Collector&lt;T, A, R&gt;</code>  是一个接口，有以下 5 个抽象方法：</li>\n<li><code>Supplier&lt;A&gt; supplier()</code> ：创建一个结果容器 A</li>\n<li><code>BiConsumer&lt;A, T&gt; accumulator()</code> ：消费型接口，第一个参数为容器 A，第二个参数为流中元素 <code>T</code> 。</li>\n<li><code>BinaryOperator&lt;A&gt; combiner()</code> ：函数接口，该参数的作用跟上一个方法 ( <code>reduce</code> ) 中的 <code>combiner</code>  参数一样，将并行流中各个子进程的运行结果 ( <code>accumulator</code>  函数操作后的容器 <code>A</code> ) 进行合并。</li>\n<li><code>Function&lt;A, R&gt; finisher()</code> ：函数式接口，参数为：容器 <code>A</code> ，返回类型为： <code>collect</code>  方法最终想要的结果 <code>R</code> 。</li>\n<li><code>Set&lt;Characteristics&gt; characteristics()</code> ：返回一个不可变的 <code>Set</code>  集合，用来表明该 <code>Collector</code>  的特征。有以下三个特征：\n<ul>\n<li><code>CONCURRENT</code> ：表示此收集器支持并发。（官方文档还有其他描述，暂时没去探索，故不作过多翻译）</li>\n<li><code>UNORDERED</code> ：表示该收集操作不会保留流中元素原有的顺序。</li>\n<li><code>IDENTITY_FINISH</code> ：表示 <code>finisher</code>  参数只是标识而已，可忽略。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"331-collector-工具库collectors\"><a class=\"markdownIt-Anchor\" href=\"#331-collector-工具库collectors\">#</a> 3.3.1  <code>Collector</code>  工具库：Collectors</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student s1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;aa&quot;</span>, <span class=\"number\">10</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">Student s2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;bb&quot;</span>, <span class=\"number\">20</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">Student s3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">10</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">List&lt;Student&gt; list = Arrays.asList(s1, s2, s3);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//装成list</span></span><br><span class=\"line\">List&lt;Integer&gt; ageList = list.stream().map(Student::getAge).collect(Collectors.toList()); <span class=\"comment\">// [10, 20, 10]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//转成set</span></span><br><span class=\"line\">Set&lt;Integer&gt; ageSet = list.stream().map(Student::getAge).collect(Collectors.toSet()); <span class=\"comment\">// [20, 10]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//转成map,注:key不能相同，否则报错</span></span><br><span class=\"line\">Map&lt;String, Integer&gt; studentMap = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge)); <span class=\"comment\">// &#123;cc=10, bb=20, aa=10&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//字符串分隔符连接</span></span><br><span class=\"line\">String joinName = list.stream().map(Student::getName).collect(Collectors.joining(<span class=\"string\">&quot;,&quot;</span>, <span class=\"string\">&quot;(&quot;</span>, <span class=\"string\">&quot;)&quot;</span>)); <span class=\"comment\">// (aa,bb,cc)</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//聚合操作</span></span><br><span class=\"line\"><span class=\"comment\">//1.学生总数</span></span><br><span class=\"line\">Long count = list.stream().collect(Collectors.counting()); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">//2.最大年龄 (最小的minBy同理)</span></span><br><span class=\"line\">Integer maxAge = list.stream().map(Student::getAge).collect(Collectors.maxBy(Integer::compare)).get(); <span class=\"comment\">// 20</span></span><br><span class=\"line\"><span class=\"comment\">//3.所有人的年龄</span></span><br><span class=\"line\">Integer sumAge = list.stream().collect(Collectors.summingInt(Student::getAge)); <span class=\"comment\">// 40</span></span><br><span class=\"line\"><span class=\"comment\">//4.平均年龄</span></span><br><span class=\"line\">Double averageAge = list.stream().collect(Collectors.averagingDouble(Student::getAge)); <span class=\"comment\">// 13.333333333333334</span></span><br><span class=\"line\"><span class=\"comment\">// 带上以上所有方法</span></span><br><span class=\"line\">DoubleSummaryStatistics statistics = list.stream().collect(Collectors.summarizingDouble(Student::getAge));</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;count:&quot;</span> + statistics.getCount() + <span class=\"string\">&quot;,max:&quot;</span> + statistics.getMax() + <span class=\"string\">&quot;,sum:&quot;</span> + statistics.getSum() + <span class=\"string\">&quot;,average:&quot;</span> + statistics.getAverage());</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//分组</span></span><br><span class=\"line\">Map&lt;Integer, List&lt;Student&gt;&gt; ageMap = list.stream().collect(Collectors.groupingBy(Student::getAge));</span><br><span class=\"line\"><span class=\"comment\">//多重分组,先根据类型分再根据年龄分</span></span><br><span class=\"line\">Map&lt;Integer, Map&lt;Integer, List&lt;Student&gt;&gt;&gt; typeAgeMap = list.stream().collect(Collectors.groupingBy(Student::getType, Collectors.groupingBy(Student::getAge)));</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//分区</span></span><br><span class=\"line\"><span class=\"comment\">//分成两部分，一部分大于10岁，一部分小于等于10岁</span></span><br><span class=\"line\">Map&lt;Boolean, List&lt;Student&gt;&gt; partMap = list.stream().collect(Collectors.partitioningBy(v -&gt; v.getAge() &gt; <span class=\"number\">10</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//规约</span></span><br><span class=\"line\">Integer allAge = list.stream().map(Student::getAge).collect(Collectors.reducing(Integer::sum)).get(); <span class=\"comment\">//40</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"332-collectorstolist-解析\"><a class=\"markdownIt-Anchor\" href=\"#332-collectorstolist-解析\">#</a> 3.3.2  <code>Collectors.toList()</code>  解析</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//toList 源码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CollectorImpl&lt;&gt;((Supplier&lt;List&lt;T&gt;&gt;) ArrayList::<span class=\"keyword\">new</span>, List::add,</span><br><span class=\"line\">            (left, right) -&gt; &#123;</span><br><span class=\"line\">                left.addAll(right);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">            &#125;, CH_ID);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//为了更好地理解，我们转化一下源码中的lambda表达式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList() &#123;</span><br><span class=\"line\">    Supplier&lt;List&lt;T&gt;&gt; supplier = () -&gt; <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    BiConsumer&lt;List&lt;T&gt;, T&gt; accumulator = (list, t) -&gt; list.add(t);</span><br><span class=\"line\">    BinaryOperator&lt;List&lt;T&gt;&gt; combiner = (list1, list2) -&gt; &#123;</span><br><span class=\"line\">        list1.addAll(list2);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    Function&lt;List&lt;T&gt;, List&lt;T&gt;&gt; finisher = (list) -&gt; list;</span><br><span class=\"line\">    Set&lt;Collector.Characteristics&gt; characteristics = Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.IDENTITY_FINISH));</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Collector&lt;T, List&lt;T&gt;, List&lt;T&gt;&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Supplier <span class=\"title\">supplier</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> supplier;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BiConsumer <span class=\"title\">accumulator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> accumulator;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> BinaryOperator <span class=\"title\">combiner</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> combiner;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Function <span class=\"title\">finisher</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> finisher;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;Characteristics&gt; <span class=\"title\">characteristics</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> characteristics;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java",
                "Stream"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/a3dfcd98/",
            "url": "https://smile1231.github.io/posts/a3dfcd98/",
            "title": "SpringBoot中常见的几种解决跨域的方式",
            "date_published": "2022-02-13T13:43:13.000Z",
            "content_html": "<h1 id=\"springboot中常见的几种解决跨域的方式\"><a class=\"markdownIt-Anchor\" href=\"#springboot中常见的几种解决跨域的方式\">#</a>  <code>SpringBoot</code>  中常见的几种解决跨域的方式</h1>\n<h2 id=\"一-为什么会出现跨域问题\"><a class=\"markdownIt-Anchor\" href=\"#一-为什么会出现跨域问题\">#</a> 一、为什么会出现跨域问题</h2>\n<p>出于浏览器的同源策略限制。同源策略（ <code>Sameoriginpolicy</code> ）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 <code>Web</code>  是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</p>\n<p>同源策略会阻止一个域的 <code>javascript</code>  脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（ <code>protocol</code> ），主机（ <code>host</code> ）和端口号（ <code>port</code> ）</p>\n<span id=\"more\"></span>\n<h2 id=\"二-什么是跨域\"><a class=\"markdownIt-Anchor\" href=\"#二-什么是跨域\">#</a> 二、什么是跨域</h2>\n<p>当一个请求 <code>url</code>  的协议、域名、端口三者之间任意一个与当前页面 <code>url</code>  不同即为跨域</p>\n<h2 id=\"三-非同源限制\"><a class=\"markdownIt-Anchor\" href=\"#三-非同源限制\">#</a> 三、非同源限制</h2>\n<p>【1】无法读取非同源网页的  <code>Cookie</code> 、 <code>LocalStorage</code>  和  <code>IndexedDB</code></p>\n<p>【2】无法接触非同源网页的  <code>DOM</code></p>\n<p>【3】无法向非同源地址发送  <code>AJAX</code>  请求</p>\n<h2 id=\"四-java-后端-实现-cors-跨域请求的方式\"><a class=\"markdownIt-Anchor\" href=\"#四-java-后端-实现-cors-跨域请求的方式\">#</a> 四、 <code>java</code>  后端 实现  <code>CORS</code>  跨域请求的方式</h2>\n<p>对于  <code>CORS</code>  的跨域请求，主要有以下几种方式可供选择：</p>\n<ul>\n<li>返回新的 <code>CorsFilter</code></li>\n<li>重写  <code>WebMvcConfigurer</code></li>\n<li>使用注解  <code>@CrossOrigin</code></li>\n<li>手动设置响应头 ( <code>HttpServletResponse</code> )</li>\n<li>自定 <code>web filter</code>  实现跨域</li>\n</ul>\n<p>注意:</p>\n<ul>\n<li><code>CorFilter / WebMvConfigurer / @CrossOrigin</code>  需要  <code>SpringMVC 4.2</code>  以上版本才支持，对应 <code>springBoot 1.3</code>  版本以上</li>\n<li>上面前两种方式属于全局  <code>CORS</code>  配置，后两种属于局部  <code>CORS</code>  配置。如果使用了局部跨域是会覆盖全局跨域的规则，所以可以通过  <code>@CrossOrigin</code>  注解来进行细粒度更高的跨域资源控制。</li>\n<li>其实无论哪种方案，最终目的都是修改响应头，向响应头中添加浏览器所要求的数据，进而实现跨域</li>\n</ul>\n<h2 id=\"1返回新的-corsfilter全局跨域\"><a class=\"markdownIt-Anchor\" href=\"#1返回新的-corsfilter全局跨域\">#</a> 1. 返回新的  <code>CorsFilter</code>  (全局跨域)</h2>\n<p>在任意配置类，返回一个 新的  <code>CorsFIlter Bean</code>  ，并添加映射路径和具体的 <code>CORS</code>  配置路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalCorsConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CorsFilter <span class=\"title\">corsFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 添加 CORS配置信息</span></span><br><span class=\"line\">        CorsConfiguration config = <span class=\"keyword\">new</span> CorsConfiguration();</span><br><span class=\"line\">        <span class=\"comment\">//放行哪些原始域</span></span><br><span class=\"line\">        config.addAllowedOrigin(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//是否发送 Cookie</span></span><br><span class=\"line\">        config.setAllowCredentials(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//放行哪些请求方式</span></span><br><span class=\"line\">        config.addAllowedMethod(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//放行哪些原始请求头部信息</span></span><br><span class=\"line\">        config.addAllowedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//暴露哪些头部信息</span></span><br><span class=\"line\">        config.addExposedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2. 添加映射路径</span></span><br><span class=\"line\">        UrlBasedCorsConfigurationSource corsConfigurationSource = <span class=\"keyword\">new</span> UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">        corsConfigurationSource.registerCorsConfiguration(<span class=\"string\">&quot;/**&quot;</span>,config);</span><br><span class=\"line\">        <span class=\"comment\">//3. 返回新的CorsFilter</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CorsFilter(corsConfigurationSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-重写-webmvcconfigurer全局跨域\"><a class=\"markdownIt-Anchor\" href=\"#2-重写-webmvcconfigurer全局跨域\">#</a> 2. 重写  <code>WebMvcConfigurer</code>  (全局跨域)</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CorsConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">//是否发送Cookie</span></span><br><span class=\"line\">                .allowCredentials(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                <span class=\"comment\">//放行哪些原始域</span></span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .allowedMethods(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>&#125;)</span><br><span class=\"line\">                .allowedHeaders(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .exposedHeaders(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-使用注解-局部跨域\"><a class=\"markdownIt-Anchor\" href=\"#3-使用注解-局部跨域\">#</a> 3. 使用注解 (局部跨域)</h2>\n<p>在控制器 (类上) 上使用注解  <code>@CrossOrigin:</code> ，表示该类的所有方法允许跨域。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@CrossOrigin(origins = &quot;*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在方法上使用注解  <code>@CrossOrigin</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin(origins = &quot;*&quot;)</span></span><br><span class=\"line\">     <span class=\"comment\">//@CrossOrigin(value = &quot;http://localhost:8081&quot;) //指定具体ip允许跨域</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-手动设置响应头局部跨域\"><a class=\"markdownIt-Anchor\" href=\"#4-手动设置响应头局部跨域\">#</a> 4. 手动设置响应头 (局部跨域)</h2>\n<p>使用  <code>HttpServletResponse</code>  对象添加响应头 <code>(Access-Control-Allow-Origin)</code>  来授权原始域，这里  <code>Origin</code>  的值也可以设置为 <code> “*”</code> , 表示全部放行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/index&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">    response.addHeader(<span class=\"string\">&quot;Access-Allow-Control-Origin&quot;</span>,<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;index&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-使用自定义filter实现跨域\"><a class=\"markdownIt-Anchor\" href=\"#5-使用自定义filter实现跨域\">#</a> 5. 使用自定义 <code>filter</code>  实现跨域</h2>\n<p>首先编写一个过滤器，可以起名字为 <code>MyCorsFilter.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mesnac.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCorsFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">    HttpServletResponse response = (HttpServletResponse) res;</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;POST, GET, OPTIONS, DELETE&quot;</span>);</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"string\">&quot;3600&quot;</span>);</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;x-requested-with,content-type&quot;</span>);</span><br><span class=\"line\">    chain.doFilter(req, res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>web.xml</code>  中配置这个过滤器，使其生效</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 跨域访问 START--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CorsFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.mesnac.aop.MyCorsFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CorsFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 跨域访问 END  --&gt;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java",
                "SpringBoot"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/c112412d/",
            "url": "https://smile1231.github.io/posts/c112412d/",
            "title": "Mybatis封装成Map结果",
            "date_published": "2022-02-13T13:42:17.000Z",
            "content_html": "<h1 id=\"mybatis封装成map结果\"><a class=\"markdownIt-Anchor\" href=\"#mybatis封装成map结果\">#</a>  <code>Mybatis</code>  封装成 <code>Map</code>  结果</h1>\n<h2 id=\"dao层\"><a class=\"markdownIt-Anchor\" href=\"#dao层\">#</a>  <code>Dao</code>  层</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapKey(&quot;cityCode&quot;)</span></span><br><span class=\"line\"><span class=\"function\">Map&lt;String,InvoiceSubjectRuleCity&gt; <span class=\"title\">bulkSelectRuleCityByRuleIdList</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;ruleIdList&quot;)</span> List&lt;Long&gt; ruleIdList)</span></span>;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bulkSelectRuleCityByRuleIdList&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class=\"line\">    select</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class=\"line\">    from t_invoice_subject_rule_city</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">      rule_id in</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;ruleIdList&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;ruleId&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">           #&#123;ruleId&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>返回结果即为 <code>Map</code>  类型</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/2edf7887/",
            "url": "https://smile1231.github.io/posts/2edf7887/",
            "title": "MybatisPlus实现分页查询",
            "date_published": "2022-02-13T13:41:49.000Z",
            "content_html": "<h1 id=\"mybatisplus实现分页查询\"><a class=\"markdownIt-Anchor\" href=\"#mybatisplus实现分页查询\">#</a>  <code>MybatisPlus</code>  实现分页查询</h1>\n<h2 id=\"分页区别\"><a class=\"markdownIt-Anchor\" href=\"#分页区别\">#</a> 分页区别</h2>\n<p>分页查询每个人程序猿几乎都使用过，但是有部分同学不懂什么是物理分页和逻辑分页。</p>\n<p>物理分页：相当于执行了 <code>limit</code>  分页语句，返回部分数据。物理分页只返回部分数据占用内存小，能够获取数据库最新的状态，实施性比较强，一般适用于数据量比较大，数据更新比较频繁的场景。</p>\n<p>逻辑分页：一次性把全部的数据取出来，通过程序进行筛选数据。如果数据量大的情况下会消耗大量的内存，由于逻辑分页只需要读取数据库一次，不能获取数据库最新状态，实施性比较差，适用于数据量小，数据稳定的场合。</p>\n<p>那么 MP 中的物理分页怎么实现呢？ 往下看往下看</p>\n<span id=\"more\"></span>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>需要新建一个 <code>JavaConfig</code>  类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisPlusConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页插件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PaginationInterceptor <span class=\"title\">paginationInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PaginationInterceptor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体分页实现\"><a class=\"markdownIt-Anchor\" href=\"#具体分页实现\">#</a> 具体分页实现</h2>\n<p><code>MP</code>  的 <code>Wrapper</code>  提供了两种分页查询的方式，源码如下：</p>\n<img data-src=\"/posts/2edf7887/2022-02-13-22-35-05.png\" class=\"\">\n<p>可见两个分页方法参数都是一致的，只是返回参数略有不同，具体选择根据实际业务为准。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectByPage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> QueryWrapper();</span><br><span class=\"line\">    wrapper.like(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;雨&quot;</span>).lt(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Page&lt;User&gt; page = <span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//IPage&lt;User&gt; userIPage = userMapper.selectPage(page, wrapper);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    IPage&lt;Map&lt;String, Object&gt;&gt; mapIPage = userMapper.selectMapsPage(page, wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总页数&quot;</span>+mapIPage.getPages());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总记录数&quot;</span>+mapIPage.getTotal());</span><br><span class=\"line\">    List&lt;Map&lt;String, Object&gt;&gt; records = mapIPage.getRecords();</span><br><span class=\"line\">    records.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上分页查询执行 <code>sql</code>  如下，先是查询了一次总记录数，然后在查询的数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span>  Preparing: <span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> ? <span class=\"keyword\">AND</span> age <span class=\"operator\">&lt;</span> ? </span><br><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span> Parameters: <span class=\"operator\">%</span>雨<span class=\"operator\">%</span>(String), <span class=\"number\">40</span>(<span class=\"type\">Integer</span>)</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>    Columns: <span class=\"built_in\">COUNT</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>        <span class=\"type\">Row</span>: <span class=\"number\">2</span></span><br><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span>  Preparing: <span class=\"keyword\">SELECT</span> id,name,age,email,manager_id,create_time <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> ? <span class=\"keyword\">AND</span> age <span class=\"operator\">&lt;</span> ? LIMIT ?,? </span><br><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span> Parameters: <span class=\"operator\">%</span>雨<span class=\"operator\">%</span>(String), <span class=\"number\">40</span>(<span class=\"type\">Integer</span>), <span class=\"number\">0</span>(Long), <span class=\"number\">2</span>(Long)</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>    Columns: id, name, age, email, manager_id, create_time</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>        <span class=\"type\">Row</span>: <span class=\"number\">2</span>, 张雨琪, <span class=\"number\">31</span>, zjq<span class=\"variable\">@baomidou</span>.com, <span class=\"number\">1088248166370832385</span>, <span class=\"number\">2021</span><span class=\"number\">-01</span><span class=\"number\">-14</span> <span class=\"number\">09</span>:<span class=\"number\">15</span>:<span class=\"number\">15</span></span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>        <span class=\"type\">Row</span>: <span class=\"number\">3</span>, 刘红雨, <span class=\"number\">31</span>, lhm<span class=\"variable\">@baomidou</span>.com, <span class=\"number\">1088248166370832385</span>, <span class=\"number\">2021</span><span class=\"number\">-01</span><span class=\"number\">-14</span> <span class=\"number\">09</span>:<span class=\"number\">48</span>:<span class=\"number\">16</span></span><br><span class=\"line\">DEBUG<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>      Total: <span class=\"number\">2</span></span><br><span class=\"line\">总页数<span class=\"number\">1</span></span><br><span class=\"line\">总记录数<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>现在我们有需求只要查询数据即可， 不关心总记录数等，如果使用默认的方式就消耗不必要的性能。那么解决办法也是很简单的，只需要在创建 <code>page</code>  对象时传入第三个参数为 <code>false</code>  即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page&lt;User&gt; page = <span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "分页查询"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/31dc52e1/",
            "url": "https://smile1231.github.io/posts/31dc52e1/",
            "title": "MyBatis之分页查询：MyBatis PageHelper",
            "date_published": "2022-02-13T13:40:27.000Z",
            "content_html": "<h1 id=\"mybatis之分页查询mybatis-pagehelper\"><a class=\"markdownIt-Anchor\" href=\"#mybatis之分页查询mybatis-pagehelper\">#</a>  <code>MyBatis</code>  之分页查询： <code>MyBatis PageHelper</code></h1>\n<h2 id=\"1-添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#1-添加依赖\">#</a> 1. 添加依赖</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--MyBatis 分页插件: MyBatis PageHelper--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-添加配置\"><a class=\"markdownIt-Anchor\" href=\"#2-添加配置\">#</a> 2. 添加配置</h2>\n<span id=\"more\"></span>\n<p>在 <code>application.properties</code>  配置文件中添加 <code>MyBatis PageHelper</code>  的配置项</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PageHelper 分页插件配置</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.helperDialect</span>=<span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.reasonable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.supportMethodsArguments</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.params</span>=<span class=\"string\">count=countSql</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-分页查询\"><a class=\"markdownIt-Anchor\" href=\"#3-分页查询\">#</a> 3. 分页查询</h2>\n<p>通过  <code>MyBatis PageHelper</code>  进行分页查询实际上非常简单，只需在 <code>service(或mapper)</code>  方法执行查询前，调用一次  <code>PageHelper.startPage(pageNum,pageSize)</code>   <code>来设置分页查询参数即可，其中pageNum</code>  为记录页数， <code>pageSize</code>  为单页记录数量。此时 <code>service(或mapper)</code>  方法的查询结果就是分页后的结果了。如果期望获得相关的分页信息，还可以将查询结果封装到 <code>PageInfo</code>  对象中，以获得总页数、总记录数、当前页数等相关分页信息</p>\n<p>现在通过一个实际示例，来具体演示操作，这里我们提供了一个分页查询的 <code>Controller</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageNum 记录页数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageSize 单页记录数量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/findPage&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">findPage</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> <span class=\"keyword\">int</span> pageNum, <span class=\"meta\">@RequestParam</span> <span class=\"keyword\">int</span> pageSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置分页查询参数</span></span><br><span class=\"line\">    PageHelper.startPage(pageNum,pageSize);</span><br><span class=\"line\">    List&lt;Student&gt; studentList = studentService.findList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Student student : studentList) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;element : &quot;</span> + student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 封装分页查询结果到 PageInfo 对象中以获取相关分页信息</span></span><br><span class=\"line\">    PageInfo pageInfo = <span class=\"keyword\">new</span> PageInfo( studentList );</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总页数: &quot;</span> + pageInfo.getPages());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总记录数: &quot;</span> + pageInfo.getTotal());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;当前页数: &quot;</span> + pageInfo.getPageNum());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;当前页面记录数量: &quot;</span> + pageInfo.getSize());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pageInfo.getList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>service</code>  方法中所调用的查询 <code>SQL</code>  如下所示，可以看到， <code>SQL</code>  中无需使用 <code>limit</code>  语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;studentResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.aaron.springbootdemo.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findList&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;studentResultMap&quot;</span>&gt;</span>    </span><br><span class=\"line\">    SELECT * FROM user</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>NOTE:</code></p>\n</blockquote>\n<p><code>PageHelper.startPage(pageNum,pageSize)</code>  只对其后的第一次 <code>SQL</code>  查询进行分页。故若需进行分页查询，必须每次在 <code>service（或mapper）</code> 方法执行 <code>SQL</code>  查询前调用 <code>PageHelper.startPage(pageNum,pageSize) </code> 方法</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "分页查询"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/105c245f/",
            "url": "https://smile1231.github.io/posts/105c245f/",
            "title": "Mybatis使用Sql进行模糊查询",
            "date_published": "2022-02-13T13:39:52.000Z",
            "content_html": "<h1 id=\"mybatis使用sql进行模糊查询\"><a class=\"markdownIt-Anchor\" href=\"#mybatis使用sql进行模糊查询\">#</a>  <code>Mybatis</code>  使用 <code>Sql</code>  进行模糊查询</h1>\n<h2 id=\"方式一\"><a class=\"markdownIt-Anchor\" href=\"#方式一\">#</a> 方式一</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from user where username like #&#123;username&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>模糊查询的测试方法</p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; users = userDao.findByName(<span class=\"string\">&quot;%王%&quot;</span>);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/105c245f/2022-02-13-22-29-15.png\" class=\"\">\n<p>我们在配置文件中没有加入 <code>%</code>  来作为模糊查询的条件，所以在传入字符串实参时，就需要给定模糊查询的标<br>\n识 %。配置文件中的 <code>#&#123;username&#125;</code>  也只是一个占位符，所以  <code>SQL</code>  语句显示为 <code>“？”</code> 。</p>\n<h2 id=\"方式二\"><a class=\"markdownIt-Anchor\" href=\"#方式二\">#</a> 方式二</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;string&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span>&gt;</span></span><br><span class=\"line\"> select * from user where username like &#x27;%$&#123;value&#125;%&#x27;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们在上面将原来的 <code>#&#123;&#125;</code>  占位符，改成了 <code>&#123;value&#125;</code> 。注意如果用模糊查询的这种写法，那么 <code>$&#123;value&#125;</code>  的写法就是固定的，不能写成其它名字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行查询一个方法</span></span><br><span class=\"line\">List&lt;User&gt; users = userDao.findByName(<span class=\"string\">&quot;王&quot;</span>);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/105c245f/2022-02-13-22-29-25.png\" class=\"\">\n<p>可以发现，我们在程序代码中就不需要加入模糊查询的匹配符 % 了，这两种方式的实现效果是一样的，但执行<br>\n的语句是不一样的。</p>\n<h2 id=\"方式三\"><a class=\"markdownIt-Anchor\" href=\"#方式三\">#</a> 方式三</h2>\n<p>说明：通过前两种写法，虽然可以解决模糊查询的问题，但是还是不好，因为通过 <code>%</code>  的方式会引发 <code>sql</code>  注入的问题，现在的期望是：既能够解决 <code>sql</code>  注入又能在配置文件中写 <code>%</code>  该如何实现呢，可以借助 <code>mysql</code>  的函数。</p>\n<p>修改  <code>SQL</code>  语句的配置，配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;string&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span>&gt;</span></span><br><span class=\"line\"> select * from user where username like concat(&#x27;%&#x27;,#&#123;username&#125;,&#x27;%&#x27;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>*#&#123; &#125;</code>  是预编译处理， <code>MyBatis</code>  在处理 <code>#&#123; &#125;</code>  时，它会将 <code>sql</code>  中的 <code>#&#123; &#125;</code>  替换为 <code>？</code> ，然后调用 <code>PreparedStatement</code>  的 <code>set</code>  方法来赋值，传入字符串后，会在值两边加上单引号，使用占位符的方式提高效率，可以防止 <code>sql</code>  注入。<br>\n <code>$&#123;&#125;:</code>  表示拼接 <code>sql</code>  串，将接收到参数的内容不加任何修饰拼接在 <code>sql</code>  中，可能引发 <code>sql</code>  注入。</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "模糊查询"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/b246d3ce/",
            "url": "https://smile1231.github.io/posts/b246d3ce/",
            "title": "Java自带的好用的工具类",
            "date_published": "2022-02-13T13:39:11.000Z",
            "content_html": "<h1 id=\"java自带的好用的工具类\"><a class=\"markdownIt-Anchor\" href=\"#java自带的好用的工具类\">#</a>  <code>Java</code>  自带的好用的工具类</h1>\n<h2 id=\"list集合拼接成以逗号分隔的字符串\"><a class=\"markdownIt-Anchor\" href=\"#list集合拼接成以逗号分隔的字符串\">#</a>  <code>List</code>  集合拼接成以逗号分隔的字符串</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如何把list集合拼接成以逗号分隔的字符串 a,b,c </span></span><br><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>);  </span><br><span class=\"line\"><span class=\"comment\">// 第一种方法，可以用stream流 </span></span><br><span class=\"line\">String join = list.stream().collect(Collectors.joining(<span class=\"string\">&quot;,&quot;</span>));  </span><br><span class=\"line\">System.out.println(join); <span class=\"comment\">// 输出 a,b,c </span></span><br><span class=\"line\"><span class=\"comment\">// 第二种方法，其实String也有join方法可以实现这个功能 </span></span><br><span class=\"line\">String join = String.join(<span class=\"string\">&quot;,&quot;</span>, list);  </span><br><span class=\"line\">System.out.println(join); <span class=\"comment\">// 输出 a,b,c</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"比较两个字符串是否相等忽略大小写\"><a class=\"markdownIt-Anchor\" href=\"#比较两个字符串是否相等忽略大小写\">#</a> 比较两个字符串是否相等，忽略大小写</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (strA.equalsIgnoreCase(strB)) &#123;  </span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;相等&quot;</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"比较两个对象是否相等\"><a class=\"markdownIt-Anchor\" href=\"#比较两个对象是否相等\">#</a> 比较两个对象是否相等</h2>\n<p>当我们用  <code>equals</code>  比较两个对象是否相等的时候，还需要对左边的对象进行判空，不然可能会报空指针异常，我们可以用  <code>java.util</code>  包下  <code>Objects</code>  封装好的比较是否相等的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Objects.equals(strA, strB);</span><br><span class=\"line\"><span class=\"comment\">//源码是这样的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object a, Object b)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a == b) || (a != <span class=\"keyword\">null</span> &amp;&amp; a.equals(b));  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"两个list取交集\"><a class=\"markdownIt-Anchor\" href=\"#两个list取交集\">#</a> 两个 <code>List</code>  取交集</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();  </span><br><span class=\"line\">list1.add(<span class=\"string\">&quot;a&quot;</span>);  </span><br><span class=\"line\">list1.add(<span class=\"string\">&quot;b&quot;</span>);  </span><br><span class=\"line\">list1.add(<span class=\"string\">&quot;c&quot;</span>);  </span><br><span class=\"line\">List&lt;String&gt; list2 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();  </span><br><span class=\"line\">list2.add(<span class=\"string\">&quot;a&quot;</span>);  </span><br><span class=\"line\">list2.add(<span class=\"string\">&quot;b&quot;</span>);  </span><br><span class=\"line\">list2.add(<span class=\"string\">&quot;d&quot;</span>);  </span><br><span class=\"line\">list1.retainAll(list2);  </span><br><span class=\"line\">System.out.println(list1);</span><br><span class=\"line\"><span class=\"comment\">// 输出[a, b]</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用apache-commons-工具类库\"><a class=\"markdownIt-Anchor\" href=\"#使用apache-commons-工具类库\">#</a> 使用 <code>apache commons</code>  工具类库</h1>\n<h2 id=\"字符串判空\"><a class=\"markdownIt-Anchor\" href=\"#字符串判空\">#</a> 字符串判空</h2>\n<p>传参  <code>CharSequence</code>  类型是  <code>String、StringBuilder、StringBuffer</code>  的父类，都可以直接下面方法判空，以下是源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(<span class=\"keyword\">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> cs == <span class=\"keyword\">null</span> || cs.length() == <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNotEmpty</span><span class=\"params\">(<span class=\"keyword\">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> !isEmpty(cs);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 判空的时候，会去除字符串中的空白字符，比如空格、换行、制表符 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isBlank</span><span class=\"params\">(<span class=\"keyword\">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> strLen = length(cs);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strLen == <span class=\"number\">0</span>) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; strLen; i++) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Character.isWhitespace(cs.charAt(i))) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNotBlank</span><span class=\"params\">(<span class=\"keyword\">final</span> CharSequence cs)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> !isBlank(cs);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"首字母转成大写\"><a class=\"markdownIt-Anchor\" href=\"#首字母转成大写\">#</a> 首字母转成大写</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = <span class=\"string\">&quot;yideng&quot;</span>;  </span><br><span class=\"line\">String capitalize = StringUtils.capitalize(str);  </span><br><span class=\"line\">System.out.println(capitalize); <span class=\"comment\">// 输出Yideng</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重复拼接字符串\"><a class=\"markdownIt-Anchor\" href=\"#重复拼接字符串\">#</a> 重复拼接字符串</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = StringUtils.repeat(<span class=\"string\">&quot;ab&quot;</span>, <span class=\"number\">2</span>);  </span><br><span class=\"line\">System.out.println(str); <span class=\"comment\">// 输出abab</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"格式化日期\"><a class=\"markdownIt-Anchor\" href=\"#格式化日期\">#</a> 格式化日期</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Date类型转String类型 </span></span><br><span class=\"line\">String date = DateFormatUtils.format(<span class=\"keyword\">new</span> Date(), <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  </span><br><span class=\"line\">System.out.println(date); <span class=\"comment\">// 输出 2021-05-01 01:01:01 </span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// String类型转Date类型 </span></span><br><span class=\"line\">Date date = DateUtils.parseDate(<span class=\"string\">&quot;2021-05-01 01:01:01&quot;</span>, <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 计算一个小时后的日期 </span></span><br><span class=\"line\">Date date = DateUtils.addHours(<span class=\"keyword\">new</span> Date(), <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"包装临时对象\"><a class=\"markdownIt-Anchor\" href=\"#包装临时对象\">#</a> 包装临时对象</h2>\n<p>当一个方法需要返回两个及以上字段时，我们一般会封装成一个临时对象返回，现在有了  <code>Pair</code>  和  <code>Triple</code>  就不需要了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回两个字段 </span></span><br><span class=\"line\">ImmutablePair&lt;Integer, String&gt; pair = ImmutablePair.of(<span class=\"number\">1</span>, <span class=\"string\">&quot;yideng&quot;</span>);  </span><br><span class=\"line\">System.out.println(pair.getLeft() + <span class=\"string\">&quot;,&quot;</span> + pair.getRight()); <span class=\"comment\">// 输出 1,yideng </span></span><br><span class=\"line\"><span class=\"comment\">// 返回三个字段 </span></span><br><span class=\"line\">ImmutableTriple&lt;Integer, String, Date&gt; triple = ImmutableTriple.of(<span class=\"number\">1</span>, <span class=\"string\">&quot;yideng&quot;</span>, <span class=\"keyword\">new</span> Date());  </span><br><span class=\"line\">System.out.println(triple.getLeft() + <span class=\"string\">&quot;,&quot;</span> + triple.getMiddle() + <span class=\"string\">&quot;,&quot;</span> + triple.getRight()); <span class=\"comment\">// 输出 1,yideng,Wed Apr 07 23:30:00 CST 2021</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"commons-collections-集合工具类\"><a class=\"markdownIt-Anchor\" href=\"#commons-collections-集合工具类\">#</a>  <code>commons-collections</code>  集合工具类</h1>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-collections4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"集合判空\"><a class=\"markdownIt-Anchor\" href=\"#集合判空\">#</a> 集合判空</h2>\n<p>封装了集合判空的方法，以下是源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection&lt;?&gt; coll)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> coll == <span class=\"keyword\">null</span> || coll.isEmpty();  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNotEmpty</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection&lt;?&gt; coll)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> !isEmpty(coll);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 两个集合取交集 </span></span><br><span class=\"line\">Collection&lt;String&gt; collection = CollectionUtils.retainAll(listA, listB);  </span><br><span class=\"line\"><span class=\"comment\">// 两个集合取并集 </span></span><br><span class=\"line\">Collection&lt;String&gt; collection = CollectionUtils.union(listA, listB);  </span><br><span class=\"line\"><span class=\"comment\">// 两个集合取差集 </span></span><br><span class=\"line\">Collection&lt;String&gt; collection = CollectionUtils.subtract(listA, listB);</span><br></pre></td></tr></table></figure>\n<h1 id=\"common-beanutils-操作对象\"><a class=\"markdownIt-Anchor\" href=\"#common-beanutils-操作对象\">#</a>  <code>common-beanutils</code>  操作对象</h1>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-beanutils<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-beanutils<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/******************************************************************/</span></span><br><span class=\"line\">User user = <span class=\"keyword\">new</span> User();  </span><br><span class=\"line\">BeanUtils.setProperty(user, <span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">1</span>);  </span><br><span class=\"line\">BeanUtils.setProperty(user, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;yideng&quot;</span>);  </span><br><span class=\"line\">System.out.println(BeanUtils.getProperty(user, <span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// 输出 yideng </span></span><br><span class=\"line\">System.out.println(user); <span class=\"comment\">// 输出 &#123;&quot;id&quot;:1,&quot;name&quot;:&quot;yideng&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">/******************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">//对象和 map 互转</span></span><br><span class=\"line\">Map&lt;String, String&gt; map = BeanUtils.describe(user);  </span><br><span class=\"line\">System.out.println(map); <span class=\"comment\">// 输出 &#123;&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;yideng&quot;&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// map转对象 </span></span><br><span class=\"line\">User newUser = <span class=\"keyword\">new</span> User();  </span><br><span class=\"line\">BeanUtils.populate(newUser, map);  </span><br><span class=\"line\">System.out.println(newUser); <span class=\"comment\">// 输出 &#123;&quot;id&quot;:1,&quot;name&quot;:&quot;yideng&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"commons-io-文件流处理\"><a class=\"markdownIt-Anchor\" href=\"#commons-io-文件流处理\">#</a>  <code>commons-io</code>  文件流处理</h1>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>文件处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;demo1.txt&quot;</span>);  </span><br><span class=\"line\"><span class=\"comment\">// 读取文件 </span></span><br><span class=\"line\">List&lt;String&gt; lines = FileUtils.readLines(file, Charset.defaultCharset());  </span><br><span class=\"line\"><span class=\"comment\">// 写入文件 </span></span><br><span class=\"line\">FileUtils.writeLines(<span class=\"keyword\">new</span> File(<span class=\"string\">&quot;demo2.txt&quot;</span>), lines);  </span><br><span class=\"line\"><span class=\"comment\">// 复制文件 </span></span><br><span class=\"line\">FileUtils.copyFile(srcFile, destFile);</span><br><span class=\"line\">```   </span><br><span class=\"line\"># ``Google Guava`` 工具类库</span><br><span class=\"line\"></span><br><span class=\"line\">```xml</span><br><span class=\"line\">&lt;dependency&gt;  </span><br><span class=\"line\">    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;  </span><br><span class=\"line\">    &lt;artifactId&gt;guava&lt;/artifactId&gt;  </span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">30.1</span><span class=\"number\">.1</span>-jre&lt;/version&gt;  </span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建集合\"><a class=\"markdownIt-Anchor\" href=\"#创建集合\">#</a> 创建集合</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Lists.newArrayList();  </span><br><span class=\"line\">List&lt;Integer&gt; list = Lists.newArrayList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);  </span><br><span class=\"line\"><span class=\"comment\">// 反转list </span></span><br><span class=\"line\">List&lt;Integer&gt; reverse = Lists.reverse(list);  </span><br><span class=\"line\">System.out.println(reverse); <span class=\"comment\">// 输出 [3, 2, 1] </span></span><br><span class=\"line\"><span class=\"comment\">// list集合元素太多，可以分成若干个集合，每个集合10个元素 </span></span><br><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; partition = Lists.partition(list, <span class=\"number\">10</span>);  </span><br><span class=\"line\">  </span><br><span class=\"line\">Map&lt;String, String&gt; map = Maps.newHashMap();  </span><br><span class=\"line\">Set&lt;String&gt; set = Sets.newHashSet();</span><br></pre></td></tr></table></figure>\n<h2 id=\"multimap-一个-key-可以映射多个-value-的-hashmap\"><a class=\"markdownIt-Anchor\" href=\"#multimap-一个-key-可以映射多个-value-的-hashmap\">#</a>  <code>Multimap</code>  一个  <code>key</code>  可以映射多个  <code>value</code>  的  <code>HashMap</code></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Multimap&lt;String, Integer&gt; map = ArrayListMultimap.create();  </span><br><span class=\"line\">map.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">1</span>);  </span><br><span class=\"line\">map.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">2</span>);  </span><br><span class=\"line\">Collection&lt;Integer&gt; values = map.get(<span class=\"string\">&quot;key&quot;</span>);  </span><br><span class=\"line\">System.out.println(map); <span class=\"comment\">// 输出 &#123;&quot;key&quot;:[1,2]&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// 还能返回你以前使用的臃肿的Map </span></span><br><span class=\"line\">Map&lt;String, Collection&lt;Integer&gt;&gt; collectionMap = map.asMap();</span><br></pre></td></tr></table></figure>\n<p>多省事，多简洁，省得你再创建 Map&lt;String, List&gt;</p>\n<h2 id=\"bimap-一种连-value-也不能重复的-hashmap\"><a class=\"markdownIt-Anchor\" href=\"#bimap-一种连-value-也不能重复的-hashmap\">#</a>  <code>BiMap</code>  一种连  <code>value</code>  也不能重复的  <code>HashMap</code></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BiMap&lt;String, String&gt; biMap = HashBiMap.create();  </span><br><span class=\"line\"><span class=\"comment\">// 如果value重复，put方法会抛异常，除非用forcePut方法 </span></span><br><span class=\"line\">biMap.put(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);  </span><br><span class=\"line\">System.out.println(biMap); <span class=\"comment\">// 输出 &#123;&quot;key&quot;:&quot;value&quot;&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// 既然value不能重复，何不实现个翻转key/value的方法，已经有了 </span></span><br><span class=\"line\">BiMap&lt;String, String&gt; inverse = biMap.inverse();  </span><br><span class=\"line\">System.out.println(inverse); <span class=\"comment\">// 输出 &#123;&quot;value&quot;:&quot;key&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这其实是双向映射，在某些场景还是很实用的。</p>\n<img data-src=\"/posts/b246d3ce/2022-02-13-22-22-23.png\" class=\"\">\n<h2 id=\"table-一种有两个-key-的-hashmap\"><a class=\"markdownIt-Anchor\" href=\"#table-一种有两个-key-的-hashmap\">#</a>  <code>Table</code>  一种有两个  <code>key</code>  的  <code>HashMap</code></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一批用户，同时按年龄和性别分组 </span></span><br><span class=\"line\">Table&lt;Integer, String, String&gt; table = HashBasedTable.create();  </span><br><span class=\"line\">table.put(<span class=\"number\">18</span>, <span class=\"string\">&quot;男&quot;</span>, <span class=\"string\">&quot;yideng&quot;</span>);  </span><br><span class=\"line\">table.put(<span class=\"number\">18</span>, <span class=\"string\">&quot;女&quot;</span>, <span class=\"string\">&quot;Lily&quot;</span>);  </span><br><span class=\"line\">System.out.println(table.get(<span class=\"number\">18</span>, <span class=\"string\">&quot;男&quot;</span>)); <span class=\"comment\">// 输出 yideng </span></span><br><span class=\"line\"><span class=\"comment\">// 这其实是一个二维的Map，可以查看行数据 </span></span><br><span class=\"line\">Map&lt;String, String&gt; row = table.row(<span class=\"number\">18</span>);  </span><br><span class=\"line\">System.out.println(row); <span class=\"comment\">// 输出 &#123;&quot;男&quot;:&quot;yideng&quot;,&quot;女&quot;:&quot;Lily&quot;&#125; </span></span><br><span class=\"line\"><span class=\"comment\">// 查看列数据 </span></span><br><span class=\"line\">Map&lt;Integer, String&gt; column = table.column(<span class=\"string\">&quot;男&quot;</span>);  </span><br><span class=\"line\">System.out.println(column); <span class=\"comment\">// 输出 &#123;18:&quot;yideng&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"multiset-一种用来计数的-set\"><a class=\"markdownIt-Anchor\" href=\"#multiset-一种用来计数的-set\">#</a>  <code>Multiset</code>  一种用来计数的  <code>Set</code></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Multiset&lt;String&gt; multiset = HashMultiset.create();  </span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;apple&quot;</span>);  </span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;apple&quot;</span>);  </span><br><span class=\"line\">multiset.add(<span class=\"string\">&quot;orange&quot;</span>);  </span><br><span class=\"line\">System.out.println(multiset.count(<span class=\"string\">&quot;apple&quot;</span>)); <span class=\"comment\">// 输出 2 </span></span><br><span class=\"line\"><span class=\"comment\">// 查看去重的元素 </span></span><br><span class=\"line\">Set&lt;String&gt; set = multiset.elementSet();  </span><br><span class=\"line\">System.out.println(set); <span class=\"comment\">// 输出 [&quot;orange&quot;,&quot;apple&quot;] </span></span><br><span class=\"line\"><span class=\"comment\">// 还能查看没有去重的元素 </span></span><br><span class=\"line\">Iterator&lt;String&gt; iterator = multiset.iterator();  </span><br><span class=\"line\"><span class=\"keyword\">while</span> (iterator.hasNext()) &#123;  </span><br><span class=\"line\">    System.out.println(iterator.next());  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">// 还能手动设置某个元素出现的次数 </span></span><br><span class=\"line\">multiset.setCount(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/96eb888f/",
            "url": "https://smile1231.github.io/posts/96eb888f/",
            "title": "Java学习线路图",
            "date_published": "2022-02-13T13:38:15.000Z",
            "content_html": "<p>图片可能很长。。。</p>\n<span id=\"more\"></span>\n<img data-src=\"/posts/96eb888f/2022-02-13-22-17-38.png\" class=\"\">\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/9dcbb5fa/",
            "url": "https://smile1231.github.io/posts/9dcbb5fa/",
            "title": "Corn表达式",
            "date_published": "2022-02-13T13:35:47.000Z",
            "content_html": "<h1 id=\"corn表达式\"><a class=\"markdownIt-Anchor\" href=\"#corn表达式\">#</a>  <code>Corn</code>  表达式</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。</span><br><span class=\"line\">按顺序依次为</span><br><span class=\"line\">秒（0~59）</span><br><span class=\"line\">分钟（0~59）</span><br><span class=\"line\">小时（0~23）</span><br><span class=\"line\">天（月）（0~31，但是你需要考虑你月的天数）</span><br><span class=\"line\">月（0~11）</span><br><span class=\"line\">天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）</span><br><span class=\"line\">年份（1970－2099）</span><br><span class=\"line\"></span><br><span class=\"line\">其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于&quot;月份中的日期&quot;和&quot;星期中的日期&quot;这两个元素互斥的,必须要对其中一个设置?</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>是否必填</th>\n<th>允许值</th>\n<th>允许特殊字符</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Seconds</code></td>\n<td>是</td>\n<td>0–59</td>\n<td><code>*,-</code></td>\n<td>标准实现不支持此字段。</td>\n</tr>\n<tr>\n<td><code>Minutes</code></td>\n<td>是</td>\n<td>0–59</td>\n<td><code>*,-</code></td>\n</tr>\n<tr>\n<td><code>Hours</code></td>\n<td>是</td>\n<td>0–23</td>\n<td><code>*,-</code></td>\n</tr>\n<tr>\n<td><code>Day of month</code></td>\n<td>是</td>\n<td>1–31</td>\n<td><code>*,-?LW</code></td>\n<td><code>?LW</code>  只有部分软件实现了</td>\n</tr>\n<tr>\n<td><code>Month</code></td>\n<td>是</td>\n<td><code>1–12 or JAN–DEC</code> \t <code>*,-</code></td>\n</tr>\n<tr>\n<td><code>Day of week</code></td>\n<td>是</td>\n<td><code>0–7 or SUN–SAT</code></td>\n<td><code>*,-?L#</code></td>\n<td><code>?L#</code> 只有部分软件实现了 <code>Linux</code>  和 <code>Spring</code>  的允许值为 <code>0-7</code> ， <code>0</code>  和 <code>7</code>  为周日 <code>Quartz</code>  的允许值为 <code>1-7</code> ， <code>1</code>  为周日</td>\n</tr>\n<tr>\n<td><code>Year</code></td>\n<td>否</td>\n<td><code>1970–2099</code></td>\n<td><code>*,-</code></td>\n<td>标准实现不支持此字段。</td>\n</tr>\n</tbody>\n</table>\n<p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p>\n<ol>\n<li>\n<p><code>*</code> ：表示匹配该域的任意值，假如在 <code>Minutes</code>  域使用 *, 即表示每分钟都会触发事件。</p>\n</li>\n<li>\n<p><code>?</code> : 只能用在 <code>DayofMonth</code>  和 <code>DayofWeek</code>  两个域。它也匹配域的任意值，但实际不会。因为 <code>DayofMonth</code>  和 <code>DayofWeek</code>  会相互影响。例如想在每月的 <code>20</code>  日触发调度，不管 <code>20</code>  日到底是星期几，则只能使用如下写法：  <code>13 13 15 20 * ?</code> , 其中最后一位只能用 <code>？</code> ，而不能使用 <code>*</code> ，如果使用 <code>*</code>  表示不管星期几都会触发，实际上并不是这样。</p>\n</li>\n<li>\n<p><code>-</code> : 表示范围，例如在 <code>Minutes</code>  域使用 <code>5-20</code> ，表示从 <code>5</code>  分到 <code>20</code>  分钟每分钟触发一次</p>\n</li>\n<li>\n<p><code>/</code> ：表示起始时间开始触发，然后每隔固定时间触发一次，例如在 <code>Minutes</code>  域使用 <code>5/20</code> , 则意味着 <code>5</code>  分钟触发一次，而 <code>25，45</code>  等分别触发一次.</p>\n</li>\n<li>\n<p><code>,</code> : 表示列出枚举值值。例如：在 <code>Minutes</code>  域使用 <code>5,20</code> ，则意味着在 <code>5</code>  和 <code>20</code>  分每分钟触发一次。</p>\n</li>\n<li>\n<p><code>L</code> : 表示最后，只能出现在 <code>DayofWeek</code>  和 <code>DayofMonth</code>  域，如果在 <code>DayofWeek</code>  域使用 <code>5L</code> , 意味着在最后的一个星期四触发。</p>\n</li>\n<li>\n<p><code>W</code> : 表示有效工作日 (周一到周五), 只能出现在 <code>DayofMonth</code>  域，系统将在离指定日期的最近的有效工作日触发事件。例如：在  <code>DayofMonth</code>  使用 <code>5W</code> ，如果 <code>5</code>  日是星期六，则将在最近的工作日：星期五，即 <code>4</code>  日触发。如果 <code>5</code>  日是星期天，则在 <code>6</code>  日 (周一) 触发；如果 <code>5</code>  日在星期一到星期五中的一天，则就在 <code>5</code>  日触发。另外一点， <code>W</code>  的最近寻找不会跨过月份</p>\n</li>\n<li>\n<p><code>LW</code> : 这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</p>\n</li>\n<li>\n<p><code>#</code> : 用于确定每个月第几个星期几，只能出现在 <code>DayofMonth</code>  域。例如在 <code>4#2</code> ，表示某月的第二个星期三。</p>\n</li>\n</ol>\n<p>一些例子:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">举几个例子:</span><br><span class=\"line\">0 0 2 1 * ? *    表示在每月的1日的凌晨2点调度任务</span><br><span class=\"line\">0 15 10 ? * MON-FRI    表示周一到周五每天上午10：15执行作业</span><br><span class=\"line\">0 15 10 ? 6L 2002-2006    表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br></pre></td></tr></table></figure>\n<p>其中每个元素可以是一个值 <code>(如6)</code> , 一个连续区间 <code>(9-12)</code> , 一个间隔时间 <code>(8-18/4)(/表示每隔4小时)</code> , 一个列表 <code>(1,3,5)</code> , 通配符。由于 &quot;月份中的日期&quot; 和 &quot;星期中的日期&quot; 这两个元素互斥的，必须要对其中一个设置？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 0 10,14,16 * * ? 每天上午10点，下午2点，4点</span><br><span class=\"line\">0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时</span><br><span class=\"line\">0 0 12 ? * WED 表示每个星期三中午12点</span><br><span class=\"line\">&quot;0 0 12 * * ?&quot; 每天中午12点触发</span><br><span class=\"line\">&quot;0 15 10 ? * *&quot; 每天上午10:15触发</span><br><span class=\"line\">&quot;0 15 10 * * ?&quot; 每天上午10:15触发</span><br><span class=\"line\">&quot;0 15 10 * * ? *&quot; 每天上午10:15触发</span><br><span class=\"line\">&quot;0 15 10 * * ? 2005&quot; 2005年的每天上午10:15触发</span><br><span class=\"line\">&quot;0 * 14 * * ?&quot; 在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class=\"line\">&quot;0 0/5 14 * * ?&quot; 在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class=\"line\">&quot;0 0/5 14,18 * * ?&quot; 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class=\"line\">&quot;0 0-5 14 * * ?&quot; 在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class=\"line\">&quot;0 10,44 14 ? 3 WED&quot; 每年三月的星期三的下午2:10和2:44触发</span><br><span class=\"line\">&quot;0 15 10 ? * MON-FRI&quot; 周一至周五的上午10:15触发</span><br><span class=\"line\">&quot;0 15 10 15 * ?&quot; 每月15日上午10:15触发</span><br><span class=\"line\">&quot;0 15 10 L * ?&quot; 每月最后一日的上午10:15触发</span><br><span class=\"line\">&quot;0 15 10 ? * 6L&quot; 每月的最后一个星期五上午10:15触发</span><br><span class=\"line\">&quot;0 15 10 ? * 6L 2002-2005&quot; 2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class=\"line\">&quot;0 15 10 ? * 6#3&quot; 每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure>\n<p>有些子表达式能包含一些范围或列表</p>\n<p>例如：子表达式（天（星期））可以为  <code>“MON-FRI”</code> ， <code>“MON，WED，FRI”</code> ， <code>“MON-WED,SAT”</code></p>\n<p><code>“*”</code>  字符代表所有可能的值</p>\n<p>因此， <code>“*”</code>  在子表达式（月）里表示每个月的含义， <code>“*”</code>  在子表达式（天（星期））表示星期的每一天</p>\n<p><code>“/”</code>  字符用来指定数值的增量<br>\n例如：在子表达式（分钟）里的 <code>“0/15”</code>  表示从第 <code>0</code>  分钟开始，每 <code>15</code>  分钟<br>\n在子表达式（分钟）里的 <code>“3/20”</code>  表示从第 <code>3</code>  分钟开始，每 <code>20</code>  分钟（它和 <code>“3，23，43”</code> ）的含义一样</p>\n<p><code>“？”</code>  字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值<br>\n当 2 个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为 <code>“?”</code></p>\n<p><code>“L” </code> 字符仅被用于天（月）和天（星期）两个子表达式，它是单词 <code>“last”</code>  的缩写<br>\n但是它在两个子表达式里的含义是不同的。<br>\n在天（月）子表达式中， <code>“L”</code>  表示一个月的最后一天<br>\n在天（星期）自表达式中， <code>“L”</code>  表示一个星期的最后一天，也就是 <code>SAT</code></p>\n<p>如果在 <code>“L”</code>  前有具体的内容，它就具有其他的含义了</p>\n<p>例如： <code>“6L”</code>  表示这个月的倒数第 <code>６</code> 天， <code>“FRIL”</code>  表示这个月的最一个星期五<br>\n注意：在使用 <code>“L”</code>  参数时，不要指定列表或范围，因为这会导致问题</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字段 允许值 允许的特殊字符</span><br><span class=\"line\">秒 0<span class=\"string\">-59</span> , - * /</span><br><span class=\"line\">分 0<span class=\"string\">-59</span> , - * /</span><br><span class=\"line\">小时 0<span class=\"string\">-23</span> , - * /</span><br><span class=\"line\">日期 1<span class=\"string\">-31</span> , - * ? / L W C</span><br><span class=\"line\">月份 1<span class=\"string\">-12</span> 或者 JAN-DEC , - * /</span><br><span class=\"line\">星期 1<span class=\"string\">-7</span> 或者 SUN-SAT , - * ? / L C #</span><br><span class=\"line\">年（可选） 留空, 1970<span class=\"string\">-2099</span> , - * /</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java",
                "Corn"
            ]
        }
    ]
}