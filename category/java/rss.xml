<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>JIN MAO &#39;s Blog • Posts by &#34;java&#34; category</title>
        <link>https://smile1231.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Sat, 21 May 2022 22:57:50 +0800</pubDate>
        <lastBuildDate>Sat, 21 May 2022 22:57:50 +0800</lastBuildDate>
        <category>生物信息</category>
        <category>基因编辑</category>
        <category>SAP</category>
        <category>Java</category>
        <category>Corn</category>
        <category>Cache</category>
        <category>Cookie</category>
        <category>Session</category>
        <category>Java面试</category>
        <category>前端</category>
        <category>Css</category>
        <category>DDD</category>
        <category>领域驱动设计</category>
        <category>DisPlay属性</category>
        <category>FastJson</category>
        <category>Docker</category>
        <category>blog</category>
        <category>hexo</category>
        <category>next</category>
        <category>IDEA</category>
        <category>SpringBoot</category>
        <category>JavaScript</category>
        <category>Html</category>
        <category>Jvm</category>
        <category>函数式接口</category>
        <category>map</category>
        <category>Stream流</category>
        <category>Assert</category>
        <category>java</category>
        <category>calender</category>
        <category>Springboot</category>
        <category>LeetCode</category>
        <category>算法</category>
        <category>递归</category>
        <category>Mybatis</category>
        <category>分页查询</category>
        <category>模糊查询</category>
        <category>Linux</category>
        <category>Spring</category>
        <category>Nginx</category>
        <category>文件上传</category>
        <category>SrpingBoot</category>
        <category>事务</category>
        <category>TypeScript</category>
        <category>WebPack</category>
        <category>master</category>
        <category>Ubuntu</category>
        <category>Mysql</category>
        <category>VSCODE</category>
        <category>快捷键</category>
        <category>UML</category>
        <category>Vue</category>
        <category>VsCode</category>
        <category>Shell</category>
        <category>Stream</category>
        <category>线程池</category>
        <category>日期</category>
        <category>ubuntu</category>
        <category>虚拟机</category>
        <category>数据挖掘</category>
        <category>Hadoop</category>
        <category>操作系统</category>
        <category>EasyExcel</category>
        <category>二分查找</category>
        <category>node</category>
        <category>JVM</category>
        <category>junit</category>
        <category>Hexo</category>
        <category>数据库</category>
        <category>Yaml</category>
        <category>冒泡排序</category>
        <category>Git</category>
        <category>git,npm,node</category>
        <category>动态规划</category>
        <category>多线程</category>
        <category>Mysql事务</category>
        <category>堆排序</category>
        <category>幂等性</category>
        <category>流</category>
        <category>归并排序</category>
        <category>正则表达式</category>
        <category>快速排序</category>
        <category>直接插入排序</category>
        <category>Java 面试</category>
        <category>数据结构</category>
        <category>阻塞队列</category>
        <category>选择排序</category>
        <category>Spring事务</category>
        <category>JDK</category>
        <category>动态代理</category>
        <category>Date</category>
        <category>ArrayList</category>
        <category>接口</category>
        <category>SpringMvc</category>
        <category>排序</category>
        <category>执行计划</category>
        <category>HashMap</category>
        <category>设计模式</category>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/bd76a990/</guid>
            <title>一图看懂Java中的PO,BO,VO,DTO,POJO,DAO,DO</title>
            <link>https://smile1231.github.io/posts/bd76a990/</link>
            <category>Java</category>
            <pubDate>Sat, 21 May 2022 22:57:50 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTUyODQ4Njc1OTI0MDgyNzE4&#34;&gt; 参考链接 &lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/d6d1be75/</guid>
            <title>在Javadoc注释中引用方法</title>
            <link>https://smile1231.github.io/posts/d6d1be75/</link>
            <category>Java</category>
            <pubDate>Sat, 21 May 2022 22:00:19 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最近用到如何在注释中 &lt;code&gt;link&lt;/code&gt;  到另一个类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@link&lt;/code&gt;  标签&lt;br&gt;
 &lt;code&gt;Javadoc&lt;/code&gt;  提供了 &lt;code&gt;@link&lt;/code&gt;  内联标记来引用 Java 类中的成员。我们可以认为 &lt;code&gt;@link&lt;/code&gt;  标签类似于  &lt;code&gt;HTML&lt;/code&gt;  中的锚标签，用于通过超链接将一个页面链接到另一个页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们看看使用 &lt;code&gt;@link&lt;/code&gt;  标记引用  &lt;code&gt;Javadoc&lt;/code&gt;  注释中的方法的语法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;span class=&#34;meta&#34;&gt;@link&lt;/span&gt; path_to_member label&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;与锚标签类似， &lt;code&gt;path_to_member&lt;/code&gt;  是目的地，标签是显示文本。&lt;/p&gt;
&lt;p&gt;标签是可选的，但 &lt;code&gt;path_to_member&lt;/code&gt;  是引用方法所必需的。但是，始终使用标签名称来避免复杂的参考链接是一种很好的做法。 &lt;code&gt;path_to_member&lt;/code&gt;  的语法 根据我们引用的方法是否驻留在同一个类中而有所不同。&lt;/p&gt;
&lt;p&gt;需要注意的是，大括号 &lt;code&gt;&amp;#123;&lt;/code&gt; 和 &lt;code&gt;@link&lt;/code&gt;  之间不能有空格。如果它们之间有空格， &lt;code&gt;Javadoc &lt;/code&gt; 工具将无法正确生成引用。但是，  &lt;code&gt;path_to_member、label&lt;/code&gt;  和右大括号之间没有空间限制。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;引用同一个类中的方法&lt;br&gt;
引用方法的最简单方法是在同一个类中：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;span class=&#34;meta&#34;&gt;@link&lt;/span&gt; #methodName() LabelName&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设我们正在记录一个方法，并且我们想从同一个类中引用另一个方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Also, check the &amp;#123;&lt;span class=&#34;doctag&#34;&gt;@link&lt;/span&gt; #move() Move&amp;#125; method for more movement details.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;walk&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这种情况下， &lt;code&gt;walk()&lt;/code&gt;  方法引用同一类中的 &lt;code&gt;move()&lt;/code&gt;  实例方法。&lt;/p&gt;
&lt;p&gt;如果被引用的方法有参数，当我们想要引用一个重载或参数化的方法时，我们必须相应地指定其参数的类型。&lt;/p&gt;
&lt;p&gt;考虑以下引用重载方法的示例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Check this &amp;#123;&lt;span class=&#34;doctag&#34;&gt;@link&lt;/span&gt; #move(String) Move&amp;#125; method for direction-oriented movement.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String direction)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;move()&lt;/code&gt;  方法是指一种采用一个 String 参数的重载方法。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;引用另一个类中的方法&lt;br&gt;
要引用另一个类中的方法，我们将使用类名，后跟标签，然后是方法名：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;span class=&#34;meta&#34;&gt;@link&lt;/span&gt; ClassName#methodName() LabelName&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;语法类似于引用同一类中的方法，除了在 &lt;code&gt;#&lt;/code&gt; 符号之前提到类名。&lt;/p&gt;
&lt;p&gt;现在，让我们考虑在另一个类中引用方法的示例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Additionally, check this &amp;#123;&lt;span class=&#34;doctag&#34;&gt;@link&lt;/span&gt; Animal#run(String) Run&amp;#125; method for direction based run.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;引用的方法在同一个包中的 &lt;code&gt;Animal&lt;/code&gt;  类中：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String direction)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们想引用另一个包中的方法，我们有两个选择。一种方法是直接指定包以及类名：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Also consider checking &amp;#123;&lt;span class=&#34;doctag&#34;&gt;@link&lt;/span&gt; com.baeldung.sealed.classes.Vehicle#Vehicle() Vehicle&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * constructor to initialize vehicle object.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;goToWork&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这种情况下，已经使用完整的包名称提到了 &lt;code&gt;Vehicle&lt;/code&gt;  类，以引用 &lt;code&gt;Vehicle()&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;此外，我们可以导入包并单独提及类名：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; com.baeldung.sealed.records.Car;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * Have a look at &amp;#123;&lt;span class=&#34;doctag&#34;&gt;@link&lt;/span&gt; Car#getNumberOfSeats() SeatsAvailability&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * method for checking the available seats needed for driving.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;drive&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里，驻留在另一个包中的 &lt;code&gt;Car&lt;/code&gt;  类已被导入。所以， &lt;code&gt;@link&lt;/code&gt;  只需要包含类名和方法。&lt;/p&gt;
&lt;p&gt;我们可以选择两种方式中的任何一种来引用不同包中的方法。如果是单次使用包，那么我们可以使用第一种方式，否则，如果有多个依赖项，我们应该选择第二种方式。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;@linkplain&lt;/code&gt;  标签&lt;br&gt;
我们已经在注释中看到了用于引用方法的 &lt;code&gt;@link Javadoc&lt;/code&gt;  标记。 &lt;code&gt;Javadoc&lt;/code&gt;  提供了另一个名为 &lt;code&gt;@linkplain&lt;/code&gt;  的标记，用于在注释中引用方法，类似于 &lt;code&gt;@link&lt;/code&gt;  标记。主要区别在于，在生成文档时， &lt;code&gt;@link&lt;/code&gt;  以等宽格式文本生成标签值，而 &lt;code&gt;@linkplain&lt;/code&gt;  以标准格式（如纯文本）生成它。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemRpdGVjdC5jb20vbWFpbi1hZHZhbmNlZC9qYXZhL2phdmEtbWV0aG9kLWluLWphdmFkb2MuaHRtbA==&#34;&gt; 原文章地址 &lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/f976ebe7/</guid>
            <title>SpringMvc中标准的后端接口格式</title>
            <link>https://smile1231.github.io/posts/f976ebe7/</link>
            <category>SpringBoot</category>
            <category>接口</category>
            <category>SpringMvc</category>
            <pubDate>Sat, 19 Feb 2022 13:46:06 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;用springboot手把手教你写出优雅的后端接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用springboot手把手教你写出优雅的后端接口&#34;&gt;#&lt;/a&gt; 用 &lt;code&gt;SpringBoot&lt;/code&gt;  手把手教你写出优雅的后端接口&lt;/h1&gt;
&lt;p&gt;一个后端接口大致分为四个部分组成： &lt;code&gt;接口地址（url）&lt;/code&gt; 、 &lt;code&gt;接口请求方式（get、post等）&lt;/code&gt; 、 &lt;code&gt;请求数据（request）&lt;/code&gt; 、 &lt;code&gt;响应数据（response）&lt;/code&gt; 。如何构建这几个部分每个公司要求都不同，没有什么 “一定是最好的” 标准，但一个优秀的后端接口和一个糟糕的后端接口对比起来差异还是蛮大的，其中最重要的关键点就是看是否规范！&lt;/p&gt;
&lt;p&gt;本文就一步一步演示如何构建起一个优秀的后端接口体系，体系构建好了自然就有了规范，同时再构建新的后端接口也会十分轻松。&lt;/p&gt;
&lt;p&gt;所需依赖包&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;这里用的是 &lt;code&gt;SpringBoot&lt;/code&gt;  配置项目，本文讲解的重点是后端接口，所以只需要导入一个 &lt;code&gt;spring-boot-starter-web&lt;/code&gt;  包就可以了：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!--web依赖包，web应用必备--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!--StringUtils的使用--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;commons-lang&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;commons-lang&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.6&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;本文还用了 &lt;code&gt;swagger&lt;/code&gt;  来生成 &lt;code&gt;API&lt;/code&gt;  文档， &lt;code&gt;lombok&lt;/code&gt;  来简化类，不过这两者不是必须的，可用可不用。&lt;/p&gt;
&lt;h2 id=&#34;一-参数校验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-参数校验&#34;&gt;#&lt;/a&gt; 一、参数校验&lt;/h2&gt;
&lt;p&gt;一个接口一般对参数（请求数据）都会进行安全校验，参数校验的重要性自然不必多说，那么如何对参数进行校验就有讲究了。&lt;/p&gt;
&lt;h2 id=&#34;二-业务层校验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-业务层校验&#34;&gt;#&lt;/a&gt; 二、业务层校验&lt;/h2&gt;
&lt;p&gt;首先我们来看一下最常见的做法，就是在业务层进行参数校验：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;addUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (user == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || user.getId() == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || user.getAccount() == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || user.getPassword() == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || user.getEmail() == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;对象或者对象字段不能为空&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (StringUtils.isEmpty(user.getAccount()) || StringUtils.isEmpty(user.getPassword()) || StringUtils.isEmpty(user.getEmail())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;不能输入空字符串&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (user.getAccount().length() &amp;lt; &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; || user.getAccount().length() &amp;gt; &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;账号长度必须是6-11个字符&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (user.getPassword().length() &amp;lt; &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; || user.getPassword().length() &amp;gt; &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;密码长度必须是6-16个字符&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!Pattern.matches(&lt;span class=&#34;string&#34;&gt;&amp;quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$&amp;quot;&lt;/span&gt;, user.getEmail())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;邮箱格式不正确&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 参数校验完毕后这里就写上业务逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;success&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样做当然是没有什么错的，而且格式排版整齐也一目了然，不过这样太繁琐了，这还没有进行业务操作呢光是一个参数校验就已经这么多行代码，实在不够优雅。&lt;/p&gt;
&lt;p&gt;我们来改进一下，使用 &lt;code&gt;Spring Validator&lt;/code&gt;  和 &lt;code&gt;Hibernate Validator&lt;/code&gt;  这两套 &lt;code&gt;Validator&lt;/code&gt;  来进行方便的参数校验！这两套 &lt;code&gt;Validator&lt;/code&gt;  依赖包已经包含在前面所说的 &lt;code&gt;web&lt;/code&gt;  依赖包里了，所以可以直接使用。&lt;br&gt;
但是从 &lt;code&gt;springboot-2.3&lt;/code&gt;  开始，校验包被独立成了一个 &lt;code&gt;starter&lt;/code&gt;  组件&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdC93aWtpL1NwcmluZy1Cb290LTIuMy1SZWxlYXNlLU5vdGVzI3ZhbGlkYXRpb24tc3RhcnRlci1uby1sb25nZXItaW5jbHVkZWQtaW4td2ViLXN0YXJ0ZXJz&#34;&gt;参见：validation-starter-no-longer-included-in-web-starters&lt;/span&gt;，&lt;br&gt;
所以需要引入如下依赖：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!--校验组件--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-validation&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内置的校验有很多&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;注解&lt;/th&gt;
&lt;th&gt;校验功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@AssertFalse&lt;/td&gt;
&lt;td&gt;必须是 false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@AssertTrue&lt;/td&gt;
&lt;td&gt;必须是 true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@DecimalMax&lt;/td&gt;
&lt;td&gt;小于等于给定的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@DecimalMin&lt;/td&gt;
&lt;td&gt;大于等于给定的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Digits&lt;/td&gt;
&lt;td&gt;可设定最大整数位数和最大小数位数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Email&lt;/td&gt;
&lt;td&gt;校验是否符合 Email 格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Future&lt;/td&gt;
&lt;td&gt;必须是将来的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@FutureOrPresent&lt;/td&gt;
&lt;td&gt;当前或将来时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Max&lt;/td&gt;
&lt;td&gt;最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Min&lt;/td&gt;
&lt;td&gt;最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Negative&lt;/td&gt;
&lt;td&gt;负数（不包括 0）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@NegativeOrZero&lt;/td&gt;
&lt;td&gt;负数或 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@NotBlank&lt;/td&gt;
&lt;td&gt;不为 null 并且包含至少一个非空白字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@NotEmpty&lt;/td&gt;
&lt;td&gt;不为 null 并且不为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@NotNull&lt;/td&gt;
&lt;td&gt;不为 null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Null&lt;/td&gt;
&lt;td&gt;为 null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Past&lt;/td&gt;
&lt;td&gt;必须是过去的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@PastOrPresent&lt;/td&gt;
&lt;td&gt;必须是过去的时间，包含现在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Pattern&lt;/td&gt;
&lt;td&gt;必须满足正则表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@PositiveOrZero&lt;/td&gt;
&lt;td&gt;正数或 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@Size&lt;/td&gt;
&lt;td&gt;校验容器的元素个数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;三-validator-bindresult进行校验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-validator-bindresult进行校验&#34;&gt;#&lt;/a&gt; 三、 &lt;code&gt;Validator&lt;/code&gt;  +  &lt;code&gt;BindResult&lt;/code&gt;  进行校验&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Validator&lt;/code&gt;  可以非常方便的制定校验规则，并自动帮你完成校验。首先在入参里需要校验的字段加上注解，每个注解对应不同的校验规则，并可制定校验失败后的信息：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;User&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@NotNull(message = &amp;quot;用户id不能为空&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Long id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@NotNull(message = &amp;quot;用户账号不能为空&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Size(min = 6, max = 11, message = &amp;quot;账号长度必须是6-11个字符&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String account;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@NotNull(message = &amp;quot;用户密码不能为空&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Size(min = 6, max = 11, message = &amp;quot;密码长度必须是6-16个字符&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String password;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@NotNull(message = &amp;quot;用户邮箱不能为空&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Email(message = &amp;quot;邮箱格式不正确&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String email;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;校验规则和错误提示信息配置完毕后，接下来只需要在接口需要校验的参数上加上 &lt;code&gt;@Valid&lt;/code&gt;  注解，并添加 &lt;code&gt;BindResult&lt;/code&gt;  参数即可方便完成验证：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;user&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;UserController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; UserService userService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@PostMapping(&amp;quot;/addUser&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;addUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@RequestBody&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@Valid&lt;/span&gt; User user, BindingResult bindingResult)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果有参数校验失败，会将错误信息封装成对象组装在BindingResult里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (ObjectError error : bindingResult.getAllErrors()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; error.getDefaultMessage();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; userService.addUser(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样当请求数据传递到接口的时候 &lt;code&gt;Validator&lt;/code&gt;  就自动完成校验了，校验的结果就会封装到 &lt;code&gt;BindingResult&lt;/code&gt;  中去，如果有错误信息我们就直接返回给前端，业务逻辑代码也根本没有执行下去。&lt;/p&gt;
&lt;p&gt;此时，业务层里的校验代码就已经不需要了：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;addUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;// 直接编写业务逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;success&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在可以看一下参数校验效果。我们故意给这个接口传递一个不符合校验规则的参数，先传递一个错误数据给接口，故意将 &lt;code&gt;password&lt;/code&gt;  这个字段不满足校验条件：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;123@qq.com&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再来看一下接口的响应数据：&lt;/p&gt;
&lt;img data-src=&#34;/posts/f976ebe7/2022-02-19-14-08-48.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;这样是不是方便很多？不难看出使用 &lt;code&gt;Validator&lt;/code&gt;  校验有如下几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;简化代码，之前业务层那么一大段校验代码都被省略掉了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用方便，那么多校验规则可以轻而易举的实现，比如邮箱格式验证，之前自己手写正则表达式要写那么一长串，还容易出错，用 &lt;code&gt;Validator&lt;/code&gt;  直接一个注解搞定。（还有更多校验规则注解，可以自行去了解哦）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;减少耦合度，使用 &lt;code&gt;Validator&lt;/code&gt;  能够让业务层只关注业务逻辑，从基本的参数校验逻辑中脱离出来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;Validator + BindingResult&lt;/code&gt;  已经是非常方便实用的参数校验方式了，在实际开发中也有很多项目就是这么做的，不过这样还是不太方便，因为你每写一个接口都要添加一个 &lt;code&gt;BindingResult&lt;/code&gt;  参数，然后再提取错误信息返回给前端。&lt;/p&gt;
&lt;p&gt;这样有点麻烦，并且重复代码很多（尽管可以将这个重复代码封装成方法）。我们能否去掉 &lt;code&gt;BindingResult&lt;/code&gt;  这一步呢？当然是可以的！&lt;/p&gt;
&lt;h2 id=&#34;validator-自动抛出异常&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#validator-自动抛出异常&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Validator&lt;/code&gt;  + 自动抛出异常&lt;/h2&gt;
&lt;p&gt;将 &lt;code&gt;BindingResult&lt;/code&gt;  去掉：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@PostMapping(&amp;quot;/addUser&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;addUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@RequestBody&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@Valid&lt;/span&gt; User user)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;sucess&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;去掉之后会发生什么事情呢？直接来试验一下，还是按照之前一样故意传递一个不符合校验规则的参数给接口。此时我们观察控制台可以发现接口已经引发 &lt;code&gt;MethodArgumentNotValidException&lt;/code&gt;  异常了：&lt;/p&gt;
&lt;img data-src=&#34;/posts/f976ebe7/2022-02-19-14-09-00.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;其实这样就已经达到我们想要的效果了，参数校验不通过自然就不执行接下来的业务逻辑，去掉 &lt;code&gt;BindingResult&lt;/code&gt;  后会自动引发异常，异常发生了自然而然就不会执行业务逻辑。也就是说，我们完全没必要添加相关 &lt;code&gt;BindingResult&lt;/code&gt;  相关操作嘛。&lt;/p&gt;
&lt;p&gt;不过事情还没有完，异常是引发了，可我们并没有编写返回错误信息的代码呀，那参数校验失败了会响应什么数据给前端呢？&lt;/p&gt;
&lt;p&gt;我们来看一下刚才异常发生后接口响应的数据：&lt;/p&gt;
&lt;img data-src=&#34;/posts/f976ebe7/2022-02-19-14-09-15.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;没错，是直接将整个错误对象相关信息都响应给前端了！这样就很难受，不过解决这个问题也很简单，就是我们接下来要讲的全局异常处理！&lt;/p&gt;
&lt;h2 id=&#34;五-全局异常处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-全局异常处理&#34;&gt;#&lt;/a&gt; 五、全局异常处理&lt;/h2&gt;
&lt;p&gt;参数校验失败会自动引发异常，我们当然不可能再去手动捕捉异常进行处理，不然还不如用之前 &lt;code&gt;BindingResult&lt;/code&gt;  方式呢。又不想手动捕捉这个异常，又要对这个异常进行处理，那正好使用 &lt;code&gt;SpringBoot&lt;/code&gt;  全局异常处理来达到一劳永逸的效果！&lt;/p&gt;
&lt;h2 id=&#34;六-基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-基本使用&#34;&gt;#&lt;/a&gt; 六、基本使用&lt;/h2&gt;
&lt;p&gt;首先，我们需要新建一个类，在这个类上加上 &lt;code&gt;@ControllerAdvice&lt;/code&gt;  或 &lt;code&gt;@RestControllerAdvice&lt;/code&gt;  注解，这个类就配置成全局处理类了。（这个根据你的 &lt;code&gt;Controller&lt;/code&gt;  层用的是 &lt;code&gt;@Controller&lt;/code&gt;  还是 &lt;code&gt;@RestController&lt;/code&gt;  来决定）&lt;/p&gt;
&lt;p&gt;然后在类中新建方法，在方法上加上 &lt;code&gt;@ExceptionHandler&lt;/code&gt;  注解并指定你想处理的异常类型，接着在方法内编写对该异常的操作逻辑，就完成了对该异常的全局处理！&lt;/p&gt;
&lt;p&gt;我们现在就来演示一下对参数校验失败抛出的 &lt;code&gt;MethodArgumentNotValidException&lt;/code&gt;  全局处理：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestControllerAdvice&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ExceptionControllerAdvice&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@ExceptionHandler(MethodArgumentNotValidException.class)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;MethodArgumentNotValidExceptionHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MethodArgumentNotValidException e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 从异常对象中拿到ObjectError对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ObjectError objectError = e.getBindingResult().getAllErrors().get(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 然后提取错误提示信息进行返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; objectError.getDefaultMessage();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们再来看下这次校验失败后的响应数据：&lt;/p&gt;
&lt;img data-src=&#34;/posts/f976ebe7/2022-02-19-14-09-28.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;没错，这次返回的就是我们制定的错误提示信息！我们通过全局异常处理优雅的实现了我们想要的功能！以后我们再想写接口参数校验，就只需要在入参的成员变量上加上 &lt;code&gt;Validator&lt;/code&gt;  校验规则注解，然后在参数上加上 &lt;code&gt;@Valid&lt;/code&gt;  注解即可完成校验，校验失败会自动返回错误提示信息，无需任何其他代码！更多的校验思路： &lt;code&gt;SpringBoot&lt;/code&gt;  实现通用的接口参数校验&lt;/p&gt;
&lt;h2 id=&#34;七-自定义异常&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七-自定义异常&#34;&gt;#&lt;/a&gt; 七、自定义异常&lt;/h2&gt;
&lt;p&gt;全局处理当然不会只能处理一种异常，用途也不仅仅是对一个参数校验方式进行优化。在实际开发中，如何对异常处理其实是一个很麻烦的事情。传统处理异常一般有以下烦恼：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是捕获异常 &lt;code&gt;(try…catch)&lt;/code&gt;  还是抛出异常 &lt;code&gt;(throws)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是在 &lt;code&gt;controller&lt;/code&gt;  层做处理还是在 &lt;code&gt;service&lt;/code&gt;  层处理又或是在 &lt;code&gt;dao&lt;/code&gt;  层做处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理异常的方式是啥也不做，还是返回特定数据，如果返回又返回什么数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不是所有异常我们都能预先进行捕捉，如果发生了没有捕捉到的异常该怎么办？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上这些问题都可以用全局异常处理来解决，全局异常处理也叫统一异常处理，全局和统一处理代表什么？代表规范！规范有了，很多问题就会迎刃而解！&lt;/p&gt;
&lt;p&gt;全局异常处理的基本使用方式大家都已经知道了，我们接下来更进一步的规范项目中的异常处理方式：自定义异常。&lt;/p&gt;
&lt;p&gt;在很多情况下，我们需要手动抛出异常，比如在业务层当有些条件并不符合业务逻辑，我这时候就可以手动抛出异常从而触发事务回滚。那手动抛出异常最简单的方式就是 &lt;code&gt;throw new RuntimeException(&amp;quot;异常信息&amp;quot;)&lt;/code&gt;  了，不过使用自定义会更好一些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自定义异常可以携带更多的信息，不像这样只能携带一个字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目开发中经常是很多人负责不同的模块，使用自定义异常可以统一了对外异常展示的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义异常语义更加清晰明了，一看就知道是项目中手动抛出的异常。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们现在就来开始写一个自定义异常：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Getter&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;//只要getter方法，无需setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;APIException&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;RuntimeException&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; code;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;APIException&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1001&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;接口错误&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;APIException&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1001&lt;/span&gt;, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;APIException&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; code, String msg)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.code = code;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.msg = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在刚才的全局异常处理类中记得添加对我们自定义异常的处理：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ExceptionHandler(APIException.class)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;APIExceptionHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(APIException e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; e.getMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就对异常的处理就比较规范了，当然还可以添加对 &lt;code&gt;Exception&lt;/code&gt;  的处理，这样无论发生什么异常我们都能屏蔽掉然后响应数据给前端，不过建议最后项目上线时这样做，能够屏蔽掉错误信息暴露给前端，在开发中为了方便调试还是不要这样做。&lt;/p&gt;
&lt;p&gt;现在全局异常处理和自定义异常已经弄好了，不知道大家有没有发现一个问题，就是当我们抛出自定义异常的时候全局异常处理只响应了异常中的错误信息 &lt;code&gt;msg&lt;/code&gt;  给前端，并没有将错误代码 &lt;code&gt;code&lt;/code&gt;  返回。这就要引申出我们接下来要讲的东西了：数据统一响应&lt;/p&gt;
&lt;h2 id=&#34;八-数据统一响应&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#八-数据统一响应&#34;&gt;#&lt;/a&gt; 八、数据统一响应&lt;/h2&gt;
&lt;p&gt;现在我们规范好了参数校验方式和异常处理方式，然而还没有规范响应数据！比如我要获取一个分页信息数据，获取成功了呢自然就返回的数据列表，获取失败了后台就会响应异常信息，即一个字符串，就是说前端开发者压根就不知道后端响应过来的数据会是啥样的！所以，统一响应数据是前后端规范中必须要做的！&lt;/p&gt;
&lt;h2 id=&#34;九-自定义统一响应&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#九-自定义统一响应&#34;&gt;#&lt;/a&gt; 九、自定义统一响应&lt;/h2&gt;
&lt;p&gt;统一数据响应第一步肯定要做的就是我们自己自定义一个响应体类，无论后台是运行正常还是发生异常，响应给前端的数据格式是不变的！那么如何定义响应体呢？关于异常的设计：如何更优雅的设计异常&lt;/p&gt;
&lt;p&gt;可以参考我们自定义异常类，也来一个响应信息代码 &lt;code&gt;code&lt;/code&gt;  和响应信息说明 &lt;code&gt;msg&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ResultVO&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 状态码，比如1000代表响应成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; code;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 响应信息，用来说明响应情况&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 响应的具体数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; T data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ResultVO&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;success&amp;quot;&lt;/span&gt;, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ResultVO&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; code, String msg, T data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.code = code;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.msg = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.data = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们修改一下全局异常处理那的返回值：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ExceptionHandler(APIException.class)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ResultVO&amp;lt;String&amp;gt; &lt;span class=&#34;title&#34;&gt;APIExceptionHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(APIException e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 注意哦，这里返回类型是自定义响应体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ResultVO&amp;lt;&amp;gt;(e.getCode(), &lt;span class=&#34;string&#34;&gt;&amp;quot;响应失败&amp;quot;&lt;/span&gt;, e.getMsg());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ExceptionHandler(MethodArgumentNotValidException.class)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ResultVO&amp;lt;String&amp;gt; &lt;span class=&#34;title&#34;&gt;MethodArgumentNotValidExceptionHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MethodArgumentNotValidException e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ObjectError objectError = e.getBindingResult().getAllErrors().get(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 注意哦，这里返回类型是自定义响应体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ResultVO&amp;lt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;1001&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;参数校验失败&amp;quot;&lt;/span&gt;, objectError.getDefaultMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们再来看一下此时如果发生异常了会响应什么数据给前端：&lt;/p&gt;
&lt;p&gt;OK，这个异常信息响应就非常好了，状态码和响应说明还有错误提示数据都返给了前端，并且是所有异常都会返回相同的格式！异常这里搞定了，别忘了我们到接口那也要修改返回类型，我们新增一个接口好来看看效果：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/getUser&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ResultVO&amp;lt;User&amp;gt; &lt;span class=&#34;title&#34;&gt;getUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    User user = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; User();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setId(&lt;span class=&#34;number&#34;&gt;1L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setAccount(&lt;span class=&#34;string&#34;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setPassword(&lt;span class=&#34;string&#34;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setEmail(&lt;span class=&#34;string&#34;&gt;&amp;quot;123@qq.com&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ResultVO&amp;lt;&amp;gt;(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看一下如果响应正确返回的是什么效果：&lt;/p&gt;
&lt;img data-src=&#34;/posts/f976ebe7/2022-02-19-14-09-48.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;这样无论是正确响应还是发生异常，响应数据的格式都是统一的，十分规范！&lt;/p&gt;
&lt;p&gt;数据格式是规范了，不过响应码 &lt;code&gt;code&lt;/code&gt;  和响应信息 &lt;code&gt;msg&lt;/code&gt;  还没有规范呀！大家发现没有，无论是正确响应，还是异常响应，响应码和响应信息是想怎么设置就怎么设置，要是 &lt;code&gt;10&lt;/code&gt;  个开发人员对同一个类型的响应写 &lt;code&gt;10&lt;/code&gt;  个不同的响应码，那这个统一响应体的格式规范就毫无意义！所以，必须要将响应码和响应信息给规范起来。&lt;/p&gt;
&lt;h2 id=&#34;十-响应码枚举&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十-响应码枚举&#34;&gt;#&lt;/a&gt; 十、响应码枚举&lt;/h2&gt;
&lt;p&gt;要规范响应体中的响应码和响应信息用枚举简直再恰当不过了，我们现在就来创建一个响应码枚举类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Getter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ResultCode&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SUCCESS(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;操作成功&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    FAILED(&lt;span class=&#34;number&#34;&gt;1001&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;响应失败&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    VALIDATE_FAILED(&lt;span class=&#34;number&#34;&gt;1002&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;参数校验失败&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ERROR(&lt;span class=&#34;number&#34;&gt;5000&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;未知错误&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; code;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ResultCode(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; code, String msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.code = code;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.msg = msg;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后修改响应体的构造方法，让其只准接受响应码枚举来设置响应码和响应信息：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ResultVO&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;(ResultCode.SUCCESS, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ResultVO&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ResultCode resultCode, T data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.code = resultCode.getCode();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.msg = resultCode.getMsg();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.data = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后同时修改全局异常处理的响应码设置方式：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ExceptionHandler(APIException.class)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ResultVO&amp;lt;String&amp;gt; &lt;span class=&#34;title&#34;&gt;APIExceptionHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(APIException e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 注意哦，这里传递的响应码枚举&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ResultVO&amp;lt;&amp;gt;(ResultCode.FAILED, e.getMsg());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ExceptionHandler(MethodArgumentNotValidException.class)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ResultVO&amp;lt;String&amp;gt; &lt;span class=&#34;title&#34;&gt;MethodArgumentNotValidExceptionHandler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MethodArgumentNotValidException e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ObjectError objectError = e.getBindingResult().getAllErrors().get(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 注意哦，这里传递的响应码枚举&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ResultVO&amp;lt;&amp;gt;(ResultCode.VALIDATE_FAILED, objectError.getDefaultMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样响应码和响应信息只能是枚举规定的那几个，就真正做到了响应数据格式、响应码和响应信息规范化、统一化！这些可以参考： &lt;code&gt;Java&lt;/code&gt;  项目构建基础：统一结果，统一异常，统一日志&lt;/p&gt;
&lt;h2 id=&#34;十一-全局处理响应数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十一-全局处理响应数据&#34;&gt;#&lt;/a&gt; 十一、全局处理响应数据&lt;/h2&gt;
&lt;p&gt;接口返回统一响应体 + 异常也返回统一响应体，其实这样已经很好了，但还是有可以优化的地方。要知道一个项目下来定义的接口搞个几百个太正常不过了，要是每一个接口返回数据时都要用响应体来包装一下好像有点麻烦，有没有办法省去这个包装过程呢？当然是有滴，还是要用到全局处理。&lt;/p&gt;
&lt;p&gt;首先，先创建一个类加上注解使其成为全局处理类。然后继承 &lt;code&gt;ResponseBodyAdvice&lt;/code&gt;  接口重写其中的方法，即可对我们的 &lt;code&gt;controller&lt;/code&gt;  进行增强操作，具体看代码和注释：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestControllerAdvice(basePackages = &amp;#123;&amp;quot;com.cy.controller&amp;quot;&amp;#125;)&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 注意哦，这里要加上需要扫描的包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ResponseControllerAdvice&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ResponseBodyAdvice&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;Object&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// supports方法是来给定条件判断是否该调用beforeBodyWrite，MethodParameter里面有各种数据，false就不调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;supports&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MethodParameter returnType, Class&amp;lt;? extends HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; aClass)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果接口返回的类型本身就是ResultVO那就没有必要进行额外的操作，返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; !returnType.getGenericParameterType().equals(ResultVO.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 响应结果拦截根据业务去封装返回体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     **/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title&#34;&gt;beforeBodyWrite&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object data, MethodParameter returnType, MediaType mediaType, Class&amp;lt;? extends HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; aClass, ServerHttpRequest request, ServerHttpResponse response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// String类型不能直接包装，所以要进行些特别的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (returnType.getGenericParameterType().equals(String.class)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ObjectMapper objectMapper = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ObjectMapper();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 将数据包装在ResultVO里后，再转换为json字符串响应给前端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; objectMapper.writeValueAsString(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ResultVO&amp;lt;&amp;gt;(data));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (JsonProcessingException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; APIException(&lt;span class=&#34;string&#34;&gt;&amp;quot;返回String类型错误&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 将原本的数据包装在ResultVO里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ResultVO&amp;lt;&amp;gt;(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重写的这两个方法是用来在 &lt;code&gt;controller&lt;/code&gt;  将数据进行返回前进行增强操作， &lt;code&gt;supports&lt;/code&gt;  方法要返回为 &lt;code&gt;true&lt;/code&gt;  才会执行 &lt;code&gt;beforeBodyWrite&lt;/code&gt;  方法，所以如果有些情况不需要进行增强操作可以在 &lt;code&gt;supports&lt;/code&gt;  方法里进行判断。对返回数据进行真正的操作还是在 &lt;code&gt;beforeBodyWrite&lt;/code&gt;  方法中，我们可以直接在该方法里包装数据，这样就不需要每个接口都进行数据包装了，省去了很多麻烦。&lt;/p&gt;
&lt;p&gt;我们可以现在去掉接口的数据包装来看下效果：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/getUser&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; User &lt;span class=&#34;title&#34;&gt;getUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    User user = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; User();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setId(&lt;span class=&#34;number&#34;&gt;1L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setAccount(&lt;span class=&#34;string&#34;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setPassword(&lt;span class=&#34;string&#34;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    user.setEmail(&lt;span class=&#34;string&#34;&gt;&amp;quot;123@qq.com&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 注意哦，这里是直接返回的User类型，并没有用ResultVO进行包装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; user;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们来看下响应数据：&lt;/p&gt;
&lt;img data-src=&#34;/posts/f976ebe7/2022-02-19-14-10-03.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;成功对数据进行了包装！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： &lt;code&gt;beforeBodyWrite&lt;/code&gt;  方法里包装数据无法对 &lt;code&gt;String&lt;/code&gt;  类型的数据直接进行强转，所以要进行特殊处理，这里不讲过多的细节，有兴趣可以自行深入了解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;十二-总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十二-总结&#34;&gt;#&lt;/a&gt; 十二、总结&lt;/h2&gt;
&lt;p&gt;自此整个后端接口基本体系就构建完毕了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;Validator&lt;/code&gt;  + 自动抛出异常来完成了方便的参数校验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过全局异常处理 + 自定义异常完成了异常操作的规范&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过数据统一响应完成了响应数据的规范&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个方面组装非常优雅的完成了后端接口的协调，让开发人员有更多的经历注重业务逻辑代码，轻松构建后端接口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/f23f1351/</guid>
            <title>equals与==区别</title>
            <link>https://smile1231.github.io/posts/f23f1351/</link>
            <category>Java</category>
            <category>Java面试</category>
            <pubDate>Tue, 15 Feb 2022 22:27:23 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;equals与-区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#equals与-区别&#34;&gt;#&lt;/a&gt;  &lt;code&gt;equals&lt;/code&gt;  与  &lt;code&gt;==&lt;/code&gt;  区别&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;  中数据类型分两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本类型： &lt;code&gt;long,int,byte,float,double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对象类型： &lt;code&gt;Long,Integer,Byte,Float,Double&lt;/code&gt;  其它一切 &lt;code&gt;java&lt;/code&gt;  提供的，或者你自己创建的类。&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;其中 &lt;code&gt;Long&lt;/code&gt;  叫  &lt;code&gt;long&lt;/code&gt;  的包装类。 &lt;code&gt;Integer、Byte&lt;/code&gt;  和 &lt;code&gt;Float&lt;/code&gt;  也类似，一般包装类的名字首写是数值名的大写开头。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是包装类？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 &lt;code&gt;java&lt;/code&gt;  中有时候的运算必须是两个类对象之间进行的，不允许对象与数字之间进行运算。所以需要有一个对象，这个对象把数字进行了一下包装，这样这个对象就可以和另一个对象进行运算了。&lt;/p&gt;
&lt;p&gt;比如我们可以定义一个类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Long&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i)&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.i=i;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个 &lt;code&gt;Long&lt;/code&gt;  就是一个包装类，它包装了一个整数值，然后可以在里面写一些运算符重载的方法使它支持某些运算。这个时候可以赋值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Long l = new Long(10);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在变量  &lt;code&gt;l&lt;/code&gt;  就是一个对象，不是一个数字。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;long&lt;/code&gt;  是原始数据类型，没有属性方法，只能进行数学运算， &lt;code&gt;Long&lt;/code&gt;  是 &lt;code&gt;long&lt;/code&gt;  相对应的引用数据类型，它有方法和属性，一个没方法属性，一个有方法属性，这就是它们的区别。&lt;/p&gt;
&lt;h2 id=&#34;解读&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解读&#34;&gt;#&lt;/a&gt;  &lt;code&gt;==&lt;/code&gt;  解读&lt;/h2&gt;
&lt;p&gt;对于基本类型和引用类型  &lt;code&gt;==&lt;/code&gt;  的作用效果是不同的，如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本类型：比较的是值是否相同；&lt;/li&gt;
&lt;li&gt;引用类型：比较的是引用是否相同；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String x = &lt;span class=&#34;string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String y = &lt;span class=&#34;string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String z = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String(&lt;span class=&#34;string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(x==y); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(x==z); &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(x.equals(y)); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(x.equals(z)); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码解读：因为  &lt;code&gt;x&lt;/code&gt;  和  &lt;code&gt;y&lt;/code&gt;  指向的是同一个引用，所以  &lt;code&gt;== &lt;/code&gt; 也是  &lt;code&gt;true&lt;/code&gt; ，而  &lt;code&gt;new String()&lt;/code&gt;  方法则重写开辟了内存空间，所以  &lt;code&gt;== &lt;/code&gt; 结果为  &lt;code&gt;false&lt;/code&gt; ，而  &lt;code&gt;equals&lt;/code&gt;  比较的一直是值，所以结果都为  &lt;code&gt;true&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;equals-解读&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#equals-解读&#34;&gt;#&lt;/a&gt;  &lt;code&gt;equals&lt;/code&gt;  解读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;equals&lt;/code&gt;  本质上就是  &lt;code&gt;==&lt;/code&gt; ，只不过 &lt;code&gt; String&lt;/code&gt;  和  &lt;code&gt;Integer&lt;/code&gt;  等重写了  &lt;code&gt;equals&lt;/code&gt;  方法，把它变成了值比较。看下面的代码就明白了。&lt;/p&gt;
&lt;p&gt;首先来看默认情况下  &lt;code&gt;equals&lt;/code&gt;  比较一个有相同值的对象，代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Cat&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Cat&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String name)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat c1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Cat(&lt;span class=&#34;string&#34;&gt;&amp;quot;王磊&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Cat c2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Cat(&lt;span class=&#34;string&#34;&gt;&amp;quot;王磊&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(c1.equals(c2)); &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果出乎我们的意料，竟然是  &lt;code&gt;false？&lt;/code&gt; 这是怎么回事，看了  &lt;code&gt;equals &lt;/code&gt; 源码就知道了，源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object obj)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt; == obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原来  &lt;code&gt;equals&lt;/code&gt;  本质上就是 ==。&lt;br&gt;
那问题来了，两个相同值的 &lt;code&gt;String&lt;/code&gt;  对象，为什么返回的是 &lt;code&gt; true？&lt;/code&gt; 代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String s1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String(&lt;span class=&#34;string&#34;&gt;&amp;quot;老王&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String s2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String(&lt;span class=&#34;string&#34;&gt;&amp;quot;老王&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(s1.equals(s2)); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的，当我们进入  &lt;code&gt;String&lt;/code&gt;  的  &lt;code&gt;equals&lt;/code&gt;  方法，找到了答案，代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object anObject)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt; == anObject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (anObject &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; String) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String anotherString = (String)anObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n = value.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n == anotherString.value.length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; v1[] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; v2[] = anotherString.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (n-- != &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (v1[i] != v2[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原来是  &lt;code&gt;String&lt;/code&gt;  重写了  &lt;code&gt;Object&lt;/code&gt;  的  &lt;code&gt;equals&lt;/code&gt;  方法，把引用比较改成了值比较。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;总体来说，== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而  &lt;code&gt;equals&lt;/code&gt;  默认情况下是引用比较，只是很多类重写了  &lt;code&gt;equals&lt;/code&gt;  方法，比如  &lt;code&gt;String、Integer&lt;/code&gt;  等把它变成了值比较，所以一般情况下  &lt;code&gt;equals&lt;/code&gt;  比较的是值是否相等。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/b42f0c87/</guid>
            <title>Cache、Cookie、Session、Token</title>
            <link>https://smile1231.github.io/posts/b42f0c87/</link>
            <category>Java</category>
            <category>Cache</category>
            <category>Cookie</category>
            <category>Session</category>
            <category>Java面试</category>
            <pubDate>Tue, 15 Feb 2022 21:37:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;cache-cookie-session-token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cache-cookie-session-token&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Cache、Cookie、Session、Token&lt;/code&gt;&lt;/h1&gt;
&lt;h2 id=&#34;协议是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#协议是什么&#34;&gt;#&lt;/a&gt; 协议是什么&lt;/h2&gt;
&lt;p&gt;在接口测试中，客户端发送的 &lt;code&gt;request&lt;/code&gt;  至服务端反馈的 &lt;code&gt;response&lt;/code&gt;  中传输的数据就是接口测试最重要的部分&lt;/p&gt;
&lt;h2 id=&#34;cache是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cache是什么&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Cache&lt;/code&gt;  是什么&lt;/h2&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;打开浏览器或者应用的时候，用户的等待时间叫做响应时间，打开速度影响到用户体验，提高反应速度的一个方法就是使用缓存策略，缓存策略能带来什么好处呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;减少延迟：因为网页请求指向的是更接近的客户端缓存，而不是资源服务器，所以花费的时间更短，提高用户体验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;降低网络负荷：因为缓存可以重复使用，节省带宽，降低网络负荷，也就可以更加节省用户的流量&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;缓存一般分为以下几种：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;浏览器缓存　　　　&lt;br&gt;
（缓存在本地）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代理缓存　　　　　&lt;br&gt;
（缓存在网络路由，也就是共享缓存）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网关缓存　　　　　&lt;br&gt;
(缓存在 CDN)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;缓存策略一般分两种情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缓存策略一般分两种情况&#34;&gt;#&lt;/a&gt; 缓存策略一般分两种情况：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;强缓存　　　　(直接在本地缓存中读取资源)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;协商缓存　　  (通过服务器告知是否能用本地缓存，先和服务器协商，如果可以，就从本地缓存中读取。如果不可以，就返回最新的资源)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cookie&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Cookie&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Cookie&lt;/code&gt;  的内容是保存一小段文本信息。组成一个通行证，用来处理客户端无状态协议的一种解决方案&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cookie&lt;/code&gt;  使用原理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用户会提供信息提交给服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务端向客户端回传相应数据的同时，也会发回 &lt;code&gt;Cookie&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端接收到服务器相应后，浏览器将 &lt;code&gt;Cookie&lt;/code&gt;  保存在同一个位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端向服务端发送请求的实话，会把 &lt;code&gt;Cookie&lt;/code&gt;  再次发回服务端&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;获取cookie的途径&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取cookie的途径&#34;&gt;#&lt;/a&gt; 获取 &lt;code&gt;Cookie&lt;/code&gt;  的途径&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;浏览器自带的开发工具或者抓包工具 &lt;code&gt;（Fiddler,Charles）&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地获取（ &lt;code&gt;ie&lt;/code&gt;  的路径为 &lt;code&gt;C&lt;/code&gt;  盘 &lt;code&gt;appdata/Microsoft/Windows/Cookies，Firefox位于C盘appdata/Mozilla/Firefox/Profiles，Charome位于C盘appdata/Goole/Chrome/User Date /Default）&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;js&lt;/code&gt;  代码查看 (浏览器地址栏输入 &lt;code&gt;Javascript:alert(document.cookie)&lt;/code&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;session是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#session是什么&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Session&lt;/code&gt;  是什么&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Session&lt;/code&gt;  是另外一种记录用户状态的机制，不同于 &lt;code&gt;Cookie&lt;/code&gt;  的是 &lt;code&gt;Session&lt;/code&gt;  是保存在服务器上，用来解决服务端对无状态协议&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Session&lt;/code&gt;  的传输步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;服务端创建 &lt;code&gt;Session&lt;/code&gt; ，并创建唯一的 &lt;code&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器将 &lt;code&gt;id&lt;/code&gt;  发给客户端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端再次发送请求的实话带上 &lt;code&gt;Session&lt;/code&gt;  的 &lt;code&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器接收到请求后根据 &lt;code&gt;Seesion&lt;/code&gt;  的 &lt;code&gt;id&lt;/code&gt;  找到相应的 &lt;code&gt;Session&lt;/code&gt; ，完成相应&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;session的传输媒介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#session的传输媒介&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Session&lt;/code&gt;  的传输媒介&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;Cookie&lt;/code&gt;  传输&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;URL&lt;/code&gt;  地址重写&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;很多同学不知道 &lt;code&gt;Session&lt;/code&gt;  和 &lt;code&gt;Cookie&lt;/code&gt;  的区别，那么我来大概讲解一下我理解的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存储位置不同：大多数情况 &lt;code&gt;Cookie&lt;/code&gt;  存储在浏览器， &lt;code&gt;Session&lt;/code&gt;  存储在服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储容量不同：单个 &lt;code&gt;Cookie&lt;/code&gt;  保存的数据不得超过 &lt;code&gt;4kb&lt;/code&gt; ，一个站点最多 &lt;code&gt;20&lt;/code&gt;  个 &lt;code&gt;Cookie&lt;/code&gt; ， &lt;code&gt;Session&lt;/code&gt;  一般情况下没有上限，不过建议不要存放太多东西影响性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存取方式不同： &lt;code&gt;Cookie&lt;/code&gt;  只能用 &lt;code&gt;ASCII&lt;/code&gt;  字符串。通过编码方式获取 &lt;code&gt;Unicode&lt;/code&gt;  字符或者 &lt;code&gt;二进制&lt;/code&gt; 数据。不好存储复杂的信息， &lt;code&gt;Session&lt;/code&gt;  能存储任何类型的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐私策略不同： &lt;code&gt;Cookie&lt;/code&gt;  放在客户端，可以进行 &lt;code&gt;Cookie&lt;/code&gt;  欺骗，所以不安全。 &lt;code&gt;Session&lt;/code&gt;  放在服务端，更加安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有效期不同： &lt;code&gt;Cookie&lt;/code&gt;  可以设置属性达到长期有效， &lt;code&gt;Session&lt;/code&gt;  依赖于 &lt;code&gt;JSESSIONID&lt;/code&gt;  的 &lt;code&gt;Cookie&lt;/code&gt; ， &lt;code&gt;Cookie JSESSIONID&lt;/code&gt;  的过期时间默认为 &lt;code&gt;-1&lt;/code&gt; ，只需要关闭窗口 &lt;code&gt;Session&lt;/code&gt;  就会失效，，就算不依赖 &lt;code&gt;Cookie&lt;/code&gt; ，&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;用 &lt;code&gt;UrL&lt;/code&gt;  重写也不能完成，如果 &lt;code&gt;Session&lt;/code&gt;  超时时间过长，容易导致内存溢出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;服务器压力不同： &lt;code&gt;Cookie&lt;/code&gt;  保存子本地。不存在服务端压力。 &lt;code&gt;Session&lt;/code&gt;  保存在服务端，每个用户产生一个 &lt;code&gt;Session&lt;/code&gt; ，并发过多非常占用内存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;7. 浏览器支持不同：如果浏览器禁用 &lt;code&gt;Cookie&lt;/code&gt; ，那么 &lt;code&gt;Cookie&lt;/code&gt;  直接失效。 &lt;code&gt;Session&lt;/code&gt;  比较好点。可以用 &lt;code&gt;URL&lt;/code&gt;  重写&lt;/p&gt;
&lt;p&gt;8. 跨域不同： &lt;code&gt;Cookie&lt;/code&gt;  支持跨域访问， &lt;code&gt;Session&lt;/code&gt;  不支持跨域&lt;/p&gt;
&lt;h2 id=&#34;token是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#token是什么&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Token&lt;/code&gt;  是什么：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当客户端第一次请求的实话，发送用户信息到服务端，服务器对用户信息使用 &lt;code&gt;HSA256&lt;/code&gt;  算法以及密钥进行签名，再将这个签名和数据一次作为 &lt;code&gt;Token&lt;/code&gt;  返回给客户端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务端不保存 &lt;code&gt;Token&lt;/code&gt; ，客户端保存 &lt;code&gt;Token&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端再次请求的实话，将 &lt;code&gt;Token&lt;/code&gt;  发送给服务端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务端同样用 &lt;code&gt;HSA256&lt;/code&gt;  算法和同样的密钥对数据再一次计算签名，和 &lt;code&gt;Token&lt;/code&gt;  中的签名做比较（如果相同，直接登录，不相同，登录失败）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/166a1445/</guid>
            <title>位，字节， 字符</title>
            <link>https://smile1231.github.io/posts/166a1445/</link>
            <category>Java</category>
            <category>Java面试</category>
            <category>操作系统</category>
            <pubDate>Tue, 15 Feb 2022 21:37:36 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;位字节-字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#位字节-字符&#34;&gt;#&lt;/a&gt; 位，字节， 字符&lt;/h2&gt;
&lt;h3 id=&#34;1-位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-位&#34;&gt;#&lt;/a&gt; 1. 位&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; 数据存储的最小单位。每个二进制数字0或者1就是1个位,比特为 bit ，简称 b
&lt;/code&gt;&lt;/pre&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;2-字节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-字节&#34;&gt;#&lt;/a&gt; 2. 字节&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; 8个位构成一个字节；即：1 byte (字节)= 8 bit(位)；
 Byte(字节)，简称B。byte是基本数据类型，Byte是byte的包装类
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;1 KB&lt;/code&gt;  =  &lt;code&gt;1024 B&lt;/code&gt;  (字节)；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1 MB&lt;/code&gt;  =  &lt;code&gt;1024 KB&lt;/code&gt; ;  ( &lt;code&gt;2^20 B&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1 GB&lt;/code&gt;  =  &lt;code&gt;1024 MB&lt;/code&gt; ;  ( &lt;code&gt;2^20 KB&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1 TB&lt;/code&gt;  =  &lt;code&gt;1024 GB&lt;/code&gt; ;  ( &lt;code&gt;2^30 KB&lt;/code&gt; )&lt;/p&gt;
&lt;h3 id=&#34;3字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3字符&#34;&gt;#&lt;/a&gt; 3. 字符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;a、A、中、+、*、の......&lt;/code&gt;  均表示一个字符；&lt;/p&gt;
&lt;p&gt;字符 (汉字和汉字标点符号都算字符)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 一般 utf-8 编码下，一个汉字 字符 占用 3 个 字节；

 一般 gbk 编码下，一个汉字  字符  占用 2 个 字节；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4字符集&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4字符集&#34;&gt;#&lt;/a&gt; 4. 字符集&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; 即各种各个字符的集合，也就是说哪些汉字，字母（A、b、c）和符号（空格、引号..）会被收入标准中；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5编码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5编码&#34;&gt;#&lt;/a&gt; 5. 编码&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ASCII&lt;/code&gt;  码：一个英文字母（不分大小写）占 &lt;code&gt;一个字节&lt;/code&gt; 的空间，一个中文汉字占 &lt;code&gt;两个字节&lt;/code&gt; 的空间。一个二进制数字序列，在计算机中作为一个数字单元，一般为 8 位二进制数，换算为十进制。最小值 &lt;code&gt;-128&lt;/code&gt; ，最大值 &lt;code&gt;127&lt;/code&gt; 。如一个 &lt;code&gt;ASCII&lt;/code&gt;  码就是 &lt;code&gt;一个字节&lt;/code&gt; ， &lt;code&gt;0~127&lt;/code&gt;  (总共有 &lt;code&gt;128&lt;/code&gt;  个 &lt;code&gt;ASCII&lt;/code&gt;  码)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;UTF-8&lt;/code&gt;  编码：一个 &lt;code&gt;英文字符&lt;/code&gt; 等于 &lt;code&gt;一个字节&lt;/code&gt; ，一个 &lt;code&gt;中文（含繁体）&lt;/code&gt; 等于 &lt;code&gt;三个字节&lt;/code&gt; 。 &lt;code&gt;中文标点&lt;/code&gt; 占 &lt;code&gt;三个字节&lt;/code&gt; ，英文标点占 &lt;code&gt;一个字节&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Unicode&lt;/code&gt;  编码：一个 &lt;code&gt;英文&lt;/code&gt; 等于 &lt;code&gt;两个字节&lt;/code&gt; ，一个 &lt;code&gt;中文&lt;/code&gt; （含繁体）等于 &lt;code&gt;两个字节&lt;/code&gt; 。 &lt;code&gt;中文标点&lt;/code&gt; 占 &lt;code&gt;两个字节&lt;/code&gt; ， &lt;code&gt;英文标点&lt;/code&gt; 占 &lt;code&gt;两个字节&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;基本数据类型范围&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本数据类型范围&#34;&gt;#&lt;/a&gt; 基本数据类型范围&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;JAVA&lt;/code&gt;  中一共有八种基本数据类型，他们分别是： &lt;code&gt;byte、short、int、long、float、double、char、boolean&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;byte&lt;/code&gt;  的取值范围为  &lt;code&gt;-128&lt;/code&gt;  ~  &lt;code&gt;127&lt;/code&gt; , 占用 &lt;code&gt;一个&lt;/code&gt; 字节 ( &lt;code&gt;-2^7&lt;/code&gt;  到  &lt;code&gt;(2^7)-1&lt;/code&gt;  )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short&lt;/code&gt;  的取值范围为  &lt;code&gt;-32768&lt;/code&gt;  ～  &lt;code&gt;32767&lt;/code&gt; ， 占用  &lt;code&gt;两个&lt;/code&gt;  字节 ( &lt;code&gt;-2^15&lt;/code&gt;  到  &lt;code&gt;(2^31)-1&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;  的取值范围为  &lt;code&gt;-2147483648&lt;/code&gt; &lt;sub&gt;``2147483647``(``-2^31``&lt;/sub&gt; &lt;code&gt;(2^31)-1&lt;/code&gt; ) , 占用 &lt;code&gt;四个个&lt;/code&gt; 字节&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long&lt;/code&gt;  的取值范围为（ &lt;code&gt;-9223372036854774808&lt;/code&gt;  ~  &lt;code&gt;9223372036854774807&lt;/code&gt; ）, 占用 &lt;code&gt;8个字节&lt;/code&gt; （ &lt;code&gt;-2^63&lt;/code&gt;  到  &lt;code&gt;(2^63)-1&lt;/code&gt; ）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到 &lt;code&gt;byte&lt;/code&gt;  和 &lt;code&gt;short&lt;/code&gt;  的取值范围比较小，而 &lt;code&gt;long&lt;/code&gt;  的取值范围太大，占用的空间多，基本上 &lt;code&gt;int&lt;/code&gt;  可以满足我们的日常的计算了，而且 &lt;code&gt;int&lt;/code&gt;  也是使用的最多的整型类型了。 在通常情况下，如果 &lt;code&gt;JAVA&lt;/code&gt;  中出现了一个整数数字比如 &lt;code&gt;35&lt;/code&gt; ，那么这个数字就是 &lt;code&gt;int&lt;/code&gt;  型的，如果我们希望它是 &lt;code&gt;byte&lt;/code&gt;  型的，可以在数据后加上大写的  &lt;code&gt;B&lt;/code&gt; ： &lt;code&gt;35B&lt;/code&gt; ，表示它是 &lt;code&gt;byte&lt;/code&gt;  型的。同样的 &lt;code&gt;35S&lt;/code&gt;  表示 &lt;code&gt;short&lt;/code&gt;  型， &lt;code&gt;35L&lt;/code&gt;  表示 &lt;code&gt;long&lt;/code&gt;  型的，表示 &lt;code&gt;int&lt;/code&gt;  我们可以什么都不用加，但是如果要表示 &lt;code&gt;long&lt;/code&gt;  型的，就一定要在数据后面加 &lt;code&gt;“L”&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;浮点型  &lt;code&gt;float&lt;/code&gt;  和 &lt;code&gt;double&lt;/code&gt;  是表示浮点型的数据类型，他们之间的区别在于他们的精确度不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt;   &lt;code&gt;3.402823e+38 ~ 1.401298e-45&lt;/code&gt; （ &lt;code&gt;e+38&lt;/code&gt;  表示是乘以 &lt;code&gt;10&lt;/code&gt;  的 &lt;code&gt;38&lt;/code&gt;  次方，同样， &lt;code&gt;e-45&lt;/code&gt;  表示乘以 &lt;code&gt;10&lt;/code&gt;  的负 &lt;code&gt;45&lt;/code&gt;  次方）, 占用 &lt;code&gt;4个字节 &lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;double&lt;/code&gt;   &lt;code&gt;1.797693e+308 ~ 4.9000000e-324&lt;/code&gt;  占用 &lt;code&gt;8个字节&lt;/code&gt;  .  &lt;code&gt;double&lt;/code&gt;  型比 &lt;code&gt;float&lt;/code&gt;  型存储范围更大，精度更高，所以通常的浮点型的数据在不声明的情况下都是 &lt;code&gt;double&lt;/code&gt;  型的，如果要表示一个数据是 &lt;code&gt;float&lt;/code&gt;  型的，可以在数据后面加上 &lt;code&gt;“F”&lt;/code&gt; 。 浮点型的数据是不能完全精确的，所以有的时候在计算的时候可能会在小数点最后几位出现浮动，这是正常的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt;  型（布尔型） 这个类型只有两个值， &lt;code&gt;true&lt;/code&gt;  和 &lt;code&gt;false&lt;/code&gt; （真和非真）  &lt;code&gt;boolean t = true&lt;/code&gt; ；  &lt;code&gt;boolean f = false；&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;char&lt;/code&gt;  型（文本型） 用于存放字符的数据类型，占用 &lt;code&gt;2个字节&lt;/code&gt; ，采用 &lt;code&gt;unicode&lt;/code&gt;  编码，它的前 &lt;code&gt;128字节&lt;/code&gt; 编码与 &lt;code&gt;ASCII&lt;/code&gt;  兼容 字符的存储范围在 &lt;code&gt;\u0000~\uFFFF&lt;/code&gt; ，在定义字符型的数据时候要注意加 &lt;code&gt;&#39; &#39;&lt;/code&gt; ，比如 &lt;code&gt; &#39;1&#39;&lt;/code&gt;  表示字符 &lt;code&gt;&#39;1&#39;&lt;/code&gt;  而不是数值 &lt;code&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;char c = &#39; 1 &#39;&lt;/code&gt; ; 我们试着输出 &lt;code&gt;c&lt;/code&gt;  看看， &lt;code&gt;System.out.println(c)&lt;/code&gt; ;&lt;/li&gt;
&lt;li&gt;结果就是 &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;而如果我们这样输出呢 &lt;code&gt;System.out.println(c+0)&lt;/code&gt; ; 结果却变成了 &lt;code&gt;49&lt;/code&gt; 。 如果我们这样定义 &lt;code&gt;c&lt;/code&gt;  看看  &lt;code&gt;char c = &#39; \u0031 &#39;&lt;/code&gt; ;&lt;/li&gt;
&lt;li&gt;输出的结果仍然是 &lt;code&gt;1&lt;/code&gt; ，&lt;/li&gt;
&lt;li&gt;这是因为字符 &lt;code&gt;&#39;1&#39;&lt;/code&gt;  对应着 unicode 编码就是 &lt;code&gt;\u0031&lt;/code&gt; ,  &lt;code&gt;char c1 = &#39;h&#39;&lt;/code&gt; , &lt;code&gt;c2 = &#39;e&#39;&lt;/code&gt; , &lt;code&gt;c3=&#39;l&#39;&lt;/code&gt; , &lt;code&gt;c4=&#39;l&#39;&lt;/code&gt; , &lt;code&gt;c5 = &#39;o&#39;&lt;/code&gt; ;&lt;/li&gt;
&lt;li&gt;&lt;code&gt; System.out.print(c1);&lt;/code&gt;   &lt;code&gt;System.out.print(c2);&lt;/code&gt;   &lt;code&gt;System.out.print(c3);&lt;/code&gt;   &lt;code&gt;System.out.print(c4);&lt;/code&gt;   &lt;code&gt;Sytem.out.print(c5);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;PrimitiveTypeTest&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// byte  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;基本类型：byte 二进制位数：&amp;quot;&lt;/span&gt; + Byte.SIZE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;包装类：java.lang.Byte&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最小值：Byte.MIN_VALUE=&amp;quot;&lt;/span&gt; + Byte.MIN_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最大值：Byte.MAX_VALUE=&amp;quot;&lt;/span&gt; + Byte.MAX_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// short  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;基本类型：short 二进制位数：&amp;quot;&lt;/span&gt; + Short.SIZE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;包装类：java.lang.Short&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最小值：Short.MIN_VALUE=&amp;quot;&lt;/span&gt; + Short.MIN_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最大值：Short.MAX_VALUE=&amp;quot;&lt;/span&gt; + Short.MAX_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// int  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;基本类型：int 二进制位数：&amp;quot;&lt;/span&gt; + Integer.SIZE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;包装类：java.lang.Integer&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最小值：Integer.MIN_VALUE=&amp;quot;&lt;/span&gt; + Integer.MIN_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最大值：Integer.MAX_VALUE=&amp;quot;&lt;/span&gt; + Integer.MAX_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// long  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;基本类型：long 二进制位数：&amp;quot;&lt;/span&gt; + Long.SIZE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;包装类：java.lang.Long&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最小值：Long.MIN_VALUE=&amp;quot;&lt;/span&gt; + Long.MIN_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最大值：Long.MAX_VALUE=&amp;quot;&lt;/span&gt; + Long.MAX_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// float  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;基本类型：float 二进制位数：&amp;quot;&lt;/span&gt; + Float.SIZE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;包装类：java.lang.Float&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最小值：Float.MIN_VALUE=&amp;quot;&lt;/span&gt; + Float.MIN_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最大值：Float.MAX_VALUE=&amp;quot;&lt;/span&gt; + Float.MAX_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// double  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;基本类型：double 二进制位数：&amp;quot;&lt;/span&gt; + Double.SIZE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;包装类：java.lang.Double&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最小值：Double.MIN_VALUE=&amp;quot;&lt;/span&gt; + Double.MIN_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最大值：Double.MAX_VALUE=&amp;quot;&lt;/span&gt; + Double.MAX_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// char  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;基本类型：char 二进制位数：&amp;quot;&lt;/span&gt; + Character.SIZE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;包装类：java.lang.Character&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最小值：Character.MIN_VALUE=&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                + (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;) Character.MIN_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最大值：Character.MAX_VALUE=&amp;quot;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                + (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;) Character.MAX_VALUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;基本类型：&lt;span class=&#34;keyword&#34;&gt;byte&lt;/span&gt; 二进制位数：&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;包装类：java.lang.Byte&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最小值：Byte.MIN_VALUE=-&lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最大值：Byte.MAX_VALUE=&lt;span class=&#34;number&#34;&gt;127&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;基本类型：&lt;span class=&#34;keyword&#34;&gt;short&lt;/span&gt; 二进制位数：&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;包装类：java.lang.Short&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最小值：Short.MIN_VALUE=-&lt;span class=&#34;number&#34;&gt;32768&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最大值：Short.MAX_VALUE=&lt;span class=&#34;number&#34;&gt;32767&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;基本类型：&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; 二进制位数：&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;包装类：java.lang.Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最小值：Integer.MIN_VALUE=-&lt;span class=&#34;number&#34;&gt;2147483648&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最大值：Integer.MAX_VALUE=&lt;span class=&#34;number&#34;&gt;2147483647&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;基本类型：&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; 二进制位数：&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;包装类：java.lang.Long&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最小值：Long.MIN_VALUE=-&lt;span class=&#34;number&#34;&gt;9223372036854775808&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最大值：Long.MAX_VALUE=&lt;span class=&#34;number&#34;&gt;9223372036854775807&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;基本类型：&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; 二进制位数：&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;包装类：java.lang.Float&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最小值：Float.MIN_VALUE=&lt;span class=&#34;number&#34;&gt;1.4E-45&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最大值：Float.MAX_VALUE=&lt;span class=&#34;number&#34;&gt;3.4028235E38&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;基本类型：&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; 二进制位数：&lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;包装类：java.lang.Double&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最小值：Double.MIN_VALUE=&lt;span class=&#34;number&#34;&gt;4.9E-324&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最大值：Double.MAX_VALUE=&lt;span class=&#34;number&#34;&gt;1.7976931348623157E308&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;基本类型：&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; 二进制位数：&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;包装类：java.lang.Character&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最小值：Character.MIN_VALUE=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;最大值：Character.MAX_VALUE=&lt;span class=&#34;number&#34;&gt;65535&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/59de1824/</guid>
            <title>spring中/和/*和/**的区别</title>
            <link>https://smile1231.github.io/posts/59de1824/</link>
            <category>Java</category>
            <category>Java面试</category>
            <category>SpringBoot</category>
            <pubDate>Tue, 15 Feb 2022 21:35:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;spring中和和的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring中和和的区别&#34;&gt;#&lt;/a&gt; spring 中 &lt;code&gt;/&lt;/code&gt;  和 &lt;code&gt;/*&lt;/code&gt;  和 &lt;code&gt;/**&lt;/code&gt;  的区别&lt;/h1&gt;
&lt;h2 id=&#34;和-区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#和-区别&#34;&gt;#&lt;/a&gt;  &lt;code&gt;/&lt;/code&gt;  和  &lt;code&gt;/*&lt;/code&gt;  区别&lt;/h2&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/ 拦截所有请求 包括静态资源和动态请求 但是不拦截jsp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/* 拦截所有请求 包括静态资源和动态请求 也拦截jsp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;区别就在于&lt;span class=&#34;regexp&#34;&gt;/ 不拦截jsp /&lt;/span&gt;*拦截jsp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;和-区别-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#和-区别-2&#34;&gt;#&lt;/a&gt;  &lt;code&gt;/*&lt;/code&gt;  和  &lt;code&gt;/**&lt;/code&gt;  区别&lt;/h2&gt;
&lt;figure class=&#34;highlight asciidoc&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/&lt;span class=&#34;strong&#34;&gt;** 的意思是所有文件夹及里面的子文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;strong&#34;&gt;/*&lt;/span&gt; 是所有文件夹，不含子文件夹&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;注意点案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注意点案例&#34;&gt;#&lt;/a&gt; 注意点案例&lt;/h2&gt;
&lt;p&gt;理解下面的案例有助于理解如何使用&lt;/p&gt;
&lt;p&gt;场景：当我在客户端调用 &lt;code&gt;URL&lt;/code&gt; ： &lt;code&gt;/user/list&lt;/code&gt;  然后返回 &lt;code&gt;user.jsp&lt;/code&gt;  视图，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当配置的是 &lt;code&gt;/&lt;/code&gt; ： &lt;code&gt;DispathcherServlet&lt;/code&gt;  拿到这个请求然后返回对应的 &lt;code&gt;controller&lt;/code&gt; ，然后依据 &lt;code&gt;Dispather Type&lt;/code&gt;  为 &lt;code&gt;Forward&lt;/code&gt;  类型转发到 &lt;code&gt;user.jsp&lt;/code&gt;  视图，即就是请求 &lt;code&gt;user.jsp&lt;/code&gt;  视图 ( &lt;code&gt;/user/user.jsp&lt;/code&gt; )，此时 &lt;code&gt;Dispather&lt;/code&gt;  没有拦截 &lt;code&gt;/user/user.jsp&lt;/code&gt; , 因为此时你配置的是默认的 &lt;code&gt;/&lt;/code&gt; ，就顺利的交给 &lt;code&gt;ModleAndView&lt;/code&gt;  去处理显示了。&lt;/li&gt;
&lt;li&gt;当配置的是 &lt;code&gt;/*&lt;/code&gt; ： &lt;code&gt;DispathcherServlet&lt;/code&gt;  拿到这个请求然后返回对应的 &lt;code&gt;controller&lt;/code&gt; ，然后通过 &lt;code&gt;Dispather Type&lt;/code&gt;  通过 &lt;code&gt;Forward&lt;/code&gt;  转发到 &lt;code&gt;user.jsp&lt;/code&gt;  视图，即就是请求 &lt;code&gt;user.jsp&lt;/code&gt;  视图 ( &lt;code&gt;/user/user.jsp&lt;/code&gt; )，此时 &lt;code&gt;Dispather&lt;/code&gt;  已经拦截 &lt;code&gt;/user/user.jsp&lt;/code&gt; ， &lt;code&gt;Dispatcher&lt;/code&gt;  会把他当作 &lt;code&gt;Controller&lt;/code&gt;  去匹配，没有匹配到就会报 &lt;code&gt;404&lt;/code&gt;  错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 springboot 中建了一个过滤器，测试&lt;/p&gt;

&lt;p&gt;当请求为 &lt;code&gt;/user/login&lt;/code&gt;  的时候可以被拦截，当为 &lt;code&gt;/page/login.html&lt;/code&gt;  页面的时候不拦截&lt;/p&gt;

&lt;p&gt;当请求为 &lt;code&gt;/user/login&lt;/code&gt;  的时候可以被拦截，当为 &lt;code&gt;/page/login.html&lt;/code&gt;  页面的时候也会被拦截&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt;  不会拦截页面，只会拦截路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/*&lt;/code&gt;  会路径和页面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;结论：在配置视图的时候尽量用 &lt;code&gt;/&lt;/code&gt;  这种方式。&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/5e7baeeb/</guid>
            <title>过滤器和拦截器的区别</title>
            <link>https://smile1231.github.io/posts/5e7baeeb/</link>
            <category>Java</category>
            <category>Java面试</category>
            <category>SpringBoot</category>
            <pubDate>Tue, 15 Feb 2022 21:34:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;过滤器和拦截器的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过滤器和拦截器的区别&#34;&gt;#&lt;/a&gt; 过滤器和拦截器的区别&lt;/h1&gt;
&lt;img data-src=&#34;/posts/5e7baeeb/2022-02-15-22-48-46.png&#34; class=&#34;&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;过滤器和拦截器触发时机不一样，过滤器是在请求进入容器后，但请求进入 &lt;code&gt;servlet&lt;/code&gt;  之前进行预处理的。请求结束返回也是，是在 &lt;code&gt;servlet&lt;/code&gt;  处理完后，返回给前端之前。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拦截器可以获取 &lt;code&gt;IOC&lt;/code&gt;  容器中的各个 &lt;code&gt;bean&lt;/code&gt; ，而过滤器就不行，因为拦截器是 &lt;code&gt;spring&lt;/code&gt;  提供并管理的， &lt;code&gt;spring&lt;/code&gt;  的功能可以被拦截器使用，在拦截器里注入一个 &lt;code&gt;service&lt;/code&gt; ，可以调用业务逻辑。而过滤器是 &lt;code&gt;JavaEE&lt;/code&gt;  标准，只需依赖 &lt;code&gt;servlet api&lt;/code&gt;  ，不需要依赖 &lt;code&gt;spring&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;img data-src=&#34;/posts/5e7baeeb/2022-02-15-22-48-57.png&#34; class=&#34;&#34;&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;过滤器的实现基于 &lt;code&gt;回调函数&lt;/code&gt; 。而 &lt;code&gt;拦截器（代理模式）&lt;/code&gt; 的实现基于反射&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Filter&lt;/code&gt;  是依赖于 &lt;code&gt;Servlet&lt;/code&gt;  容器，属于 &lt;code&gt;Servlet&lt;/code&gt;  规范的一部分，而拦截器则是独立存在的，可以在任何情况下使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Filter&lt;/code&gt;  的执行由 &lt;code&gt;Servlet&lt;/code&gt;  容器回调完成，而拦截器通常通过动态代理（反射）的方式来执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Filter&lt;/code&gt;  的生命周期由 &lt;code&gt;Servlet&lt;/code&gt;  容器管理，而拦截器则可以通过 &lt;code&gt;IoC&lt;/code&gt;  容器来管理，因此可以通过注入等方式来获取其他 &lt;code&gt;Bean&lt;/code&gt;  的实例，因此使用会更方便。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;springboot使用过滤器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springboot使用过滤器&#34;&gt;#&lt;/a&gt;  &lt;code&gt;SpringBoot&lt;/code&gt;  使用过滤器&lt;/h2&gt;
&lt;p&gt;两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;spring boot&lt;/code&gt;  提供的 &lt;code&gt;FilterRegistrationBean&lt;/code&gt;  注册 &lt;code&gt;Filter &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用原生 &lt;code&gt;servlet&lt;/code&gt;  注解定义 &lt;code&gt;Filter &lt;/code&gt; &lt;br&gt;
两种方式的本质都是一样的，都是去 &lt;code&gt;FilterRegistrationBean&lt;/code&gt;  注册自定义 &lt;code&gt;Filter&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;方式一: （使用 &lt;code&gt;spring boot&lt;/code&gt;  提供的 &lt;code&gt;FilterRegistrationBean&lt;/code&gt;  注册 &lt;code&gt;Filter&lt;/code&gt;  ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;①. 先定义 &lt;code&gt;Filter&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; com.cy.springboot01.filter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.servlet.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; cy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@create&lt;/span&gt; 2021-03-12-9:04 上午&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@Description&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyFilter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Filter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FilterConfig filterConfig)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; ServletException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException, ServletException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// do something 处理request 或response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;filter1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 调用filter链中的下一个filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        filterChain.doFilter(servletRequest,servletResponse);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;②、注册自定义 &lt;code&gt;Filter&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FilterConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; FilterRegistrationBean &lt;span class=&#34;title&#34;&gt;registrationBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        FilterRegistrationBean filterRegistrationBean = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; FilterRegistrationBean(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyFilter());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        filterRegistrationBean.addUrlPatterns(&lt;span class=&#34;string&#34;&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; filterRegistrationBean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;方式一的 &lt;code&gt;①②步骤&lt;/code&gt; 可以用下面这段代码代替：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FilterConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; FilterRegistrationBean &lt;span class=&#34;title&#34;&gt;registFilter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        FilterRegistrationBean registration = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; FilterRegistrationBean();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        registration.setFilter(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LogCostFilter());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        registration.addUrlPatterns(&lt;span class=&#34;string&#34;&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        registration.setName(&lt;span class=&#34;string&#34;&gt;&amp;quot;LogCostFilter&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        registration.setOrder(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; registration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;LogCostFilter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Filter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FilterConfig filterConfig)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; ServletException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException, ServletException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; start = System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        filterChain.doFilter(servletRequest,servletResponse);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Execute cost=&amp;quot;&lt;/span&gt;+(System.currentTimeMillis()-start));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;方式二：（使用原生 &lt;code&gt;servlet&lt;/code&gt;  注解定义 &lt;code&gt;Filter&lt;/code&gt;  ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 注入spring容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义filterName 和过滤的url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@WebFilter(filterName = &amp;quot;my2Filter&amp;quot; ,urlPatterns = &amp;quot;/*&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;My2Filter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Filter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FilterConfig filterConfig)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; ServletException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException, ServletException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;filter2&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里直接用 &lt;code&gt;@WebFilter&lt;/code&gt;  就可以进行配置，同样，可以设置 &lt;code&gt;url&lt;/code&gt;  匹配模式，过滤器名称等。这里需要注意一点的是 &lt;code&gt;@WebFilter&lt;/code&gt;  这个注解是 &lt;code&gt;Servlet3.0&lt;/code&gt;  的规范，并不是 &lt;code&gt;Spring boot&lt;/code&gt;  提供的。&lt;strong&gt;除了这个注解以外，我们还需在启动类中加另外一个注解： &lt;code&gt;@ServletComponetScan&lt;/code&gt; ，指定扫描的包。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;springboot配置拦截器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springboot配置拦截器&#34;&gt;#&lt;/a&gt;  &lt;code&gt;SpringBoot&lt;/code&gt;  配置拦截器&lt;/h2&gt;
&lt;p&gt;首先我们实现拦截器类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;LogCostInterceptor&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;HandlerInterceptor&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; start = System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;preHandle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        start = System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;postHandle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Interceptor cost=&amp;quot;&lt;/span&gt;+(System.currentTimeMillis()-start));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;afterCompletion&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;我们还需要实现 &lt;code&gt;HandlerInterceptor&lt;/code&gt;  这个接口&lt;/strong&gt;，这个接口包括三个方法， &lt;code&gt;preHandle&lt;/code&gt;  是请求执行前执行的， &lt;code&gt;postHandler&lt;/code&gt;  是请求结束执行的，但只有 &lt;code&gt;preHandle&lt;/code&gt;  方法返回 &lt;code&gt;true&lt;/code&gt;  的时候才会执行， &lt;code&gt;afterCompletion&lt;/code&gt;  是视图渲染完成后才执行，同样需要 &lt;code&gt;preHandle&lt;/code&gt;  返回 &lt;code&gt;true&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;该方法通常用于清理资源等工作。除了实现上面的接口外，我们还需对其进行配置：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterceptorConfig&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WebMvcConfigurer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;addInterceptors&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(InterceptorRegistry registry)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        registry.addInterceptor(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LogCostInterceptor()).addPathPatterns(&lt;span class=&#34;string&#34;&gt;&amp;quot;/**&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;.addInterceptors(registry);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;这里我们实现了 &lt;code&gt;WebMvcConfigurer&lt;/code&gt; &lt;/strong&gt;，这里我们重写了 &lt;code&gt;addInterceptors&lt;/code&gt;  这个方法，进行拦截器的配置，主要配置项就两个，一个是指定拦截器，第二个是指定拦截的 &lt;code&gt;URL&lt;/code&gt; 。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/12fecb94/</guid>
            <title>多线程笔记</title>
            <link>https://smile1231.github.io/posts/12fecb94/</link>
            <category>Java</category>
            <category>Java面试</category>
            <category>多线程</category>
            <pubDate>Mon, 14 Feb 2022 22:46:41 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;线程的实现方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;继承 Thread 类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现 Runnable 接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 Callable 和 Future&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;blockquote&gt;
&lt;p&gt;Thread 类中的 &lt;code&gt;start()&lt;/code&gt;  和  &lt;code&gt;run() &lt;/code&gt; 方法有什么区别？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;start（）方法来启动线程，真正实现了多线程运行。这时无需等待 run 方法体代码执行完毕，可以直接继续执行下面的代码；通过调用 Thread 类的 start () 方法来启动一个线程， 这时此线程是处于就绪状态， 并没有运行。 然后通过此 Thread 类调用方法 run () 来完成其运行操作的， 这里方法 run () 称为线程体，它包含了要执行的这个线程的内容， Run 方法运行结束， 此线程终止。然后 CPU 再调度其它线程。&lt;/li&gt;
&lt;li&gt;run（）方法当作普通方法的方式调用。程序还是要顺序执行，要等待 run 方法体执行完毕后，才可继续执行下面的代码； 程序中只有主线程 —— 这一个线程， 其程序执行路径还是只有一条， 这样就没有达到写线程的目的。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;线程 &lt;code&gt;RUNNABLE&lt;/code&gt;  状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程对象通过 start 方法进入 runnable 状态，启动的线程不一定会立即得到执行，线程的运行与否要看 cpu 的调度，我们把这个中间状态叫可执行状态（RUNNABLE)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;线程的 &lt;code&gt;BLOCKED&lt;/code&gt;  状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程正在等待获取锁。&lt;/p&gt;
&lt;p&gt;进入 &lt;code&gt;BLOCKED&lt;/code&gt;  状态，比如调用了 &lt;code&gt;sleep&lt;/code&gt; , 或者 &lt;code&gt;wait&lt;/code&gt;  方法&lt;br&gt;
进行某个阻塞的 &lt;code&gt;io&lt;/code&gt;  操作，比如因网络数据的读写进入 &lt;code&gt;BLOCKED&lt;/code&gt;  状态&lt;br&gt;
获取某个锁资源，从而加入到该锁的阻塞队列中而进入 &lt;code&gt;BLOCKED&lt;/code&gt;  状态&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;线程的 &lt;code&gt;TERMINATED&lt;/code&gt;  状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;`TERMINATED`` 是一个线程的最终状态，在该状态下线程不会再切换到其他任何状态了，代表整个生命周期都结束了。&lt;/p&gt;
&lt;p&gt;下面几种情况会进入 &lt;code&gt;TERMINATED&lt;/code&gt;  状态:&lt;/p&gt;
&lt;p&gt;线程运行正常结束，结束生命周期&lt;br&gt;
线程运行出错意外结束&lt;br&gt;
 &lt;code&gt;JVM Crash&lt;/code&gt;  导致所有的线程都结束&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何知道代码段被哪个线程调用？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(Thread.currentThread().getName());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;停止线程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt;  方法执行完成，自然终止。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stop()&lt;/code&gt;  方法， &lt;code&gt;suspend()&lt;/code&gt;  以及 &lt;code&gt;resume()&lt;/code&gt;  都是过期作废方法，使用它们结果不可预期。&lt;/p&gt;
&lt;p&gt;大多数停止一个线程的操作使用 &lt;code&gt;Thread.interrupt()&lt;/code&gt;  等于说给线程打一个停止的标记，此方法不回去终止一个正在运行的线程，需要加入一个判断才能可以完成线程的停止。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;interrupted&lt;/code&gt;  和  &lt;code&gt;isInterrupted&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;interrupted&lt;/code&gt;  : 判断当前线程是否已经中断，会清除状态。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;isInterrupted&lt;/code&gt;  ：判断线程是否已经中断，不会清除状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;放弃当前 cpu 资源，将它让给其他的任务占用 cpu 执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得 cpu 时间片。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;线程的优先级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在操作系统中，线程可以划分优先级，优先级较高的线程得到 cpu 资源比较多，也就是 cpu 有限执行优先级较高的线程对象中的任务，但是不能保证一定优先级高，就先执行。&lt;/p&gt;
&lt;p&gt;Java 的优先级分为 1～10 个等级，数字越大优先级越高，默认优先级大小为 5。超出范围则抛出： &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;优先级继承特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程的优先级具有继承性，比如 &lt;code&gt;a&lt;/code&gt;  线程启动 &lt;code&gt;b&lt;/code&gt;  线程， &lt;code&gt;b&lt;/code&gt;  线程与 &lt;code&gt;a&lt;/code&gt;  优先级是一样的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;线程种类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;  线程有两种，一种是用户线程，一种是守护线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;守护线程的特点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;守护线程是一个比较特殊的线程，主要被用做程序中后台调度以及支持性工作。当 &lt;code&gt;Java&lt;/code&gt;  虚拟机中不存在非守护线程时，守护线程才会随着 &lt;code&gt;JVM&lt;/code&gt;  一同结束工作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;  中典型的守护线程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;GC&lt;/code&gt; （垃圾回收器）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如何设置守护线程&lt;br&gt;
 &lt;code&gt;Thread.setDaemon(true)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;PS:Daemon&lt;/code&gt;  属性需要再启动线程之前设置，不能再启动后设置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;join&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;join 是指把指定的线程加入到当前线程，比如 join 某个线程 a, 会让当前线程 b 进入等待，直到 a 的生命周期结束，此期间 b 线程是处于 blocked 状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是 synchronized?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;synchronized 关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;synchronized 包括哪两个 jvm 重要的指令？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;monitor enter 和 monitor exit&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;synchronized 关键字用法？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以用于对代码块或方法的修饰&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;synchronized 锁的是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;普通同步方法 —————&amp;gt; 锁的是当前实力对象。&lt;/p&gt;
&lt;p&gt;静态同步方法 —————&amp;gt; 锁的是当前类的 Class 对象。&lt;/p&gt;
&lt;p&gt;同步方法 块 —————&amp;gt; 锁的是 synchonized 括号里配置的对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 对象头&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;synchronized 用的锁是存在 Java 对象头里的。对象如果是数组类型，虚拟机用 3 个字宽 (Word) 存储对象头，如果对象是非数组类型，用 2 字宽存储对象头。&lt;/p&gt;
&lt;p&gt;Tips:32 位虚拟机中一个字宽等于 4 字节。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;volatile 关键字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;volatile 是轻量级的 synchronized, 它在多处理器开发中保证了共享变量的 “可见性 “。&lt;/p&gt;
&lt;p&gt;Java 语言规范第 3 版对 volatile 定义如下，Java 允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为 volatile,Java 线程内存模型所有线程看到这个变量的值是一致的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重入锁 ReentrantLock&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁的还支持获取锁时的公平和非公平性选择。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重进入是什么意思？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重进入是指任意线程在获取到锁之后能够再次获锁而不被锁阻塞。&lt;/p&gt;
&lt;p&gt;该特性主要解决以下两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是则再次成功获取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所得最终释放。线程重复 n 次是获取了锁，随后在第 n 次释放该锁后，其他线程能够获取到该锁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;ReentrantLock 默认锁？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认非公平锁&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公平锁和非公平锁的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公平性与否针对获取锁来说的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是 &lt;code&gt;FIFO&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读写锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读写锁允许同一时刻多个读线程访问，但是写线程和其他写线程均被阻塞。读写锁维护一个读锁一个写锁，读写分离，并发性得到了提升。&lt;br&gt;
 &lt;code&gt;Java&lt;/code&gt;  中提供读写锁的实现类是 &lt;code&gt;ReentrantReadWriteLock&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 并发容器，你知道几个？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ConcurrentHashMap、CopyOnWriteArrayList 、CopyOnWriteArraySet 、ConcurrentLinkedQueue、&lt;/p&gt;
&lt;p&gt;ConcurrentLinkedDeque、ConcurrentSkipListMap、ConcurrentSkipListSet、ArrayBlockingQueue、&lt;/p&gt;
&lt;p&gt;LinkedBlockingQueue、LinkedBlockingDeque、PriorityBlockingQueue、SynchronousQueue、&lt;/p&gt;
&lt;p&gt;LinkedTransferQueue、DelayQueue&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 里的阻塞的队列&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;工作窃取算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是指某个线程从其他队列里窃取任务来执行。当大任务被分割成小任务时，有的线程可能提前完成任务，此时闲着不如去帮其他没完成工作线程。此时可以去其他队列窃取任务，为了减少竞争，通常使用双端队列，被窃取的线程从头部拿，窃取的线程从尾部拿任务执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创建线程池参数有哪些，作用？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;corePoolSize: 核心线程池大小，当提交一个任务时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建，等待需要执行的任务数大于线程核心大小就不会继续创建。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;maximumPoolSize: 线程池最大数，允许创建的最大线程数，如果队列满了，并且已经创建的线程数小于最大线程数，则会创建新的线程执行任务。如果是无界队列，这个参数基本没用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;keepAliveTime: 线程保持活动时间，线程池工作线程空闲后，保持存活的时间，所以如果任务很多，并且每个任务执行时间较短，可以调大时间，提高线程利用率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unit: 线程保持活动时间单位，天（DAYS)、小时 (HOURS)、分钟 (MINUTES、毫秒 MILLISECONDS)、微秒 (MICROSECONDS)、纳秒 (NANOSECONDS)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;workQueue: 任务队列，保存等待执行的任务的阻塞队列。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般来说可以选择如下阻塞队列：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt; : 基于数组的有界阻塞队列。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LinkedBlockingQueue&lt;/code&gt; : 基于链表的阻塞队列。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SynchronizedQueue&lt;/code&gt; : 一个不存储元素的阻塞队列。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PriorityBlockingQueue&lt;/code&gt; : 一个具有优先级的阻塞队列。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;向线程池提交任务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以使用 &lt;code&gt;execute()&lt;/code&gt;  和 &lt;code&gt;submit()&lt;/code&gt;  两种方式提交任务。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;execute()&lt;/code&gt; : 无返回值，所以无法判断任务是否被执行成功。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;submit()&lt;/code&gt; : 用于提交需要有返回值的任务。线程池返回一个 &lt;code&gt;future&lt;/code&gt;  类型的对象，通过这个 &lt;code&gt;future&lt;/code&gt;  对象可以判断任务是否执行成功，并且可以通过 &lt;code&gt;future的get()&lt;/code&gt;  来获取返回值， &lt;code&gt;get()&lt;/code&gt;  方法会阻塞当前线程知道任务完成。 &lt;code&gt;get(long timeout,TimeUnit unit)&lt;/code&gt;  可以设置超市时间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关闭线程池&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以通过 shutdown () 或 shutdownNow () 来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的 interrupt 来中断线程，所以无法响应终端的任务可以能永远无法停止。&lt;/p&gt;
&lt;p&gt;shutdownNow 首先将线程池状态设置成 STOP, 然后尝试停止所有的正在执行或者暂停的线程，并返回等待执行任务的列表。&lt;/p&gt;
&lt;p&gt;shutdown 只是将线程池的状态设置成 shutdown 状态，然后中断所有没有正在执行任务的线程。&lt;/p&gt;
&lt;p&gt;只要调用两者之一，isShutdown 就会返回 true, 当所有任务都已关闭，isTerminaed 就会返回 true。&lt;/p&gt;
&lt;p&gt;一般来说调用 shutdown 方法来关闭线程池，如果任务不一定要执行完，可以直接调用 shutdownNow 方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;线程池如何合理设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置线程池可以从以下几个方面考虑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务是 cpu 密集型、IO 密集型或者混合型&lt;/li&gt;
&lt;li&gt;任务优先级，高中低。&lt;/li&gt;
&lt;li&gt;任务时间执行长短。&lt;/li&gt;
&lt;li&gt;任务依赖性：是否依赖其他系统资源。
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cpu 密集型可以配置可能小的线程，比如 n + 1 个线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;io 密集型可以配置较多的线程，如 2n 个线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;混合型可以拆成 io 密集型任务和 cpu 密集型任务，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果两个任务执行时间相差大，否 -&amp;gt; 分解后执行吞吐量将高于串行执行吞吐量。&lt;br&gt;
否 -&amp;gt; 没必要分解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过 Runtime.getRuntime ().availableProcessors () 来获取 cpu 个数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建议使用有界队列，增加系统的预警能力和稳定性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK 内置的拒绝策略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AbortPolicy 抛出异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DiscardPolicy 直接静悄悄的丢弃这个任务，不触发任何动作。这个策略基本不会使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DiscardOldestPolicy 丢弃队列最前面（最旧）的任务，然后重新尝试执行任务（重复此过程）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CallerRunsPolicy 由调用线程处理该任务 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/b1231c9f/</guid>
            <title>java stream中Collectors的用法</title>
            <link>https://smile1231.github.io/posts/b1231c9f/</link>
            <category>Java</category>
            <category>Stream</category>
            <pubDate>Sun, 13 Feb 2022 21:48:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;java-stream中collectors的用法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java-stream中collectors的用法&#34;&gt;#&lt;/a&gt;  &lt;code&gt;java stream&lt;/code&gt;  中 &lt;code&gt;Collectors&lt;/code&gt;  的用法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#java-stream%E4%B8%ADcollectors%E7%9A%84%E7%94%A8%E6%B3%95&#34;&gt; &lt;code&gt;java stream&lt;/code&gt;  中 &lt;code&gt;Collectors&lt;/code&gt;  的用法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%AE%80%E4%BB%8B&#34;&gt;&lt;span id=&#34;common&#34;&gt;简介&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorstolist&#34;&gt;&lt;span id=&#34;toList&#34;&gt; &lt;code&gt;Collectors.toList()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorstoset&#34;&gt;&lt;span id=&#34;toSet&#34;&gt; &lt;code&gt;Collectors.toSet()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorstocollection&#34;&gt;&lt;span id=&#34;toColl&#34;&gt; &lt;code&gt;Collectors.toCollection()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorstomap&#34;&gt;&lt;span id=&#34;toMap&#34;&gt; &lt;code&gt;Collectors.toMap()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorscollectingandthen&#34;&gt;&lt;span id=&#34;toCollAndThen&#34;&gt; &lt;code&gt;Collectors.collectingAndThen()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorsjoining&#34;&gt;&lt;span id=&#34;join&#34;&gt; &lt;code&gt;Collectors.joining()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorscounting&#34;&gt;&lt;span id=&#34;count&#34;&gt; &lt;code&gt;Collectors.counting()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorssummarizingdoublelongint&#34;&gt;&lt;span id=&#34;sum&#34;&gt; &lt;code&gt;Collectors.summarizingDouble/Long/Int()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorsaveragingdoublelongint&#34;&gt;&lt;span id=&#34;average&#34;&gt; &lt;code&gt;Collectors.averagingDouble/Long/Int()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorssummingdoublelongint&#34;&gt;&lt;span id=&#34;summing&#34;&gt; &lt;code&gt;Collectors.summingDouble/Long/Int()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorsmaxbyminby&#34;&gt;&lt;span id=&#34;max&#34;&gt; &lt;code&gt;Collectors.maxBy()/minBy()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorsgroupingby&#34;&gt;&lt;span id=&#34;group&#34;&gt; &lt;code&gt;Collectors.groupingBy()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#collectorspartitioningby&#34;&gt;&lt;span id=&#34;par&#34;&gt; &lt;code&gt;Collectors.partitioningBy()&lt;/code&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;span-idcommon简介span&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idcommon简介span&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;common&#34;&gt;简介&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;java stream&lt;/code&gt;  中，我们通常需要将处理后的 &lt;code&gt;stream&lt;/code&gt;  转换成集合类，这个时候就需要用到 &lt;code&gt;stream.collect&lt;/code&gt;  方法。 &lt;code&gt;collect&lt;/code&gt;  方法需要传入一个 &lt;code&gt;Collector&lt;/code&gt;  类型，要实现 &lt;code&gt;Collector&lt;/code&gt;  还是很麻烦的，需要实现好几个接口。&lt;/p&gt;
&lt;p&gt;于是 &lt;code&gt;java&lt;/code&gt;  提供了更简单的 &lt;code&gt;Collectors&lt;/code&gt;  工具类来方便我们构建 &lt;code&gt;Collector&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;下面我们将会具体讲解 &lt;code&gt;Collectors&lt;/code&gt;  的用法。&lt;/p&gt;
&lt;p&gt;假如我们有这样两个 &lt;code&gt;list：&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;string&#34;&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;alice&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; duplicateList = Arrays.asList(&lt;span class=&#34;string&#34;&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;alice&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面一个是无重复的 &lt;code&gt;list&lt;/code&gt; ，一个是带重复数据的 &lt;code&gt;list&lt;/code&gt; 。接下来的例子我们会用上面的两个 &lt;code&gt;list&lt;/code&gt;  来讲解 &lt;code&gt;Collectors&lt;/code&gt;  的用法。&lt;/p&gt;
&lt;h2 id=&#34;span-idtolistcollectorstolistspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idtolistcollectorstolistspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;toList&#34;&gt; &lt;code&gt;Collectors.toList()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; listResult = list.stream().collect(Collectors.toList());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,listResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-13-35.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;将 &lt;code&gt;stream&lt;/code&gt;  转换为 &lt;code&gt;list&lt;/code&gt; 。这里转换的 &lt;code&gt;list&lt;/code&gt;  是 &lt;code&gt;ArrayList&lt;/code&gt; ，如果想要转换成特定的 &lt;code&gt;list&lt;/code&gt; ，需要使用 &lt;code&gt;toCollection&lt;/code&gt;  方法。&lt;/p&gt;
&lt;h2 id=&#34;span-idtosetcollectorstosetspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idtosetcollectorstosetspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;toSet&#34;&gt; &lt;code&gt;Collectors.toSet()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Set&amp;lt;String&amp;gt; setResult = list.stream().collect(Collectors.toSet());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,setResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-13-55.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idtocollcollectorstocollectionspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idtocollcollectorstocollectionspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;toColl&#34;&gt; &lt;code&gt;Collectors.toCollection()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;上面的 &lt;code&gt;toMap,toSet&lt;/code&gt;  转换出来的都是特定的类型，如果我们需要自定义，则可以使用 &lt;code&gt;toCollection()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; custListResult = list.stream().collect(Collectors.toCollection(LinkedList::&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,custListResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-14-12.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idtomapcollectorstomapspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idtomapcollectorstomapspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;toMap&#34;&gt; &lt;code&gt;Collectors.toMap()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;toMap&lt;/code&gt;  接收两个参数，第一个参数是 &lt;code&gt;keyMapper&lt;/code&gt; ，第二个参数是 &lt;code&gt;valueMapper&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, Integer&amp;gt; mapResult = list.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .collect(Collectors.toMap(Function.identity(), String::length));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,mapResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 &lt;code&gt;stream&lt;/code&gt;  中有重复的值，则转换会报 &lt;code&gt;IllegalStateException&lt;/code&gt;  异常：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, Integer&amp;gt; duplicateMapResult = duplicateList.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .collect(Collectors.toMap(Function.identity(), String::length));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-14-26.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;解决方案:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, Integer&amp;gt; duplicateMapResult2 = duplicateList.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .collect(Collectors.toMap(Function.identity(), String::length, (item, identicalItem) -&amp;gt; item));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,duplicateMapResult2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;toMap&lt;/code&gt;  中添加第三个参数 &lt;code&gt;mergeFunction&lt;/code&gt; ，来解决冲突的问题。&lt;/p&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-14-53.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idtocollandthencollectorscollectingandthenspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idtocollandthencollectorscollectingandthenspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;toCollAndThen&#34;&gt;Collectors.collectingAndThen()&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;collectingAndThen&lt;/code&gt;  允许我们对生成的集合再做一次操作。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; collectAndThenResult = list.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .collect(Collectors.collectingAndThen(Collectors.toList(), l -&amp;gt; &amp;#123;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(l);&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,collectAndThenResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-15-04.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idjoincollectorsjoiningspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idjoincollectorsjoiningspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;join&#34;&gt; &lt;code&gt;Collectors.joining()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Joining&lt;/code&gt;  用来连接 &lt;code&gt;stream&lt;/code&gt;  中的元素：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String joinResult = list.stream().collect(Collectors.joining());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,joinResult);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String joinResult1 = list.stream().collect(Collectors.joining(&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,joinResult1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String joinResult2 = list.stream().collect(Collectors.joining(&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;prefix&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;suffix&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,joinResult2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-15-15.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;可以不带参数，也可以带一个参数，也可以带三个参数，根据我们的需要进行选择。&lt;/p&gt;
&lt;h2 id=&#34;span-idcountcollectorscountingspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idcountcollectorscountingspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;count&#34;&gt; &lt;code&gt;Collectors.counting()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;counting&lt;/code&gt;  主要用来统计 &lt;code&gt;stream&lt;/code&gt;  中元素的个数：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Long countResult = list.stream().collect(Collectors.counting());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,countResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-15-42.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idsumcollectorssummarizingdoublelongintspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idsumcollectorssummarizingdoublelongintspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;sum&#34;&gt; &lt;code&gt;Collectors.summarizingDouble/Long/Int()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SummarizingDouble/Long/Int&lt;/code&gt;  为 &lt;code&gt;stream&lt;/code&gt;  中的元素生成了统计信息，返回的结果是一个统计类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;IntSummaryStatistics intResult = list.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .collect(Collectors.summarizingInt(String::length));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,intResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-16-28.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idaveragecollectorsaveragingdoublelongintspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idaveragecollectorsaveragingdoublelongintspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;average&#34;&gt; &lt;code&gt;Collectors.averagingDouble/Long/Int()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;averagingDouble/Long/Int()&lt;/code&gt;  对 &lt;code&gt;stream&lt;/code&gt;  中的元素做平均：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Double averageResult = list.stream().collect(Collectors.averagingInt(String::length));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,averageResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-16-42.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idsummingcollectorssummingdoublelongintspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idsummingcollectorssummingdoublelongintspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;summing&#34;&gt; &lt;code&gt;Collectors.summingDouble/Long/Int()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;summingDouble/Long/Int()&lt;/code&gt;  对 &lt;code&gt;stream&lt;/code&gt;  中的元素做 &lt;code&gt;sum&lt;/code&gt;  操作：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Double summingResult = list.stream().collect(Collectors.summingDouble(String::length));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,summingResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-17-11.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idmaxcollectorsmaxbyminbyspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idmaxcollectorsmaxbyminbyspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;max&#34;&gt; &lt;code&gt;Collectors.maxBy()/minBy()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;maxBy()/minBy()&lt;/code&gt;  根据提供的 &lt;code&gt;Comparator&lt;/code&gt; ，返回 &lt;code&gt;stream&lt;/code&gt;  中的最大或者最小值：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Optional&amp;lt;String&amp;gt; maxByResult = list.stream().collect(Collectors.maxBy(Comparator.naturalOrder()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,maxByResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-17-22.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idgroupcollectorsgroupingbyspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idgroupcollectorsgroupingbyspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;group&#34;&gt; &lt;code&gt;Collectors.groupingBy()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;GroupingBy&lt;/code&gt;  根据某些属性进行分组，并返回一个 &lt;code&gt;Map&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;Integer, Set&amp;lt;String&amp;gt;&amp;gt; groupByResult = list.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .collect(Collectors.groupingBy(String::length, Collectors.toSet()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;,groupByResult);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-17-31.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;span-idparcollectorspartitioningbyspan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#span-idparcollectorspartitioningbyspan&#34;&gt;#&lt;/a&gt; &lt;span id=&#34;par&#34;&gt; &lt;code&gt;Collectors.partitioningBy()&lt;/code&gt; &lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;PartitioningBy&lt;/code&gt;  是一个特别的 &lt;code&gt;groupingBy，PartitioningBy&lt;/code&gt;  返回一个 &lt;code&gt;Map&lt;/code&gt; ，这个 &lt;code&gt;Map&lt;/code&gt;  是以 &lt;code&gt;boolean&lt;/code&gt;  值为 &lt;code&gt;key&lt;/code&gt; ，从而将 &lt;code&gt;stream&lt;/code&gt;  分成两部分，一部分是匹配 &lt;code&gt;PartitioningBy&lt;/code&gt;  条件的，一部分是不满足条件的：&lt;/p&gt;
&lt;img data-src=&#34;/posts/b1231c9f/2022-02-13-23-17-39.png&#34; class=&#34;&#34;&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/8b8fedea/</guid>
            <title>Stream流的介绍</title>
            <link>https://smile1231.github.io/posts/8b8fedea/</link>
            <category>Java</category>
            <category>Stream</category>
            <pubDate>Sun, 13 Feb 2022 21:43:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;stream-流的介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream-流的介绍&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Stream&lt;/code&gt;  流的介绍&lt;/h1&gt;
&lt;h2 id=&#34;11-java8-stream介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-java8-stream介绍&#34;&gt;#&lt;/a&gt; 1.1  &lt;code&gt;java8 stream&lt;/code&gt;  介绍&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;java8&lt;/code&gt;  新增了 &lt;code&gt;stream&lt;/code&gt;  流的特性，能够让用户以函数式的方式、更为简单的操纵集合等数据结构，并实现了用户无感知的并行计算。&lt;/p&gt;
&lt;h2 id=&#34;12-从零开始实现一个stream流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-从零开始实现一个stream流&#34;&gt;#&lt;/a&gt; 1.2 从零开始实现一个 &lt;code&gt;stream&lt;/code&gt;  流&lt;/h2&gt;
&lt;p&gt;相信很多人在使用过 &lt;code&gt;java8&lt;/code&gt;  的 &lt;code&gt;streamAPI&lt;/code&gt;  接口之后，都会对其实现原理感到好奇，但往往在看到 &lt;code&gt;jdk&lt;/code&gt;  的 &lt;code&gt;stream&lt;/code&gt;  源码后却被其复杂的抽象、封装给弄糊涂了，而无法很好的理解其背后的原理。究其原因，是因为 &lt;code&gt;jdk&lt;/code&gt;  的 &lt;code&gt;stream&lt;/code&gt;  源码是高度工程化的代码，工程化的代码为了效率和满足各式各样的需求，会将代码实现的极其复杂，不易理解。&lt;/p&gt;
&lt;p&gt;在这里，我们将抛开 &lt;code&gt;jdk&lt;/code&gt;  的实现思路，从零开始实现一个 &lt;code&gt;stream&lt;/code&gt;  流。&lt;/p&gt;
&lt;p&gt;我们的 &lt;code&gt;stream&lt;/code&gt;  流同样拥有惰性求值，函数式编程接口等特性，并兼容 &lt;code&gt;jdk&lt;/code&gt;  的 &lt;code&gt;Collection&lt;/code&gt;  等数据结构 (但不支持并行计算  &lt;code&gt;orz&lt;/code&gt; )。&lt;/p&gt;
&lt;p&gt;相信在亲手实现一个 &lt;code&gt;stream&lt;/code&gt;  流的框架之后，大家能更好的理解流计算的原理。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;stream的优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream的优点&#34;&gt;#&lt;/a&gt;  &lt;code&gt;stream&lt;/code&gt;  的优点&lt;/h2&gt;
&lt;p&gt;在探讨探究 &lt;code&gt;stream&lt;/code&gt;  的实现原理和动手实现之前，我们先要体会 &lt;code&gt;stream&lt;/code&gt;  流计算的独特之处。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;举个例子： 有一个 &lt;code&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt;  列表，我们需要获得年龄为 &lt;code&gt;70&lt;/code&gt;  岁的前 &lt;code&gt;10&lt;/code&gt;  个 &lt;code&gt;Person&lt;/code&gt;  的姓名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;过程式的解决方案：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;稍加思考，我们很快就写出了一个过程式的解决方案 (伪代码)：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Person&amp;gt; personList = fromDB(); &lt;span class=&#34;comment&#34;&gt;// 获得List&amp;lt;Person&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; limit = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 限制条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; nameList = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList(); &lt;span class=&#34;comment&#34;&gt;// 收集的姓名集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Person personItem : personList)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(personItem.age == &lt;span class=&#34;number&#34;&gt;70&lt;/span&gt;)&amp;#123; &lt;span class=&#34;comment&#34;&gt;// 满足条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        nameList.add(personItem.name); &lt;span class=&#34;comment&#34;&gt;// 加入姓名集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(nameList.size() &amp;gt;= &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&amp;#123; &lt;span class=&#34;comment&#34;&gt;// 判断是否超过限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nameList;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;函数式 &lt;code&gt;stream&lt;/code&gt;  解决方案：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们给出一种基于 &lt;code&gt;stream&lt;/code&gt;  流的解决方案 (伪代码)：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Person&amp;gt; personList = fromDB(); &lt;span class=&#34;comment&#34;&gt;// 获得List&amp;lt;Person&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; nameList = personList.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　　　.filter(item-&amp;gt;item.age == &lt;span class=&#34;number&#34;&gt;70&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 过滤条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　　　.limit(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)    &lt;span class=&#34;comment&#34;&gt;// limit限制条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　　　.map(item-&amp;gt;item.name) &lt;span class=&#34;comment&#34;&gt;// 获得姓名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;　　　　　　.collect(Collector.toList()); &lt;span class=&#34;comment&#34;&gt;// 转化为list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nameList;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两种方案的不同之处：&lt;/p&gt;
&lt;p&gt;从函数式的角度上看，过程式的代码实现将收集元素、循环迭代、各种逻辑判断耦合在一起，暴露了太多细节。当未来需求变动和变得更加复杂的情况下，过程式的代码将变得难以理解和维护 (需要控制台打印出 年龄为 &lt;code&gt;70&lt;/code&gt;  岁的前 10 个 &lt;code&gt;Person&lt;/code&gt;  中，姓王的 &lt;code&gt;Person&lt;/code&gt;  的名称）。&lt;/p&gt;
&lt;p&gt;函数式的解决方案解开了代码细节和业务逻辑的耦合，类似于 &lt;code&gt;sql&lt;/code&gt;  语句，表达的是 &amp;quot;要做什么&amp;quot; 而不是 &amp;quot;如何去做&amp;quot;，使程序员可以更加专注于业务逻辑，写出易于理解和维护的代码。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Person&amp;gt; personList = fromDB(); &lt;span class=&#34;comment&#34;&gt;// 获得List&amp;lt;Person&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;personList.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .filter(item-&amp;gt;item.age == &lt;span class=&#34;number&#34;&gt;70&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 过滤条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .limit(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)    &lt;span class=&#34;comment&#34;&gt;// limit限制条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .filter(item-&amp;gt;item.name.startWith(&lt;span class=&#34;string&#34;&gt;&amp;quot;王&amp;quot;&lt;/span&gt;))  &lt;span class=&#34;comment&#34;&gt;// 过滤条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .map(item-&amp;gt;item.name) &lt;span class=&#34;comment&#34;&gt;// 获得姓名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;stream-api接口介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream-api接口介绍&#34;&gt;#&lt;/a&gt;  &lt;code&gt;stream API&lt;/code&gt;  接口介绍&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;stream API&lt;/code&gt;  的接口是函数式的，尽管 &lt;code&gt;java 8&lt;/code&gt;  也引入了 &lt;code&gt;lambda&lt;/code&gt;  表达式，但 &lt;code&gt;java&lt;/code&gt;  实质上依然是由接口 - 匿名内部类来实现函数传参的，所以需要事先定义一系列的函数式接口。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Function:&lt;/code&gt;  类似于  &lt;code&gt;y = F(x)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@FunctionalInterface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Function&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;R&lt;/span&gt;,&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 函数式接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 类似于 y = F(x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;R &lt;span class=&#34;title&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T t)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;BiFunction&lt;/code&gt; : 类似于  &lt;code&gt;z = F(x,y)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@FunctionalInterface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BiFunction&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;R&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;U&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 函数式接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 类似于 z = F(x,y)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;R &lt;span class=&#34;title&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T t, U u)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ForEach&lt;/code&gt; : 遍历处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@FunctionalInterface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ForEach&lt;/span&gt; &amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 迭代器遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; item 被迭代的每一项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T item)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Comparator&lt;/code&gt; : 比较器&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@FunctionalInterface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Comparator&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt;  &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 比较方法逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; o1    参数1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; o2    参数2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt;      返回值大于0 ---&amp;gt; (o1 &amp;gt; o2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *              返回值等于0 ---&amp;gt; (o1 = o2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *              返回值小于0 ---&amp;gt; (o1 &amp;lt; o2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T o1, T o2)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Predicate:&lt;/code&gt;  条件判断&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@FunctionalInterface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Predicate&lt;/span&gt; &amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 函数式接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; item 迭代的每一项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; true 满足条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *          false 不满足条件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;satisfy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T item)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Supplier：&lt;/code&gt; 提供初始值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@FunctionalInterface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Supplier&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 提供初始值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 初始化的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;T &lt;span class=&#34;title&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;EvalFunction：stream&lt;/code&gt;  求值函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@FunctionalInterface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;EvalFunction&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * stream流的强制求值方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 求值返回一个新的stream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;stream-api接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stream-api接口&#34;&gt;#&lt;/a&gt;  &lt;code&gt;stream API&lt;/code&gt;  接口：&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * stream流的API接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Stream&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 映射 lazy 惰性求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; mapper 转换逻辑 T-&amp;gt;R&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 一个新的流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;R&amp;gt; &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;R&amp;gt; &lt;span class=&#34;title&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Function&amp;lt;R,T&amp;gt; mapper)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 扁平化 映射 lazy 惰性求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; mapper 转换逻辑 T-&amp;gt;MyStream&amp;lt;R&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt;  一个新的流(扁平化之后)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;R&amp;gt; &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;R&amp;gt; &lt;span class=&#34;title&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Function&amp;lt;? extends MyStream&amp;lt;R&amp;gt;, T&amp;gt; mapper)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 过滤 lazy 惰性求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; predicate 谓词判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 一个新的流，其中元素是满足predicate条件的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Predicate&amp;lt;T&amp;gt; predicate)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 截断 lazy 惰性求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; n 截断流，只获取部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 一个新的流，其中的元素不超过 n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 去重操作 lazy 惰性求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 一个新的流，其中的元素不重复(!equals）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;distinct&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 窥视 lazy 惰性求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 同一个流，peek不改变流的任何行为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;peek&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ForEach&amp;lt;T&amp;gt; consumer)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 遍历 eval 强制求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; consumer 遍历逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ForEach&amp;lt;T&amp;gt; consumer)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 浓缩 eval 强制求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; initVal 浓缩时的初始值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; accumulator 浓缩时的 累加逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 浓缩之后的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;R&amp;gt; &lt;span class=&#34;function&#34;&gt;R &lt;span class=&#34;title&#34;&gt;reduce&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(R initVal, BiFunction&amp;lt;R, R, T&amp;gt; accumulator)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 收集 eval 强制求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; collector 传入所需的函数组合子，生成高阶函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 收集之后的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;R, A&amp;gt; &lt;span class=&#34;function&#34;&gt;R &lt;span class=&#34;title&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Collector&amp;lt;T,A,R&amp;gt; collector)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 最大值 eval 强制求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; comparator 大小比较逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 流中的最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;T &lt;span class=&#34;title&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Comparator&amp;lt;T&amp;gt; comparator)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 最小值 eval 强制求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; comparator 大小比较逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 流中的最小值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;T &lt;span class=&#34;title&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Comparator&amp;lt;T&amp;gt; comparator)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 计数 eval 强制求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt;  当前流的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 流中是否存在满足predicate的项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; true 存在 匹配项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *         false 不存在 匹配项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;anyMatch&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Predicate&amp;lt;? &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt; T&amp;gt; predicate)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 流中的元素是否全部满足predicate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; true 全部满足&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *          false 不全部满足&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;allMatch&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Predicate&amp;lt;? &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt; T&amp;gt; predicate)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 返回空的 stream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 空stream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;makeEmptyStream&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// isEnd = true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyStream.Builder&amp;lt;T&amp;gt;().isEnd(&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;mystream-实现细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mystream-实现细节&#34;&gt;#&lt;/a&gt;  &lt;code&gt;MyStream&lt;/code&gt;  实现细节&lt;/h2&gt;
&lt;p&gt;简单介绍了 &lt;code&gt;API&lt;/code&gt;  接口定义之后，我们开始深入探讨流的内部实现。&lt;/p&gt;
&lt;p&gt;流由两个重要的部分所组成，当前数据项 (head)&amp;quot;和&amp;quot; 下一数据项的求值函数 &lt;code&gt;(nextItemEvalProcess)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;其中， &lt;code&gt;nextItemEvalProcess&lt;/code&gt;  是流能够实现 &amp;quot;惰性求值&amp;quot; 的关键。&lt;/p&gt;
&lt;img data-src=&#34;/posts/8b8fedea/2022-02-13-23-00-11.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;流的基本属性：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyStream&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Stream&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 流的头部&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; T head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 流的下一项求值函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; NextItemEvalProcess nextItemEvalProcess;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 是否是流的结尾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; isEnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Builder&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;T&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; MyStream&amp;lt;T&amp;gt; target;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.target = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyStream&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Builder&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(T head)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            target.head = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;Builder&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;isEnd&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; isEnd)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            target.isEnd = isEnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Builder&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;nextItemEvalProcess&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(NextItemEvalProcess nextItemEvalProcess)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            target.nextItemEvalProcess = nextItemEvalProcess;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; target;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 当前流强制求值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 求值之后返回一个新的流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.nextItemEvalProcess.eval();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 当前流 为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isEmptyStream&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.isEnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 下一个元素求值过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NextItemEvalProcess&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 求值方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; EvalFunction evalFunction;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NextItemEvalProcess&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(EvalFunction evalFunction)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.evalFunction = evalFunction;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;MyStream &lt;span class=&#34;title&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; evalFunction.apply();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;41-stream流在使用过程中的三个阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41-stream流在使用过程中的三个阶段&#34;&gt;#&lt;/a&gt; 4.1  &lt;code&gt;stream&lt;/code&gt;  流在使用过程中的三个阶段&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成并构造一个流 (List.stream () 等方法)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在流的处理过程中添加、绑定惰性求值流程  (map、filter、limit 等方法)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对流使用强制求值函数，生成最终结果 (max、collect、forEach 等方法)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;42-生成并构造一个流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42-生成并构造一个流&#34;&gt;#&lt;/a&gt; 4.2 生成并构造一个流&lt;/h3&gt;
&lt;p&gt;流在生成时是 &amp;quot;纯净&amp;quot; 的，其最初的 &lt;code&gt;NextItemEvalProcess&lt;/code&gt;  求值之后就是指向自己的下一个元素。&lt;/p&gt;
&lt;p&gt;我们以一个 &lt;code&gt;Integer&lt;/code&gt;  整数流的生成为例。 &lt;code&gt;IntegerStreamGenerator.getIntegerStream(1,10) &lt;/code&gt; 会返回一个流结构，其逻辑上等价于一个从 &lt;code&gt;1&lt;/code&gt;  到 &lt;code&gt;10&lt;/code&gt;  的整数流。但实质是一个惰性求值的 &lt;code&gt;stream&lt;/code&gt;  对象，这里称其为 &lt;code&gt;IntStream&lt;/code&gt; ，其 &lt;code&gt;NextItemEvalProcess&lt;/code&gt;  是一个闭包，方法体是一个递归结构的求值函数，其中下界参数 &lt;code&gt;low = low + 1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;IntStream&lt;/code&gt;  第一次被求值时，流开始初始化， &lt;code&gt;isStart = false&lt;/code&gt; 。当初始化完成之后，每一次求值，都会生成一个新的流对象，其中 &lt;code&gt;head(low) = low + 1&lt;/code&gt; 。当 &lt;code&gt;low &amp;gt; high&lt;/code&gt;  时，流被终止，返回空的流对象。&lt;/p&gt;
&lt;img data-src=&#34;/posts/8b8fedea/2022-02-13-23-00-27.png&#34; class=&#34;&#34;&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 整数流生成器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IntegerStreamGenerator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 获得一个有限的整数流 介于[low-high]之间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; low 下界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; high 上界&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; MyStream&amp;lt;Integer&amp;gt; &lt;span class=&#34;title&#34;&gt;getIntegerStream&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; low, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; high)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; getIntegerStreamInner(low,high,&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 递归函数。配合getIntegerStream(int low,int high)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; MyStream&amp;lt;Integer&amp;gt; &lt;span class=&#34;title&#34;&gt;getIntegerStreamInner&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; low, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; high, &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; isStart)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(low &amp;gt; high)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 到达边界条件，返回空的流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Stream.makeEmptyStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(isStart)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyStream.Builder&amp;lt;Integer&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .process(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; NextItemEvalProcess(()-&amp;gt;getIntegerStreamInner(low,high,&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyStream.Builder&amp;lt;Integer&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 当前元素 low&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .head(low)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// 下一个元素 low+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .process(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; NextItemEvalProcess(()-&amp;gt;getIntegerStreamInner(low+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,high,&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，生成一个流的关键在于确定如何求值下一项元素。对于整数流来说， &lt;code&gt;low = low + 1&lt;/code&gt;  就是其下一项的求值过程。&lt;/p&gt;
&lt;p&gt;那么对于我们非常关心的 &lt;code&gt;jdk&lt;/code&gt;  集合容器，又该如何生成对应的流呢？&lt;/p&gt;
&lt;p&gt;答案是 &lt;code&gt;Iterator&lt;/code&gt;  迭代器， &lt;code&gt;jdk&lt;/code&gt;  的集合容器都实现了 &lt;code&gt;Iterator&lt;/code&gt;  迭代器接口，通过迭代器我们可以轻易的取得容器的下一项元素，而不用关心容器内部实现细节。换句话说，只要实现过迭代器接口，就可以自然的转化为 &lt;code&gt;stream&lt;/code&gt;  流，从而获得流计算的所有能力。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 集合流生成器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CollectionStreamGenerator&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 将一个List转化为stream流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;getListStream&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(List&amp;lt;T&amp;gt; list)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; getListStream(list.iterator(),&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 递归函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; iterator list 集合的迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; isStart 是否是第一次迭代&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; &lt;span class=&#34;function&#34;&gt;MyStream&amp;lt;T&amp;gt; &lt;span class=&#34;title&#34;&gt;getListStream&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Iterator&amp;lt;T&amp;gt; iterator, &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; isStart)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!iterator.hasNext())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 不存在迭代的下一个元素，返回空的流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Stream.makeEmptyStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(isStart)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 初始化，只需要设置 求值过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyStream.Builder&amp;lt;T&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .nextItemEvalProcess(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; NextItemEvalProcess(()-&amp;gt; getListStream(iterator,&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 非初始化，设置head和接下来的求值过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyStream.Builder&amp;lt;T&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .head(iterator.next())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .nextItemEvalProcess(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; NextItemEvalProcess(()-&amp;gt; getListStream(iterator,&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;举例分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#举例分析&#34;&gt;#&lt;/a&gt; 举例分析&lt;/h2&gt;
&lt;p&gt;我们选择一个简单而又不失一般性的例子，串联起这些内容。通过完整的描述一个流求值的全过程，加深大家对流的理解。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Integer sum = IntegerStreamGenerator.getIntegerStream(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .filter(item-&amp;gt; item%&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 过滤出偶数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .map(item-&amp;gt; item * item)    &lt;span class=&#34;comment&#34;&gt;// 映射为平方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .limit(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)                   &lt;span class=&#34;comment&#34;&gt;// 截取前两个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .reduce(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,(i1,i2)-&amp;gt; i1+i2); &lt;span class=&#34;comment&#34;&gt;// 最终结果累加求和(初始值为0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(sum); &lt;span class=&#34;comment&#34;&gt;// 20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;由于我们的 &lt;code&gt;stream&lt;/code&gt;  实现采用的是链式编程的方式，不太好理解，将其展开为逻辑等价的形式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;　　　　 &lt;span class=&#34;comment&#34;&gt;// 生成整数流 1-10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Stream&amp;lt;Integer&amp;gt; intStream = IntegerStreamGenerator.getIntegerStream(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// intStream基础上过滤出偶数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Stream&amp;lt;Integer&amp;gt; filterStream =  intStream.filter(item-&amp;gt; item%&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// filterStream基础上映射为平方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Stream&amp;lt;Integer&amp;gt; mapStream = filterStream.map(item-&amp;gt; item * item);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// mapStream基础上截取前两个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Stream&amp;lt;Integer&amp;gt; limitStream = mapStream.limit(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 最终结果累加求和(初始值为0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Integer sum = limitStream.reduce(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,(i1,i2)-&amp;gt; i1+i2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(sum); &lt;span class=&#34;comment&#34;&gt;// 20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt;  强制求值操作之前的执行过程图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/8b8fedea/2022-02-13-23-00-42.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt;  强制求值过程中的执行过程图 ：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/8b8fedea/2022-02-13-23-00-49.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;可以看到， &lt;code&gt;stream&lt;/code&gt;  的求值过程并不会一口气将初始的流全部求值，而是按需的、一个一个的进行求值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stream&lt;/code&gt;  的一次求值过程至多只会遍历流中元素一次；如果存在短路操作 ( &lt;code&gt;limit、anyMatch&lt;/code&gt;  等)，实际迭代的次数会更少。&lt;/p&gt;
&lt;p&gt;因此不必担心多层的 &lt;code&gt;map、filter&lt;/code&gt;  处理逻辑的嵌套会让流进行多次迭代，导致效率急剧下降。&lt;/p&gt;
&lt;img data-src=&#34;/posts/8b8fedea/2022-02-13-23-00-59.png&#34; class=&#34;&#34;&gt;
&lt;hr/&gt;
&lt;h2 id=&#34;具体用法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#具体用法&#34;&gt;#&lt;/a&gt; 具体用法&lt;/h2&gt;
&lt;img data-src=&#34;/posts/8b8fedea/2022-02-13-23-01-07.png&#34; class=&#34;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无状态：指元素的处理不受之前元素的影响；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有状态：指该操作只有拿到所有元素之后才能继续下去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非短路操作：指必须处理所有元素才能得到最终结果；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;短路操作：指遇到某些符合条件的元素就可以得到最终结果，如 &lt;code&gt; A || B&lt;/code&gt; ，只要 &lt;code&gt;A&lt;/code&gt;  为 &lt;code&gt;true&lt;/code&gt; ，则无需判断 &lt;code&gt;B&lt;/code&gt;  的结果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-流的常用创建方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-流的常用创建方法&#34;&gt;#&lt;/a&gt; 1. 流的常用创建方法&lt;/h3&gt;
&lt;h4 id=&#34;11-使用collection下的-stream-和-parallelstream-方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-使用collection下的-stream-和-parallelstream-方法&#34;&gt;#&lt;/a&gt; 1.1 使用 &lt;code&gt;Collection&lt;/code&gt;  下的  &lt;code&gt;stream()&lt;/code&gt;  和  &lt;code&gt;parallelStream()&lt;/code&gt;  方法&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;String&amp;gt; stream = list.stream(); &lt;span class=&#34;comment&#34;&gt;//获取一个顺序流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;String&amp;gt; parallelStream = list.parallelStream(); &lt;span class=&#34;comment&#34;&gt;//获取一个并行流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;12-使用arrays-中的-stream-方法将数组转成流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-使用arrays-中的-stream-方法将数组转成流&#34;&gt;#&lt;/a&gt; 1.2 使用 &lt;code&gt;Arrays&lt;/code&gt;  中的  &lt;code&gt;stream()&lt;/code&gt;  方法，将数组转成流&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Integer[] nums = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Integer[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;Integer&amp;gt; stream = Arrays.stream(nums);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;13-使用stream中的静态方法of-iterate-generate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-使用stream中的静态方法of-iterate-generate&#34;&gt;#&lt;/a&gt; 1.3 使用 &lt;code&gt;Stream&lt;/code&gt;  中的静态方法： &lt;code&gt;of()、iterate()、generate()&lt;/code&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;Integer&amp;gt; stream = Stream.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;Integer&amp;gt; stream2 = Stream.iterate(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, (x) -&amp;gt; x + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;).limit(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stream2.forEach(System.out::println); &lt;span class=&#34;comment&#34;&gt;// 0 2 4 6 8 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;Double&amp;gt; stream3 = Stream.generate(Math::random).limit(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stream3.forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;14-使用-bufferedreaderlines-方法将每行内容转成流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14-使用-bufferedreaderlines-方法将每行内容转成流&#34;&gt;#&lt;/a&gt; 1.4 使用  &lt;code&gt;BufferedReader.lines()&lt;/code&gt;  方法，将每行内容转成流&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;BufferedReader reader = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; FileReader(&lt;span class=&#34;string&#34;&gt;&amp;quot;F:\\test_stream.txt&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;String&amp;gt; lineStream = reader.lines();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lineStream.forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;15-使用-patternsplitasstream-方法将字符串分隔成流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15-使用-patternsplitasstream-方法将字符串分隔成流&#34;&gt;#&lt;/a&gt; 1.5 使用  &lt;code&gt;Pattern.splitAsStream()&lt;/code&gt;  方法，将字符串分隔成流&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Pattern pattern = Pattern.compile(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;String&amp;gt; stringStream = pattern.splitAsStream(&lt;span class=&#34;string&#34;&gt;&amp;quot;a,b,c,d&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stringStream.forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2-流的中间操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-流的中间操作&#34;&gt;#&lt;/a&gt;  &lt;code&gt;2.&lt;/code&gt;  流的中间操作&lt;/h3&gt;
&lt;h4 id=&#34;21-筛选与切片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21-筛选与切片&#34;&gt;#&lt;/a&gt;  &lt;code&gt;2.1&lt;/code&gt;  筛选与切片&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;filter：&lt;/code&gt; 过滤流中的某些元素&lt;/p&gt;
&lt;p&gt;&lt;code&gt;limit(n)：&lt;/code&gt; 获取 &lt;code&gt;n&lt;/code&gt;  个元素&lt;/p&gt;
&lt;p&gt;&lt;code&gt;skip(n)：&lt;/code&gt; 跳过 &lt;code&gt;n&lt;/code&gt;  元素，配合 &lt;code&gt;limit(n)&lt;/code&gt;  可实现分页&lt;/p&gt;
&lt;p&gt;&lt;code&gt;distinct：&lt;/code&gt; 通过流中元素的  &lt;code&gt;hashCode()&lt;/code&gt;  和  &lt;code&gt;equals()&lt;/code&gt;  去除重复元素&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;Integer&amp;gt; stream = Stream.of(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;Integer&amp;gt; newStream = stream.filter(s -&amp;gt; s &amp;gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;//6 6 7 9 8 10 12 14 14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .distinct() &lt;span class=&#34;comment&#34;&gt;//6 7 9 8 10 12 14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .skip(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;//9 8 10 12 14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .limit(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//9 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;newStream.forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;22-映射&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22-映射&#34;&gt;#&lt;/a&gt;  &lt;code&gt;2.2&lt;/code&gt;  映射&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map：&lt;/code&gt; 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatMap：&lt;/code&gt; 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;string&#34;&gt;&amp;quot;a,b,c&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;1,2,3&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//将每个元素转成一个新的且不带逗号的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;String&amp;gt; s1 = list.stream().map(s -&amp;gt; s.replaceAll(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s1.forEach(System.out::println); &lt;span class=&#34;comment&#34;&gt;// abc  123&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;String&amp;gt; s3 = list.stream().flatMap(s -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//将每个元素转换成一个stream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String[] split = s.split(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Stream&amp;lt;String&amp;gt; s2 = Arrays.stream(split);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; s2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s3.forEach(System.out::println); &lt;span class=&#34;comment&#34;&gt;// a b c 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;23-排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23-排序&#34;&gt;#&lt;/a&gt;  &lt;code&gt;2.3&lt;/code&gt;  排序&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sorted()：&lt;/code&gt; 自然排序，流中元素需实现 &lt;code&gt;Comparable&lt;/code&gt;  接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sorted(Comparator com)：&lt;/code&gt; 定制排序，自定义 &lt;code&gt;Comparator&lt;/code&gt;  排序器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;string&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;ff&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//String 类自身已实现Compareable接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list.stream().sorted().forEach(System.out::println);&lt;span class=&#34;comment&#34;&gt;// aa dd ff&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student s1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student s2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;bb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student s3 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student s4 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Student&amp;gt; studentList = Arrays.asList(s1, s2, s3, s4);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//自定义排序：先按姓名升序，姓名相同则按年龄升序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;studentList.stream().sorted(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (o1, o2) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (o1.getName().equals(o2.getName())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o1.getAge() - o2.getAge();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o1.getName().compareTo(o2.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;).forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;24-消费&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24-消费&#34;&gt;#&lt;/a&gt; 2.4 消费&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;peek：&lt;/code&gt; 如同于 &lt;code&gt;map&lt;/code&gt; ，能得到流中的每一个元素。但 &lt;code&gt;map&lt;/code&gt;  接收的是一个 &lt;code&gt;Function&lt;/code&gt;  表达式，有返回值；而 &lt;code&gt;peek&lt;/code&gt;  接收的是 &lt;code&gt;Consumer&lt;/code&gt;  表达式，没有返回值。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Student s1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student s2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;bb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Student&amp;gt; studentList = Arrays.asList(s1, s2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;studentList.stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .peek(o -&amp;gt; o.setAge(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .forEach(System.out::println);   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//结果：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student&amp;#123;name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;aa&amp;#x27;&lt;/span&gt;, age=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student&amp;#123;name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;bb&amp;#x27;&lt;/span&gt;, age=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;&amp;#125;            &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-流的终止操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-流的终止操作&#34;&gt;#&lt;/a&gt; 3. 流的终止操作&lt;/h3&gt;
&lt;h4 id=&#34;31-匹配-聚合操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31-匹配-聚合操作&#34;&gt;#&lt;/a&gt; 3.1 匹配、聚合操作&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;allMatch&lt;/code&gt; ：接收一个  &lt;code&gt;Predicate&lt;/code&gt;  函数，当流中每个元素都符合该断言时才返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;noneMatch&lt;/code&gt; ：接收一个  &lt;code&gt;Predicate&lt;/code&gt;  函数，当流中每个元素都不符合该断言时才返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;anyMatch&lt;/code&gt; ：接收一个  &lt;code&gt;Predicate&lt;/code&gt;  函数，只要流中有一个元素满足该断言则返回 &lt;code&gt;true&lt;/code&gt; ，否则返回 &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findFirst&lt;/code&gt; ：返回流中第一个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findAny&lt;/code&gt; ：返回流中的任意元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt; ：返回流中元素的总个数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max&lt;/code&gt; ：返回流中元素最大值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt; ：返回流中元素最小值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; allMatch = list.stream().allMatch(e -&amp;gt; e &amp;gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; noneMatch = list.stream().noneMatch(e -&amp;gt; e &amp;gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; anyMatch = list.stream().anyMatch(e -&amp;gt; e &amp;gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer findFirst = list.stream().findFirst().get(); &lt;span class=&#34;comment&#34;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer findAny = list.stream().findAny().get(); &lt;span class=&#34;comment&#34;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; count = list.stream().count(); &lt;span class=&#34;comment&#34;&gt;//5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer max = list.stream().max(Integer::compareTo).get(); &lt;span class=&#34;comment&#34;&gt;//5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer min = list.stream().min(Integer::compareTo).get(); &lt;span class=&#34;comment&#34;&gt;//1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;32-规约操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32-规约操作&#34;&gt;#&lt;/a&gt; 3.2 规约操作&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Optional&amp;lt;T&amp;gt; reduce(BinaryOperator&amp;lt;T&amp;gt; accumulator)：&lt;/code&gt; 第一次执行时， &lt;code&gt;accumulator&lt;/code&gt;  函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素；依次类推。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T reduce(T identity, BinaryOperator&amp;lt;T&amp;gt; accumulator)：&lt;/code&gt; 流程跟上面一样，只是第一次执行时， &lt;code&gt;accumulator&lt;/code&gt;  函数的第一个参数为 &lt;code&gt;identity&lt;/code&gt; ，而第二个参数为流中的第一个元素。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;U&amp;gt; U reduce(U identity,BiFunction&amp;lt;U, ? super T, U&amp;gt; accumulator,BinaryOperator&amp;lt;U&amp;gt; combiner)：&lt;/code&gt; 在串行流 ( &lt;code&gt;stream&lt;/code&gt; ) 中，该方法跟第二个方法一样，即第三个参数 &lt;code&gt;combiner&lt;/code&gt;  不会起作用。在并行流 ( &lt;code&gt;parallelStream&lt;/code&gt; ) 中，我们知道流被 &lt;code&gt;fork join&lt;/code&gt;  出多个线程进行执行，此时每个线程的执行流程就跟第二个方法 &lt;code&gt;reduce(identity,accumulator)&lt;/code&gt;  一样，而第三个参数 &lt;code&gt;combiner&lt;/code&gt;  函数，则是将每个线程的执行结果当成一个新的流，然后使用第一个方法 &lt;code&gt;reduce(accumulator)&lt;/code&gt;  流程进行规约。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//经过测试，当元素个数小于24时，并行时线程数等于元素个数，当大于等于24时，并行时线程数为16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer v = list.stream().reduce((x1, x2) -&amp;gt; x1 + x2).get();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(v);   &lt;span class=&#34;comment&#34;&gt;// 300&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer v1 = list.stream().reduce(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, (x1, x2) -&amp;gt; x1 + x2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(v1);  &lt;span class=&#34;comment&#34;&gt;//310&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer v2 = list.stream().reduce(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (x1, x2) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;stream accumulator: x1:&amp;quot;&lt;/span&gt; + x1 + &lt;span class=&#34;string&#34;&gt;&amp;quot;  x2:&amp;quot;&lt;/span&gt; + x2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x1 - x2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (x1, x2) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;stream combiner: x1:&amp;quot;&lt;/span&gt; + x1 + &lt;span class=&#34;string&#34;&gt;&amp;quot;  x2:&amp;quot;&lt;/span&gt; + x2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x1 * x2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(v2); &lt;span class=&#34;comment&#34;&gt;// -300&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer v3 = list.parallelStream().reduce(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (x1, x2) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;parallelStream accumulator: x1:&amp;quot;&lt;/span&gt; + x1 + &lt;span class=&#34;string&#34;&gt;&amp;quot;  x2:&amp;quot;&lt;/span&gt; + x2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x1 - x2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (x1, x2) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;parallelStream combiner: x1:&amp;quot;&lt;/span&gt; + x1 + &lt;span class=&#34;string&#34;&gt;&amp;quot;  x2:&amp;quot;&lt;/span&gt; + x2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x1 * x2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(v3); &lt;span class=&#34;comment&#34;&gt;//197474048&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;33-收集操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#33-收集操作&#34;&gt;#&lt;/a&gt; 3.3 收集操作&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collect&lt;/code&gt; ：接收一个 &lt;code&gt;Collector&lt;/code&gt;  实例，将流中元素收集成另外一个数据结构。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Collector&amp;lt;T, A, R&amp;gt;&lt;/code&gt;  是一个接口，有以下 5 个抽象方法：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Supplier&amp;lt;A&amp;gt; supplier()&lt;/code&gt; ：创建一个结果容器 A&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BiConsumer&amp;lt;A, T&amp;gt; accumulator()&lt;/code&gt; ：消费型接口，第一个参数为容器 A，第二个参数为流中元素 &lt;code&gt;T&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BinaryOperator&amp;lt;A&amp;gt; combiner()&lt;/code&gt; ：函数接口，该参数的作用跟上一个方法 ( &lt;code&gt;reduce&lt;/code&gt; ) 中的 &lt;code&gt;combiner&lt;/code&gt;  参数一样，将并行流中各个子进程的运行结果 ( &lt;code&gt;accumulator&lt;/code&gt;  函数操作后的容器 &lt;code&gt;A&lt;/code&gt; ) 进行合并。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function&amp;lt;A, R&amp;gt; finisher()&lt;/code&gt; ：函数式接口，参数为：容器 &lt;code&gt;A&lt;/code&gt; ，返回类型为： &lt;code&gt;collect&lt;/code&gt;  方法最终想要的结果 &lt;code&gt;R&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set&amp;lt;Characteristics&amp;gt; characteristics()&lt;/code&gt; ：返回一个不可变的 &lt;code&gt;Set&lt;/code&gt;  集合，用来表明该 &lt;code&gt;Collector&lt;/code&gt;  的特征。有以下三个特征：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CONCURRENT&lt;/code&gt; ：表示此收集器支持并发。（官方文档还有其他描述，暂时没去探索，故不作过多翻译）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNORDERED&lt;/code&gt; ：表示该收集操作不会保留流中元素原有的顺序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IDENTITY_FINISH&lt;/code&gt; ：表示 &lt;code&gt;finisher&lt;/code&gt;  参数只是标识而已，可忽略。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;331-collector-工具库collectors&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#331-collector-工具库collectors&#34;&gt;#&lt;/a&gt; 3.3.1  &lt;code&gt;Collector&lt;/code&gt;  工具库：Collectors&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Student s1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student s2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;bb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student s3 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Student&amp;gt; list = Arrays.asList(s1, s2, s3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//装成list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Integer&amp;gt; ageList = list.stream().map(Student::getAge).collect(Collectors.toList()); &lt;span class=&#34;comment&#34;&gt;// [10, 20, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//转成set&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Set&amp;lt;Integer&amp;gt; ageSet = list.stream().map(Student::getAge).collect(Collectors.toSet()); &lt;span class=&#34;comment&#34;&gt;// [20, 10]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//转成map,注:key不能相同，否则报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, Integer&amp;gt; studentMap = list.stream().collect(Collectors.toMap(Student::getName, Student::getAge)); &lt;span class=&#34;comment&#34;&gt;// &amp;#123;cc=10, bb=20, aa=10&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//字符串分隔符连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String joinName = list.stream().map(Student::getName).collect(Collectors.joining(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// (aa,bb,cc)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//聚合操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//1.学生总数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Long count = list.stream().collect(Collectors.counting()); &lt;span class=&#34;comment&#34;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//2.最大年龄 (最小的minBy同理)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer maxAge = list.stream().map(Student::getAge).collect(Collectors.maxBy(Integer::compare)).get(); &lt;span class=&#34;comment&#34;&gt;// 20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//3.所有人的年龄&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer sumAge = list.stream().collect(Collectors.summingInt(Student::getAge)); &lt;span class=&#34;comment&#34;&gt;// 40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//4.平均年龄&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Double averageAge = list.stream().collect(Collectors.averagingDouble(Student::getAge)); &lt;span class=&#34;comment&#34;&gt;// 13.333333333333334&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 带上以上所有方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DoubleSummaryStatistics statistics = list.stream().collect(Collectors.summarizingDouble(Student::getAge));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;count:&amp;quot;&lt;/span&gt; + statistics.getCount() + &lt;span class=&#34;string&#34;&gt;&amp;quot;,max:&amp;quot;&lt;/span&gt; + statistics.getMax() + &lt;span class=&#34;string&#34;&gt;&amp;quot;,sum:&amp;quot;&lt;/span&gt; + statistics.getSum() + &lt;span class=&#34;string&#34;&gt;&amp;quot;,average:&amp;quot;&lt;/span&gt; + statistics.getAverage());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//分组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;Integer, List&amp;lt;Student&amp;gt;&amp;gt; ageMap = list.stream().collect(Collectors.groupingBy(Student::getAge));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//多重分组,先根据类型分再根据年龄分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;Integer, Map&amp;lt;Integer, List&amp;lt;Student&amp;gt;&amp;gt;&amp;gt; typeAgeMap = list.stream().collect(Collectors.groupingBy(Student::getType, Collectors.groupingBy(Student::getAge)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//分区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//分成两部分，一部分大于10岁，一部分小于等于10岁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;Boolean, List&amp;lt;Student&amp;gt;&amp;gt; partMap = list.stream().collect(Collectors.partitioningBy(v -&amp;gt; v.getAge() &amp;gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//规约&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Integer allAge = list.stream().map(Student::getAge).collect(Collectors.reducing(Integer::sum)).get(); &lt;span class=&#34;comment&#34;&gt;//40&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;332-collectorstolist-解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#332-collectorstolist-解析&#34;&gt;#&lt;/a&gt; 3.3.2  &lt;code&gt;Collectors.toList()&lt;/code&gt;  解析&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//toList 源码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &amp;lt;T&amp;gt; Collector&amp;lt;T, ?, List&amp;lt;T&amp;gt;&amp;gt; toList() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CollectorImpl&amp;lt;&amp;gt;((Supplier&amp;lt;List&amp;lt;T&amp;gt;&amp;gt;) ArrayList::&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt;, List::add,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (left, right) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                left.addAll(right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;, CH_ID);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//为了更好地理解，我们转化一下源码中的lambda表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; Collector&amp;lt;T, ?, List&amp;lt;T&amp;gt;&amp;gt; toList() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Supplier&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; supplier = () -&amp;gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BiConsumer&amp;lt;List&amp;lt;T&amp;gt;, T&amp;gt; accumulator = (list, t) -&amp;gt; list.add(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BinaryOperator&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; combiner = (list1, list2) -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list1.addAll(list2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; list1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Function&amp;lt;List&amp;lt;T&amp;gt;, List&amp;lt;T&amp;gt;&amp;gt; finisher = (list) -&amp;gt; list;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Set&amp;lt;Collector.Characteristics&amp;gt; characteristics = Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.IDENTITY_FINISH));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Collector&amp;lt;T, List&amp;lt;T&amp;gt;, List&amp;lt;T&amp;gt;&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Supplier &lt;span class=&#34;title&#34;&gt;supplier&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; supplier;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; BiConsumer &lt;span class=&#34;title&#34;&gt;accumulator&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; accumulator;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; BinaryOperator &lt;span class=&#34;title&#34;&gt;combiner&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; combiner;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Function &lt;span class=&#34;title&#34;&gt;finisher&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; finisher;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Set&amp;lt;Characteristics&amp;gt; &lt;span class=&#34;title&#34;&gt;characteristics&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; characteristics;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/a3dfcd98/</guid>
            <title>SpringBoot中常见的几种解决跨域的方式</title>
            <link>https://smile1231.github.io/posts/a3dfcd98/</link>
            <category>Java</category>
            <category>SpringBoot</category>
            <pubDate>Sun, 13 Feb 2022 21:43:13 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;springboot中常见的几种解决跨域的方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springboot中常见的几种解决跨域的方式&#34;&gt;#&lt;/a&gt;  &lt;code&gt;SpringBoot&lt;/code&gt;  中常见的几种解决跨域的方式&lt;/h1&gt;
&lt;h2 id=&#34;一-为什么会出现跨域问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-为什么会出现跨域问题&#34;&gt;#&lt;/a&gt; 一、为什么会出现跨域问题&lt;/h2&gt;
&lt;p&gt;出于浏览器的同源策略限制。同源策略（ &lt;code&gt;Sameoriginpolicy&lt;/code&gt; ）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 &lt;code&gt;Web&lt;/code&gt;  是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。&lt;/p&gt;
&lt;p&gt;同源策略会阻止一个域的 &lt;code&gt;javascript&lt;/code&gt;  脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（ &lt;code&gt;protocol&lt;/code&gt; ），主机（ &lt;code&gt;host&lt;/code&gt; ）和端口号（ &lt;code&gt;port&lt;/code&gt; ）&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;二-什么是跨域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-什么是跨域&#34;&gt;#&lt;/a&gt; 二、什么是跨域&lt;/h2&gt;
&lt;p&gt;当一个请求 &lt;code&gt;url&lt;/code&gt;  的协议、域名、端口三者之间任意一个与当前页面 &lt;code&gt;url&lt;/code&gt;  不同即为跨域&lt;/p&gt;
&lt;h2 id=&#34;三-非同源限制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-非同源限制&#34;&gt;#&lt;/a&gt; 三、非同源限制&lt;/h2&gt;
&lt;p&gt;【1】无法读取非同源网页的  &lt;code&gt;Cookie&lt;/code&gt; 、 &lt;code&gt;LocalStorage&lt;/code&gt;  和  &lt;code&gt;IndexedDB&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;【2】无法接触非同源网页的  &lt;code&gt;DOM&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;【3】无法向非同源地址发送  &lt;code&gt;AJAX&lt;/code&gt;  请求&lt;/p&gt;
&lt;h2 id=&#34;四-java-后端-实现-cors-跨域请求的方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-java-后端-实现-cors-跨域请求的方式&#34;&gt;#&lt;/a&gt; 四、 &lt;code&gt;java&lt;/code&gt;  后端 实现  &lt;code&gt;CORS&lt;/code&gt;  跨域请求的方式&lt;/h2&gt;
&lt;p&gt;对于  &lt;code&gt;CORS&lt;/code&gt;  的跨域请求，主要有以下几种方式可供选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回新的 &lt;code&gt;CorsFilter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重写  &lt;code&gt;WebMvcConfigurer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用注解  &lt;code&gt;@CrossOrigin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;手动设置响应头 ( &lt;code&gt;HttpServletResponse&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;自定 &lt;code&gt;web filter&lt;/code&gt;  实现跨域&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CorFilter / WebMvConfigurer / @CrossOrigin&lt;/code&gt;  需要  &lt;code&gt;SpringMVC 4.2&lt;/code&gt;  以上版本才支持，对应 &lt;code&gt;springBoot 1.3&lt;/code&gt;  版本以上&lt;/li&gt;
&lt;li&gt;上面前两种方式属于全局  &lt;code&gt;CORS&lt;/code&gt;  配置，后两种属于局部  &lt;code&gt;CORS&lt;/code&gt;  配置。如果使用了局部跨域是会覆盖全局跨域的规则，所以可以通过  &lt;code&gt;@CrossOrigin&lt;/code&gt;  注解来进行细粒度更高的跨域资源控制。&lt;/li&gt;
&lt;li&gt;其实无论哪种方案，最终目的都是修改响应头，向响应头中添加浏览器所要求的数据，进而实现跨域&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1返回新的-corsfilter全局跨域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1返回新的-corsfilter全局跨域&#34;&gt;#&lt;/a&gt; 1. 返回新的  &lt;code&gt;CorsFilter&lt;/code&gt;  (全局跨域)&lt;/h2&gt;
&lt;p&gt;在任意配置类，返回一个 新的  &lt;code&gt;CorsFIlter Bean&lt;/code&gt;  ，并添加映射路径和具体的 &lt;code&gt;CORS&lt;/code&gt;  配置路径。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GlobalCorsConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CorsFilter &lt;span class=&#34;title&#34;&gt;corsFilter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//1. 添加 CORS配置信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CorsConfiguration config = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CorsConfiguration();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//放行哪些原始域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.addAllowedOrigin(&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//是否发送 Cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.setAllowCredentials(&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//放行哪些请求方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.addAllowedMethod(&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//放行哪些原始请求头部信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.addAllowedHeader(&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//暴露哪些头部信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        config.addExposedHeader(&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//2. 添加映射路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        UrlBasedCorsConfigurationSource corsConfigurationSource = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; UrlBasedCorsConfigurationSource();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        corsConfigurationSource.registerCorsConfiguration(&lt;span class=&#34;string&#34;&gt;&amp;quot;/**&amp;quot;&lt;/span&gt;,config);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//3. 返回新的CorsFilter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CorsFilter(corsConfigurationSource);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;2-重写-webmvcconfigurer全局跨域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-重写-webmvcconfigurer全局跨域&#34;&gt;#&lt;/a&gt; 2. 重写  &lt;code&gt;WebMvcConfigurer&lt;/code&gt;  (全局跨域)&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CorsConfig&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WebMvcConfigurer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;addCorsMappings&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CorsRegistry registry)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        registry.addMapping(&lt;span class=&#34;string&#34;&gt;&amp;quot;/**&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//是否发送Cookie&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .allowCredentials(&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//放行哪些原始域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .allowedOrigins(&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .allowedMethods(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String[]&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;PUT&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;DELETE&amp;quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .allowedHeaders(&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                .exposedHeaders(&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-使用注解-局部跨域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-使用注解-局部跨域&#34;&gt;#&lt;/a&gt; 3. 使用注解 (局部跨域)&lt;/h2&gt;
&lt;p&gt;在控制器 (类上) 上使用注解  &lt;code&gt;@CrossOrigin:&lt;/code&gt; ，表示该类的所有方法允许跨域。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@CrossOrigin(origins = &amp;quot;*&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;HelloController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/hello&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在方法上使用注解  &lt;code&gt;@CrossOrigin&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/hello&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@CrossOrigin(origins = &amp;quot;*&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//@CrossOrigin(value = &amp;quot;http://localhost:8081&amp;quot;) //指定具体ip允许跨域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;4-手动设置响应头局部跨域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-手动设置响应头局部跨域&#34;&gt;#&lt;/a&gt; 4. 手动设置响应头 (局部跨域)&lt;/h2&gt;
&lt;p&gt;使用  &lt;code&gt;HttpServletResponse&lt;/code&gt;  对象添加响应头 &lt;code&gt;(Access-Control-Allow-Origin)&lt;/code&gt;  来授权原始域，这里  &lt;code&gt;Origin&lt;/code&gt;  的值也可以设置为 &lt;code&gt; “*”&lt;/code&gt; , 表示全部放行。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/index&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HttpServletResponse response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    response.addHeader(&lt;span class=&#34;string&#34;&gt;&amp;quot;Access-Allow-Control-Origin&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;5-使用自定义filter实现跨域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-使用自定义filter实现跨域&#34;&gt;#&lt;/a&gt; 5. 使用自定义 &lt;code&gt;filter&lt;/code&gt;  实现跨域&lt;/h2&gt;
&lt;p&gt;首先编写一个过滤器，可以起名字为 &lt;code&gt;MyCorsFilter.java&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; com.mesnac.aop;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.servlet.Filter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.servlet.FilterChain;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.servlet.FilterConfig;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.servlet.ServletException;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.servlet.ServletRequest;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.servlet.ServletResponse;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; javax.servlet.http.HttpServletResponse;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyCorsFilter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Filter&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doFilter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ServletRequest req, ServletResponse res, FilterChain chain)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; IOException, ServletException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HttpServletResponse response = (HttpServletResponse) res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    response.setHeader(&lt;span class=&#34;string&#34;&gt;&amp;quot;Access-Control-Allow-Origin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    response.setHeader(&lt;span class=&#34;string&#34;&gt;&amp;quot;Access-Control-Allow-Methods&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;POST, GET, OPTIONS, DELETE&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    response.setHeader(&lt;span class=&#34;string&#34;&gt;&amp;quot;Access-Control-Max-Age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;3600&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    response.setHeader(&lt;span class=&#34;string&#34;&gt;&amp;quot;Access-Control-Allow-Headers&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;x-requested-with,content-type&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    chain.doFilter(req, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FilterConfig filterConfig)&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;web.xml&lt;/code&gt;  中配置这个过滤器，使其生效&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 跨域访问 START--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CorsFilter&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;filter-class&lt;/span&gt;&amp;gt;&lt;/span&gt;com.mesnac.aop.MyCorsFilter&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;filter-class&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;filter-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;CorsFilter&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;filter-name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;/*&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;url-pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;filter-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 跨域访问 END  --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/c112412d/</guid>
            <title>Mybatis封装成Map结果</title>
            <link>https://smile1231.github.io/posts/c112412d/</link>
            <category>Java</category>
            <category>SpringBoot</category>
            <category>Mybatis</category>
            <pubDate>Sun, 13 Feb 2022 21:42:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mybatis封装成map结果&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis封装成map结果&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Mybatis&lt;/code&gt;  封装成 &lt;code&gt;Map&lt;/code&gt;  结果&lt;/h1&gt;
&lt;h2 id=&#34;dao层&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dao层&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Dao&lt;/code&gt;  层&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@MapKey(&amp;quot;cityCode&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Map&amp;lt;String,InvoiceSubjectRuleCity&amp;gt; &lt;span class=&#34;title&#34;&gt;bulkSelectRuleCityByRuleIdList&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@Param(&amp;quot;ruleIdList&amp;quot;)&lt;/span&gt; List&amp;lt;Long&amp;gt; ruleIdList)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;bulkSelectRuleCityByRuleIdList&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;BaseResultMap&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    select&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;refid&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Base_Column_List&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    from t_invoice_subject_rule_city&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;where&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      rule_id in&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;collection&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;ruleIdList&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;item&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;ruleId&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;open&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;close&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;separator&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           #&amp;#123;ruleId&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;foreach&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;where&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;返回结果即为 &lt;code&gt;Map&lt;/code&gt;  类型&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/2edf7887/</guid>
            <title>MybatisPlus实现分页查询</title>
            <link>https://smile1231.github.io/posts/2edf7887/</link>
            <category>Java</category>
            <category>SpringBoot</category>
            <category>Mybatis</category>
            <category>分页查询</category>
            <pubDate>Sun, 13 Feb 2022 21:41:49 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mybatisplus实现分页查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatisplus实现分页查询&#34;&gt;#&lt;/a&gt;  &lt;code&gt;MybatisPlus&lt;/code&gt;  实现分页查询&lt;/h1&gt;
&lt;h2 id=&#34;分页区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分页区别&#34;&gt;#&lt;/a&gt; 分页区别&lt;/h2&gt;
&lt;p&gt;分页查询每个人程序猿几乎都使用过，但是有部分同学不懂什么是物理分页和逻辑分页。&lt;/p&gt;
&lt;p&gt;物理分页：相当于执行了 &lt;code&gt;limit&lt;/code&gt;  分页语句，返回部分数据。物理分页只返回部分数据占用内存小，能够获取数据库最新的状态，实施性比较强，一般适用于数据量比较大，数据更新比较频繁的场景。&lt;/p&gt;
&lt;p&gt;逻辑分页：一次性把全部的数据取出来，通过程序进行筛选数据。如果数据量大的情况下会消耗大量的内存，由于逻辑分页只需要读取数据库一次，不能获取数据库最新状态，实施性比较差，适用于数据量小，数据稳定的场合。&lt;/p&gt;
&lt;p&gt;那么 MP 中的物理分页怎么实现呢？ 往下看往下看&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h2&gt;
&lt;p&gt;需要新建一个 &lt;code&gt;JavaConfig&lt;/code&gt;  类&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyBatisPlusConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 分页插件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; PaginationInterceptor &lt;span class=&#34;title&#34;&gt;paginationInterceptor&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; PaginationInterceptor();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;具体分页实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#具体分页实现&#34;&gt;#&lt;/a&gt; 具体分页实现&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MP&lt;/code&gt;  的 &lt;code&gt;Wrapper&lt;/code&gt;  提供了两种分页查询的方式，源码如下：&lt;/p&gt;
&lt;img data-src=&#34;/posts/2edf7887/2022-02-13-22-35-05.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;可见两个分页方法参数都是一致的，只是返回参数略有不同，具体选择根据实际业务为准。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;* 分页查询&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;selectByPage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    QueryWrapper&amp;lt;User&amp;gt; wrapper = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; QueryWrapper();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    wrapper.like(&lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;雨&amp;quot;&lt;/span&gt;).lt(&lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Page&amp;lt;User&amp;gt; page = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Page&amp;lt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//IPage&amp;lt;User&amp;gt; userIPage = userMapper.selectPage(page, wrapper);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    IPage&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; mapIPage = userMapper.selectMapsPage(page, wrapper);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;总页数&amp;quot;&lt;/span&gt;+mapIPage.getPages());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;总记录数&amp;quot;&lt;/span&gt;+mapIPage.getTotal());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; records = mapIPage.getRecords();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    records.forEach(System.out::println);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上分页查询执行 &lt;code&gt;sql&lt;/code&gt;  如下，先是查询了一次总记录数，然后在查询的数据。&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;DEBUG&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt;  Preparing: &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;COUNT&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;LIKE&lt;/span&gt; ? &lt;span class=&#34;keyword&#34;&gt;AND&lt;/span&gt; age &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; ? &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DEBUG&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; Parameters: &lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt;雨&lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt;(String), &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TRACE&lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;    Columns: &lt;span class=&#34;built_in&#34;&gt;COUNT&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TRACE&lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;        &lt;span class=&#34;type&#34;&gt;Row&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DEBUG&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt;  Preparing: &lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; id,name,age,email,manager_id,create_time &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;LIKE&lt;/span&gt; ? &lt;span class=&#34;keyword&#34;&gt;AND&lt;/span&gt; age &lt;span class=&#34;operator&#34;&gt;&amp;lt;&lt;/span&gt; ? LIMIT ?,? &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DEBUG&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;&amp;gt;&lt;/span&gt; Parameters: &lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt;雨&lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt;(String), &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;Integer&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;(Long), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;(Long)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TRACE&lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;    Columns: id, name, age, email, manager_id, create_time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TRACE&lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;        &lt;span class=&#34;type&#34;&gt;Row&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, 张雨琪, &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;, zjq&lt;span class=&#34;variable&#34;&gt;@baomidou&lt;/span&gt;.com, &lt;span class=&#34;number&#34;&gt;1088248166370832385&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2021&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-01&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;09&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TRACE&lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;        &lt;span class=&#34;type&#34;&gt;Row&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, 刘红雨, &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;, lhm&lt;span class=&#34;variable&#34;&gt;@baomidou&lt;/span&gt;.com, &lt;span class=&#34;number&#34;&gt;1088248166370832385&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2021&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-01&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;-14&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;09&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;48&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DEBUG&lt;span class=&#34;operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;      Total: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;总页数&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;总记录数&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们有需求只要查询数据即可， 不关心总记录数等，如果使用默认的方式就消耗不必要的性能。那么解决办法也是很简单的，只需要在创建 &lt;code&gt;page&lt;/code&gt;  对象时传入第三个参数为 &lt;code&gt;false&lt;/code&gt;  即可。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Page&amp;lt;User&amp;gt; page = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Page&amp;lt;&amp;gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/31dc52e1/</guid>
            <title>MyBatis之分页查询：MyBatis PageHelper</title>
            <link>https://smile1231.github.io/posts/31dc52e1/</link>
            <category>Java</category>
            <category>SpringBoot</category>
            <category>Mybatis</category>
            <category>分页查询</category>
            <pubDate>Sun, 13 Feb 2022 21:40:27 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mybatis之分页查询mybatis-pagehelper&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis之分页查询mybatis-pagehelper&#34;&gt;#&lt;/a&gt;  &lt;code&gt;MyBatis&lt;/code&gt;  之分页查询： &lt;code&gt;MyBatis PageHelper&lt;/code&gt;&lt;/h1&gt;
&lt;h2 id=&#34;1-添加依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-添加依赖&#34;&gt;#&lt;/a&gt; 1. 添加依赖&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!--MyBatis 分页插件: MyBatis PageHelper--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.pagehelper&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;pagehelper-spring-boot-starter&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.5&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;2-添加配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-添加配置&#34;&gt;#&lt;/a&gt; 2. 添加配置&lt;/h2&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;在 &lt;code&gt;application.properties&lt;/code&gt;  配置文件中添加 &lt;code&gt;MyBatis PageHelper&lt;/code&gt;  的配置项&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# PageHelper 分页插件配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;pagehelper.helperDialect&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;mysql&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;pagehelper.reasonable&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;pagehelper.supportMethodsArguments&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;pagehelper.params&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;count=countSql&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;3-分页查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-分页查询&#34;&gt;#&lt;/a&gt; 3. 分页查询&lt;/h2&gt;
&lt;p&gt;通过  &lt;code&gt;MyBatis PageHelper&lt;/code&gt;  进行分页查询实际上非常简单，只需在 &lt;code&gt;service(或mapper)&lt;/code&gt;  方法执行查询前，调用一次  &lt;code&gt;PageHelper.startPage(pageNum,pageSize)&lt;/code&gt;   &lt;code&gt;来设置分页查询参数即可，其中pageNum&lt;/code&gt;  为记录页数， &lt;code&gt;pageSize&lt;/code&gt;  为单页记录数量。此时 &lt;code&gt;service(或mapper)&lt;/code&gt;  方法的查询结果就是分页后的结果了。如果期望获得相关的分页信息，还可以将查询结果封装到 &lt;code&gt;PageInfo&lt;/code&gt;  对象中，以获得总页数、总记录数、当前页数等相关分页信息&lt;/p&gt;
&lt;p&gt;现在通过一个实际示例，来具体演示操作，这里我们提供了一个分页查询的 &lt;code&gt;Controller&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 分页查询&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; pageNum 记录页数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; pageSize 单页记录数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@ResponseBody&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RequestMapping(&amp;quot;/findPage&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;Student&amp;gt; &lt;span class=&#34;title&#34;&gt;findPage&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@RequestParam&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; pageNum, &lt;span class=&#34;meta&#34;&gt;@RequestParam&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; pageSize)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 设置分页查询参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    PageHelper.startPage(pageNum,pageSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    List&amp;lt;Student&amp;gt; studentList = studentService.findList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(Student student : studentList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;element : &amp;quot;&lt;/span&gt; + student);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 封装分页查询结果到 PageInfo 对象中以获取相关分页信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    PageInfo pageInfo = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; PageInfo( studentList );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;总页数: &amp;quot;&lt;/span&gt; + pageInfo.getPages());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;总记录数: &amp;quot;&lt;/span&gt; + pageInfo.getTotal());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;当前页数: &amp;quot;&lt;/span&gt; + pageInfo.getPageNum());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;当前页面记录数量: &amp;quot;&lt;/span&gt; + pageInfo.getSize());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; pageInfo.getList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;service&lt;/code&gt;  方法中所调用的查询 &lt;code&gt;SQL&lt;/code&gt;  如下所示，可以看到， &lt;code&gt;SQL&lt;/code&gt;  中无需使用 &lt;code&gt;limit&lt;/code&gt;  语句&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;studentResultMap&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.aaron.springbootdemo.pojo.Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;jdbcType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;INTEGER&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;jdbcType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;VARCHAR&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;sex&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;sex&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;jdbcType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;VARCHAR&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;address&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;address&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;jdbcType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;VARCHAR&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;findList&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;parameterType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;String&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;studentResultMap&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SELECT * FROM user&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;NOTE:&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;PageHelper.startPage(pageNum,pageSize)&lt;/code&gt;  只对其后的第一次 &lt;code&gt;SQL&lt;/code&gt;  查询进行分页。故若需进行分页查询，必须每次在 &lt;code&gt;service（或mapper）&lt;/code&gt; 方法执行 &lt;code&gt;SQL&lt;/code&gt;  查询前调用 &lt;code&gt;PageHelper.startPage(pageNum,pageSize) &lt;/code&gt; 方法&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/105c245f/</guid>
            <title>Mybatis使用Sql进行模糊查询</title>
            <link>https://smile1231.github.io/posts/105c245f/</link>
            <category>Java</category>
            <category>SpringBoot</category>
            <category>Mybatis</category>
            <category>模糊查询</category>
            <pubDate>Sun, 13 Feb 2022 21:39:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mybatis使用sql进行模糊查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis使用sql进行模糊查询&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Mybatis&lt;/code&gt;  使用 &lt;code&gt;Sql&lt;/code&gt;  进行模糊查询&lt;/h1&gt;
&lt;h2 id=&#34;方式一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方式一&#34;&gt;#&lt;/a&gt; 方式一&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- 根据名称模糊查询 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;findByName&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;resultType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.sc.domain.User&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;parameterType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;String&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    select * from user where username like #&amp;#123;username&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;模糊查询的测试方法&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;User&amp;gt; users = userDao.findByName(&lt;span class=&#34;string&#34;&gt;&amp;quot;%王%&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/105c245f/2022-02-13-22-29-15.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;我们在配置文件中没有加入 &lt;code&gt;%&lt;/code&gt;  来作为模糊查询的条件，所以在传入字符串实参时，就需要给定模糊查询的标&lt;br&gt;
识 %。配置文件中的 &lt;code&gt;#&amp;#123;username&amp;#125;&lt;/code&gt;  也只是一个占位符，所以  &lt;code&gt;SQL&lt;/code&gt;  语句显示为 &lt;code&gt;“？”&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;方式二&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方式二&#34;&gt;#&lt;/a&gt; 方式二&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;findByName&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;parameterType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;resultType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.sc.domain.User&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; select * from user where username like &amp;#x27;%$&amp;#123;value&amp;#125;%&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们在上面将原来的 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  占位符，改成了 &lt;code&gt;&amp;#123;value&amp;#125;&lt;/code&gt; 。注意如果用模糊查询的这种写法，那么 &lt;code&gt;$&amp;#123;value&amp;#125;&lt;/code&gt;  的写法就是固定的，不能写成其它名字。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//执行查询一个方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;User&amp;gt; users = userDao.findByName(&lt;span class=&#34;string&#34;&gt;&amp;quot;王&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img data-src=&#34;/posts/105c245f/2022-02-13-22-29-25.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;可以发现，我们在程序代码中就不需要加入模糊查询的匹配符 % 了，这两种方式的实现效果是一样的，但执行&lt;br&gt;
的语句是不一样的。&lt;/p&gt;
&lt;h2 id=&#34;方式三&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方式三&#34;&gt;#&lt;/a&gt; 方式三&lt;/h2&gt;
&lt;p&gt;说明：通过前两种写法，虽然可以解决模糊查询的问题，但是还是不好，因为通过 &lt;code&gt;%&lt;/code&gt;  的方式会引发 &lt;code&gt;sql&lt;/code&gt;  注入的问题，现在的期望是：既能够解决 &lt;code&gt;sql&lt;/code&gt;  注入又能在配置文件中写 &lt;code&gt;%&lt;/code&gt;  该如何实现呢，可以借助 &lt;code&gt;mysql&lt;/code&gt;  的函数。&lt;/p&gt;
&lt;p&gt;修改  &lt;code&gt;SQL&lt;/code&gt;  语句的配置，配置如下：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;findByName&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;parameterType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;resultType&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;com.sc.domain.User&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; select * from user where username like concat(&amp;#x27;%&amp;#x27;,#&amp;#123;username&amp;#125;,&amp;#x27;%&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;*#&amp;#123; &amp;#125;&lt;/code&gt;  是预编译处理， &lt;code&gt;MyBatis&lt;/code&gt;  在处理 &lt;code&gt;#&amp;#123; &amp;#125;&lt;/code&gt;  时，它会将 &lt;code&gt;sql&lt;/code&gt;  中的 &lt;code&gt;#&amp;#123; &amp;#125;&lt;/code&gt;  替换为 &lt;code&gt;？&lt;/code&gt; ，然后调用 &lt;code&gt;PreparedStatement&lt;/code&gt;  的 &lt;code&gt;set&lt;/code&gt;  方法来赋值，传入字符串后，会在值两边加上单引号，使用占位符的方式提高效率，可以防止 &lt;code&gt;sql&lt;/code&gt;  注入。&lt;br&gt;
 &lt;code&gt;$&amp;#123;&amp;#125;:&lt;/code&gt;  表示拼接 &lt;code&gt;sql&lt;/code&gt;  串，将接收到参数的内容不加任何修饰拼接在 &lt;code&gt;sql&lt;/code&gt;  中，可能引发 &lt;code&gt;sql&lt;/code&gt;  注入。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/b246d3ce/</guid>
            <title>Java自带的好用的工具类</title>
            <link>https://smile1231.github.io/posts/b246d3ce/</link>
            <category>Java</category>
            <pubDate>Sun, 13 Feb 2022 21:39:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;java自带的好用的工具类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java自带的好用的工具类&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Java&lt;/code&gt;  自带的好用的工具类&lt;/h1&gt;
&lt;h2 id=&#34;list集合拼接成以逗号分隔的字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#list集合拼接成以逗号分隔的字符串&#34;&gt;#&lt;/a&gt;  &lt;code&gt;List&lt;/code&gt;  集合拼接成以逗号分隔的字符串&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 如何把list集合拼接成以逗号分隔的字符串 a,b,c &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 第一种方法，可以用stream流 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String join = list.stream().collect(Collectors.joining(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;));  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(join); &lt;span class=&#34;comment&#34;&gt;// 输出 a,b,c &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 第二种方法，其实String也有join方法可以实现这个功能 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String join = String.join(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;, list);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(join); &lt;span class=&#34;comment&#34;&gt;// 输出 a,b,c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;比较两个字符串是否相等忽略大小写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较两个字符串是否相等忽略大小写&#34;&gt;#&lt;/a&gt; 比较两个字符串是否相等，忽略大小写&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (strA.equalsIgnoreCase(strB)) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;相等&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;比较两个对象是否相等&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#比较两个对象是否相等&#34;&gt;#&lt;/a&gt; 比较两个对象是否相等&lt;/h2&gt;
&lt;p&gt;当我们用  &lt;code&gt;equals&lt;/code&gt;  比较两个对象是否相等的时候，还需要对左边的对象进行判空，不然可能会报空指针异常，我们可以用  &lt;code&gt;java.util&lt;/code&gt;  包下  &lt;code&gt;Objects&lt;/code&gt;  封装好的比较是否相等的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Objects.equals(strA, strB);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//源码是这样的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object a, Object b)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (a == b) || (a != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; a.equals(b));  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;两个list取交集&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#两个list取交集&#34;&gt;#&lt;/a&gt; 两个 &lt;code&gt;List&lt;/code&gt;  取交集&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; list1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list1.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list1.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list1.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; list2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list2.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list2.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list2.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list1.retainAll(list2);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(list1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 输出[a, b]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;使用apache-commons-工具类库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用apache-commons-工具类库&#34;&gt;#&lt;/a&gt; 使用 &lt;code&gt;apache commons&lt;/code&gt;  工具类库&lt;/h1&gt;
&lt;h2 id=&#34;字符串判空&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串判空&#34;&gt;#&lt;/a&gt; 字符串判空&lt;/h2&gt;
&lt;p&gt;传参  &lt;code&gt;CharSequence&lt;/code&gt;  类型是  &lt;code&gt;String、StringBuilder、StringBuffer&lt;/code&gt;  的父类，都可以直接下面方法判空，以下是源码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; CharSequence cs)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cs == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || cs.length() == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; CharSequence cs)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; !isEmpty(cs);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 判空的时候，会去除字符串中的空白字符，比如空格、换行、制表符 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isBlank&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; CharSequence cs)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; strLen = length(cs);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (strLen == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; strLen; i++) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!Character.isWhitespace(cs.charAt(i))) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isNotBlank&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; CharSequence cs)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; !isBlank(cs);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;首字母转成大写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#首字母转成大写&#34;&gt;#&lt;/a&gt; 首字母转成大写&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str = &lt;span class=&#34;string&#34;&gt;&amp;quot;yideng&amp;quot;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String capitalize = StringUtils.capitalize(str);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(capitalize); &lt;span class=&#34;comment&#34;&gt;// 输出Yideng&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;重复拼接字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重复拼接字符串&#34;&gt;#&lt;/a&gt; 重复拼接字符串&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str = StringUtils.repeat(&lt;span class=&#34;string&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(str); &lt;span class=&#34;comment&#34;&gt;// 输出abab&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;格式化日期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化日期&#34;&gt;#&lt;/a&gt; 格式化日期&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Date类型转String类型 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String date = DateFormatUtils.format(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Date(), &lt;span class=&#34;string&#34;&gt;&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(date); &lt;span class=&#34;comment&#34;&gt;// 输出 2021-05-01 01:01:01 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// String类型转Date类型 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Date date = DateUtils.parseDate(&lt;span class=&#34;string&#34;&gt;&amp;quot;2021-05-01 01:01:01&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 计算一个小时后的日期 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Date date = DateUtils.addHours(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Date(), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;包装临时对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#包装临时对象&#34;&gt;#&lt;/a&gt; 包装临时对象&lt;/h2&gt;
&lt;p&gt;当一个方法需要返回两个及以上字段时，我们一般会封装成一个临时对象返回，现在有了  &lt;code&gt;Pair&lt;/code&gt;  和  &lt;code&gt;Triple&lt;/code&gt;  就不需要了。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 返回两个字段 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ImmutablePair&amp;lt;Integer, String&amp;gt; pair = ImmutablePair.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;yideng&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(pair.getLeft() + &lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + pair.getRight()); &lt;span class=&#34;comment&#34;&gt;// 输出 1,yideng &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 返回三个字段 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ImmutableTriple&amp;lt;Integer, String, Date&amp;gt; triple = ImmutableTriple.of(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;yideng&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Date());  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(triple.getLeft() + &lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + triple.getMiddle() + &lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; + triple.getRight()); &lt;span class=&#34;comment&#34;&gt;// 输出 1,yideng,Wed Apr 07 23:30:00 CST 2021&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;commons-collections-集合工具类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#commons-collections-集合工具类&#34;&gt;#&lt;/a&gt;  &lt;code&gt;commons-collections&lt;/code&gt;  集合工具类&lt;/h1&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.commons&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;commons-collections4&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.4&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;集合判空&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集合判空&#34;&gt;#&lt;/a&gt; 集合判空&lt;/h2&gt;
&lt;p&gt;封装了集合判空的方法，以下是源码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Collection&amp;lt;?&amp;gt; coll)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coll == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || coll.isEmpty();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Collection&amp;lt;?&amp;gt; coll)&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; !isEmpty(coll);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 两个集合取交集 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collection&amp;lt;String&amp;gt; collection = CollectionUtils.retainAll(listA, listB);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 两个集合取并集 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collection&amp;lt;String&amp;gt; collection = CollectionUtils.union(listA, listB);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 两个集合取差集 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collection&amp;lt;String&amp;gt; collection = CollectionUtils.subtract(listA, listB);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;common-beanutils-操作对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#common-beanutils-操作对象&#34;&gt;#&lt;/a&gt;  &lt;code&gt;common-beanutils&lt;/code&gt;  操作对象&lt;/h1&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;commons-beanutils&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;commons-beanutils&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.9.4&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;User&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Integer id;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String name;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/******************************************************************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;User user = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; User();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BeanUtils.setProperty(user, &lt;span class=&#34;string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BeanUtils.setProperty(user, &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;yideng&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(BeanUtils.getProperty(user, &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// 输出 yideng &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(user); &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;#123;&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;yideng&amp;quot;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/******************************************************************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//对象和 map 互转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, String&amp;gt; map = BeanUtils.describe(user);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(map); &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;#123;&amp;quot;id&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;yideng&amp;quot;&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// map转对象 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;User newUser = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; User();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BeanUtils.populate(newUser, map);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(newUser); &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;#123;&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;yideng&amp;quot;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;commons-io-文件流处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#commons-io-文件流处理&#34;&gt;#&lt;/a&gt;  &lt;code&gt;commons-io&lt;/code&gt;  文件流处理&lt;/h1&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;commons-io&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;commons-io&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.8.0&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;文件处理&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;File file = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; File(&lt;span class=&#34;string&#34;&gt;&amp;quot;demo1.txt&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 读取文件 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; lines = FileUtils.readLines(file, Charset.defaultCharset());  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 写入文件 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FileUtils.writeLines(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; File(&lt;span class=&#34;string&#34;&gt;&amp;quot;demo2.txt&amp;quot;&lt;/span&gt;), lines);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 复制文件 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;FileUtils.copyFile(srcFile, destFile);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# ``Google Guava`` 工具类库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```xml&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;dependency&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;groupId&amp;gt;com.google.guava&amp;lt;/groupId&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;artifactId&amp;gt;guava&amp;lt;/artifactId&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;version&amp;gt;&lt;span class=&#34;number&#34;&gt;30.1&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;-jre&amp;lt;/version&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;创建集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建集合&#34;&gt;#&lt;/a&gt; 创建集合&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;String&amp;gt; list = Lists.newArrayList();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Integer&amp;gt; list = Lists.newArrayList(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 反转list &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;Integer&amp;gt; reverse = Lists.reverse(list);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(reverse); &lt;span class=&#34;comment&#34;&gt;// 输出 [3, 2, 1] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// list集合元素太多，可以分成若干个集合，每个集合10个元素 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; partition = Lists.partition(list, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, String&amp;gt; map = Maps.newHashMap();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Set&amp;lt;String&amp;gt; set = Sets.newHashSet();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;multimap-一个-key-可以映射多个-value-的-hashmap&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#multimap-一个-key-可以映射多个-value-的-hashmap&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Multimap&lt;/code&gt;  一个  &lt;code&gt;key&lt;/code&gt;  可以映射多个  &lt;code&gt;value&lt;/code&gt;  的  &lt;code&gt;HashMap&lt;/code&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Multimap&amp;lt;String, Integer&amp;gt; map = ArrayListMultimap.create();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Collection&amp;lt;Integer&amp;gt; values = map.get(&lt;span class=&#34;string&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(map); &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;#123;&amp;quot;key&amp;quot;:[1,2]&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 还能返回你以前使用的臃肿的Map &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, Collection&amp;lt;Integer&amp;gt;&amp;gt; collectionMap = map.asMap();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;多省事，多简洁，省得你再创建 Map&amp;lt;String, List&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;bimap-一种连-value-也不能重复的-hashmap&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bimap-一种连-value-也不能重复的-hashmap&#34;&gt;#&lt;/a&gt;  &lt;code&gt;BiMap&lt;/code&gt;  一种连  &lt;code&gt;value&lt;/code&gt;  也不能重复的  &lt;code&gt;HashMap&lt;/code&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;BiMap&amp;lt;String, String&amp;gt; biMap = HashBiMap.create();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 如果value重复，put方法会抛异常，除非用forcePut方法 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;biMap.put(&lt;span class=&#34;string&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(biMap); &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;#123;&amp;quot;key&amp;quot;:&amp;quot;value&amp;quot;&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 既然value不能重复，何不实现个翻转key/value的方法，已经有了 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BiMap&amp;lt;String, String&amp;gt; inverse = biMap.inverse();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(inverse); &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;#123;&amp;quot;value&amp;quot;:&amp;quot;key&amp;quot;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这其实是双向映射，在某些场景还是很实用的。&lt;/p&gt;
&lt;img data-src=&#34;/posts/b246d3ce/2022-02-13-22-22-23.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;table-一种有两个-key-的-hashmap&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#table-一种有两个-key-的-hashmap&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Table&lt;/code&gt;  一种有两个  &lt;code&gt;key&lt;/code&gt;  的  &lt;code&gt;HashMap&lt;/code&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 一批用户，同时按年龄和性别分组 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Table&amp;lt;Integer, String, String&amp;gt; table = HashBasedTable.create();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;table.put(&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;yideng&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;table.put(&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Lily&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(table.get(&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// 输出 yideng &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 这其实是一个二维的Map，可以查看行数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;String, String&amp;gt; row = table.row(&lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(row); &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;#123;&amp;quot;男&amp;quot;:&amp;quot;yideng&amp;quot;,&amp;quot;女&amp;quot;:&amp;quot;Lily&amp;quot;&amp;#125; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 查看列数据 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Map&amp;lt;Integer, String&amp;gt; column = table.column(&lt;span class=&#34;string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(column); &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;#123;18:&amp;quot;yideng&amp;quot;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;multiset-一种用来计数的-set&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#multiset-一种用来计数的-set&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Multiset&lt;/code&gt;  一种用来计数的  &lt;code&gt;Set&lt;/code&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Multiset&amp;lt;String&amp;gt; multiset = HashMultiset.create();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;multiset.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;multiset.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;multiset.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(multiset.count(&lt;span class=&#34;string&#34;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// 输出 2 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 查看去重的元素 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Set&amp;lt;String&amp;gt; set = multiset.elementSet();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(set); &lt;span class=&#34;comment&#34;&gt;// 输出 [&amp;quot;orange&amp;quot;,&amp;quot;apple&amp;quot;] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 还能查看没有去重的元素 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Iterator&amp;lt;String&amp;gt; iterator = multiset.iterator();  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (iterator.hasNext()) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(iterator.next());  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 还能手动设置某个元素出现的次数 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;multiset.setCount(&lt;span class=&#34;string&#34;&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/96eb888f/</guid>
            <title>Java学习线路图</title>
            <link>https://smile1231.github.io/posts/96eb888f/</link>
            <category>Java</category>
            <pubDate>Sun, 13 Feb 2022 21:38:15 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;图片可能很长。。。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;img data-src=&#34;/posts/96eb888f/2022-02-13-22-17-38.png&#34; class=&#34;&#34;&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/9dcbb5fa/</guid>
            <title>Corn表达式</title>
            <link>https://smile1231.github.io/posts/9dcbb5fa/</link>
            <category>Java</category>
            <category>Corn</category>
            <pubDate>Sun, 13 Feb 2022 21:35:47 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;corn表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#corn表达式&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Corn&lt;/code&gt;  表达式&lt;/h1&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;按顺序依次为&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;秒（0~59）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;分钟（0~59）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;小时（0~23）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;天（月）（0~31，但是你需要考虑你月的天数）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;月（0~11）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;年份（1970－2099）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于&amp;quot;月份中的日期&amp;quot;和&amp;quot;星期中的日期&amp;quot;这两个元素互斥的,必须要对其中一个设置?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;是否必填&lt;/th&gt;
&lt;th&gt;允许值&lt;/th&gt;
&lt;th&gt;允许特殊字符&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Seconds&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;0–59&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*,-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标准实现不支持此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Minutes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;0–59&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*,-&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Hours&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;0–23&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*,-&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Day of month&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;1–31&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*,-?LW&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?LW&lt;/code&gt;  只有部分软件实现了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Month&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1–12 or JAN–DEC&lt;/code&gt; 	 &lt;code&gt;*,-&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Day of week&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0–7 or SUN–SAT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*,-?L#&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?L#&lt;/code&gt; 只有部分软件实现了 &lt;code&gt;Linux&lt;/code&gt;  和 &lt;code&gt;Spring&lt;/code&gt;  的允许值为 &lt;code&gt;0-7&lt;/code&gt; ， &lt;code&gt;0&lt;/code&gt;  和 &lt;code&gt;7&lt;/code&gt;  为周日 &lt;code&gt;Quartz&lt;/code&gt;  的允许值为 &lt;code&gt;1-7&lt;/code&gt; ， &lt;code&gt;1&lt;/code&gt;  为周日&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Year&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1970–2099&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*,-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标准实现不支持此字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; ：表示匹配该域的任意值，假如在 &lt;code&gt;Minutes&lt;/code&gt;  域使用 *, 即表示每分钟都会触发事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt; : 只能用在 &lt;code&gt;DayofMonth&lt;/code&gt;  和 &lt;code&gt;DayofWeek&lt;/code&gt;  两个域。它也匹配域的任意值，但实际不会。因为 &lt;code&gt;DayofMonth&lt;/code&gt;  和 &lt;code&gt;DayofWeek&lt;/code&gt;  会相互影响。例如想在每月的 &lt;code&gt;20&lt;/code&gt;  日触发调度，不管 &lt;code&gt;20&lt;/code&gt;  日到底是星期几，则只能使用如下写法：  &lt;code&gt;13 13 15 20 * ?&lt;/code&gt; , 其中最后一位只能用 &lt;code&gt;？&lt;/code&gt; ，而不能使用 &lt;code&gt;*&lt;/code&gt; ，如果使用 &lt;code&gt;*&lt;/code&gt;  表示不管星期几都会触发，实际上并不是这样。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt; : 表示范围，例如在 &lt;code&gt;Minutes&lt;/code&gt;  域使用 &lt;code&gt;5-20&lt;/code&gt; ，表示从 &lt;code&gt;5&lt;/code&gt;  分到 &lt;code&gt;20&lt;/code&gt;  分钟每分钟触发一次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt; ：表示起始时间开始触发，然后每隔固定时间触发一次，例如在 &lt;code&gt;Minutes&lt;/code&gt;  域使用 &lt;code&gt;5/20&lt;/code&gt; , 则意味着 &lt;code&gt;5&lt;/code&gt;  分钟触发一次，而 &lt;code&gt;25，45&lt;/code&gt;  等分别触发一次.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;,&lt;/code&gt; : 表示列出枚举值值。例如：在 &lt;code&gt;Minutes&lt;/code&gt;  域使用 &lt;code&gt;5,20&lt;/code&gt; ，则意味着在 &lt;code&gt;5&lt;/code&gt;  和 &lt;code&gt;20&lt;/code&gt;  分每分钟触发一次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;L&lt;/code&gt; : 表示最后，只能出现在 &lt;code&gt;DayofWeek&lt;/code&gt;  和 &lt;code&gt;DayofMonth&lt;/code&gt;  域，如果在 &lt;code&gt;DayofWeek&lt;/code&gt;  域使用 &lt;code&gt;5L&lt;/code&gt; , 意味着在最后的一个星期四触发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;W&lt;/code&gt; : 表示有效工作日 (周一到周五), 只能出现在 &lt;code&gt;DayofMonth&lt;/code&gt;  域，系统将在离指定日期的最近的有效工作日触发事件。例如：在  &lt;code&gt;DayofMonth&lt;/code&gt;  使用 &lt;code&gt;5W&lt;/code&gt; ，如果 &lt;code&gt;5&lt;/code&gt;  日是星期六，则将在最近的工作日：星期五，即 &lt;code&gt;4&lt;/code&gt;  日触发。如果 &lt;code&gt;5&lt;/code&gt;  日是星期天，则在 &lt;code&gt;6&lt;/code&gt;  日 (周一) 触发；如果 &lt;code&gt;5&lt;/code&gt;  日在星期一到星期五中的一天，则就在 &lt;code&gt;5&lt;/code&gt;  日触发。另外一点， &lt;code&gt;W&lt;/code&gt;  的最近寻找不会跨过月份&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LW&lt;/code&gt; : 这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt; : 用于确定每个月第几个星期几，只能出现在 &lt;code&gt;DayofMonth&lt;/code&gt;  域。例如在 &lt;code&gt;4#2&lt;/code&gt; ，表示某月的第二个星期三。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一些例子:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;举几个例子:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 0 2 1 * ? *    表示在每月的1日的凌晨2点调度任务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 15 10 ? * MON-FRI    表示周一到周五每天上午10：15执行作业&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 15 10 ? 6L 2002-2006    表示2002-2006年的每个月的最后一个星期五上午10:15执行作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中每个元素可以是一个值 &lt;code&gt;(如6)&lt;/code&gt; , 一个连续区间 &lt;code&gt;(9-12)&lt;/code&gt; , 一个间隔时间 &lt;code&gt;(8-18/4)(/表示每隔4小时)&lt;/code&gt; , 一个列表 &lt;code&gt;(1,3,5)&lt;/code&gt; , 通配符。由于 &amp;quot;月份中的日期&amp;quot; 和 &amp;quot;星期中的日期&amp;quot; 这两个元素互斥的，必须要对其中一个设置？&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0 0 10,14,16 * * ? 每天上午10点，下午2点，4点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 0 12 ? * WED 表示每个星期三中午12点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 0 12 * * ?&amp;quot; 每天中午12点触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 ? * *&amp;quot; 每天上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 * * ?&amp;quot; 每天上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 * * ? *&amp;quot; 每天上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 * * ? 2005&amp;quot; 2005年的每天上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 * 14 * * ?&amp;quot; 在每天下午2点到下午2:59期间的每1分钟触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 0/5 14 * * ?&amp;quot; 在每天下午2点到下午2:55期间的每5分钟触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 0/5 14,18 * * ?&amp;quot; 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 0-5 14 * * ?&amp;quot; 在每天下午2点到下午2:05期间的每1分钟触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 10,44 14 ? 3 WED&amp;quot; 每年三月的星期三的下午2:10和2:44触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 ? * MON-FRI&amp;quot; 周一至周五的上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 15 * ?&amp;quot; 每月15日上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 L * ?&amp;quot; 每月最后一日的上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 ? * 6L&amp;quot; 每月的最后一个星期五上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 ? * 6L 2002-2005&amp;quot; 2002年至2005年的每月的最后一个星期五上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;0 15 10 ? * 6#3&amp;quot; 每月的第三个星期五上午10:15触发&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有些子表达式能包含一些范围或列表&lt;/p&gt;
&lt;p&gt;例如：子表达式（天（星期））可以为  &lt;code&gt;“MON-FRI”&lt;/code&gt; ， &lt;code&gt;“MON，WED，FRI”&lt;/code&gt; ， &lt;code&gt;“MON-WED,SAT”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;“*”&lt;/code&gt;  字符代表所有可能的值&lt;/p&gt;
&lt;p&gt;因此， &lt;code&gt;“*”&lt;/code&gt;  在子表达式（月）里表示每个月的含义， &lt;code&gt;“*”&lt;/code&gt;  在子表达式（天（星期））表示星期的每一天&lt;/p&gt;
&lt;p&gt;&lt;code&gt;“/”&lt;/code&gt;  字符用来指定数值的增量&lt;br&gt;
例如：在子表达式（分钟）里的 &lt;code&gt;“0/15”&lt;/code&gt;  表示从第 &lt;code&gt;0&lt;/code&gt;  分钟开始，每 &lt;code&gt;15&lt;/code&gt;  分钟&lt;br&gt;
在子表达式（分钟）里的 &lt;code&gt;“3/20”&lt;/code&gt;  表示从第 &lt;code&gt;3&lt;/code&gt;  分钟开始，每 &lt;code&gt;20&lt;/code&gt;  分钟（它和 &lt;code&gt;“3，23，43”&lt;/code&gt; ）的含义一样&lt;/p&gt;
&lt;p&gt;&lt;code&gt;“？”&lt;/code&gt;  字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值&lt;br&gt;
当 2 个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为 &lt;code&gt;“?”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;“L” &lt;/code&gt; 字符仅被用于天（月）和天（星期）两个子表达式，它是单词 &lt;code&gt;“last”&lt;/code&gt;  的缩写&lt;br&gt;
但是它在两个子表达式里的含义是不同的。&lt;br&gt;
在天（月）子表达式中， &lt;code&gt;“L”&lt;/code&gt;  表示一个月的最后一天&lt;br&gt;
在天（星期）自表达式中， &lt;code&gt;“L”&lt;/code&gt;  表示一个星期的最后一天，也就是 &lt;code&gt;SAT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果在 &lt;code&gt;“L”&lt;/code&gt;  前有具体的内容，它就具有其他的含义了&lt;/p&gt;
&lt;p&gt;例如： &lt;code&gt;“6L”&lt;/code&gt;  表示这个月的倒数第 &lt;code&gt;６&lt;/code&gt; 天， &lt;code&gt;“FRIL”&lt;/code&gt;  表示这个月的最一个星期五&lt;br&gt;
注意：在使用 &lt;code&gt;“L”&lt;/code&gt;  参数时，不要指定列表或范围，因为这会导致问题&lt;/p&gt;
&lt;figure class=&#34;highlight subunit&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;字段 允许值 允许的特殊字符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;秒 0&lt;span class=&#34;string&#34;&gt;-59&lt;/span&gt; , - * /&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;分 0&lt;span class=&#34;string&#34;&gt;-59&lt;/span&gt; , - * /&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;小时 0&lt;span class=&#34;string&#34;&gt;-23&lt;/span&gt; , - * /&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;日期 1&lt;span class=&#34;string&#34;&gt;-31&lt;/span&gt; , - * ? / L W C&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;月份 1&lt;span class=&#34;string&#34;&gt;-12&lt;/span&gt; 或者 JAN-DEC , - * /&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;星期 1&lt;span class=&#34;string&#34;&gt;-7&lt;/span&gt; 或者 SUN-SAT , - * ? / L C #&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;年（可选） 留空, 1970&lt;span class=&#34;string&#34;&gt;-2099&lt;/span&gt; , - * /&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/c3733521/</guid>
            <title>Java之assert关键字</title>
            <link>https://smile1231.github.io/posts/c3733521/</link>
            <category>Java</category>
            <category>Assert</category>
            <pubDate>Sun, 13 Feb 2022 21:35:24 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;java之assert关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java之assert关键字&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Java&lt;/code&gt;  之 &lt;code&gt;assert&lt;/code&gt;  关键字&lt;/h1&gt;
&lt;p&gt;在 &lt;code&gt;Java&lt;/code&gt;  中， &lt;code&gt;assert&lt;/code&gt;  关键字是从 &lt;code&gt;JAVA SE 1.4&lt;/code&gt;  引入的，为了避免和老版本的 &lt;code&gt;Java&lt;/code&gt;  代码中使用了 &lt;code&gt;assert&lt;/code&gt;  关键字导致错误， &lt;code&gt;Java&lt;/code&gt;  在执行的时候默认是不启动断言检查的（这个时候，所有的断言语句都 将忽略！），如果要开启断言检查，则需要用开关 &lt;code&gt;-enableassertions&lt;/code&gt;  或 &lt;code&gt;-ea&lt;/code&gt;  来开启。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;assert&lt;/code&gt;  关键字语法很简单，有两种用法：&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;assert&lt;/code&gt;   &lt;code&gt;&amp;lt;boolean表达式&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;&amp;lt;boolean表达式&amp;gt;&lt;/code&gt;  为 &lt;code&gt;true&lt;/code&gt; ，则程序继续执行。&lt;/p&gt;
&lt;p&gt;如果为 &lt;code&gt;false&lt;/code&gt; ，则程序抛出 &lt;code&gt;AssertionError&lt;/code&gt; ，并终止执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;assert &amp;lt;boolean表达式&amp;gt;&lt;/code&gt;  : &amp;lt;错误信息表达式&amp;gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;&amp;lt;boolean表达式&amp;gt;&lt;/code&gt;  为 &lt;code&gt;true&lt;/code&gt; ，则程序继续执行。&lt;/p&gt;
&lt;p&gt;如果为 &lt;code&gt;false&lt;/code&gt; ，则程序抛出 &lt;code&gt;java.lang.AssertionError&lt;/code&gt; ，并输入 &amp;lt;错误信息表达式&amp;gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;简单实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单实例&#34;&gt;#&lt;/a&gt; 简单实例&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//断言1结果为true，则继续往下执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System. out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;断言1没有问题，Go！&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System. out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;\n-----------------\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//断言2结果为false,程序终止&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt; : &lt;span class=&#34;string&#34;&gt;&amp;quot;断言失败，此表达式的信息将会在抛出异常的时候输出！&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System. out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;断言2没有问题，Go！&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于上述所说，在 &lt;code&gt;IDEA&lt;/code&gt;  中需要手动开启 断言机制&lt;/p&gt;
&lt;p&gt;开启方法:&lt;/p&gt;
&lt;img data-src=&#34;/posts/c3733521/2022-02-13-22-04-43.png&#34; class=&#34;&#34;&gt;
&lt;img data-src=&#34;/posts/c3733521/2022-02-13-22-04-59.png&#34; class=&#34;&#34;&gt;
&lt;img data-src=&#34;/posts/c3733521/2022-02-13-22-05-23.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;输入 &lt;code&gt;-ea&lt;/code&gt;&lt;/p&gt;
&lt;img data-src=&#34;/posts/c3733521/2022-02-13-22-05-35.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;运行结果&lt;/p&gt;
&lt;img data-src=&#34;/posts/c3733521/2022-02-13-22-05-42.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;陷阱&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#陷阱&#34;&gt;#&lt;/a&gt; 陷阱&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;assert&lt;/code&gt;  关键字用法简单，但是使用 &lt;code&gt;assert&lt;/code&gt;  往往会让你陷入越来越深的陷阱中。应避免使用。笔者经过研究，总结了以下原因：&lt;/p&gt;
&lt;p&gt;1、 &lt;code&gt;assert&lt;/code&gt;  关键字需要在运行时候显式开启才能生效，否则你的断言就没有任何意义。而现在主流的 &lt;code&gt;Java IDE&lt;/code&gt;  工具默认都没有开启 &lt;code&gt;-ea&lt;/code&gt;  断言检查功能。这就意味着你如果使用 &lt;code&gt;IDE&lt;/code&gt;  工具编码，调试运行时候会有一定的麻烦。并且，对于 &lt;code&gt;Java Web&lt;/code&gt;  应用，程序代码都是部署在容器里面，你没法直接去控制程序的运行，如果一定要开启 &lt;code&gt;-ea&lt;/code&gt;  的开关，则需要更改 &lt;code&gt;Web&lt;/code&gt;  容器的运行配置参数。这对程序的移 植和部署都带来很大的不便。&lt;/p&gt;
&lt;p&gt;2、用 &lt;code&gt;assert&lt;/code&gt;  代替 &lt;code&gt;if&lt;/code&gt;  是陷阱之二。 &lt;code&gt;assert&lt;/code&gt;  的判断和 &lt;code&gt;if&lt;/code&gt;  语句差不多，但两者的作用有着本质的区别： &lt;code&gt;assert&lt;/code&gt;  关键字本意上是为测试 调试程序时使用的，但如果不小心用 &lt;code&gt;assert&lt;/code&gt;  来控制了程序的业务流程，那在测试调试结束后去掉 &lt;code&gt;assert&lt;/code&gt;  关键字就意味着修改了程序的正常的逻辑。&lt;/p&gt;
&lt;p&gt;3、 &lt;code&gt;assert&lt;/code&gt;  断言失败将面临程序的退出。这在一个生产环境下的应用是绝不能容忍的。一般都是通过异常处理来解决程序中潜在的错误。但是使用断言就很危险，一旦失败系统就挂了。&lt;/p&gt;
&lt;h2 id=&#34;对assert的思考&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对assert的思考&#34;&gt;#&lt;/a&gt; 对 &lt;code&gt;assert&lt;/code&gt;  的思考&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;assert&lt;/code&gt;  既然是为了调试测试程序用，不在正式生产环境下用，那应该考虑更好的测试 &lt;code&gt;JUint&lt;/code&gt;  来代替其做用， &lt;code&gt;JUint&lt;/code&gt;  相对 &lt;code&gt;assert&lt;/code&gt;  关键的所提供的功能是有过之而无不及。当然完全可以通过 &lt;code&gt;IDE debug&lt;/code&gt;  来进行调试测试。在此看来， &lt;code&gt;assert&lt;/code&gt;  的前途一片昏暗。&lt;/p&gt;
&lt;p&gt;因此，应当避免在 &lt;code&gt;Java&lt;/code&gt;  中使用 &lt;code&gt;assert&lt;/code&gt;  关键字，除非哪一天 &lt;code&gt;Java&lt;/code&gt;  默认支持开启 &lt;code&gt;-ea&lt;/code&gt;  的开关，这时候可以考虑。对比一下， &lt;code&gt;assert&lt;/code&gt;  能给你带来多少好处，多少麻烦，这是我们选择是否使用的的原则。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
