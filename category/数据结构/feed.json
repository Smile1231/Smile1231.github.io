{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"数据结构\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/9f9a6182/",
            "url": "https://smile1231.github.io/posts/9f9a6182/",
            "title": "面试之旅关于数据结构",
            "date_published": "2022-02-16T13:13:39.000Z",
            "content_html": "<h1 id=\"面试之旅关于数据结构\"><a href=\"#面试之旅关于数据结构\" class=\"headerlink\" title=\"面试之旅关于数据结构\"></a>面试之旅关于数据结构</h1><p><strong><span class=\"exturl\" data-url=\"aHR0cDovL2RhdGEuYmlhbmNoZW5nLm5ldC9pbnRyby8=\">数据结构详细讲解</span></strong></p>\n<p>数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。</p>\n<h2 id=\"数据结构中的逻辑结构\"><a href=\"#数据结构中的逻辑结构\" class=\"headerlink\" title=\"数据结构中的逻辑结构\"></a>数据结构中的逻辑结构</h2><blockquote>\n<p>集合结构</p>\n</blockquote>\n<p>集合结构的里面的元素关系是孤立的</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-37-01.png\" class=\"\">\n\n<blockquote>\n<p>线性结构</p>\n</blockquote>\n<p>线性结构里面的元素关系：一对一</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-37-13.png\" class=\"\">\n\n\n<blockquote>\n<p>树形结构</p>\n</blockquote>\n<p>树形结构里面的元素关系：一对多</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-37-28.png\" class=\"\">\n\n\n<blockquote>\n<p>图结构</p>\n</blockquote>\n<p>图结构里面的元素关系：多对多</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-37-47.png\" class=\"\">\n\n<h2 id=\"数据结构的物理结构\"><a href=\"#数据结构的物理结构\" class=\"headerlink\" title=\"数据结构的物理结构\"></a>数据结构的物理结构</h2><p>物理结构:是指数据的逻辑结构在计算机中的存储形式。存储结构有两种：</p>\n<blockquote>\n<p>顺序存储结构：</p>\n</blockquote>\n<p>顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-37-57.png\" class=\"\">\n\n<blockquote>\n<p>链式存储结构</p>\n</blockquote>\n<p>链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-38-04.png\" class=\"\">\n\n\n<h2 id=\"常见的数据结构\"><a href=\"#常见的数据结构\" class=\"headerlink\" title=\"常见的数据结构\"></a>常见的数据结构</h2><ul>\n<li><p>数组（<code>Array</code>）</p>\n</li>\n<li><p>堆栈（<code>Stack</code>）</p>\n</li>\n<li><p>队列（<code>Queue</code>）</p>\n</li>\n<li><p>链表（<code>Linked List</code>）</p>\n</li>\n<li><p>树（<code>Tree</code>）</p>\n</li>\n<li><p>图（<code>Graph</code>）</p>\n</li>\n<li><p>堆（<code>Heap</code>）</p>\n</li>\n<li><p>散列表（<code>Hash</code>）</p>\n</li>\n</ul>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>链表是一种数据结构，和数组同级。比如，<code>Java</code>中我们使用的<code>ArrayList</code>，其实现原理是数组。而<code>LinkedList</code>的实现原理就是链表了。链表在进行循环遍历时效率不高，但是插入和删除时优势明显。下面对单向链表做一个介绍。</p>\n<p>单向链表是一种线性表，实际上是由节点（<code>Node</code>）组成的，一个链表拥有不定数量的节点。其数据在内存中存储是不连续的，它存储的数据分散在内存中，每个结点只能也只有它能知道下一个结点的存储位置。由N各节点（<code>Node</code>）组成单向链表，每一个<code>Node</code>记录本<code>Node</code>的数据及下一个<code>Node</code>。向外暴露的只有一个头节点（<code>Head</code>），我们对链表的所有操作，都是直接或者间接地通过其头节点来进行的。</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-38-15.png\" class=\"\">\n\n<p>上图中最左边的节点即为头结点（<code>Head</code>），但是添加节点的顺序是从右向左的，添加的新节点会被作为新节点。最先添加的节点对下一节点的引用可以为空。引用是引用下一个节点而非下一个节点的对象。因为有着不断的引用，所以头节点就可以操作所有节点了。</p>\n<p>下图描述了单向链表存储情况。存储是分散的，每一个节点只要记录下一节点，就把所有数据串了起来，形成了一个单向链表。</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-38-25.png\" class=\"\">\n\n<p>节点（<code>Node</code>）是由一个需要储存的对象及对下一个节点的引用组成的。也就是说，节点拥有两个成员：储存的对象、对下一个节点的引用。下面图是具体的说明：</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-38-31.png\" class=\"\">\n\n<blockquote>\n<p>单链表实现</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zjn.LinkAndQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义链表设计</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zjn</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLink</span> </span>&#123;</span><br><span class=\"line\">    Node head = <span class=\"keyword\">null</span>; <span class=\"comment\">// 头节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 链表中的节点，data代表节点的值，next是指向下一个节点的引用</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> zjn</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">        Node next = <span class=\"keyword\">null</span>;<span class=\"comment\">// 节点的引用，指向下一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> data;<span class=\"comment\">// 节点的对象，即内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 向链表中插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> d</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addNode</span><span class=\"params\">(<span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">        Node newNode = <span class=\"keyword\">new</span> Node(d);<span class=\"comment\">// 实例化一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            head = newNode;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node tmp = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmp.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tmp = tmp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tmp.next = newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index:删除第index个节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteNode</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">1</span> || index &gt; length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">        Node preNode = head;</span><br><span class=\"line\">        Node curNode = preNode.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curNode != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == index) &#123;</span><br><span class=\"line\">                preNode.next = curNode.next;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            preNode = curNode;</span><br><span class=\"line\">            curNode = curNode.next;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回节点长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Node tmp = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            length++;</span><br><span class=\"line\">            tmp = tmp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在不知道头指针的情况下删除指定节点</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> n</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteNode11</span><span class=\"params\">(Node n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"keyword\">null</span> || n.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = n.data;</span><br><span class=\"line\">        n.data = n.next.data;</span><br><span class=\"line\">        n.next.data = tmp;</span><br><span class=\"line\">        n.next = n.next.next;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;删除成功！&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Node tmp = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tmp != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(tmp.data);</span><br><span class=\"line\">            tmp = tmp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyLink list = <span class=\"keyword\">new</span> MyLink();</span><br><span class=\"line\">        list.addNode(<span class=\"number\">5</span>);</span><br><span class=\"line\">        list.addNode(<span class=\"number\">3</span>);</span><br><span class=\"line\">        list.addNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">        list.addNode(<span class=\"number\">2</span>);</span><br><span class=\"line\">        list.addNode(<span class=\"number\">55</span>);</span><br><span class=\"line\">        list.addNode(<span class=\"number\">36</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;linkLength:&quot;</span> + list.length());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;head.data:&quot;</span> + list.head.data);</span><br><span class=\"line\">        list.printList();</span><br><span class=\"line\">        list.deleteNode(<span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;After deleteNode(4):&quot;</span>);</span><br><span class=\"line\">        list.printList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><p>非线性存储结构</p>\n<img data-src=\"/blog/posts/9f9a6182/2022-02-16-21-38-44.png\" class=\"\">\n\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RhdGEuYmlhbmNoZW5nLm5ldC92aWV3LzIzLmh0bWw=\">树的详细讲解</span></p>\n",
            "tags": [
                "Java面试",
                "数据结构"
            ]
        }
    ]
}