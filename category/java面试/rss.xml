<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>JIN MAO &#39;s Blog • Posts by &#34;java面试&#34; category</title>
        <link>https://smile1231.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Sat, 12 Mar 2022 21:58:14 +0800</pubDate>
        <lastBuildDate>Sat, 12 Mar 2022 21:58:14 +0800</lastBuildDate>
        <category>生物信息</category>
        <category>基因编辑</category>
        <category>前端</category>
        <category>Css</category>
        <category>Java</category>
        <category>Corn</category>
        <category>DDD</category>
        <category>领域驱动设计</category>
        <category>SAP</category>
        <category>DisPlay属性</category>
        <category>Docker</category>
        <category>Cache</category>
        <category>Cookie</category>
        <category>Session</category>
        <category>Java面试</category>
        <category>blog</category>
        <category>hexo</category>
        <category>next</category>
        <category>FastJson</category>
        <category>IDEA</category>
        <category>JavaScript</category>
        <category>Html</category>
        <category>SpringBoot</category>
        <category>Jenkins</category>
        <category>CI/CD</category>
        <category>map</category>
        <category>Stream流</category>
        <category>Jvm</category>
        <category>Assert</category>
        <category>函数式接口</category>
        <category>java</category>
        <category>calender</category>
        <category>Springboot</category>
        <category>LeetCode</category>
        <category>算法</category>
        <category>递归</category>
        <category>Linux</category>
        <category>Mybatis</category>
        <category>分页查询</category>
        <category>Machine Learning</category>
        <category>numpy</category>
        <category>pandas</category>
        <category>sklearn</category>
        <category>Python</category>
        <category>Jupyter</category>
        <category>Nginx</category>
        <category>Spring</category>
        <category>模糊查询</category>
        <category>SrpingBoot</category>
        <category>文件上传</category>
        <category>TypeScript</category>
        <category>WebPack</category>
        <category>master</category>
        <category>事务</category>
        <category>Groovy</category>
        <category>UML</category>
        <category>Ubuntu</category>
        <category>Mysql</category>
        <category>Vue</category>
        <category>VsCode</category>
        <category>Shell</category>
        <category>VSCODE</category>
        <category>快捷键</category>
        <category>Stream</category>
        <category>线程池</category>
        <category>ubuntu</category>
        <category>虚拟机</category>
        <category>日期</category>
        <category>二分查找</category>
        <category>数据挖掘</category>
        <category>Hadoop</category>
        <category>操作系统</category>
        <category>EasyExcel</category>
        <category>node</category>
        <category>JVM</category>
        <category>Yaml</category>
        <category>junit</category>
        <category>Hexo</category>
        <category>数据库</category>
        <category>Mysql事务</category>
        <category>git,npm,node</category>
        <category>冒泡排序</category>
        <category>动态规划</category>
        <category>堆排序</category>
        <category>Git</category>
        <category>幂等性</category>
        <category>Google</category>
        <category>多线程</category>
        <category>流</category>
        <category>归并排序</category>
        <category>正则表达式</category>
        <category>快速排序</category>
        <category>直接插入排序</category>
        <category>选择排序</category>
        <category>Java 面试</category>
        <category>数据结构</category>
        <category>阻塞队列</category>
        <category>Spring事务</category>
        <category>Date</category>
        <category>JDK</category>
        <category>动态代理</category>
        <category>ArrayList</category>
        <category>接口</category>
        <category>SpringMvc</category>
        <category>排序</category>
        <category>执行计划</category>
        <category>HashMap</category>
        <category>设计模式</category>
        <category>cheatsheet</category>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/14e6f1eb/</guid>
            <title>冒泡排序</title>
            <link>https://smile1231.github.io/posts/14e6f1eb/</link>
            <category>Java面试</category>
            <category>算法</category>
            <category>冒泡排序</category>
            <pubDate>Sat, 12 Mar 2022 21:58:14 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;冒泡排序稳定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#冒泡排序稳定&#34;&gt;#&lt;/a&gt; 冒泡排序（稳定）&lt;/h2&gt;
&lt;h3 id=&#34;1-基本思想&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-基本思想&#34;&gt;#&lt;/a&gt; 1、基本思想&lt;/h3&gt;
&lt;p&gt;冒泡排序（ &lt;code&gt;Bubble Sort&lt;/code&gt; ）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢 “浮” 到数列的顶端。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h3 id=&#34;2-算法描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-算法描述&#34;&gt;#&lt;/a&gt; 2、算法描述&lt;/h3&gt;
&lt;p&gt;冒泡排序算法的运作如下：&lt;/p&gt;
&lt;p&gt;①. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。&lt;br&gt;
②. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。&lt;br&gt;
③. 针对所有的元素重复以上的步骤，除了最后一个。&lt;br&gt;
④. 持续每次对越来越少的元素重复上面的步骤①~③，直到没有任何一对数字需要比较。&lt;/p&gt;
&lt;h3 id=&#34;3-代码实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-代码实现&#34;&gt;#&lt;/a&gt; 3、代码实现&lt;/h3&gt;
&lt;p&gt;冒泡排序需要两个嵌套的循环。其中，外层循环移动游标；内层循环遍历游标及之后 (或之前) 的元素，通过两两交换的方式，每次只确保该内循环结束位置排序正确，然后内层循环周期结束，交由外层循环往后 (或前) 移动游标，随即开始下一轮内层循环，以此类推，直至循环结束.&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bubbleSort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = arr.length; i &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;      &lt;span class=&#34;comment&#34;&gt;//外层循环移动游标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; i &amp;amp;&amp;amp; (j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;lt; i; j++)&amp;#123;    &lt;span class=&#34;comment&#34;&gt;//内层循环遍历游标及之后(或之前)的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(arr[j] &amp;gt; arr[j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; temp = arr[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                arr[j] = arr[j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                arr[j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Sorting: &amp;quot;&lt;/span&gt; + Arrays.toString(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Tips: 由于冒泡排序只在相邻元素大小不符合要求时才调换他们的位置，它并不改变相同元素之间的相对顺序，因此它是稳定的排序算法.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pdGltZXRyYXZlbGVyLmdpdGh1Yi5pby8yMDE3LzA3LzE4LyVFNSU4NSVBQiVFNSVBNCVBNyVFNiU4RSU5MiVFNSVCQSU4RiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4MCVCQiVFNyVCQiU5MyVFNCVCOCU4RWphdmElRTUlQUUlOUUlRTclOEUlQjAv&#34;&gt;链接&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/c2a5fdc5/</guid>
            <title>堆排序</title>
            <link>https://smile1231.github.io/posts/c2a5fdc5/</link>
            <category>Java面试</category>
            <category>算法</category>
            <category>堆排序</category>
            <pubDate>Sat, 12 Mar 2022 21:58:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;堆排序不稳定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#堆排序不稳定&#34;&gt;#&lt;/a&gt; 堆排序（不稳定）&lt;/h2&gt;
&lt;p&gt;个人感觉堆排序还是挺难的，虽然会有演示动画&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pdGltZXRyYXZlbGVyLmdpdGh1Yi5pby8yMDE3LzA3LzE4LyVFNSU4NSVBQiVFNSVBNCVBNyVFNiU4RSU5MiVFNSVCQSU4RiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4MCVCQiVFNyVCQiU5MyVFNCVCOCU4RWphdmElRTUlQUUlOUUlRTclOEUlQjAvIyVFNSU5QiU5QiVFMyU4MCU4MSVFNSVBMCU4NiVFNiU4RSU5MiVFNSVCQSU4RiVFRiVCQyU4OEhlYXAtU29ydCVFRiVCQyU4OQ==&#34;&gt;链接&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但是从代码层面就没有那么好的通俗&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;堆的含义就是：完全二叉树中任何一个非叶子节点的值均不大于（或不小于）其左，右孩子节点的值。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。因此我们可使用大顶堆进行升序排序，使用小顶堆进行降序排序。&lt;/p&gt;
&lt;h3 id=&#34;1-基本思想&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-基本思想&#34;&gt;#&lt;/a&gt; 1、基本思想&lt;/h3&gt;
&lt;p&gt;此处以大顶堆为例，堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走，再把剩余的元素调整成堆，找出最大的再移走，重复直至有序。&lt;/p&gt;
&lt;h3 id=&#34;2-算法描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-算法描述&#34;&gt;#&lt;/a&gt; 2、算法描述&lt;/h3&gt;
&lt;p&gt;①. 先将初始序列 &lt;code&gt;K[1..n]&lt;/code&gt;  建成一个大顶堆，那么此时第一个元素 &lt;code&gt;K1&lt;/code&gt;  最大，此堆为初始的无序区.&lt;br&gt;
②. 再将关键字最大的记录 &lt;code&gt;K1&lt;/code&gt;  (即堆顶，第一个元素) 和无序区的最后一个记录  &lt;code&gt;Kn&lt;/code&gt;  交换，由此得到新的无序区 &lt;code&gt;K[1..n−1]&lt;/code&gt;  和有序区 &lt;code&gt;K[n]&lt;/code&gt; , 且满足 &lt;code&gt;K[1..n−1].keys⩽K[n].key&lt;/code&gt; &lt;br&gt;
③. 交换 &lt;code&gt;K1&lt;/code&gt;  和  &lt;code&gt;Kn&lt;/code&gt;  后，堆顶可能违反堆性质，因此需将 &lt;code&gt;K[1..n−1]&lt;/code&gt;  调整为堆。然后重复步骤②, 直到无序区只有一个元素时停止.&lt;/p&gt;
&lt;h3 id=&#34;3-代码实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-代码实现&#34;&gt;#&lt;/a&gt; 3、代码实现&lt;/h3&gt;
&lt;p&gt;从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆函数，二是反复调用建堆函数以选择出剩余未排元素中最大的数来实现排序的函数。&lt;/p&gt;
&lt;p&gt;总结起来就是定义了以下几种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大堆调整（ &lt;code&gt;Max_Heapify&lt;/code&gt; ）：将堆的末端子节点作调整，使得子节点永远小于父节点&lt;/li&gt;
&lt;li&gt;创建最大堆（ &lt;code&gt;Build_Max_Heap&lt;/code&gt; ）：将堆所有数据重新排序&lt;/li&gt;
&lt;li&gt;堆排序（ &lt;code&gt;HeapSort&lt;/code&gt; ）：移除位在第一个数据的根节点，并做最大堆调整的递归运算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于堆节点的访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父节点 i 的左子节点在位置： &lt;code&gt;(2*i+1);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;父节点 i 的右子节点在位置： &lt;code&gt;(2*i+2);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;子节点 i 的父节点在位置： &lt;code&gt;floor((i-1)/2);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;heapSort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = arr.length; i &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        max_heapify(arr, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; temp = arr[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];      &lt;span class=&#34;comment&#34;&gt;//堆顶元素(第一个元素)与Kn交换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arr[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = arr[i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arr[i-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;max_heapify&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; limit)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(arr.length &amp;lt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; || arr.length &amp;lt; limit) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; parentIdx = limit / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(; parentIdx &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; parentIdx--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(parentIdx * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &amp;gt;= limit)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; left = parentIdx * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;       &lt;span class=&#34;comment&#34;&gt;//左子节点位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; right = (left + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;gt;= limit ? left : (left + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);    &lt;span class=&#34;comment&#34;&gt;//右子节点位置，如果没有右节点，默认为左节点位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; maxChildId = arr[left] &amp;gt;= arr[right] ? left : right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(arr[maxChildId] &amp;gt; arr[parentIdx])&amp;#123;   &lt;span class=&#34;comment&#34;&gt;//交换父节点与左右子节点中的最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; temp = arr[parentIdx];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr[parentIdx] = arr[maxChildId];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr[maxChildId] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Max_Heapify: &amp;quot;&lt;/span&gt; + Arrays.toString(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Tips: 由于堆排序中初始化堆的过程比较次数较多，因此它不太适用于小序列。同时由于多次任意下标相互交换位置，相同元素之间原本相对的顺序被破坏了，因此，它是不稳定的排序.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pdGltZXRyYXZlbGVyLmdpdGh1Yi5pby8yMDE3LzA3LzE4LyVFNSU4NSVBQiVFNSVBNCVBNyVFNiU4RSU5MiVFNSVCQSU4RiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4MCVCQiVFNyVCQiU5MyVFNCVCOCU4RWphdmElRTUlQUUlOUUlRTclOEUlQjAv&#34;&gt;链接&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/43d00a99/</guid>
            <title>选择排序</title>
            <link>https://smile1231.github.io/posts/43d00a99/</link>
            <category>Java面试</category>
            <category>算法</category>
            <category>选择排序</category>
            <pubDate>Sat, 12 Mar 2022 21:45:07 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;选择排序不稳定on2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#选择排序不稳定on2&#34;&gt;#&lt;/a&gt; 选择排序（不稳定）ON2&lt;/h2&gt;
&lt;p&gt;从算法逻辑上看，选择排序是一种简单直观的排序算法，在简单选择排序过程中，所需移动记录的次数比较少。&lt;/p&gt;
&lt;h3 id=&#34;1-基本思想&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-基本思想&#34;&gt;#&lt;/a&gt; 1、基本思想&lt;/h3&gt;
&lt;p&gt;选择排序的基本思想：比较 + 交换。&lt;/p&gt;
&lt;p&gt;在未排序序列中找到最小（大）元素，存放到未排序序列的起始位置。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。&lt;/p&gt;
&lt;h3 id=&#34;2-算法描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-算法描述&#34;&gt;#&lt;/a&gt; 2、算法描述&lt;/h3&gt;
&lt;p&gt;①. 从待排序序列中，找到关键字最小的元素；&lt;br&gt;
②. 如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；&lt;br&gt;
③. 从余下的 N - 1 个元素中，找出关键字最小的元素，重复①、②步，直到排序结束。&lt;/p&gt;
&lt;h3 id=&#34;3-代码实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-代码实现&#34;&gt;#&lt;/a&gt; 3、代码实现&lt;/h3&gt;
&lt;p&gt;选择排序比较简单，以下是我自己的实现，跟官方版差不多，所以完全可以参考。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;selectionSort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; arr.length-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; min = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; j &amp;lt; arr.length; j++)&amp;#123;    &lt;span class=&#34;comment&#34;&gt;//选出之后待排序中值最小的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(arr[j] &amp;lt; arr[min])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                min = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(min != i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; temp = arr[min];      &lt;span class=&#34;comment&#34;&gt;//交换操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr[min] = arr[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr[i] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Sorting:  &amp;quot;&lt;/span&gt; + Arrays.toString(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pdGltZXRyYXZlbGVyLmdpdGh1Yi5pby8yMDE3LzA3LzE4LyVFNSU4NSVBQiVFNSVBNCVBNyVFNiU4RSU5MiVFNSVCQSU4RiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4MCVCQiVFNyVCQiU5MyVFNCVCOCU4RWphdmElRTUlQUUlOUUlRTclOEUlQjAv&#34;&gt;链接&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/2b06d603/</guid>
            <title>直接插入排序</title>
            <link>https://smile1231.github.io/posts/2b06d603/</link>
            <category>Java面试</category>
            <category>算法</category>
            <category>直接插入排序</category>
            <pubDate>Sat, 12 Mar 2022 17:57:45 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;插入排序稳定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#插入排序稳定&#34;&gt;#&lt;/a&gt; 插入排序（稳定）&lt;/h2&gt;
&lt;p&gt;一般来说，插入排序都采用 in-place 在数组上实现。具体算法描述如下：&lt;/p&gt;
&lt;p&gt;①. 从第一个元素开始，该元素可以认为已经被排序&lt;br&gt;
②. 取出下一个元素，在已经排序的元素序列中从后向前扫描&lt;br&gt;
③. 如果该元素（已排序）大于新元素，将该元素移到下一位置&lt;br&gt;
④. 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置&lt;br&gt;
⑤. 将新元素插入到该位置后&lt;br&gt;
⑥. 重复步骤②~⑤&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;insertionSort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; arr.length; i++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; temp = arr[i];    &lt;span class=&#34;comment&#34;&gt;// 取出下一个元素，在已经排序的元素序列中从后向前扫描&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = i; j &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j-- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;( j &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; arr[j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] &amp;gt; temp ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                arr[j] = arr[j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];    &lt;span class=&#34;comment&#34;&gt;// 如果该元素（已排序）大于取出的元素temp，将该元素移到下一位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Temping:  &amp;quot;&lt;/span&gt; + Arrays.toString(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 将新元素插入到该位置后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                arr[j] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Sorting:  &amp;quot;&lt;/span&gt; + Arrays.toString(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 交换次数较多的实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;insertionSort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i&amp;lt;arr.length-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i++ ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j=i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; j&amp;gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j-- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;( arr[j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] &amp;lt;= arr[j] )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; temp = arr[j];      &lt;span class=&#34;comment&#34;&gt;//交换操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr[j] = arr[j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            arr[j-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Sorting:  &amp;quot;&lt;/span&gt; + Arrays.toString(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//JDK直接插入排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;insertSort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] a,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; left,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; right)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = left, j = i; i &amp;lt; right; j = ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; ai = a[i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (ai &amp;lt; a[j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a[j + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = a[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (j-- == left) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[j + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = ai;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pdGltZXRyYXZlbGVyLmdpdGh1Yi5pby8yMDE3LzA3LzE4LyVFNSU4NSVBQiVFNSVBNCVBNyVFNiU4RSU5MiVFNSVCQSU4RiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4MCVCQiVFNyVCQiU5MyVFNCVCOCU4RWphdmElRTUlQUUlOUUlRTclOEUlQjAv&#34;&gt;链接&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/ff8068c0/</guid>
            <title>快速排序</title>
            <link>https://smile1231.github.io/posts/ff8068c0/</link>
            <category>Java面试</category>
            <category>算法</category>
            <category>快速排序</category>
            <pubDate>Sat, 12 Mar 2022 13:24:41 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;快排-不稳定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快排-不稳定&#34;&gt;#&lt;/a&gt; 快排 (不稳定)&lt;/h2&gt;
&lt;p&gt;快速排序的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据比另一部分的所有数据要小，再按这种方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，使整个数据变成有序序列。&lt;/p&gt;
&lt;h3 id=&#34;快速排序的原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速排序的原理&#34;&gt;#&lt;/a&gt; 快速排序的原理&lt;/h3&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;排序算法的思想非常简单，在待排序的数列中，我们首先要找一个数字作为基准数（这只是个专用名词）。为了方便，我们一般选择第  &lt;code&gt;1&lt;/code&gt;  个数字作为基准数（其实选择第几个并没有关系）。接下来我们需要把这个待排序的数列中小于基准数的元素移动到待排序的数列的左边，把大于基准数的元素移动到待排序的数列的右边。这时，左右两个分区的元素就相对有序了；接着把两个分区的元素分别按照上面两种方法继续对每个分区找出基准数，然后移动，直到各个分区只有一个数时为止。&lt;/p&gt;
&lt;p&gt;这是典型的分治思想，即分治法。下面我们对一个实际例子进行算法描述，讲解快速排序的排序步骤。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;以 47、29、71、99、78、19、24、47&lt;/code&gt;  的待排序的数列为例进行排序，为了方便区分两个  &lt;code&gt;47&lt;/code&gt; ，我们对后面的  &lt;code&gt;47&lt;/code&gt;  增加一个下画线，即待排序的数列为  &lt;code&gt;47、29、71、99、78、19、24、47&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;首先我们需要在数列中选择一个基准数，我们一般会选择中间的一个数或者头尾的数，这里直接选择第  &lt;code&gt;1&lt;/code&gt;  个数  &lt;code&gt;47&lt;/code&gt;  作为基准数，接着把比  &lt;code&gt;47&lt;/code&gt;  小的数字移动到左边，把比  &lt;code&gt;47&lt;/code&gt;  大的数字移动到右边，对于相等的数字不做移动。所以实际上我们需要找到中间的某个位置  &lt;code&gt;k&lt;/code&gt; ，这样  &lt;code&gt;k&lt;/code&gt;  左边的值全部比  &lt;code&gt;k&lt;/code&gt;  上的值小， &lt;code&gt;k&lt;/code&gt;  右边的值全部比  &lt;code&gt;k&lt;/code&gt;  上的值大。&lt;/p&gt;
&lt;p&gt;接下来开始移动元素。怎么移动呢？其实冒泡排序也涉及对元素的移动，但是那样移动起来很累，比如把最后一个元素移动到第  &lt;code&gt;1&lt;/code&gt;  个，就需要比较  &lt;code&gt;n-1&lt;/code&gt;  次，同时交换  &lt;code&gt;n-1&lt;/code&gt;  次，效率很低。其实，只需把第  &lt;code&gt;1&lt;/code&gt;  个元素和最后一个元素交换就好了，这种思想是不是在排序时可以借鉴呢？之前说快速排序就是对冒泡排序的一个改进，就是这个原因。&lt;/p&gt;
&lt;p&gt;快速排序的操作是这样的：首先从数列的右边开始往左边找，我们设这个下标为  &lt;code&gt;i&lt;/code&gt; ，也就是进行减减操作（ &lt;code&gt;i--&lt;/code&gt; ），找到第  &lt;code&gt;1&lt;/code&gt;  个比基准数小的值，让它与基准值交换；接着从左边开始往右边找，设这个下标为  &lt;code&gt;j&lt;/code&gt; ，然后执行加加操作 &lt;code&gt;（j++）&lt;/code&gt; ，找到第  &lt;code&gt;1&lt;/code&gt;  个比基准数大的值，让它与基准值交换；然后继续寻找，直到  &lt;code&gt;i &lt;/code&gt; 与  &lt;code&gt;j&lt;/code&gt;  相遇时结束，最后基准值所在的位置即  &lt;code&gt;k&lt;/code&gt;  的位置，也就是说  &lt;code&gt;k&lt;/code&gt;  左边的值均比  &lt;code&gt;k&lt;/code&gt;  上的值小，而  &lt;code&gt;k&lt;/code&gt;  右边的值都比  &lt;code&gt;k &lt;/code&gt; 上的值大。&lt;/p&gt;
&lt;p&gt;所以对于上面的数列 47、29、71、99、78、19、24、 &lt;u&gt;47&lt;/u&gt;，进行第  &lt;code&gt;1&lt;/code&gt;  趟第  &lt;code&gt;1&lt;/code&gt;  个交换的排序情况如下，第  &lt;code&gt;1&lt;/code&gt;  次的操作情况如图 1 所示。&lt;/p&gt;
&lt;img data-src=&#34;/posts/ff8068c0/2022-03-12-16-52-14.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;交换之后， &lt;code&gt;j&lt;/code&gt;  移动到了下标为  &lt;code&gt;6&lt;/code&gt;  的位置，对  &lt;code&gt;i&lt;/code&gt;  继续扫描，如图  &lt;code&gt;2&lt;/code&gt;  所示。&lt;/p&gt;
&lt;img data-src=&#34;/posts/ff8068c0/2022-03-12-16-55-14.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;此时交换后的数列变为 24、29、47、99、78、19、71、&lt;u&gt;47&lt;/u&gt;。接下来我们继续对 i、j 进行操作，如图 3 所示，继续进行 i-- 及 j++ 的比较操作。&lt;/p&gt;
&lt;img data-src=&#34;/posts/ff8068c0/2022-03-12-16-58-42.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;进行了这两次 i、j 的移动、比较、交换之后，我们最终得到的数列是 24、29、19、47、78、99、71、&lt;u&gt;47&lt;/u&gt;。接下来我们继续进行 i-- 的操作，发现在 i 为 4 时比 47 大不用交换，在 i 为 3 时与 j 相遇，这时就不需要继续移动、比较了，已经找到 k 了，并且 k 的值为 3。我们可以确认一下当前的数列是不是 k 左边的值都比 47 小，而 k 右边的值都比 47 大（由于要保持相对位置不变，所以 47 同样在基准值 47 的右边）。&lt;/p&gt;
&lt;p&gt;47 这个值已经落到了它该在的位置，第 1 趟排序完成了。接下来就是以 k 为基准，分为两部分，然后在左右两部分分别执行上述排序操作，最后数据会分为 4 部分；接着对每部分进行操作，直到每部分都只有一个值为止。&lt;/p&gt;
&lt;p&gt;接下来进行第 2 趟排序，现在左边部分为 24、29、19，我们选择第 1 个数 24 作为基准数，接着进行 i–、j++ 的操作，我们发现 i 最初的值为 19，比 24 这个基准值小，所以与基准值进行交换，得到的数列为 19、29、24；当 j 为 1 时，我们发现 29 比 24 大，所以与基准值进行交换，得到的数列 19、24、29，此时 i 为 2，j 为 1；继续 i-- 时发现 i 为 1，与 j 相遇，左边部分的数列的 k 为 1，并且左右两部分分别只有一个元素，此时第 2 轮排序的左边部分的排序结束，同时左边部分的所有数据都排序完成。&lt;/p&gt;
&lt;p&gt;我们接着看右边部分的排序，待排序的数列为 78、99、71、&lt;u&gt;47&lt;/u&gt;，我们同样选择第 1 个值 78 为基准值，接下来进行 i 与 j 的移动与比较，发现 47 比 78 小，进行交换，得到的数列 47、99、71、78；从左往右发现 99 比基准值 78 大，进行交换，得到的数列为 47、78、71、99；继续从右向左看，发现 71 比基准值 78 小，进行交换，得到的数列为 &lt;u&gt;47&lt;/u&gt;、71、78、99。此时 i 在整体数组中的下标为 6，j 为 5，若继续 j++ 则与 i 相遇，所以完成此轮排序。&lt;/p&gt;
&lt;p&gt;此时右边数列的 k 为 6，一般会是相遇的位置，也就是基准值所在的位置，这时数列又被分为两部分，左边是 47、71，右边是 99，需要继续对左边部分的数据进行排序，虽然只有两个数据，但我们还是继续按照快速排序的思想操作一下，选择 &lt;u&gt;47&lt;/u&gt; 作为基准数，将 i 进行从右向左的移动、比较，发现 i 与 j 相等时没有产生移动，完成第 2 轮排序。&lt;/p&gt;
&lt;p&gt;至此，所有排序都已经完成，最终数列的结果是 19、24、29、47、47、71、78、99，怎么样，快速排序是不是非常简单地完成了所有的排序呢？虽然本次快速排序没有改变相同值的元素的顺序，但是由于快速排序需要对数列中的元素来回移动，有时还是会改变相对顺序的（比如 47 在第 1 轮的移动过程中就被移动到 47 的右边了），所以快速排序并不是一个稳定的算法。&lt;/p&gt;
&lt;h2 id=&#34;快速排序的实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速排序的实现&#34;&gt;#&lt;/a&gt; 快速排序的实现&lt;/h2&gt;
&lt;p&gt;通过以上的学习，你是否可以自己写出快速排序的实现代码呢？在接着学习之前，最好自己能对代码的实现进行一些思考，然后和下面的内容进行比对，看看自己有哪些疏忽之处。&lt;/p&gt;
&lt;p&gt;其实快速排序有一个比较简单的思想，就是递归。对于每一趟排序都是一样的思想，只不过需要进行排序的数组的范围越来越小了，使用递归实现这种排序最适合不过了。&lt;/p&gt;
&lt;h3 id=&#34;实现一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现一&#34;&gt;#&lt;/a&gt; 实现一&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;QuickSort&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] array;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;QuickSort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] array)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.array = array;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        quickSort(array, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, array.length - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; array.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(array[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 递归排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; src&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; begin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;quickSort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] src, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; begin, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; end)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (begin &amp;lt; end) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; key = src[begin];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = begin;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = end;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (i &amp;lt; j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (i &amp;lt; j &amp;amp;&amp;amp; src[j] &amp;gt; key) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    j--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i &amp;lt; j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    src[i] = src[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (i &amp;lt; j &amp;amp;&amp;amp; src[i] &amp;lt; key) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i &amp;lt; j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    src[j] = src[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    j--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            src[i] = key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            quickSort(src, begin, i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            quickSort(src, i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, end);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;实现二&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现二&#34;&gt;#&lt;/a&gt; 实现二&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;quickSort&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; low, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; high)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(arr.length &amp;lt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(low &amp;gt;= high) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; left = low;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; right = high;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; temp = arr[left];   &lt;span class=&#34;comment&#34;&gt;//挖坑1：保存基准的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (left &amp;lt; right)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(left &amp;lt; right &amp;amp;&amp;amp; arr[right] &amp;gt;= temp)&amp;#123;  &lt;span class=&#34;comment&#34;&gt;//坑2：从后向前找到比基准小的元素，插入到基准位置坑1中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arr[left] = arr[right];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(left &amp;lt; right &amp;amp;&amp;amp; arr[left] &amp;lt;= temp)&amp;#123;   &lt;span class=&#34;comment&#34;&gt;//坑3：从前往后找到比基准大的元素，放到刚才挖的坑2中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        arr[right] = arr[left];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr[left] = temp;   &lt;span class=&#34;comment&#34;&gt;//基准值填补到坑3中，准备分治递归快排&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Sorting: &amp;quot;&lt;/span&gt; + Arrays.toString(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    quickSort(arr, low, left-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    quickSort(arr, left+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, high);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;快速排序的特点及性能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速排序的特点及性能&#34;&gt;#&lt;/a&gt; 快速排序的特点及性能&lt;/h2&gt;
&lt;p&gt;快速排序是在冒泡排序的基础上改进而来的，冒泡排序每次只能交换相邻的两个元素，而快速排序是跳跃式的交换，交换的距离很大，因此总的比较和交换次数少了很多，速度也快了不少。&lt;/p&gt;
&lt;p&gt;但是快速排序在最坏情况下的时间复杂度和冒泡排序一样，是  &lt;code&gt;O(n2)&lt;/code&gt; ，实际上每次比较都需要交换，但是这种情况并不常见。我们可以思考一下如果每次比较都需要交换，那么数列的平均时间复杂度是  &lt;code&gt;O(nlogn)&lt;/code&gt; ，事实上在大多数时候，排序的速度要快于这个平均时间复杂度。这种算法实际上是一种分治法思想，也就是分而治之，把问题分为一个个的小部分来分别解决，再把结果组合起来。&lt;/p&gt;
&lt;p&gt;快速排序只是使用数组原本的空间进行排序，所以所占用的空间应该是常量级的，但是由于每次划分之后是递归调用，所以递归调用在运行的过程中会消耗一定的空间，在一般情况下的空间复杂度为  &lt;code&gt;O(logn)&lt;/code&gt; ，在最差的情况下，若每次只完成了一个元素，那么空间复杂度为 &lt;code&gt; O(n)&lt;/code&gt; 。所以我们一般认为快速排序的空间复杂度为  &lt;code&gt;O(logn)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;快速排序是一个不稳定的算法，在经过排序之后，可能会对相同值的元素的相对位置造成改变。&lt;/p&gt;
&lt;p&gt;快速排序基本上被认为是相同数量级的所有排序算法中，平均性能最好的。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RhdGEuYmlhbmNoZW5nLm5ldC92aWV3LzExNy5odG1s&#34;&gt;本文链接&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/a80d0031/</guid>
            <title>动态规划</title>
            <link>https://smile1231.github.io/posts/a80d0031/</link>
            <category>Java面试</category>
            <category>动态规划</category>
            <pubDate>Thu, 17 Feb 2022 22:58:10 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;动态规划算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态规划算法&#34;&gt;#&lt;/a&gt; 动态规划算法&lt;/h1&gt;
&lt;h2 id=&#34;什么是动态规划&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是动态规划&#34;&gt;#&lt;/a&gt; 什么是动态规划&lt;/h2&gt;
&lt;p&gt;动态规划的大致思路是把一个复杂的问题转化成一个分阶段逐步递推的过程，从简单的初始状态一步一步递推，最终得到复杂问题的最优解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本思想与策略编辑:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;拆分问题&lt;/strong&gt;&lt;/font&gt;: 根据问题的可能性把问题划分成通过递推或者递归一步一步实现。关键就是这个步骤，动态规划有一类问题就是从后往前推到，有时候我们很容易知道：如果只有一种情况时，最佳的选择应该怎么做。然后根据这个最佳选择往前一步推导，得到前一步的最佳选择&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;font color=&#34;blue&#34;&gt;定义问题状态和状态之间的关系：&lt;/font&gt;用一种量化的形式表现出来，类似于高中学的推导公式，因为这种式子很容易用程序写出来，也可以说对程序比较亲和 (也就是最后所说的状态转移方程式)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态规划算法的基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，&lt;font color=&#34;white&#34;&gt;前一子问题的解，为后一子问题的求解提供了有用的信息。&lt;/font&gt;在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;我的理解是&lt;/strong&gt;：比如我们找到最优解，我们应该讲最优解保存下来，为了往前推导时能够使用前一步的最优解，在这个过程中难免有一些相比于最优解差的解，此时我们应该放弃，只保存最优解，&lt;/p&gt;
&lt;p&gt;这样我们每一次都把最优解保存了下来，大大降低了时间复杂度。&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;动态规划解决问题的过程分为两步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;寻找状态转移方程式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用状态转移方程式自底向上求解问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;动态规划原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态规划原理&#34;&gt;#&lt;/a&gt; 动态规划原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用条件：可分为多个相关子问题，子问题的解被重复使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optimal substructure（优化子结构）&lt;/code&gt; ：
&lt;ul&gt;
&lt;li&gt;一个问题的优化解包含了子问题的优化解&lt;/li&gt;
&lt;li&gt;缩小子问题集合，只需那些优化问题中包含的子问题，降低实现复杂性&lt;/li&gt;
&lt;li&gt;我们可以自下而上的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Subteties（重叠子问题）&lt;/code&gt; ：在问题的求解过程中，很多子问题的解将被多次使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态规划算法的设计步骤：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;分析优化解的结构&lt;/li&gt;
&lt;li&gt;递归地定义最优解的代价&lt;/li&gt;
&lt;li&gt;自底向上地计算优化解的代价保存之，并获取构造最优解的信息&lt;/li&gt;
&lt;li&gt;根据构造最优解的信息构造优化解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态规划特点：
&lt;ul&gt;
&lt;li&gt;把原始问题划分成一系列子问题；&lt;/li&gt;
&lt;li&gt;求解每个子问题仅一次，并将其结果保存在一个表中，以后用到时直接存取，不重复计算，节省计算时间&lt;/li&gt;
&lt;li&gt;自底向上地计算。&lt;/li&gt;
&lt;li&gt;整体问题最优解取决于子问题的最优解（状态转移方程）（将子问题称为状态，最终状态的求解归结为其他状态的求解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;经典例题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#经典例题&#34;&gt;#&lt;/a&gt; 经典例题&lt;/h2&gt;
&lt;h3 id=&#34;最长公共子序列longest-common-subsequence-lcs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最长公共子序列longest-common-subsequence-lcs&#34;&gt;#&lt;/a&gt; 最长公共子序列（ &lt;code&gt;longest-common-subsequence, LCS&lt;/code&gt; ）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/longest-common-subsequence/&#34;&gt; &lt;code&gt;LeetCode&lt;/code&gt; &lt;/a&gt;&lt;/p&gt;
&lt;img data-src=&#34;/posts/a80d0031/2022-02-17-23-18-58.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;(1) 子序列：一个序列 &lt;code&gt;X ＝ x1x2...xn&lt;/code&gt; , 中任意删除若干项，剩余的序列叫做 &lt;code&gt;A&lt;/code&gt;  的一个子序列。也可以认为是从序列 &lt;code&gt;A&lt;/code&gt;  按原顺序保留任意若干项得到的序列。&lt;br&gt;
例如：对序列  &lt;code&gt;1,3,5,4,2,6,8,7&lt;/code&gt;  来说，序列 &lt;code&gt;3,4,8,7&lt;/code&gt;  是它的一个子序列。对于一个长度为 &lt;code&gt;n&lt;/code&gt;  的序列，它一共有 &lt;code&gt;2^n&lt;/code&gt;  个子序列，有 &lt;code&gt;(2^n – 1)&lt;/code&gt;  个非空子序列。在这里需要提醒大家，子序列不是子集，它和原始序列的元素顺序是相关的。&lt;/p&gt;
&lt;p&gt;(2) 公共子序列：如果序列 &lt;code&gt;Z&lt;/code&gt;  既是序列 &lt;code&gt;X&lt;/code&gt;  的子序列，同时也是序列 Y 的子序列，则称它为序列 &lt;code&gt;X&lt;/code&gt;  和序列 &lt;code&gt;Y&lt;/code&gt;  的公共子序列。空序列是任何两个序列的公共子序列。&lt;/p&gt;
&lt;p&gt;(3) 最长公共子序列： &lt;code&gt;X&lt;/code&gt;  和 &lt;code&gt;Y&lt;/code&gt;  的公共子序列中长度最长的（包含元素最多的）叫做 &lt;code&gt;X&lt;/code&gt;  和 &lt;code&gt;Y&lt;/code&gt;  的最长公共子序列。&lt;/p&gt;
&lt;p&gt;这个问题如果用穷举法时间，最终求出最长公共子序列时，时间复杂度是 &lt;code&gt;Ο（2mn）&lt;/code&gt; ，是指数级别的复杂度，对于长序列是不适用的。因此我们使用动态规划法来求解。&lt;/p&gt;
&lt;h3 id=&#34;刻画最长公共子序列问题的最优子结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#刻画最长公共子序列问题的最优子结构&#34;&gt;#&lt;/a&gt; 刻画最长公共子序列问题的最优子结构&lt;/h3&gt;
&lt;p&gt;设 &lt;code&gt;X=x1x2…xm&lt;/code&gt;  和 &lt;code&gt;Y=y1y2…yn&lt;/code&gt;  是两个序列， &lt;code&gt;Z=z1z2…zk&lt;/code&gt;  是这两个序列的一个最长公共子序列。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;xm=yn&lt;/code&gt; ，那么 &lt;code&gt;zk=xm=yn&lt;/code&gt; ，且 &lt;code&gt;Zk-1&lt;/code&gt;  是 &lt;code&gt;Xm-1&lt;/code&gt; ， &lt;code&gt;Yn-1&lt;/code&gt;  的一个最长公共子序列；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;xm≠yn&lt;/code&gt; ，那么 &lt;code&gt;zk≠xm&lt;/code&gt; ，意味着 &lt;code&gt;Z&lt;/code&gt;  是 &lt;code&gt;Xm-1&lt;/code&gt; ， &lt;code&gt;Y&lt;/code&gt;  的一个最长公共子序列；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;xm≠yn&lt;/code&gt; ，那么 &lt;code&gt;zk≠yn&lt;/code&gt; ，意味着 &lt;code&gt;Z&lt;/code&gt;  是 &lt;code&gt;X&lt;/code&gt; ， &lt;code&gt;Yn-1&lt;/code&gt;  的一个最长公共子序列。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从上面三种情况可以看出，两个序列的 &lt;code&gt;LCS&lt;/code&gt;  包含两个序列的前缀的 &lt;code&gt;LCS&lt;/code&gt; 。因此， &lt;code&gt;LCS&lt;/code&gt;  问题具有最优子结构特征。&lt;/p&gt;
&lt;h3 id=&#34;递归的定义最优质&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归的定义最优质&#34;&gt;#&lt;/a&gt; 递归的定义最优质&lt;/h3&gt;
&lt;p&gt;从最优子结构可以看出，如果 &lt;code&gt;xm=yn&lt;/code&gt; ，那么我们应该求解 &lt;code&gt;Xm-1&lt;/code&gt; ， &lt;code&gt;Yn-1&lt;/code&gt;  的一个 &lt;code&gt;LCS&lt;/code&gt; ，并且将 &lt;code&gt;xm=yn&lt;/code&gt;  加入到这个 &lt;code&gt;LCS&lt;/code&gt;  的末尾，这样得到的一个新的 &lt;code&gt;LCS&lt;/code&gt;  就是所求。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;xm≠yn&lt;/code&gt; ，我们需要求解两个子问题，分别求 &lt;code&gt;Xm-1&lt;/code&gt; ， &lt;code&gt;Y&lt;/code&gt;  的一个 &lt;code&gt;LCS&lt;/code&gt;  和 &lt;code&gt;X&lt;/code&gt; ， &lt;code&gt;Yn-1&lt;/code&gt;  的一个 &lt;code&gt;LCS&lt;/code&gt; 。两个 &lt;code&gt;LCS&lt;/code&gt;  中较长者就是 &lt;code&gt;X&lt;/code&gt;  和 &lt;code&gt;Y&lt;/code&gt;  的一个 &lt;code&gt;LCS&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;可以看出 &lt;code&gt;LCS&lt;/code&gt;  问题具有重叠子问题性质。为了求 &lt;code&gt;X&lt;/code&gt;  和 &lt;code&gt;Y&lt;/code&gt;  的一个 &lt;code&gt;LCS&lt;/code&gt; ，我们需要分别求出 &lt;code&gt;Xm-1&lt;/code&gt; ， &lt;code&gt;Y&lt;/code&gt;  的一个 &lt;code&gt;LCS&lt;/code&gt;  和 &lt;code&gt;X&lt;/code&gt; ， &lt;code&gt;Yn-1&lt;/code&gt;  的一个 &lt;code&gt;LCS&lt;/code&gt; ，这几个字问题又包含了求出 &lt;code&gt;Xm-1&lt;/code&gt; ， &lt;code&gt;Yn-1&lt;/code&gt;  的一个 &lt;code&gt;LCS&lt;/code&gt;  的子子问题。（有点绕了。。。晕没晕。。。。）&lt;/p&gt;
&lt;p&gt;根据上面的分析，我们可以得出下面的公式；&lt;/p&gt;
&lt;img data-src=&#34;/posts/a80d0031/2022-02-17-23-19-37.png&#34; class=&#34;&#34;&gt;
&lt;h3 id=&#34;计算最优的解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#计算最优的解&#34;&gt;#&lt;/a&gt; 计算最优的解&lt;/h3&gt;
&lt;p&gt;根据上面的，我们很容易就可以写出递归计算 &lt;code&gt;LCS&lt;/code&gt;  问题的程序，通过这个程序我们可以求出各个子问题的 &lt;code&gt;LCS&lt;/code&gt;  的值，此外，为了求解最优解本身，我们好需要一个表 &lt;code&gt;dp，dp[i，j]&lt;/code&gt;  记录使 &lt;code&gt;C[i，j]&lt;/code&gt;  取值的最优子结构。&lt;/p&gt;
&lt;h3 id=&#34;数组的填表过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的填表过程&#34;&gt;#&lt;/a&gt; 数组的填表过程&lt;/h3&gt;
&lt;img data-src=&#34;/posts/a80d0031/2022-02-17-23-19-46.png&#34; class=&#34;&#34;&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;LCS&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;findLCS&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String A, String B)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n = A.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; m = B.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//返回一个字符数组，该字符数组中存放了当前字符串中的所有字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//返回的是字符数组char[]a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt;[] a = A.toCharArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt;[] b = B.toCharArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//创建一个二维矩阵，用来推到公共子序列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[][] dp = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[n][m];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//如果找到第一列其中一个字符等于第一行第一个字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (a[i] == b[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//找到第一列与第一行b[0]的相等的值，把其变成1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dp[i][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//并将其后面的字符都变成1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dp[j][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//如果找到第一列其中一个字符等于第一行第一个字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (b[i] == a[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//则把第一列后面的字符都变成1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                dp[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][i] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; j &amp;lt; m; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dp[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][j] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//从1开始是因为横向和纵向下标为0的都遍历过了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; j &amp;lt; m; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//横向和纵向有相等的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (a[i] == b[j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;//当前位置左边的值+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dp[i][j] = dp[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;//取当前位置（左边的值，上边的值）的最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    dp[i][j] = Math.max(dp[i][j - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], dp[i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; m; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.print(dp[i][j] + &lt;span class=&#34;string&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; dp[n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][m - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LCS lcs = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LCS();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; findLCS = lcs.findLCS(&lt;span class=&#34;string&#34;&gt;&amp;quot;android&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;random&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最长子序列长度：&amp;quot;&lt;/span&gt; + findLCS);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/a4ce31d2/</guid>
            <title>贪心算法</title>
            <link>https://smile1231.github.io/posts/a4ce31d2/</link>
            <category>Java面试</category>
            <category>算法</category>
            <pubDate>Thu, 17 Feb 2022 22:58:04 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;贪心算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#贪心算法&#34;&gt;#&lt;/a&gt; 贪心算法&lt;/h1&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h2&gt;
&lt;p&gt;所谓贪心算法是指，在对问题求解时，总是做出&lt;strong&gt;在当前看来是最好的选择&lt;/strong&gt;。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。&lt;/p&gt;
&lt;p&gt;贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;所以对所采用的贪心策略一定要仔细分析其是否满足无后效性。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;贪心算法的基本思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#贪心算法的基本思路&#34;&gt;#&lt;/a&gt; 贪心算法的基本思路&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;建立数学模型来描述问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把求解的问题分成若干个子问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对每一子问题求解，得到子问题的局部最优解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把子问题的解局部最优解合成原来解问题的一个解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;贪心算法的实现框架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#贪心算法的实现框架&#34;&gt;#&lt;/a&gt; 贪心算法的实现框架&lt;/h2&gt;
&lt;p&gt;贪心算法适用的前提是：局部最优策略能导致产生全局最优解&lt;/p&gt;
&lt;p&gt;实际上，贪心算法适用的情况很少。一般，对一个问题分析是否适用于贪心算法，可以先选择该问题下的几个实际数据进行分析，就可做出判断。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;从问题的某一初始解出发；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; （能朝给定总目标前进一步）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        利用可行的决策，求出可行解的一个解元素;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;由所有解元素组合成问题的一个可行解;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;贪心策略的选择&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#贪心策略的选择&#34;&gt;#&lt;/a&gt; 贪心策略的选择&lt;/h2&gt;
&lt;p&gt;因为用贪心算法只能通过解局部最优解的策略来达到全局最优解，因此，一定要注意判断问题是否适合采用贪心算法策略，找到的解是否一定是问题的最优解。&lt;/p&gt;
&lt;h2 id=&#34;经典例题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#经典例题&#34;&gt;#&lt;/a&gt; 经典例题&lt;/h2&gt;
&lt;p&gt;下面是一个可以试用贪心算法解的题目，贪心解的确不错，可惜不是最优解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[背包问题] 有一个背包，背包容量是 &lt;code&gt;M=150&lt;/code&gt; 。有 &lt;code&gt;7&lt;/code&gt;  个物品，物品可以分割成任意大小。要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。&lt;/p&gt;
&lt;/blockquote&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;figcaption&gt;&lt;span&gt;A     B    C    D     E     F    G&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;重量 35   30   60   50   40   10   25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;价值 10   40   30   50   35   40   30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight autohotkey&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;目标函数： `∑pi`最大（价值总和最大）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;约束条件是装入的物品总重量不超过背包容量：`∑wi&amp;lt;=M( M=&lt;span class=&#34;number&#34;&gt;150&lt;/span&gt;)`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    （&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;）根据贪心的策略，每次挑选价值最大的物品装入背包，得到的结果是否最优？&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    （&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;）每次挑选所占重量最小的物品装入是否能得到最优解？&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    （&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;）每次选取单位重量价值最大的物品，成为解本题的策略。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;值得注意的是，贪心算法并不是完全不可以使用，贪心策略一旦经过证明成立后，它就是一种高效的算法。&lt;/p&gt;
&lt;p&gt;比如，求最小生成树的 &lt;code&gt;Prim&lt;/code&gt;  算法和 &lt;code&gt;Kruskal&lt;/code&gt;  算法都是漂亮的贪心算法。&lt;/p&gt;
&lt;p&gt;贪心算法还是很常见的算法之一，这是由于它简单易行，构造贪心策略不是很困难。&lt;/p&gt;
&lt;p&gt;可惜的是，它需要证明后才能真正运用到题目的算法中。&lt;/p&gt;
&lt;p&gt;一般来说，&lt;strong&gt;贪心算法的证明围绕着：整个问题的最优解一定由在贪心策略中存在的子问题的最优解得来的。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight dns&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;对于例题中的&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;种贪心策略，都是无法成立（无法被证明）的，解释如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   （&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;）贪心策略：选取价值最大者。反例：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   W=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   物品：&lt;span class=&#34;keyword&#34;&gt;A&lt;/span&gt;     B   C&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   重量：&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;  &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;  &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   价值：&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;  &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;  &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   根据策略，首先选取物品&lt;span class=&#34;keyword&#34;&gt;A&lt;/span&gt;，接下来就无法再选取了，可是，选取B、C则更好。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   （&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;）贪心策略：选取重量最小。它的反例与第一种策略的反例差不多。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   （&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;）贪心策略：选取单位重量价值最大的物品。反例：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   W=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   物品： &lt;span class=&#34;keyword&#34;&gt;A&lt;/span&gt;   B    C&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   重量：&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;  &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;  &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   价值：&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;  &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;  &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断，如果选择&lt;span class=&#34;keyword&#34;&gt;A&lt;/span&gt;，则答案错误。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;其实该情况是符合贪心策略的&lt;/strong&gt;，因为该总情况不管先选哪两个都会把背包塞满，因为该题物品可以分割成任意大小，所以，就算空下一下，也可以将最后一个物品分割，放进去，它们的单位重量的价值是一样的，所以，最后背包最后重量相同，重量相同那么价值也相同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;font color=&#39;yellow&#39;&gt;所以采用第三种策略，代码如下：(不是最优解)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.Arrays;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GreedyPackage&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; MAX_WEIGHT = &lt;span class=&#34;number&#34;&gt;150&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] weights = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;number&#34;&gt;35&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] values = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;35&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;packageGreedy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; capacity, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; weights[], &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] values)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n = weights.length;&lt;span class=&#34;comment&#34;&gt;//物品的数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt;[] r = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt;[n];&lt;span class=&#34;comment&#34;&gt;//性价比数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] index = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[n];&lt;span class=&#34;comment&#34;&gt;//性价比排序物品的下标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            r[i] = (&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt;) values[i] / weights[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            index[i] = i;&lt;span class=&#34;comment&#34;&gt;//默认排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; temp = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//对性价比进行排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = i + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;//降序，对性价比和对应下标进行排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (r[i] &amp;lt; r[j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    temp = r[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    r[i] = r[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    r[j] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; x = index[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    index[i] = index[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    index[j] = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//排序好的重量和价值分别存到数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] w1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] v1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//排序好的重量和价值分别存到数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            w1[i] = weights[index[i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            v1[i] = values[index[i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//用来装物品的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] x = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//放入物品的最大价值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; maxValue = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//放入物品的总重量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; totalweights = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//物品重量比包的总容量小，表示还可以装得下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (w1[i] &amp;lt; capacity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                x[i] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//表示该物品被装了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                maxValue += v1[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(w1[i] + &lt;span class=&#34;string&#34;&gt;&amp;quot;kg的物品被放进包包,价值：&amp;quot;&lt;/span&gt; + v1[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                totalweights += w1[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                capacity = capacity - w1[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;总共放入的物品数量：&amp;quot;&lt;/span&gt; + Arrays.toString(x));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;总共放入的物品总重量&amp;quot;&lt;/span&gt; + totalweights);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;放入物品的最大价值：&amp;quot;&lt;/span&gt; + maxValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        GreedyPackage greedyPackage = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; GreedyPackage();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        greedyPackage.packageGreedy(greedyPackage.MAX_WEIGHT, greedyPackage.weights, greedyPackage.values);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/7474c898/</guid>
            <title>分治算法</title>
            <link>https://smile1231.github.io/posts/7474c898/</link>
            <category>Java面试</category>
            <category>算法</category>
            <pubDate>Thu, 17 Feb 2022 22:57:48 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;分治算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分治算法&#34;&gt;#&lt;/a&gt; 分治算法&lt;/h1&gt;
&lt;h2 id=&#34;定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义&#34;&gt;#&lt;/a&gt; 定义&lt;/h2&gt;
&lt;p&gt;将原问题划分成 &lt;code&gt;n&lt;/code&gt;  个规模较小，并且结构与原问题相似的子问题，递归地解决这些子问题，然后再合并其结果，就得到原问题的解&lt;/p&gt;
&lt;h2 id=&#34;分治策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分治策略&#34;&gt;#&lt;/a&gt; 分治策略&lt;/h2&gt;
&lt;p&gt;“分而治之”，大问题能够拆成相似的小问题，记住这些小问题需要具有相似性。而后将小问题的每个解合成为大问题的解。所以说大问题如何拆，小问题如何合并才是这个算法最主要的一个思想。实际上很多算法如贪心算法，动态规划等等都是要求把大问题拆成小问题。而分治算法的重要一点就是要适用于能够重新把小问题的解合并为大问题的解。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;使用分治算法的前提条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用分治算法的前提条件&#34;&gt;#&lt;/a&gt; 使用分治算法的前提条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;原问题与分解成的小问题具有相同的模式；&lt;/li&gt;
&lt;li&gt;原问题分解成的子问题可以独立求解，子问题之间没有相关性，&lt;strong&gt;这一点是分治算法跟动态规划的明显区别；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;具有分解终止条件，也就是说，当问题足够小时，可以直接求解；&lt;/li&gt;
&lt;li&gt;可以将子问题合并成原问题，而这个合并操作的复杂度不能太高，否则就起不到减小算法总体复杂度的效果了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;每一次递归都会涉及三个操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#每一次递归都会涉及三个操作&#34;&gt;#&lt;/a&gt; 每一次递归都会涉及三个操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分解&lt;/strong&gt;：将原问题分解成一系列子问题；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决&lt;/strong&gt;：递归地求解各个子问题，若子问题足够小，则直接求解；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并&lt;/strong&gt;：将子问题的结果合并成原问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分治法适用条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分治法适用条件&#34;&gt;#&lt;/a&gt; 分治法适用条件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;该问题的规模缩小到一定程度就可以很容易解决；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该问题可以分解为若干个规模较小的相同问题，这里注意是最优子结构性质；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用该问题分解出的子问题的解可以合并为该问题的解；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共子问题；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;对于很多算法而言，第一条往往是必要的，因为数据量一旦大起来，问题往往复杂度上升的特别快。这里就需要将这个大问题分解为小问题。小问题处理起来更加方便。第二、三条的才是分治思想的核心，因为很多时候我们会采用递归的方式进行解决，所以在大问题分解为小问题的时候需要保证小问题之间的相同性。单单分解为小问题之后还不能算完成，必须要能够将小问题的解合并为这个问题的最终解才能算真正用到了分治的思想。最后一条也是最关键的，各个子问题之间必须要保证独立性，即不互相影响。如果相互之间有影响，这时候我们采用的是动态规划就更加好一点。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;经典例题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#经典例题&#34;&gt;#&lt;/a&gt; 经典例题&lt;/h2&gt;
&lt;p&gt;其实算法的思想不用讲太多，能够化为几句话是最好的，下面就举几个例子来看看分治算法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例题一：二分查找，给定一个按照升序排好的数组 &lt;code&gt;array&lt;/code&gt; ，要在这个数组中找出一个特定的元素 &lt;code&gt;x&lt;/code&gt; ；&lt;br&gt;
当我们遇到一个问题，完全可以在心里问自己下面四个问题：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、当前问题能不能切分？&lt;/p&gt;
&lt;p&gt;答：能切分，因为数组按照升序来排列。所以当 x 大于某个元素 array [mid] 时，x 一定在 array [mid] 的右边。以此再来切分。每次切一半&lt;/p&gt;
&lt;p&gt;2、分解出来的子问题相同吗？&lt;/p&gt;
&lt;p&gt;答：相同，每个子问题的数据集都是父问题的 1/2 倍。并且每次只比较子问题的中间的数据&lt;/p&gt;
&lt;p&gt;3、子问题的解能合并为父问题的解吗？&lt;/p&gt;
&lt;p&gt;答：不需要合并，子问题的解即为父问题的解。&lt;/p&gt;
&lt;p&gt;4、子问题之间相互独立吗？&lt;/p&gt;
&lt;p&gt;答：独立，子问题只是判断，不需要和父问题有很强的关联性（这里可以参考一下动态规划算法，就能理解子问题之间怎么判断是独立的）&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;分治算法只是一种思想，不是一个具体的套路，只能说在碰见具体问题时我们能够从这个思路去思考，切分问题？合并问题？子问题之间影响关联大不大？这些都是具体问题具体考虑。还有很多很多题目是用了分治算法。也可以多刷刷题&lt;/p&gt;
&lt;h2 id=&#34;循环赛日常表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#循环赛日常表&#34;&gt;#&lt;/a&gt; 循环赛日常表&lt;/h2&gt;
&lt;p&gt;设有 &lt;code&gt;n=2^k&lt;/code&gt;  个运动员，要进行网球循环赛。现在要设计一个满足以下要求的比赛日程表&lt;/p&gt;
&lt;p&gt;（1）每个选手必须与其他 &lt;code&gt;n-1&lt;/code&gt;  个选手各赛一场&lt;/p&gt;
&lt;p&gt;（2）每个选手一天只能赛一次&lt;/p&gt;
&lt;p&gt;（3）循环赛一共进行 &lt;code&gt;n-1&lt;/code&gt;  天&lt;/p&gt;
&lt;p&gt;将比赛日程表设计成 &lt;code&gt;n&lt;/code&gt;  行 &lt;code&gt;n&lt;/code&gt;  列，表中除了第一列，其他 &lt;code&gt;n-1&lt;/code&gt;  列才是我们要的，数组下标行列都从 &lt;code&gt;0&lt;/code&gt;  开始，第 i 行 j 列代表第 &lt;code&gt;（i+1）&lt;/code&gt; 位选手在第 j 天的对手：&lt;/p&gt;
&lt;img data-src=&#34;/posts/7474c898/2022-02-17-23-08-53.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;以 8 个选手为例子&lt;/p&gt;
&lt;img data-src=&#34;/posts/7474c898/2022-02-17-23-09-01.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;①我们先初始化第一行各个数为 &lt;code&gt;1~8&lt;/code&gt; （ &lt;code&gt;2~8&lt;/code&gt;  为：第 &lt;code&gt;1&lt;/code&gt;  天 — 第 &lt;code&gt;7&lt;/code&gt;  天）；&lt;/p&gt;
&lt;p&gt;②因为是递归，那么要填 8x8 的左下角和右下角，分别需要知道它的右上角和左上角&lt;/p&gt;
&lt;p&gt;③而 &lt;code&gt;8x8&lt;/code&gt;  的盒子它的左上角是一个 &lt;code&gt;4x4&lt;/code&gt;  的盒子，要填 &lt;code&gt;4x4&lt;/code&gt;  的左下角和右下角，也分别需要知道它的右上角和左上角&lt;/p&gt;
&lt;p&gt;④现在递归到 &lt;code&gt;4x4&lt;/code&gt;  的盒子的左上角，是一个 &lt;code&gt;2x2&lt;/code&gt;  的盒子，它不需要递归了，直接沿对角线填左下角和右下角的数字，也就是上面的图②&lt;/p&gt;
&lt;p&gt;⑤可以看到，经过上面的②③步，我们左上角 4x4 的盒子，它的・右上角和左上角已经知道了，那就可以沿对角线填它的左下角和右下角了，所以出现了图④&lt;/p&gt;
&lt;p&gt;⑥其他的依次类推&lt;/p&gt;
&lt;p&gt;通俗易懂地讲，就是&lt;strong&gt;如果你想填一个大的，你得先得出它左上角和右上角两个盒子 ， 再沿对角线分别抄到右下角和左下角。 而为了得出它左上角和右上角，就需要递归了&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SportsSchedule&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;scheduleTable&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[][] table, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            table[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;/* 填充左上区域矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;            n值的变化：8  4  2  1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;            m值的变化：4  2  1  1  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; m = n / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scheduleTable(table, m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//填充右上区域矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = m; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    table[i][j] = table[i][j - m] + m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//填充左下区域矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = m; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; m; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    table[i][j] = table[i - m][j] + m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//填充右下区域矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = m; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = m; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    table[i][j] = table[i - m][j - m];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[][] table = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n = &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SportsSchedule schedule = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SportsSchedule();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        schedule.scheduleTable(table, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; c = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//打印二维数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.print(table[i][j] + &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                c++;&lt;span class=&#34;comment&#34;&gt;//每打印一个数，c++&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c % n == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;span class=&#34;comment&#34;&gt;//说明打印一行了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    System.out.println();&lt;span class=&#34;comment&#34;&gt;//换行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;l型骨牌棋盘覆盖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#l型骨牌棋盘覆盖&#34;&gt;#&lt;/a&gt;  &lt;code&gt;L&lt;/code&gt;  型骨牌棋盘覆盖&lt;/h2&gt;
&lt;h3 id=&#34;问题描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题描述&#34;&gt;#&lt;/a&gt; 问题描述&lt;/h3&gt;
&lt;p&gt;在一个 &lt;code&gt;2^k×2^k &lt;/code&gt; 个方格组成的棋盘中，恰有一个方格与其他方格不同，称该方格为一特殊方格（特殊点），且称该棋盘为一特殊棋盘。在棋盘覆盖问题中，要用图示的 4 种不同形态的 L 型骨牌覆盖给定的特殊棋盘上除特殊方格以外的所有方格，且任何 &lt;code&gt;2&lt;/code&gt;  个 &lt;code&gt;L&lt;/code&gt;  型骨牌不得重叠覆盖。&lt;/p&gt;
&lt;img data-src=&#34;/posts/7474c898/2022-02-17-23-09-17.png&#34; class=&#34;&#34;&gt;
&lt;h3 id=&#34;解题思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解题思路&#34;&gt;#&lt;/a&gt; 解题思路&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当 &lt;code&gt;k&amp;gt;0&lt;/code&gt;  时，将 &lt;code&gt;2^k×2^k&lt;/code&gt;  棋盘分割为 &lt;code&gt;4&lt;/code&gt;  个 &lt;code&gt;2^k-1×2^k-1&lt;/code&gt;  子棋盘 &lt;code&gt;(a)&lt;/code&gt;  所示。特殊方格必位于 &lt;code&gt;4&lt;/code&gt;  个较小子棋盘之一中，其余 &lt;code&gt;3&lt;/code&gt;  个子棋盘中无特殊方格。为了将这 &lt;code&gt;3&lt;/code&gt;  个无特殊方格的子棋盘转化为特殊棋盘，可以用一个 &lt;code&gt;L&lt;/code&gt;  型骨牌覆盖这 &lt;code&gt;3&lt;/code&gt;  个较小棋盘的会合处，如  &lt;code&gt;(b)&lt;/code&gt;  所示，从而将原问题转化为 &lt;code&gt;4&lt;/code&gt;  个较小规模的棋盘覆盖问题。递归地使用这种分割，直至棋盘简化为棋盘 &lt;code&gt;1×1&lt;/code&gt; 。&lt;/p&gt;
&lt;img data-src=&#34;/posts/7474c898/2022-02-17-23-09-30.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;实现：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每次都对分割后的四个小方块进行判断，判断特殊方格是否在里面。这里的判断的方法是每次先记录下整个大方块的左上角方格的行列坐标，然后再与特殊方格坐标进行比较，就可以知道特殊方格是否在该块中。如果特殊方块在里面，这直接递归下去求即可，如果不在，这根据分割的四个方块的不同位置，把右下角、左下角、右上角或者左上角的方格标记为特殊方块，然后继续递归。在递归函数里，还要有一个变量 subSize 来记录边的方格数，每次对方块进行划分时，边的方格数都会减半，这个变量是为了方便判断特殊方格的位置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;覆盖步骤如图：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/posts/7474c898/2022-02-17-23-09-51.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;代码实现:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; cn.itcast.recursion;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ChessBoradProblem&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[][] board;&lt;span class=&#34;comment&#34;&gt;//棋盘&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialRow;&lt;span class=&#34;comment&#34;&gt;//特殊点行下标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialCol;&lt;span class=&#34;comment&#34;&gt;//特殊点列下标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; size;&lt;span class=&#34;comment&#34;&gt;//矩阵大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; type = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//骨牌类型，1,2,3,4  因为是用数字表示的，所以用int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ChessBoradProblem&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialRow, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialCol, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.specialRow = specialRow;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.specialCol = specialCol;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.size = size;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        board = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[size][size];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; specialRow 特殊点的行下标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; specialCol 特殊点的列下标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; leftRow    分割成4个后每个矩阵的左边的起点行下标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; leftCol    分割成4个后每个矩阵的左边起点列下标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; size       矩阵的宽或者高&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//相对于四个方格中右上的方格，左边起点的leftRow不一定是0了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ChessBoard&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialRow, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialCol, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; leftRow, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; leftCol, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (size == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; subSize = size / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        type = type % &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//不断+1，超过4就取模&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n = type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//假设特殊点在左上角，然后行和列都小于一半&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (specialRow &amp;lt; leftRow + subSize &amp;amp;&amp;amp; specialCol &amp;lt; leftCol + subSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ChessBoard(specialRow, specialCol, leftRow, leftCol, subSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//不在左上角，左上角矩阵的右下角就是特殊点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            board[leftRow + subSize - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][leftCol + subSize - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ChessBoard(leftRow + subSize - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, leftRow + subSize - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, leftRow, leftCol, subSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//特殊点在右上方，行小于一半，列大于一半&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (specialRow &amp;lt; leftRow + subSize &amp;amp;&amp;amp; specialCol &amp;gt;= leftCol + subSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ChessBoard(specialRow, specialCol, leftRow, leftCol + subSize, subSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            board[leftRow + subSize - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][leftCol + subSize] = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ChessBoard(leftRow + subSize - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, leftCol + subSize, leftRow, leftCol + subSize, subSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//特殊点在左下方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (specialRow &amp;gt;= leftRow + subSize &amp;amp;&amp;amp; specialCol &amp;lt; leftCol + subSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ChessBoard(specialRow, specialCol, leftRow + subSize, leftCol, subSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            board[leftRow + subSize][leftCol + subSize - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ChessBoard(leftRow + subSize, leftCol + subSize - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, leftRow + subSize, leftCol, subSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//特殊点在右下方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (specialRow &amp;gt;= leftRow + subSize &amp;amp;&amp;amp; specialCol &amp;gt;= leftCol + subSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ChessBoard(specialRow, specialCol, leftRow + subSize, leftCol + subSize, subSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            board[leftRow + subSize][leftCol + subSize] = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ChessBoard(leftRow + subSize, leftCol + subSize, leftRow + subSize, leftCol + subSize, subSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;printBoard&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialRow, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialCol, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; size)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ChessBoard(specialRow, specialCol, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, size);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printResult();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;printResult&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; size; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; size; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.print(board[i][j] + &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;//注意：print&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; N = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//矩阵大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//选取特殊点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialRow = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; specialCol = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ChessBoradProblem boradProblem = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ChessBoradProblem(specialRow, specialCol, N);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        boradProblem.printBoard(specialRow, specialCol, N);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/b9b9f7e7/</guid>
            <title>二叉树遍历</title>
            <link>https://smile1231.github.io/posts/b9b9f7e7/</link>
            <category>Java面试</category>
            <category>算法</category>
            <pubDate>Thu, 17 Feb 2022 22:52:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;二叉树遍历前序-中序-后序-层次遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二叉树遍历前序-中序-后序-层次遍历&#34;&gt;#&lt;/a&gt; 二叉树遍历（前序、中序、后序、层次遍历）&lt;/h1&gt;
&lt;p&gt;二叉树是一种非常重要的数据结构，很多其它数据结构都是基于二叉树的基础演变而来的。对于二叉树，有深度遍历和广度遍历，深度遍历有前序、中序以及后序三种遍历方法，广度遍历即我们平常所说的层次遍历。因为树的定义本身就是递归定义，因此采用递归的方法去实现树的三种遍历不仅容易理解而且代码很简洁，而对于广度遍历来说，需要其他数据结构的支撑，比如堆了。所以，对于一段代码来说，可读性有时候要比代码本身的效率要重要的多。&lt;/p&gt;
&lt;p&gt;四种主要的遍历思想为：&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;前序遍历：根结点 —&amp;gt; 左子树 —&amp;gt; 右子树&lt;/p&gt;
&lt;p&gt;中序遍历：左子树 —&amp;gt; 根结点 —&amp;gt; 右子树&lt;/p&gt;
&lt;p&gt;后序遍历：左子树 —&amp;gt; 右子树 —&amp;gt; 根结点&lt;/p&gt;
&lt;p&gt;层次遍历：只需按层次遍历即可&lt;/p&gt;
&lt;p&gt;例如，求下面二叉树的各种遍历&lt;/p&gt;
&lt;img data-src=&#34;/posts/b9b9f7e7/2022-02-17-22-57-21.png&#34; class=&#34;&#34;&gt;
&lt;figure class=&#34;highlight tap&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;前序遍历：1 &lt;span class=&#34;number&#34;&gt; 2 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 4 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 5 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 7 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 8 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 3 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 6 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;中序遍历：4 &lt;span class=&#34;number&#34;&gt; 2 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 7 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 5 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 8 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 1 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 3 &lt;/span&gt; 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;后序遍历：4 &lt;span class=&#34;number&#34;&gt; 7 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 8 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 5 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 2 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 6 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 3 &lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;层次遍历：1 &lt;span class=&#34;number&#34;&gt; 2 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 3 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 4 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 5 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 6 &lt;/span&gt;&lt;span class=&#34;number&#34;&gt; 7 &lt;/span&gt; 8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;1-前序遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-前序遍历&#34;&gt;#&lt;/a&gt; 1. 前序遍历&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;根据上文提到的遍历思路， &lt;code&gt;根结点 ---&amp;gt; 左子树 ---&amp;gt; 右子树&lt;/code&gt; ，很容易写出递归版本：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;preOrderTraverse1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		System.out.print(root.val+&lt;span class=&#34;string&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		preOrderTraverse1(root.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		preOrderTraverse1(root.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在讨论非递归的版本：&lt;/p&gt;
&lt;p&gt;根据前序遍历的顺序，优先访问根结点，然后在访问左子树和右子树。所以，对于任意结点 &lt;code&gt;node&lt;/code&gt; ，第一部分即直接访问之，之后在判断左子树是否为空，不为空时即重复上面的步骤，直到其为空。若为空，则需要访问右子树。注意，在访问过左孩子之后，需要反过来访问其右孩子，所以，需要&lt;strong&gt;栈&lt;/strong&gt;这种数据结构的支持。对于任意一个结点 &lt;code&gt;node&lt;/code&gt; ，具体步骤如下：&lt;/p&gt;
&lt;p&gt;a) 访问之，并把结点 &lt;code&gt;node&lt;/code&gt;  入栈，当前结点置为左孩子；&lt;/p&gt;
&lt;p&gt;b) 判断结点 &lt;code&gt;node&lt;/code&gt;  是否为空，若为空，则取出栈顶结点并出栈，将右孩子置为当前结点；否则重复 &lt;code&gt;a)&lt;/code&gt;  步直到当前结点为空或者栈为空（可以发现栈中的结点就是为了访问右孩子才存储的）&lt;/p&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
 &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;preOrderTraverse2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LinkedList&amp;lt;TreeNode&amp;gt; stack = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	TreeNode pNode = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (pNode != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || !stack.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pNode != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			System.out.print(pNode.val+&lt;span class=&#34;string&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			stack.push(pNode);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pNode = pNode.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&#34;comment&#34;&gt;//pNode == null &amp;amp;&amp;amp; !stack.isEmpty()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			TreeNode node = stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pNode = node.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-中序遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-中序遍历&#34;&gt;#&lt;/a&gt; 2. 中序遍历&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;根据上文提到的遍历思路： &lt;code&gt;左子树 ---&amp;gt; 根结点 ---&amp;gt; 右子树&lt;/code&gt; ，很容易写出递归版本： &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inOrderTraverse1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		inOrderTraverse1(root.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		System.out.print(root.val+&lt;span class=&#34;string&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		inOrderTraverse1(root.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;非递归实现，有了上面前序的解释，中序也就比较简单了，相同的道理。只不过访问的顺序移到出栈时。代码如下：&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inOrderTraverse2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LinkedList&amp;lt;TreeNode&amp;gt; stack = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	TreeNode pNode = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (pNode != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || !stack.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pNode != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			stack.push(pNode);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pNode = pNode.left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&#34;comment&#34;&gt;//pNode == null &amp;amp;&amp;amp; !stack.isEmpty()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			TreeNode node = stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			System.out.print(node.val+&lt;span class=&#34;string&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pNode = node.right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-后续遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-后续遍历&#34;&gt;#&lt;/a&gt; 3. 后续遍历&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;根据上文提到的遍历思路： &lt;code&gt;左子树 ---&amp;gt; 右子树 ---&amp;gt; 根结点&lt;/code&gt; ，很容易写出递归版本： &lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;postOrderTraverse1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		postOrderTraverse1(root.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		postOrderTraverse1(root.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		System.out.print(root.val+&lt;span class=&#34;string&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-层次遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-层次遍历&#34;&gt;#&lt;/a&gt; 4. 层次遍历&lt;/h2&gt;
&lt;p&gt;层次遍历的代码比较简单，只需要一个队列即可，先在队列中加入根结点。之后对于任意一个结点来说，在其出队列的时候，访问之。同时如果左孩子和右孩子有不为空的，入队列。代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;levelTraverse&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LinkedList&amp;lt;TreeNode&amp;gt; queue = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    queue.offer(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!queue.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TreeNode node = queue.poll();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.print(node.val+&lt;span class=&#34;string&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node.left != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            queue.offer(node.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node.right != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            queue.offer(node.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;二叉树的深度优先遍历dfs与广度优先遍历bfs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二叉树的深度优先遍历dfs与广度优先遍历bfs&#34;&gt;#&lt;/a&gt; 二叉树的深度优先遍历（ &lt;code&gt;DFS&lt;/code&gt; ）与广度优先遍历（ &lt;code&gt;BFS&lt;/code&gt; ）&lt;/h1&gt;
&lt;p&gt;二叉树的深度优先遍历（ &lt;code&gt;DFS&lt;/code&gt; ）与广度优先遍历（ &lt;code&gt;BFS&lt;/code&gt; ）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;深度优先遍历&lt;/strong&gt;：从根节点出发，沿着左子树方向进行纵向遍历，直到找到叶子节点为止。然后回溯到前一个节点，进行右子树节点的遍历，直到遍历完所有可达节点为止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;广度优先遍历&lt;/strong&gt;：从根节点出发，在横向遍历二叉树层段节点的基础上纵向遍历二叉树的层次。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/posts/b9b9f7e7/2022-02-17-23-00-13.png&#34; class=&#34;&#34;&gt;
&lt;figure class=&#34;highlight avrasm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;symbol&#34;&gt;DFS:&lt;/span&gt;ABDECFG&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;symbol&#34;&gt;BFS:&lt;/span&gt;ABCDEFG&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DFS&lt;/code&gt;  实现：&lt;/p&gt;
&lt;p&gt;数据结构：栈&lt;/p&gt;
&lt;p&gt;父节点入栈，父节点出栈，先右子节点入栈，后左子节点入栈。递归遍历全部节点即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BFS&lt;/code&gt;  实现：&lt;/p&gt;
&lt;p&gt;数据结构：队列&lt;/p&gt;
&lt;p&gt;父节点入队，父节点出队列，先左子节点入队，后右子节点入队。递归遍历全部节点即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/posts/b9b9f7e7/2022-02-17-23-00-38.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;深度优先搜索的步骤为：&lt;/p&gt;
&lt;figure class=&#34;highlight tap&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;（1）、首先节点&lt;span class=&#34;number&#34;&gt; 1 &lt;/span&gt;进栈，节点1在栈顶；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（2）、然后节点1出栈，访问节点1，节点1的孩子节点3进栈，节点2进栈；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（3）、节点2在栈顶，然后节点2出栈，访问节点2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（4）、节点2的孩子节点5进栈，节点4进栈&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（5）、节点4在栈顶，节点4出栈，访问节点4，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（6）、节点4左右孩子为空，然后节点5在栈顶，节点5出栈，访问节点5；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（7）、节点5左右孩子为空，然后节点3在站顶，节点3出栈，访问节点3；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（8）、节点3的孩子节点7进栈，节点6进栈&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（9）、节点6在栈顶，节点6出栈，访问节点6；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（10）、节点6的孩子为空，这个时候节点7在栈顶，节点7出栈，访问节点7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（11）、节点7的左右孩子为空，此时栈为空，遍历结束。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;广度优先遍历：广度优先遍历是连通图的一种遍历策略，因为它的思想是从一个顶点 V0 开始，辐射状地优先遍历其周围较广的区域故得名。&lt;/p&gt;
&lt;p&gt;根据广度优先遍历的特点我们利用 Java 数据结构队列 Queue 来实现。&lt;/p&gt;
&lt;p&gt;广度优先搜索的步骤为：&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;（1）、节点1进队，节点1出队，访问节点1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（2）、节点1的孩子节点2进队，节点3进队。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（3）、节点2出队，访问节点2，节点2的孩子节点4进队，节点5进队；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（4）、节点3出队，访问节点3，节点3的孩子节点6进队，节点7进队；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（5）、节点4出队，访问节点4，节点4没有孩子节点。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（6）、节点5出队，访问节点5，节点5没有孩子节点。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（7）、节点6出队，访问节点6，节点6没有孩子节点。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;（8）、节点7出队，访问节点7，节点7没有孩子节点，结束。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;5-深度优先遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-深度优先遍历&#34;&gt;#&lt;/a&gt; 5. 深度优先遍历&lt;/h2&gt;
&lt;p&gt;其实深度遍历就是上面的前序、中序和后序。但是为了保证与广度优先遍历相照应，也写在这。代码也比较好理解，其实就是前序遍历，代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;depthOrderTraverse&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (root == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    LinkedList&amp;lt;TreeNode&amp;gt; stack = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    stack.push(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (!stack.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TreeNode node = stack.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.print(node.val+&lt;span class=&#34;string&#34;&gt;&amp;quot;  &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node.right != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            stack.push(node.right);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (node.left != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            stack.push(node.left);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;6-广度优先遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-广度优先遍历&#34;&gt;#&lt;/a&gt; 6. 广度优先遍历&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;depthFirstSearch&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TreeNode nodeHead)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(nodeHead==&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Stack&amp;lt;TreeNode&amp;gt; myStack=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Stack&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    myStack.add(nodeHead);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(!myStack.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        TreeNode node=myStack.pop();    &lt;span class=&#34;comment&#34;&gt;//弹出栈顶元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.print(node.data+&lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(node.rightNode!=&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            myStack.push(node.rightNode);    &lt;span class=&#34;comment&#34;&gt;//深度优先遍历，先遍历左边，后遍历右边,栈先进后出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(node.leftNode!=&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            myStack.push(node.leftNode);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/7e4601e3/</guid>
            <title>面试之旅之关于Spring事务处理</title>
            <link>https://smile1231.github.io/posts/7e4601e3/</link>
            <category>Java面试</category>
            <category>Spring事务</category>
            <pubDate>Wed, 16 Feb 2022 21:14:23 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;spring事务处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring事务处理&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Spring&lt;/code&gt;  事务处理&lt;/h1&gt;
&lt;h2 id=&#34;spring和事务的关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring和事务的关系&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Spring&lt;/code&gt;  和事务的关系&lt;/h2&gt;
&lt;p&gt;关系型数据库、某些消息队列等产品或中间件称为事务性资源，因为它们本身支持事务，也能够处理事务。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  很显然不是事务性资源，但是它可以管理事务性资源，所以 &lt;code&gt;Spring&lt;/code&gt;  和事务之间是管理关系。&lt;/p&gt;
&lt;p&gt;就像 &lt;code&gt;Jack Ma&lt;/code&gt;  虽然不会写代码，但是他却管理者一大批会写代码的码农。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;spring事务三要素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring事务三要素&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Spring&lt;/code&gt;  事务三要素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据源：表示具体的事务性资源，是事务的真正处理者，如 &lt;code&gt;MySQL&lt;/code&gt;  等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务管理器：像一个大管家，从整体上管理事务的处理过程，如打开、提交、回滚等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务应用和属性配置：像一个标识符，表明哪些方法要参与事务，如何参与事务，以及一些相关属性如隔离级别、超时时间等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring事务的注解配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring事务的注解配置&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Spring&lt;/code&gt;  事务的注解配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把一个 &lt;code&gt;DataSource（如DruidDataSource）&lt;/code&gt; 作为一个 &lt;code&gt;@Bean&lt;/code&gt;  注册到 &lt;code&gt;Spring&lt;/code&gt;  容器中，配置好事务性资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把一个 &lt;code&gt;@EnableTransactionManagement&lt;/code&gt;  注解放到一个 &lt;code&gt;@Configuration&lt;/code&gt;  类上，配置好事务管理器，并启用事务管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把一个 &lt;code&gt;@Transactional&lt;/code&gt;  注解放到类上或方法上，可以设置注解的属性，表明该方法按配置好的属性参与到事务中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事务注解的本质&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务注解的本质&#34;&gt;#&lt;/a&gt; 事务注解的本质&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Transactional&lt;/code&gt;  这个注解仅仅是一些（和事务相关的）元数据，在运行时被事务基础设施读取消费，并使用这些元数据来配置 &lt;code&gt;bean&lt;/code&gt;  的事务行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大致来说具有两方面功能，一是表明该方法要参与事务，二是配置相关属性来定制事务的参与方式和运行行为。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring声明式事务实现原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring声明式事务实现原理&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Spring&lt;/code&gt;  声明式事务实现原理&lt;/h2&gt;
&lt;p&gt;声明式事务成为可能，主要得益于 &lt;code&gt;Spring AOP&lt;/code&gt; 。使用一个事务拦截器，在方法调用的前后 / 周围进行事务性增强（ &lt;code&gt;advice&lt;/code&gt; ），来驱动事务完成。&lt;/p&gt;
&lt;h2 id=&#34;如何回滚一个事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何回滚一个事务&#34;&gt;#&lt;/a&gt; 如何回滚一个事务&lt;/h2&gt;
&lt;p&gt;就是在一个事务上下文中当前正在执行的代码里抛出一个异常，事务基础设施代码会捕获任何未处理的异常，并且做出决定是否标记这个事务为回滚。&lt;/p&gt;
&lt;h2 id=&#34;默认回滚规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#默认回滚规则&#34;&gt;#&lt;/a&gt; 默认回滚规则&lt;/h2&gt;
&lt;p&gt;默认只把 &lt;code&gt;runtime&lt;/code&gt; ,  &lt;code&gt;unchecked exceptions&lt;/code&gt;  标记为回滚，即 &lt;code&gt;RuntimeException&lt;/code&gt;  及其子类， &lt;code&gt;Error&lt;/code&gt;  默认也导致回滚。 &lt;code&gt;Checked exceptions&lt;/code&gt;  默认不导致回滚。这些规则和 &lt;code&gt;EJB&lt;/code&gt;  是一样的。&lt;/p&gt;
&lt;h2 id=&#34;如何配置回滚异常&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何配置回滚异常&#34;&gt;#&lt;/a&gt; 如何配置回滚异常&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;@Transactional&lt;/code&gt;  注解的 &lt;code&gt;rollbackFor/rollbackForClassName&lt;/code&gt;  属性，可以精确配置导致回滚的异常类型，包括 &lt;code&gt;checked exceptions&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;noRollbackFor/noRollbackForClassName&lt;/code&gt;  属性，可以配置不导致回滚的异常类型，当遇到这样的未处理异常时，照样提交相关事务。&lt;/p&gt;
&lt;h2 id=&#34;事务注解在类方法上&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务注解在类方法上&#34;&gt;#&lt;/a&gt; 事务注解在类 / 方法上&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;@Transactional&lt;/code&gt;  注解既可以标注在类上，也可以标注在方法上。当在类上时，默认应用到类里的所有方法。如果此时方法上也标注了，则方法上的优先级高。&lt;/p&gt;
&lt;h2 id=&#34;事务注解在类上的继承性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务注解在类上的继承性&#34;&gt;#&lt;/a&gt; 事务注解在类上的继承性&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;@Transactional&lt;/code&gt;  注解的作用可以传播到子类，即如果父类标了子类就不用标了。但倒过来就不行了。&lt;/p&gt;
&lt;p&gt;子类标了，并不会传到父类，所以父类方法不会有事务。父类方法需要在子类中重新声明而参与到子类上的注解，这样才会有事务。&lt;/p&gt;
&lt;h2 id=&#34;事务注解在接口类上&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务注解在接口类上&#34;&gt;#&lt;/a&gt; 事务注解在接口 / 类上&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;@Transactional&lt;/code&gt;  注解可以用在接口上，也可以在类上。在接口上时，必须使用基于接口的代理才行，即 &lt;code&gt;JDK&lt;/code&gt;  动态代理。&lt;/p&gt;
&lt;p&gt;事实是 &lt;code&gt;Java&lt;/code&gt;  的注解不能从接口继承，如果你使用基于类的代理，即 &lt;code&gt;CGLIB&lt;/code&gt; ，或基于织入方面，即 &lt;code&gt;AspectJ&lt;/code&gt; ，事务设置不会被代理和织入基础设施认出来，目标对象不会被包装到一个事务代理中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  团队建议注解标注在类上而非接口上。&lt;/p&gt;
&lt;h2 id=&#34;只在public方法上生效&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#只在public方法上生效&#34;&gt;#&lt;/a&gt; 只在 &lt;code&gt;public&lt;/code&gt;  方法上生效？&lt;/h2&gt;
&lt;p&gt;当采用代理来实现事务时，（注意是代理）， &lt;code&gt;@Transactional&lt;/code&gt;  注解只能应用在 &lt;code&gt;public&lt;/code&gt;  方法上。当标记在 &lt;code&gt;protected、private、package-visible&lt;/code&gt;  方法上时，不会产生错误，但也不会表现出为它指定的事务配置。可以认为它作为一个普通的方法参与到一个 &lt;code&gt;public&lt;/code&gt;  方法的事务中。&lt;/p&gt;
&lt;p&gt;如果想在非 &lt;code&gt;public&lt;/code&gt;  方法上生效，考虑使用 &lt;code&gt;AspectJ（织入方式）&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;目标类里的自我调用没有事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目标类里的自我调用没有事务&#34;&gt;#&lt;/a&gt; 目标类里的自我调用没有事务？&lt;/h2&gt;
&lt;p&gt;在代理模式中（这是默认的），只有从外部的方法调用进入通过代理会被拦截，这意味着自我调用（实际就是，目标对象中的一个方法调用目标对象的另一个方法）在运行时不会导致一个实际的事务，即使被调用的方法标有注解。&lt;/p&gt;
&lt;p&gt;如果你希望自我调用也使用事务来包装，考虑使用 &lt;code&gt;AspectJ&lt;/code&gt;  的方式。在这种情况下，首先是没有代理。相反，目标类被织入（即它的字节码被修改）来把 &lt;code&gt;@Transactional&lt;/code&gt;  加入到运行时行为，在任何种类的方法上都可以。&lt;/p&gt;
&lt;h2 id=&#34;事务与线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务与线程&#34;&gt;#&lt;/a&gt; 事务与线程&lt;/h2&gt;
&lt;p&gt;和 &lt;code&gt;JavaEE&lt;/code&gt;  事务上下文一样， &lt;code&gt;Spring&lt;/code&gt;  事务和一个线程的执行相关联，底层是一个 &lt;code&gt;ThreadLocal&amp;lt;Map&amp;lt;Object, Object&amp;gt;&amp;gt;&lt;/code&gt; ，就是每个线程一个 &lt;code&gt;map&lt;/code&gt; ， &lt;code&gt;key&lt;/code&gt;  是 &lt;code&gt;DataSource&lt;/code&gt; ， &lt;code&gt;value&lt;/code&gt;  是 &lt;code&gt;Connection&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;逻辑事务与物理事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#逻辑事务与物理事务&#34;&gt;#&lt;/a&gt; 逻辑事务与物理事务&lt;/h2&gt;
&lt;p&gt;事务性资源实际打开的事务就是物理事务，如数据库的 &lt;code&gt;Connection&lt;/code&gt;  打开的事务。 &lt;code&gt;Spring&lt;/code&gt;  会为每个 &lt;code&gt;@Transactional&lt;/code&gt;  方法创建一个事务范围，可以理解为是逻辑事务。&lt;/p&gt;
&lt;p&gt;在逻辑事务中，大范围的事务称为外围事务，小范围的事务称为内部事务，外围事务可以包含内部事务，但在逻辑上是互相独立的。每一个这样的逻辑事务范围，都能够单独地决定 &lt;code&gt;rollback-only&lt;/code&gt;  状态。&lt;/p&gt;
&lt;p&gt;那么如何处理逻辑事务和物理事务之间的关联关系呢，这就是传播特性解决的问题。&lt;/p&gt;
&lt;h2 id=&#34;事务传播行为&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务传播行为&#34;&gt;#&lt;/a&gt; 事务传播行为&lt;/h2&gt;
&lt;p&gt;事务传播行为 (为了解决业务层方法之间互相调用的事务问题): 当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。&lt;/p&gt;
&lt;p&gt;例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在 &lt;code&gt;TransactionDefinition&lt;/code&gt;  定义中包括了如下几个表示传播行为的常量:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;REQUIRED，SUPPORTS，MANDATORY，REQUIRES_NEW，NOT_SUPPORTED，NEVER，NESTED&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;支持当前事务的情况:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.PROPAGATION_REQUIRED:&lt;/code&gt;  如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.PROPAGATION_SUPPORTS:&lt;/code&gt;  如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.PROPAGATION_MANDATORY:&lt;/code&gt;  如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。( &lt;code&gt;mandatory:强制性&lt;/code&gt; )&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不支持当前事务的情况:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.PROPAGATION_REQUIRES_NEW:&lt;/code&gt;  创建一个新的事务，如果当前存在事务，则把当前事务挂起。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.PROPAGATION_NOT_SUPPORTED:&lt;/code&gt;  以非事务方式运行，如果当前存在事务，则把当前事务挂起。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.PROPAGATION_NEVER:&lt;/code&gt;  以非事务方式运行，如果当前存在事务，则抛出异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;其他情况:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.PROPAGATION_NESTED: &lt;/code&gt; 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 &lt;code&gt;TransactionDefinition.PROPAGATION_REQUIRED。&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;隔离级别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#隔离级别&#34;&gt;#&lt;/a&gt; 隔离级别&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TransactionDefinition&lt;/code&gt;  接口中定义了 &lt;code&gt;五个&lt;/code&gt; 表示隔离级别的常量:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DEFAULT，READ_UNCOMMITTED，READ_COMMITTED，REPEATABLE_READ，SERIALIZABLE&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.ISOLATION_DEFAULT:&lt;/code&gt;  使用后端数据库默认的隔离级别， &lt;code&gt;Mysql&lt;/code&gt;  默认采用的 &lt;code&gt;REPEATABLE_READ&lt;/code&gt;  隔离级别  &lt;code&gt;Oracle&lt;/code&gt;  默认采用的  &lt;code&gt;READ_COMMITTED&lt;/code&gt;  隔离级别。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.ISOLATION_READ_UNCOMMITTED: &lt;/code&gt; 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.ISOLATION_READ_COMMITTED:&lt;/code&gt;  允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.ISOLATION_REPEATABLE_READ:&lt;/code&gt;  对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TransactionDefinition.ISOLATION_SERIALIZABLE:&lt;/code&gt;  最高的隔离级别，完全服从 &lt;code&gt;ACID&lt;/code&gt;  的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;脏读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个事务修改了一行数据但没有提交，第二个事务可以读取到这行被修改的数据，如果第一个事务回滚，第二个事务获取到的数据将是无效的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不可重复读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个事务读取了一行数据，第二个事务修改了这行数据，第一个事务重新读取这行数据，将获得到不同的值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;幻读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个事务按照一个 &lt;code&gt;where&lt;/code&gt;  条件读取所有符合的数据行，第二个事务插入了一行数据且恰好也满足这个 &lt;code&gt;where&lt;/code&gt;  条件，第一个事务再以这个 &lt;code&gt;where&lt;/code&gt;  条件重新读取，将会获取额外多出来的这一行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;帮助记忆：&lt;/strong&gt;&lt;br&gt;
写读是脏读，读写读是不可重复读， &lt;code&gt;where insert where&lt;/code&gt;  是幻读。&lt;/p&gt;
&lt;img data-src=&#34;/posts/7e4601e3/2022-02-16-21-43-16.png&#34; class=&#34;&#34;&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/6b5f7afc/</guid>
            <title>面试之旅关于Java知识点</title>
            <link>https://smile1231.github.io/posts/6b5f7afc/</link>
            <category>Java面试</category>
            <pubDate>Wed, 16 Feb 2022 21:14:07 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;java知识点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#java知识点&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Java&lt;/code&gt;  知识点&lt;/h1&gt;
&lt;h2 id=&#34;collection类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#collection类&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Collection&lt;/code&gt;  类&lt;/h2&gt;
&lt;img data-src=&#34;/posts/6b5f7afc/2022-02-16-21-41-42.png&#34; class=&#34;&#34;&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;子接口&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Set,List&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;集合中只能放置对象的引用,不能放置原生数据类型,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;我们需要使用原生数据类型的封装类才能加入到集合中&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Ordered&lt;/code&gt;  与 &lt;code&gt;Sorted&lt;/code&gt;  接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Ordered排序,按照某种由具体情况决定的顺序排序,是后天指定的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Sorted排序,按照天然顺序进行排序,是先天指定的&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;List&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;实现类包括&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LinkedList,Vector,ArrayList&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;列表接口,继承与Collection,可以按索引的顺序访问,有索引的Collection&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	具有列表的功能,元素顺序均是按添加的先后进行排列的,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	允许重复的元素,允许多个&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;元素&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/666b2933/</guid>
            <title>面试之旅关于数据库</title>
            <link>https://smile1231.github.io/posts/666b2933/</link>
            <category>Java面试</category>
            <category>数据库</category>
            <pubDate>Wed, 16 Feb 2022 21:13:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;常见面试题整理数据库篇每位开发者必备&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见面试题整理数据库篇每位开发者必备&#34;&gt;#&lt;/a&gt; 常见面试题整理–数据库篇（每位开发者必备）&lt;/h1&gt;
&lt;img data-src=&#34;/posts/666b2933/2022-02-16-21-40-29.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;1-什么是存储过程有哪些优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-什么是存储过程有哪些优缺点&#34;&gt;#&lt;/a&gt; 1. 什么是存储过程？有哪些优缺点？&lt;/h2&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;存储过程是一些预编译的 &lt;code&gt;SQL&lt;/code&gt;  语句。&lt;/p&gt;
&lt;p&gt;更加直白的理解：存储过程可以说是一个记录集，它是由一些 &lt;code&gt;T-SQL&lt;/code&gt;  语句组成的代码块，这些 &lt;code&gt;T-SQL&lt;/code&gt;  语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。&lt;/p&gt;
&lt;p&gt;存储过程是一个预编译的代码块，执行效率比较高&lt;br&gt;
一个存储过程替代大量 &lt;code&gt;T_SQL&lt;/code&gt;  语句 ，可以降低网络通信量，提高通信速率&lt;br&gt;
可以一定程度上确保数据安全&lt;/p&gt;
&lt;h2 id=&#34;2-索引是什么有什么作用以及优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-索引是什么有什么作用以及优缺点&#34;&gt;#&lt;/a&gt; 2. 索引是什么？有什么作用以及优缺点&lt;/h2&gt;
&lt;p&gt;索引是对数据库表中一或多个列的值进行排序的结构，是帮助 &lt;code&gt;MySQL&lt;/code&gt;  高效获取数据的数据结构&lt;/p&gt;
&lt;p&gt;你也可以这样理解：索引就是加快检索表中数据的方法。数据库的索引类似于书籍的索引。在书籍中，索引允许用户不必翻阅完整个书就能迅速地找到所需要的信息。在数据库中，索引也允许数据库程序迅速地找到表中的数据，而不必扫描整个数据库。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MySQL&lt;/code&gt;  数据库几个基本的索引类型：&lt;em&gt; &lt;code&gt;普通索引&lt;/code&gt; 、 &lt;code&gt;唯一索引&lt;/code&gt; 、 &lt;code&gt;主键索引&lt;/code&gt; 、 &lt;code&gt;全文索引&lt;/code&gt; &lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引加快数据库的检索速度&lt;/li&gt;
&lt;li&gt;索引降低了插入、删除、修改等维护任务的速度&lt;/li&gt;
&lt;li&gt;唯一索引可以确保每一行数据的唯一性&lt;/li&gt;
&lt;li&gt;通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能&lt;/li&gt;
&lt;li&gt;索引需要占物理和数据空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-什么是事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-什么是事务&#34;&gt;#&lt;/a&gt; 3. 什么是事务？&lt;/h2&gt;
&lt;p&gt;事务（ &lt;code&gt;Transaction&lt;/code&gt; ）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性。&lt;/p&gt;
&lt;h2 id=&#34;4-数据库的乐观锁和悲观锁是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-数据库的乐观锁和悲观锁是什么&#34;&gt;#&lt;/a&gt; 4. 数据库的乐观锁和悲观锁是什么？&lt;/h2&gt;
&lt;p&gt;数据库管理系统（ &lt;code&gt;DBMS&lt;/code&gt; ）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。&lt;/p&gt;
&lt;p&gt;乐观并发控制 (乐观锁) 和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作&lt;/li&gt;
&lt;li&gt;乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-使用索引查询一定能提高查询的性能吗为什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-使用索引查询一定能提高查询的性能吗为什么&#34;&gt;#&lt;/a&gt; 5. 使用索引查询一定能提高查询的性能吗？为什么&lt;/h2&gt;
&lt;p&gt;通常，通过索引查询数据比全表扫描要快。但是我们也必须注意到它的代价.&lt;/p&gt;
&lt;p&gt;索引需要空间来存储，也需要定期维护，每当有记录在表中增减或索引列被修改时，索引本身也会被修改。这意味着每条记录的 &lt;code&gt;INSERT,DELETE,UPDATE&lt;/code&gt;  将为此多付出 &lt;code&gt;4,5次&lt;/code&gt; 的磁盘 &lt;code&gt;I/O&lt;/code&gt; . 因为索引需要额外的存储空间和处理，那些不必要的索引反而会使查询反应时间变慢。使用索引查询不一定能提高查询性能，索引范围查询 ( &lt;code&gt;INDEX RANGE SCAN&lt;/code&gt; ) 适用于两种情况:&lt;/p&gt;
&lt;p&gt;基于一个范围的检索，一般查询返回结果集小于表中记录数的 &lt;code&gt;30%&lt;/code&gt;  基于非唯一性索引的检索&lt;/p&gt;
&lt;h2 id=&#34;6-简单说一说drop-delete与truncate的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-简单说一说drop-delete与truncate的区别&#34;&gt;#&lt;/a&gt; 6. 简单说一说 &lt;code&gt;drop&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt;  与 &lt;code&gt;truncate&lt;/code&gt;  的区别&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SQL&lt;/code&gt;  中的 &lt;code&gt;drop&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;truncate&lt;/code&gt;  都表示删除，但是三者有一些差别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;  和 &lt;code&gt;truncate&lt;/code&gt;  只删除表的数据不删除表的结构&lt;/li&gt;
&lt;li&gt;速度，一般来说:  &lt;code&gt;drop &amp;gt; truncate &amp;gt;delete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;  语句是 &lt;code&gt;dml&lt;/code&gt; , 这个操作会放到 &lt;code&gt;rollback segement&lt;/code&gt;  中，事务提交之后才生效；&lt;/li&gt;
&lt;li&gt;如果有相应的 &lt;code&gt;trigger&lt;/code&gt; , 执行的时候将被触发.  &lt;code&gt;truncate,drop&lt;/code&gt;  是 &lt;code&gt;ddl&lt;/code&gt; , 操作立即生效，原数据不放到 &lt;code&gt;rollback segment&lt;/code&gt;  中，不能回滚。操作不触发 &lt;code&gt;trigger&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-drop-delete与truncate分别在什么场景之下使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-drop-delete与truncate分别在什么场景之下使用&#34;&gt;#&lt;/a&gt; 7.  &lt;code&gt;drop&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt;  与 &lt;code&gt;truncate&lt;/code&gt;  分别在什么场景之下使用？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不再需要一张表的时候，用 &lt;code&gt;drop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;想删除部分数据行时候，用 &lt;code&gt;delete&lt;/code&gt; ，并且带上 &lt;code&gt;where&lt;/code&gt;  子句&lt;/li&gt;
&lt;li&gt;保留表而删除所有数据的时候用 &lt;code&gt;truncate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-超键-候选键-主键-外键分别是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-超键-候选键-主键-外键分别是什么&#34;&gt;#&lt;/a&gt; 8. 超键、候选键、主键、外键分别是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;候选键：是最小超键，即没有冗余元素的超键。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（ &lt;code&gt;Null&lt;/code&gt; ）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外键：在一个表中存在的另一个表的主键称此表的外键。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;9-什么是视图以及视图的使用场景有哪些&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-什么是视图以及视图的使用场景有哪些&#34;&gt;#&lt;/a&gt; 9. 什么是视图？以及视图的使用场景有哪些？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;只暴露部分字段给访问者，所以就建一个虚表，就是视图。&lt;br&gt;
查询的数据来源于不同的表，而查询者希望以统一的方式查询，这样也可以建立一个视图，把多个表查询结果联合起来，查询者只需要直接从视图中获取数据，不必考虑数据来源于不同表所带来的差异&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;10-说一说三个范式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-说一说三个范式&#34;&gt;#&lt;/a&gt; 10. 说一说三个范式。&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;第一范式（ &lt;code&gt;1NF&lt;/code&gt; ）&lt;/strong&gt;：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二范式（ &lt;code&gt;2NF&lt;/code&gt; ）&lt;/strong&gt;：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三范式（ &lt;code&gt;3NF&lt;/code&gt; ）&lt;/strong&gt;：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如 果存在 &lt;code&gt;&amp;quot;A → B → C&amp;quot;&lt;/code&gt;  的决定关系，则 &lt;code&gt;C&lt;/code&gt;  传递函数依赖于 &lt;code&gt;A&lt;/code&gt; 。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段  &lt;code&gt;x &lt;/code&gt; → 非关键字段 &lt;code&gt;y&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/9f9a6182/</guid>
            <title>面试之旅关于数据结构</title>
            <link>https://smile1231.github.io/posts/9f9a6182/</link>
            <category>Java面试</category>
            <category>数据结构</category>
            <pubDate>Wed, 16 Feb 2022 21:13:39 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;面试之旅关于数据结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#面试之旅关于数据结构&#34;&gt;#&lt;/a&gt; 面试之旅关于数据结构&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RhdGEuYmlhbmNoZW5nLm5ldC9pbnRyby8=&#34;&gt;数据结构详细讲解&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。&lt;/p&gt;
&lt;h2 id=&#34;数据结构中的逻辑结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据结构中的逻辑结构&#34;&gt;#&lt;/a&gt; 数据结构中的逻辑结构&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;集合结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;集合结构的里面的元素关系是孤立的&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-37-01.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;线性结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线性结构里面的元素关系：一对一&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-37-13.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;树形结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;树形结构里面的元素关系：一对多&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-37-28.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;图结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;图结构里面的元素关系：多对多&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-37-47.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;数据结构的物理结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据结构的物理结构&#34;&gt;#&lt;/a&gt; 数据结构的物理结构&lt;/h2&gt;
&lt;p&gt;物理结构：是指数据的逻辑结构在计算机中的存储形式。存储结构有两种：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;顺序存储结构：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-37-57.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;链式存储结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-38-04.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;常见的数据结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见的数据结构&#34;&gt;#&lt;/a&gt; 常见的数据结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组（ &lt;code&gt;Array&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆栈（ &lt;code&gt;Stack&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;队列（ &lt;code&gt;Queue&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链表（ &lt;code&gt;Linked List&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;树（ &lt;code&gt;Tree&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图（ &lt;code&gt;Graph&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆（ &lt;code&gt;Heap&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;散列表（ &lt;code&gt;Hash&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#链表&#34;&gt;#&lt;/a&gt; 链表&lt;/h2&gt;
&lt;p&gt;链表是一种数据结构，和数组同级。比如， &lt;code&gt;Java&lt;/code&gt;  中我们使用的 &lt;code&gt;ArrayList&lt;/code&gt; ，其实现原理是数组。而 &lt;code&gt;LinkedList&lt;/code&gt;  的实现原理就是链表了。链表在进行循环遍历时效率不高，但是插入和删除时优势明显。下面对单向链表做一个介绍。&lt;/p&gt;
&lt;p&gt;单向链表是一种线性表，实际上是由节点（ &lt;code&gt;Node&lt;/code&gt; ）组成的，一个链表拥有不定数量的节点。其数据在内存中存储是不连续的，它存储的数据分散在内存中，每个结点只能也只有它能知道下一个结点的存储位置。由 N 各节点（ &lt;code&gt;Node&lt;/code&gt; ）组成单向链表，每一个 &lt;code&gt;Node&lt;/code&gt;  记录本 &lt;code&gt;Node&lt;/code&gt;  的数据及下一个 &lt;code&gt;Node&lt;/code&gt; 。向外暴露的只有一个头节点（ &lt;code&gt;Head&lt;/code&gt; ），我们对链表的所有操作，都是直接或者间接地通过其头节点来进行的。&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-38-15.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;上图中最左边的节点即为头结点（ &lt;code&gt;Head&lt;/code&gt; ），但是添加节点的顺序是从右向左的，添加的新节点会被作为新节点。最先添加的节点对下一节点的引用可以为空。引用是引用下一个节点而非下一个节点的对象。因为有着不断的引用，所以头节点就可以操作所有节点了。&lt;/p&gt;
&lt;p&gt;下图描述了单向链表存储情况。存储是分散的，每一个节点只要记录下一节点，就把所有数据串了起来，形成了一个单向链表。&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-38-25.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;节点（ &lt;code&gt;Node&lt;/code&gt; ）是由一个需要储存的对象及对下一个节点的引用组成的。也就是说，节点拥有两个成员：储存的对象、对下一个节点的引用。下面图是具体的说明：&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-38-31.png&#34; class=&#34;&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;单链表实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; com.zjn.LinkAndQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 自定义链表设计&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; zjn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyLink&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Node head = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 头节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 链表中的节点，data代表节点的值，next是指向下一个节点的引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@author&lt;/span&gt; zjn&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node next = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;// 节点的引用，指向下一个节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; data;&lt;span class=&#34;comment&#34;&gt;// 节点的对象，即内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.data = data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 向链表中插入数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; d&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;addNode&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; d)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node newNode = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Node(d);&lt;span class=&#34;comment&#34;&gt;// 实例化一个节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (head == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            head = newNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node tmp = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (tmp.next != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tmp = tmp.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tmp.next = newNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; index:删除第index个节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;deleteNode&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (index &amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; || index &amp;gt; length()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (index == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            head = head.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node preNode = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node curNode = preNode.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (curNode != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i == index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                preNode.next = curNode.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            preNode = curNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            curNode = curNode.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt; 返回节点长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; length = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node tmp = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (tmp != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            length++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tmp = tmp.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 在不知道头指针的情况下删除指定节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@param&lt;/span&gt; n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * &lt;span class=&#34;doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;deleteNode11&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || n.next == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; tmp = n.data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n.data = n.next.data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n.next.data = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n.next = n.next.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;删除成功！&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;printList&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Node tmp = head;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (tmp != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(tmp.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tmp = tmp.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MyLink list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; MyLink();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.addNode(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.addNode(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.addNode(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.addNode(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.addNode(&lt;span class=&#34;number&#34;&gt;55&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.addNode(&lt;span class=&#34;number&#34;&gt;36&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;linkLength:&amp;quot;&lt;/span&gt; + list.length());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;head.data:&amp;quot;&lt;/span&gt; + list.head.data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.printList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.deleteNode(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;After deleteNode(4):&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list.printList();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#树&#34;&gt;#&lt;/a&gt; 树&lt;/h2&gt;
&lt;p&gt;非线性存储结构&lt;/p&gt;
&lt;img data-src=&#34;/posts/9f9a6182/2022-02-16-21-38-44.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RhdGEuYmlhbmNoZW5nLm5ldC92aWV3LzIzLmh0bWw=&#34;&gt;树的详细讲解&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/c7cf6e41/</guid>
            <title>面试之旅关于计算机网络</title>
            <link>https://smile1231.github.io/posts/c7cf6e41/</link>
            <category>Java面试</category>
            <category>操作系统</category>
            <pubDate>Wed, 16 Feb 2022 21:13:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;常见面试题整理计算机网络篇每位开发者必备&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见面试题整理计算机网络篇每位开发者必备&#34;&gt;#&lt;/a&gt; 常见面试题整理–计算机网络篇（每位开发者必备）&lt;/h1&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-31-41.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;1-请简述tcpudp的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-请简述tcpudp的区别&#34;&gt;#&lt;/a&gt; 1. 请简述 &lt;code&gt;TCP\UDP&lt;/code&gt;  的区别&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;TCP&lt;/code&gt;  和 &lt;code&gt;UDP&lt;/code&gt;  是 &lt;code&gt;OSI&lt;/code&gt;  模型中的运输层中的协议。 &lt;code&gt;TCP&lt;/code&gt;  提供可靠的通信传输，而 &lt;code&gt;UDP&lt;/code&gt;  则常被用于让广播和细节控制交给应用的通信传输。&lt;/p&gt;
&lt;p&gt;两者的区别大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt;  面向连接， &lt;code&gt;UDP&lt;/code&gt;  面向非连接即发送数据前不需要建立链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt;  提供可靠的服务（数据传输）， &lt;code&gt;UDP&lt;/code&gt;  无法保证&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt;  面向字节流， &lt;code&gt;UDP&lt;/code&gt;  面向报文&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TCP&lt;/code&gt;  数据传输慢， &lt;code&gt;UDP&lt;/code&gt;  数据传输快&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-请简单说一下你了解的端口及对应的服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-请简单说一下你了解的端口及对应的服务&#34;&gt;#&lt;/a&gt; 2. 请简单说一下你了解的端口及对应的服务？&lt;/h2&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-31-53.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;&lt;strong&gt;端口简介：本文介绍端口的概念，分类，以及如何关闭 / 开启一个端口&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;21端口&lt;/code&gt; ：21 端口主要用于 &lt;code&gt;FTP（File Transfer Protocol，文件传输协议）&lt;/code&gt; 服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;23&lt;/code&gt;  端口：23 端口主要用于 &lt;code&gt;Telnet（远程登录）&lt;/code&gt; 服务，是 &lt;code&gt;Internet&lt;/code&gt;  上普遍采用的登录和仿真程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;25端口&lt;/code&gt; ：25 端口为 &lt;code&gt;SMTP（Simple Mail Transfer Protocol，简单邮件传输协议）&lt;/code&gt; 服务器所开放，主要用于发送邮件，如今绝大多数邮件服务器都使用该协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;53端口&lt;/code&gt; ：53 端口为 &lt;code&gt;DNS（Domain Name Server，域名服务器）&lt;/code&gt; 服务器所开放，主要用于域名解析， &lt;code&gt;DNS&lt;/code&gt;  服务在 &lt;code&gt;NT&lt;/code&gt;  系统中使用的最为广泛。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;67、68端口&lt;/code&gt; ：67、68 端口分别是为 &lt;code&gt;Bootstrap&lt;/code&gt;  服务的 &lt;code&gt;Bootstrap Protocol Server（引导程序协议服务端）&lt;/code&gt; 和 &lt;code&gt;Bootstrap Protocol Client（引导程序协议客户端）&lt;/code&gt; 开放的端口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;69端口&lt;/code&gt; ： &lt;code&gt;TFTP&lt;/code&gt;  是 Cisco 公司开发的一个 &lt;code&gt;简单文件传输协议&lt;/code&gt; ，类似于 &lt;code&gt;FTP&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;79端口&lt;/code&gt; ：79 端口是为 &lt;code&gt;Finger&lt;/code&gt;  服务开放的，主要用于查询远程主机在线用户、操作系统类型以及是否缓冲区溢出等用户的详细信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;80端口&lt;/code&gt; ：80 端口是为 &lt;code&gt;HTTP（HyperText Transport Protocol，超文本传输协议）&lt;/code&gt; 开放的，这是上网冲浪使用最多的协议，主要用于在 &lt;code&gt;WWW（World Wide Web，万维网）&lt;/code&gt; 服务上传输信息的协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;99端口&lt;/code&gt; ：99 端口是用于一个名为 &lt;code&gt;“Metagram Relay”（亚对策延时）&lt;/code&gt; 的服务，该服务比较少见，一般是用不到的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;109、110端口&lt;/code&gt; ：109 端口是为 &lt;code&gt;POP2（Post Office Protocol Version 2，邮局协议2）&lt;/code&gt; 服务开放的， &lt;code&gt;110端口是为POP3（邮件协议3）&lt;/code&gt; 服务开放的， &lt;code&gt;POP2、POP3&lt;/code&gt;  都是主要用于接收邮件的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;111端口&lt;/code&gt; ：111 端口是 &lt;code&gt;SUN&lt;/code&gt;  公司的 &lt;code&gt;RPC（Remote Procedure Call，远程过程调用）&lt;/code&gt; 服务所开放的端口，主要用于分布式系统中不同计算机的内部进程通信，RPC 在多种网络服务中都是很重要的组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;113端口&lt;/code&gt; ：113 端口主要用于 &lt;code&gt;Windows&lt;/code&gt;  的 &lt;code&gt;“Authentication Service”（验证服务）&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;119端口&lt;/code&gt; ：119 端口是为 &lt;code&gt;“Network News Transfer Protocol”（网络新闻组传输协议，简称NNTP）&lt;/code&gt; 开放的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;135端口&lt;/code&gt; ：135 端口主要用于使用 &lt;code&gt;RPC（Remote Procedure Call，远程过程调用）&lt;/code&gt; 协议并提供 &lt;code&gt;DCOM（分布式组件对象模型）&lt;/code&gt; 服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;137端口&lt;/code&gt; ：137 端口主要用于 &lt;code&gt;“NetBIOS Name Service”（NetBIOS名称服务）&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;139端口&lt;/code&gt; ：139 端口是为 &lt;code&gt;“NetBIOS Session Service”&lt;/code&gt;  提供的，主要用于提供 &lt;code&gt;Windows&lt;/code&gt;  文件和打印机共享以及 &lt;code&gt;Unix&lt;/code&gt;  中的 &lt;code&gt;Samba&lt;/code&gt;  服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;143端口&lt;/code&gt; ：143 端口主要是用于 &lt;code&gt;“Internet Message Access Protocol”v2（Internet消息访问协议，简称IMAP）&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;161端口&lt;/code&gt; ：161 端口是用于 &lt;code&gt;“Simple Network Management Protocol”（简单网络管理协议，简称SNMP）&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;443端口&lt;/code&gt; ：43 端口即网页浏览端口，主要是用于 &lt;code&gt;HTTPS&lt;/code&gt;  服务，是提供加密和通过安全端口传输的另一种 &lt;code&gt;HTTP&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;554端口&lt;/code&gt; ：554 端口默认情况下用于 &lt;code&gt;“Real Time Streaming Protocol”（实时流协议，简称RTSP）&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;1024端口&lt;/code&gt; ：1024 端口一般不固定分配给某个服务，在英文中的解释是 &lt;code&gt;“Reserved”（保留）&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;1080端口&lt;/code&gt; ：1080 端口是 Socks 代理服务使用的端口，大家平时上网使用的 WWW 服务使用的是 HTTP 协议的代理服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;1755端口&lt;/code&gt; ：1755 端口默认情况下用于 &lt;code&gt;“Microsoft Media Server”（微软媒体服务器，简称MMS）&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;4000端口&lt;/code&gt; ：4000 端口是用于大家经常使用的 &lt;code&gt;QQ&lt;/code&gt;  聊天工具的，再细说就是为 &lt;code&gt;QQ&lt;/code&gt;  客户端开放的端口， &lt;code&gt;QQ&lt;/code&gt;  服务端使用的端口是 &lt;code&gt;8000&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;5554端口&lt;/code&gt; ：在今年 4 月 30 日就报道出现了一种针对微软 &lt;code&gt;lsass服务&lt;/code&gt; 的新蠕虫病毒 —— 震荡波（Worm.Sasser），该病毒可以利用 &lt;code&gt;TCP 5554端口&lt;/code&gt; 开启一个 &lt;code&gt;FTP&lt;/code&gt;  服务，主要被用于病毒的传播。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;5632端口&lt;/code&gt; ：5632 端口是被大家所熟悉的远程控制软件 &lt;code&gt;pcAnywhere&lt;/code&gt;  所开启的端口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;8080端口&lt;/code&gt; ：8080 端口同 80 端口，是被用于 &lt;code&gt;WWW&lt;/code&gt;  代理服务的，可以实现网页&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-说一说tcp的三次握手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-说一说tcp的三次握手&#34;&gt;#&lt;/a&gt; 3. 说一说 &lt;code&gt;TCP&lt;/code&gt;  的三次握手&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;TCP/IP&lt;/code&gt;  协议中， &lt;code&gt;TCP协议&lt;/code&gt; 提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 &lt;code&gt;TCP&lt;/code&gt;  窗口大小信息。&lt;/p&gt;
&lt;p&gt;下面详细说一下三次握手（来自简析 &lt;code&gt;TCP&lt;/code&gt;  的三次握手与四次分手）&lt;/p&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-32-08.png&#34; class=&#34;&#34;&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-32-16.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;4-有哪些私有保留地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-有哪些私有保留地址&#34;&gt;#&lt;/a&gt; 4. 有哪些私有（保留）地址？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt;  类： &lt;code&gt;10.0.0.0 - 10.255.255.255&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt;  类： &lt;code&gt;172.16.0.0 - 172.31.255.255&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt;  类： &lt;code&gt;192.168.0.0 - 192.168.255.255&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-ip地址分为哪几类简单说一下各个分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-ip地址分为哪几类简单说一下各个分类&#34;&gt;#&lt;/a&gt; 5.  &lt;code&gt;IP&lt;/code&gt;  地址分为哪几类？简单说一下各个分类&lt;/h2&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-32-36.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;&lt;code&gt;IPv6 &lt;/code&gt; – 采用 &lt;code&gt;128bit&lt;/code&gt; ，首部固定部分为 &lt;code&gt;40&lt;/code&gt;  字节。&lt;/p&gt;
&lt;h2 id=&#34;6-在浏览器中输入网址之后执行会发生什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-在浏览器中输入网址之后执行会发生什么&#34;&gt;#&lt;/a&gt; 6. 在浏览器中输入网址之后执行会发生什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查找域名对应的 &lt;code&gt;IP&lt;/code&gt;  地址。这一步会依次查找浏览器缓存，系统缓存，路由器缓存， &lt;code&gt;ISPNDS&lt;/code&gt;  缓存，根域名服务器&lt;/li&gt;
&lt;li&gt;浏览器向 &lt;code&gt;IP&lt;/code&gt;  对应的 &lt;code&gt;web&lt;/code&gt;  服务器发送一个 &lt;code&gt;HTTP&lt;/code&gt;  请求&lt;/li&gt;
&lt;li&gt;服务器响应请求，发回网页内容&lt;/li&gt;
&lt;li&gt;浏览器解析网页内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更加详细的一种说法（以百度为例）（来自计算机网络之面试常考 - 牛客网）&lt;/p&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-32-47.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;7-简单解释一些arp协议的工作过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-简单解释一些arp协议的工作过程&#34;&gt;#&lt;/a&gt; 7. 简单解释一些 &lt;code&gt;ARP&lt;/code&gt;  协议的工作过程&lt;/h2&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-33-01.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;8-说一说osi七层模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-说一说osi七层模型&#34;&gt;#&lt;/a&gt; 8. 说一说 &lt;code&gt;OSI&lt;/code&gt;  七层模型&lt;/h2&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-33-15.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;9-说一说tcpip四层模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-说一说tcpip四层模型&#34;&gt;#&lt;/a&gt; 9. 说一说 &lt;code&gt;TCP/IP&lt;/code&gt;  四层模型&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ISO&lt;/code&gt;  制定的 &lt;code&gt;OSI&lt;/code&gt;  参考模型的过于庞大、复杂招致了许多批评。与此对照，由技术人员自己开发的 &lt;code&gt;TCP/IP&lt;/code&gt;  协议栈获得了更为广泛的应用。如图所示，是 &lt;code&gt;TCP/IP&lt;/code&gt;  参考模型和 &lt;code&gt;OSI&lt;/code&gt;  参考模型的对比示意图。&lt;/p&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-33-24.png&#34; class=&#34;&#34;&gt;
&lt;img data-src=&#34;/posts/c7cf6e41/2022-02-16-21-33-31.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;具体讲解：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQmx1ZVR6YXIvYXJ0aWNsZXMvODExMTYwLmh0bWw=&#34;&gt;链接&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;10-http-协议包括哪些请求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-http-协议包括哪些请求&#34;&gt;#&lt;/a&gt; 10.  &lt;code&gt;HTTP&lt;/code&gt;  协议包括哪些请求？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET&lt;/code&gt; ：对服务器资源的简单请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;POST&lt;/code&gt; ：用于发送包含用户提交数据的请求&lt;br&gt;
 ------------ 以及 ------------&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt; ：类似于 GET 请求，不过返回的响应中没有具体内容，用于获取报头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PUT&lt;/code&gt; ：传说中请求文档的一个版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt; ：发出一个删除指定文档的请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TRACE&lt;/code&gt; ：发送一个请求副本，以跟踪其处理进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;OPTIONS&lt;/code&gt; ：返回所有可用的方法，检查服务器支持哪些方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CONNECT&lt;/code&gt; ：用于 &lt;code&gt;ssl&lt;/code&gt;  隧道的基于代理的请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;11-简述http中get和post的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-简述http中get和post的区别&#34;&gt;#&lt;/a&gt; 11. 简述 &lt;code&gt;HTTP&lt;/code&gt;  中 &lt;code&gt;GET&lt;/code&gt;  和 &lt;code&gt;POST&lt;/code&gt;  的区别&lt;/h2&gt;
&lt;p&gt;从原理性看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据 &lt;code&gt;HTTP&lt;/code&gt;  规范， &lt;code&gt;GET&lt;/code&gt;  用于信息获取，而且应该是安全和幂等的&lt;/li&gt;
&lt;li&gt;根据 &lt;code&gt;HTTP&lt;/code&gt;  规范， &lt;code&gt;POST&lt;/code&gt;  请求表示可能修改服务器上资源的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从表面上看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;  请求的数据会附在 &lt;code&gt;URL&lt;/code&gt;  后面， &lt;code&gt;POST&lt;/code&gt;  的数据放在 &lt;code&gt;HTTP&lt;/code&gt;  包体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt;  安全性比 &lt;code&gt;GET&lt;/code&gt;  安全性高&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/4847d2e5/</guid>
            <title>面试之旅关于操作系统</title>
            <link>https://smile1231.github.io/posts/4847d2e5/</link>
            <category>Java面试</category>
            <category>操作系统</category>
            <pubDate>Wed, 16 Feb 2022 21:10:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;常见面试题整理操作系统篇每位开发者必备&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见面试题整理操作系统篇每位开发者必备&#34;&gt;#&lt;/a&gt; 常见面试题整理–操作系统篇（每位开发者必备）&lt;/h1&gt;
&lt;img data-src=&#34;/posts/4847d2e5/2022-02-16-21-18-10.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;1-请分别简单说一说进程和线程以及它们的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-请分别简单说一说进程和线程以及它们的区别&#34;&gt;#&lt;/a&gt; 1. 请分别简单说一说进程和线程以及它们的区别。&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;进程是具有一定功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源调度和分配的一个独立单位。线程是进程的实体，是 &lt;code&gt;CPU&lt;/code&gt;  调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。一个进程可以有多个线程，多个线程也可以并发执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;2-线程同步的方式有哪些&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-线程同步的方式有哪些&#34;&gt;#&lt;/a&gt; 2. 线程同步的方式有哪些？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;互斥量：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。&lt;/li&gt;
&lt;li&gt;信号量：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。&lt;/li&gt;
&lt;li&gt;事件（信号): 通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-进程的通信方式有哪些&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-进程的通信方式有哪些&#34;&gt;#&lt;/a&gt; 3. 进程的通信方式有哪些？&lt;/h2&gt;
&lt;p&gt;主要分为：管道、系统 &lt;code&gt;IPC&lt;/code&gt; （包括消息队列、信号量、共享存储）、 &lt;code&gt;SOCKET&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;管道主要分为：普通管道 &lt;code&gt;PIPE&lt;/code&gt;  、流管道（ &lt;code&gt;s_pipe&lt;/code&gt; ）、命名管道（ &lt;code&gt;name_pipe&lt;/code&gt; ）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管道是一种半双工的通信方式，数据只能单项流动，并且只能在具有亲缘关系的进程间流动，进程的亲缘关系通常是父子进程&lt;/li&gt;
&lt;li&gt;命名管道也是半双工的通信方式，它允许无亲缘关系的进程间进行通信&lt;/li&gt;
&lt;li&gt;信号量是一个计数器，用来控制多个进程对资源的访问，它通常作为一种锁机制。&lt;/li&gt;
&lt;li&gt;消息队列是消息的链表，存放在内核中并由消息队列标识符标识。&lt;/li&gt;
&lt;li&gt;信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。&lt;/li&gt;
&lt;li&gt;共享内存就是映射一段能被其它进程访问的内存，这段共享内存由一个进程创建，但是多个进程可以访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-什么是缓冲区溢出有什么危害其原因是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-什么是缓冲区溢出有什么危害其原因是什么&#34;&gt;#&lt;/a&gt; 4. 什么是缓冲区溢出？有什么危害？其原因是什么？&lt;/h2&gt;
&lt;p&gt;缓冲区溢出是指当计算机向缓冲区填充数据时超出了缓冲区本身的容量，溢出的数据覆盖在合法数据上。&lt;/p&gt;
&lt;p&gt;危害有以下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序崩溃，导致拒绝额服务&lt;/li&gt;
&lt;li&gt;跳转并且执行一段恶意代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;造成缓冲区溢出的主要原因是程序中没有仔细检查用户输入。&lt;/p&gt;
&lt;h2 id=&#34;5-什么是死锁死锁产生的条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-什么是死锁死锁产生的条件&#34;&gt;#&lt;/a&gt; 5. 什么是死锁？死锁产生的条件&lt;/h2&gt;
&lt;p&gt;在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲就是两个或多个进程无限期的阻塞、相互等待的一种状态。&lt;/p&gt;
&lt;p&gt;死锁产生的四个条件（有一个条件不成立，则不会产生死锁）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;互斥条件：一个资源一次只能被一个进程使用&lt;/li&gt;
&lt;li&gt;请求与保持条件：一个进程因请求资源而阻塞时，对已获得资源保持不放&lt;/li&gt;
&lt;li&gt;不剥夺条件：进程获得的资源，在未完全使用完之前，不能强行剥夺&lt;/li&gt;
&lt;li&gt;循环等待条件：若干进程之间形成一种头尾相接的环形等待资源关系&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-进程有哪几种状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-进程有哪几种状态&#34;&gt;#&lt;/a&gt; 6. 进程有哪几种状态？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源&lt;/li&gt;
&lt;li&gt;运行状态：占用处理机资源运行，处于此状态的进程数小于等于 &lt;code&gt;CPU&lt;/code&gt;  数&lt;/li&gt;
&lt;li&gt;阻塞状态： 进程等待某种条件，在条件满足之前无法执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-分页和分段有什么区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-分页和分段有什么区别&#34;&gt;#&lt;/a&gt; 7. 分页和分段有什么区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;段是信息的逻辑单位，它是根据用户的需要划分的，因此段对用户是可见的 ；页是信息的物理单位，是为了管理主存的方便而划分的，对用户是透明的。&lt;/li&gt;
&lt;li&gt;段的大小不固定，有它所完成的功能决定；页大大小固定，由系统决定&lt;/li&gt;
&lt;li&gt;段向用户提供二维地址空间；页向用户提供的是一维地址空间&lt;/li&gt;
&lt;li&gt;段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-操作系统中进程调度策略有哪几种&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-操作系统中进程调度策略有哪几种&#34;&gt;#&lt;/a&gt; 8. 操作系统中进程调度策略有哪几种？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FCFS&lt;/code&gt;  (先来先服务)，优先级，时间片轮转，多级反馈&lt;/p&gt;
&lt;h2 id=&#34;9-说一说进程同步有哪几种机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-说一说进程同步有哪几种机制&#34;&gt;#&lt;/a&gt; 9. 说一说进程同步有哪几种机制？&lt;/h2&gt;
&lt;p&gt;原子操作、信号量机制、自旋锁管程、会合、分布式系统&lt;/p&gt;
&lt;h2 id=&#34;10-说一说死锁的处理基本策略和常用方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-说一说死锁的处理基本策略和常用方法&#34;&gt;#&lt;/a&gt; 10. 说一说死锁的处理基本策略和常用方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解决死锁的基本方法如下：&lt;br&gt;
预防死锁、避免死锁、检测死锁、解除死锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决四多的常用策略如下：&lt;br&gt;
鸵鸟策略、预防策略、避免策略、检测与解除死锁&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/e8eb0481/</guid>
            <title>二分查找</title>
            <link>https://smile1231.github.io/posts/e8eb0481/</link>
            <category>Java面试</category>
            <category>算法</category>
            <category>二分查找</category>
            <pubDate>Wed, 16 Feb 2022 21:06:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;二分查找&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二分查找&#34;&gt;#&lt;/a&gt; 二分查找&lt;/h1&gt;
&lt;p&gt;二分查找（ &lt;code&gt;binary search&lt;/code&gt; ），也称作折半查找（ &lt;code&gt;half-interval search&lt;/code&gt; ），每次划分一半进行下一步搜索，所以时间复杂度无非就是 &lt;code&gt;while&lt;/code&gt;  循环的次数！&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//二分查找 Java 实现 （升序数组）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;binarySearch&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Integer[] srcArray, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; des)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; low = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; high = srcArray.length - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ((low &amp;lt;= high) &amp;amp;&amp;amp; (low &amp;lt;= srcArray.length - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;amp;&amp;amp; (high &amp;lt;= srcArray.length - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// &amp;gt;&amp;gt; 右移符号 表示除以 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; middle = (high + low) &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (des == srcArray[middle]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果要查找的值 小于最中间的值 就算选择 左边的区间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (des &amp;lt; srcArray[middle]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            high = middle - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            low = middle + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;时间复杂度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#时间复杂度&#34;&gt;#&lt;/a&gt; 时间复杂度&lt;/h2&gt;
&lt;p&gt;比如：总共有 &lt;code&gt;n&lt;/code&gt;  个元素，每次查找的区间大小就是 &lt;code&gt;n，n/2，n/4，…，n/2^k&lt;/code&gt; （接下来操作元素的剩余个数），其中 &lt;code&gt;k&lt;/code&gt;  就是循环的次数。&lt;br&gt;
由于 &lt;code&gt;n/2^k&lt;/code&gt;  取整后 &lt;code&gt;&amp;gt;=1&lt;/code&gt; ，即令 &lt;code&gt;n/2^k=1&lt;/code&gt; ，&lt;br&gt;
可得 &lt;code&gt;k=log2n&lt;/code&gt; ,（是以 &lt;code&gt;2&lt;/code&gt;  为底， &lt;code&gt;n&lt;/code&gt;  的对数），所以时间复杂度可以表示 &lt;code&gt;O()=O(log2n)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;二分查找的缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二分查找的缺点&#34;&gt;#&lt;/a&gt; 二分查找的缺点&lt;/h2&gt;
&lt;p&gt;虽然二分查找的效率高，但是要将表按关键字排序。而排序本身是一种很费时的运算。既使采用高效率的排序方法也要花费 &lt;code&gt;O(nlgn)&lt;/code&gt;  的时间。&lt;/p&gt;
&lt;p&gt;二分查找只适用顺序存储结构。为保持表的有序性，在顺序结构里插入和删除都必须移动大量的结点。因此，二分查找特别适用于那种一经建立就很少改动、而又经常需要查找的线性表。&lt;/p&gt;
&lt;p&gt;对那些查找少而又经常需要改动的线性表，可采用链表作存储结构，进行顺序查找。链表上无法实现二分查找。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/20ac1950/</guid>
            <title>SpringBoot文件上传下载</title>
            <link>https://smile1231.github.io/posts/20ac1950/</link>
            <category>Java面试</category>
            <category>SpringBoot</category>
            <pubDate>Tue, 15 Feb 2022 22:44:58 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;文件上传与下载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Spring Boot&lt;/code&gt;  默认单个文件上传大小是 &lt;code&gt;1MB&lt;/code&gt; , 默认多个文件上传总大小是 &lt;code&gt;10MB&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight yml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;servlet:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#配置单个上传文件的大小的限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;multipart:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;max-file-size:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;20MB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#配置在一次请求中上传文件的总容量的限制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;max-request-size:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;50MB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@PostMapping(&amp;quot;/upload&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;uploadFile&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MultipartFile file)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//生成文件在服务器端存放的名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//扩展名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            String fileSuffix = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;)+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            String fileName = System.currentTimeMillis() + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; +fileSuffix;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//获取项目路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(System.getProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;user.dir&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            File files = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; File(&lt;span class=&#34;string&#34;&gt;&amp;quot;/Users/jinmao/Documents/IDEASpace/springboot01/src/&amp;quot;&lt;/span&gt; + fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//上传&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!files.exists()) files.mkdirs();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            file.transferTo(files);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;上传失败&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;上传成功&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//多文件上传&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;meta&#34;&gt;@PostMapping(&amp;quot;/batch&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;handleFileUpload&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HttpServletRequest request)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        List&amp;lt;MultipartFile&amp;gt; files = ((MultipartHttpServletRequest) request).getFiles(&lt;span class=&#34;string&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        MultipartFile file = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        BufferedOutputStream stream = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; files.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            file = files.get(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            String filePath = &lt;span class=&#34;string&#34;&gt;&amp;quot;/Users/dalaoyang/Downloads/&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!file.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;byte&lt;/span&gt;[] bytes = file.getBytes();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    stream = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; BufferedOutputStream(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; FileOutputStream(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; File(filePath + file.getOriginalFilename())));&lt;span class=&#34;comment&#34;&gt;//设置文件路径及名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    stream.write(bytes);&lt;span class=&#34;comment&#34;&gt;// 写入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    stream.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    stream = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;第 &amp;quot;&lt;/span&gt; + i + &lt;span class=&#34;string&#34;&gt;&amp;quot; 个文件上传失败 ==&amp;gt; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            + e.getMessage();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;第 &amp;quot;&lt;/span&gt; + i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        + &lt;span class=&#34;string&#34;&gt;&amp;quot; 个文件上传失败因为文件为空&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;上传成功&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//文件下载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/download&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;downloadFile&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String fileName = &lt;span class=&#34;string&#34;&gt;&amp;quot;dalaoyang.jpeg&amp;quot;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;// 文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fileName != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//设置文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            File file = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; File(&lt;span class=&#34;string&#34;&gt;&amp;quot;/Users/dalaoyang/Documents/dalaoyang.jpeg&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;//File file = new File(realPath , fileName);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (file.exists()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                response.setContentType(&lt;span class=&#34;string&#34;&gt;&amp;quot;application/force-download&amp;quot;&lt;/span&gt;);&lt;span class=&#34;comment&#34;&gt;// 设置强制下载不打开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                response.addHeader(&lt;span class=&#34;string&#34;&gt;&amp;quot;Content-Disposition&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;attachment;fileName=&amp;quot;&lt;/span&gt; + fileName);&lt;span class=&#34;comment&#34;&gt;// 设置文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;byte&lt;/span&gt;[] buffer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;byte&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                FileInputStream fis = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                BufferedInputStream bis = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    fis = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; FileInputStream(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    bis = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; BufferedInputStream(fis);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    OutputStream os = response.getOutputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = bis.read(buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (i != -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        os.write(buffer, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        i = bis.read(buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;下载成功&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (bis != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            bis.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fis != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            fis.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;下载失败&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;关于文件上传的理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于文件上传的理解&#34;&gt;#&lt;/a&gt; 关于文件上传的理解&lt;/h2&gt;
&lt;p&gt;以前是这样认为的，就像代码中所展示的那样&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;swiper-item&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;/Users/jinmao/Documents/Vscode/Space/StudyPlatform/images/swiper/1.png&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;mode&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;widthFix&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;lazy-load&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;binderror&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;bindload&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;image&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;swiper-item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;image&lt;/code&gt;  标签只要 &lt;code&gt;src&lt;/code&gt;  是静态的文件目录，感觉就是可以的，然后这就犯了一个很严重的错误，他是无法被解析的，必须是后端项目所带有的资源&lt;/p&gt;
&lt;p&gt;类似于一个服务端，一个客户端去访问他的资源，这个资源是服务端所带有的，并不是服务器上有的，只要是有他的全限定类名就 &lt;code&gt;ok&lt;/code&gt;  的&lt;/p&gt;
&lt;p&gt;所以任何资源都要通过后端去获取，后端所带有的，所以这个代码有很严重的错误，也是一个关于文件上传的大误区&lt;/p&gt;
&lt;img data-src=&#34;/posts/20ac1950/2022-02-16-21-04-44.png&#34; class=&#34;&#34;&gt;
&lt;img data-src=&#34;/posts/20ac1950/2022-02-16-21-04-53.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;就可以显示出来了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;续：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后来我又发现了新的问题，就是需要重启项目之后才能访问到相应的资源&lt;/p&gt;
&lt;h3 id=&#34;配置访问虚拟路径&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置访问虚拟路径&#34;&gt;#&lt;/a&gt; 配置访问虚拟路径&lt;/h3&gt;
&lt;p&gt;文件实际是存在 路径下面，但是当访问 &lt;code&gt;http://ip:port/upload/xxx.jpg&lt;/code&gt;  时，虚拟路径会映射到  &lt;code&gt;file://Users/path/xxx.jpg&lt;/code&gt;  的路径中访问文件。也是对服务器文件的一种保护措施吧.&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WebMvcConfig&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WebMvcConfigurer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;addResourceHandlers&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ResourceHandlerRegistry registry)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String path = System.getProperty(&lt;span class=&#34;string&#34;&gt;&amp;quot;user.dir&amp;quot;&lt;/span&gt;) + &lt;span class=&#34;string&#34;&gt;&amp;quot;/src/main/resources/upload/&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//registry.addResourceHandler(&amp;quot;/static/**&amp;quot;).addResourceLocations(&amp;quot;classpath:/static/&amp;quot;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//linux服务器文件目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//配置磁盘映射 , pathPattern  访问路径                                        磁盘映射路径，不然不能够访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                        &lt;span class=&#34;comment&#34;&gt;//这是因为对服务器的保护措施导致的，服务器不能对外部暴露真实的资源路径，需要配置虚拟路径映射访问。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        registry.addResourceHandler(&lt;span class=&#34;string&#34;&gt;&amp;quot;/upload/**&amp;quot;&lt;/span&gt;).addResourceLocations(&lt;span class=&#34;string&#34;&gt;&amp;quot;file:&amp;quot;&lt;/span&gt;+path);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/eec4b728/</guid>
            <title>SpringBoot中如何优雅的使用多线程</title>
            <link>https://smile1231.github.io/posts/eec4b728/</link>
            <category>Java面试</category>
            <category>SpringBoot</category>
            <pubDate>Tue, 15 Feb 2022 22:36:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;springboot中如何优雅的使用多线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springboot中如何优雅的使用多线程&#34;&gt;#&lt;/a&gt;  &lt;code&gt;SpringBoot&lt;/code&gt;  中如何优雅的使用多线程&lt;/h1&gt;
&lt;p&gt;在  &lt;code&gt;SpringBoot&lt;/code&gt;  应用中，经常会遇到在一个接口中，同时做事情 1，事情 2，事情 3，如果同步执行的话，则本次接口时间取决于事情 1 2 3 执行时间之和；如果三件事同时执行，则本次接口时间取决于事情 1 2 3 执行时间最长的那个，合理使用多线程，可以大大缩短接口时间。那么在  &lt;code&gt;SpringBoot&lt;/code&gt;  应用中如何优雅的使用多线程呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Don&#39;t bb, show me code.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;快速使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速使用&#34;&gt;#&lt;/a&gt; &lt;strong&gt;快速使用&lt;/strong&gt;&lt;/h2&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;&lt;code&gt;SpringBoot&lt;/code&gt;  应用中需要添加 &lt;code&gt;@EnableAsync&lt;/code&gt;  注解，来开启异步调用，一般还会配置一个线程池，异步的方法交给特定的线程池完成，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@EnableAsync&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AsyncConfiguration&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean(&amp;quot;doSomethingExecutor&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Executor &lt;span class=&#34;title&#34;&gt;doSomethingExecutor&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ThreadPoolTaskExecutor executor = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ThreadPoolTaskExecutor();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 核心线程数：线程池创建时候初始化的线程数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        executor.setCorePoolSize(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 最大线程数：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        executor.setMaxPoolSize(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 缓冲队列：用来缓冲执行任务的队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        executor.setQueueCapacity(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 允许线程的空闲时间60秒：当超过了核心线程之外的线程在空闲时间到达之后会被销毁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        executor.setKeepAliveSeconds(&lt;span class=&#34;number&#34;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        executor.setThreadNamePrefix(&lt;span class=&#34;string&#34;&gt;&amp;quot;do-something-&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 缓冲队列满了之后的拒绝策略：由调用线程处理（一般是主线程）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        executor.setRejectedExecutionHandler(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ThreadPoolExecutor.DiscardPolicy());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        executor.initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; executor;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用的方式非常简单，在需要异步的方法上加 &lt;code&gt;@Async&lt;/code&gt;  注解&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AsyncController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; AsyncService asyncService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/open/something&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;something&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; count = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            asyncService.doSomething(&lt;span class=&#34;string&#34;&gt;&amp;quot;index = &amp;quot;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        lon&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;success&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AsyncService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 指定使用beanname为doSomethingExecutor的线程池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Async(&amp;quot;doSomethingExecutor&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String message)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;do something, message=&amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.error(&lt;span class=&#34;string&#34;&gt;&amp;quot;do something error: &amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; message;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问： &lt;code&gt;127.0.0.1:8080/open/something&lt;/code&gt; ，日志如下&lt;/p&gt;
&lt;img data-src=&#34;/posts/eec4b728/2022-02-16-21-01-21.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;由此可见已经达到异步执行的效果了，并且使用到了咱们配置的线程池。&lt;/p&gt;
&lt;h2 id=&#34;获取异步方法返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取异步方法返回值&#34;&gt;#&lt;/a&gt; &lt;strong&gt;获取异步方法返回值&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;当异步方法有返回值时，如何获取异步方法执行的返回结果呢？这时需要异步调用的方法带有返回 &lt;code&gt;CompletableFuture&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CompletableFuture&lt;/code&gt;  是对 &lt;code&gt;Feature&lt;/code&gt;  的增强， &lt;code&gt;Feature&lt;/code&gt;  只能处理简单的异步任务，而 &lt;code&gt;CompletableFuture&lt;/code&gt;  可以将多个异步任务进行复杂的组合。如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AsyncController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Autowired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; AsyncService asyncService;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@SneakyThrows&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@ApiOperation(&amp;quot;异步 有返回值&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@GetMapping(&amp;quot;/open/somethings&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;somethings&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CompletableFuture&amp;lt;String&amp;gt; createOrder = asyncService.doSomething1(&lt;span class=&#34;string&#34;&gt;&amp;quot;create order&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CompletableFuture&amp;lt;String&amp;gt; reduceAccount = asyncService.doSomething2(&lt;span class=&#34;string&#34;&gt;&amp;quot;reduce account&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CompletableFuture&amp;lt;String&amp;gt; saveLog = asyncService.doSomething3(&lt;span class=&#34;string&#34;&gt;&amp;quot;save log&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 等待所有任务都执行完&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CompletableFuture.allOf(createOrder, reduceAccount, saveLog).join();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 获取每个任务的返回结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String result = createOrder.get() + reduceAccount.get() + saveLog.get();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Service&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AsyncService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Async(&amp;quot;doSomethingExecutor&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;String&amp;gt; &lt;span class=&#34;title&#34;&gt;doSomething1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String message)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;do something1: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CompletableFuture.completedFuture(&lt;span class=&#34;string&#34;&gt;&amp;quot;do something1: &amp;quot;&lt;/span&gt; + message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Async(&amp;quot;doSomethingExecutor&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;String&amp;gt; &lt;span class=&#34;title&#34;&gt;doSomething2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String message)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;do something2: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CompletableFuture.completedFuture(&lt;span class=&#34;string&#34;&gt;&amp;quot;; do something2: &amp;quot;&lt;/span&gt; + message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Async(&amp;quot;doSomethingExecutor&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;String&amp;gt; &lt;span class=&#34;title&#34;&gt;doSomething3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String message)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.info(&lt;span class=&#34;string&#34;&gt;&amp;quot;do something3: &amp;#123;&amp;#125;&amp;quot;&lt;/span&gt;, message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Thread.sleep(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CompletableFuture.completedFuture(&lt;span class=&#34;string&#34;&gt;&amp;quot;; do something3: &amp;quot;&lt;/span&gt; + message);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;控制台上日志：&lt;/p&gt;
&lt;img data-src=&#34;/posts/eec4b728/2022-02-16-21-01-47.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注意事项&#34;&gt;#&lt;/a&gt; &lt;strong&gt;注意事项&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;@Async&lt;/code&gt;  注解会在以下几个场景失效，也就是说明明使用了 &lt;code&gt;@Async&lt;/code&gt;  注解，但就没有走多线程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步方法使用 &lt;code&gt;static&lt;/code&gt;  关键词修饰；&lt;/li&gt;
&lt;li&gt;异步类不是一个 &lt;code&gt;Spring&lt;/code&gt;  容器的 &lt;code&gt;bean&lt;/code&gt; （一般使用注解 &lt;code&gt;@Component&lt;/code&gt;  和 &lt;code&gt;@Service&lt;/code&gt; ，并且能被 &lt;code&gt;Spring&lt;/code&gt;  扫描到）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpringBoot&lt;/code&gt;  应用中没有添加 &lt;code&gt;@EnableAsync&lt;/code&gt;  注解；&lt;/li&gt;
&lt;li&gt;在同一个类中，一个方法调用另外一个有 &lt;code&gt;@Async&lt;/code&gt;  注解的方法，注解不会生效。原因是 &lt;code&gt;@Async&lt;/code&gt;  注解的方法，是在代理类中执行的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是： 异步方法使用注解 &lt;code&gt;@Async&lt;/code&gt;  的返回值只能为 &lt;code&gt;void&lt;/code&gt;  或者 &lt;code&gt;Future&lt;/code&gt;  及其子类，当返回结果为其他类型时，方法还是会异步执行，但是返回值都是 &lt;code&gt;null&lt;/code&gt; ，部分源码如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AsyncExecutionInterceptor&lt;/code&gt; - &lt;code&gt;#invoke&lt;/code&gt;&lt;/p&gt;
&lt;img data-src=&#34;/posts/eec4b728/2022-02-16-21-01-58.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;通过上边几个示例， &lt;code&gt;@Async&lt;/code&gt;  实际还是通过 &lt;code&gt;Future&lt;/code&gt;  或 &lt;code&gt;CompletableFuture&lt;/code&gt;  来异步执行的， &lt;code&gt;Spring&lt;/code&gt;  又封装了一下，让我们使用的更方便。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/89080a8e/</guid>
            <title>Spring Bean的生命周期</title>
            <link>https://smile1231.github.io/posts/89080a8e/</link>
            <category>Java面试</category>
            <category>Spring</category>
            <pubDate>Tue, 15 Feb 2022 22:34:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;spring-bean的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring-bean的生命周期&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Spring Bean&lt;/code&gt;  的生命周期&lt;/h1&gt;
&lt;p&gt;大致流程：&lt;/p&gt;
&lt;p&gt;本文将从以下两方面去帮助理解  &lt;code&gt;Bean&lt;/code&gt;  的生命周期：&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;生命周期的概要流程：对  &lt;code&gt;Bean&lt;/code&gt;  的生命周期进行概括，并且结合代码来理解；&lt;/li&gt;
&lt;li&gt;扩展点的作用：详细介绍  &lt;code&gt;Bean&lt;/code&gt;  生命周期中所涉及到的扩展点的作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生命周期的概要流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生命周期的概要流程&#34;&gt;#&lt;/a&gt; 生命周期的概要流程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Bean&lt;/code&gt;  的生命周期概括起来就是  &lt;code&gt;4&lt;/code&gt;  个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实例化（ &lt;code&gt;Instantiation&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性赋值（ &lt;code&gt;Populate&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化（ &lt;code&gt;Initialization&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;销毁（ &lt;code&gt;Destruction&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例化：第  &lt;code&gt;1&lt;/code&gt;  步，实例化一个  &lt;code&gt;bean&lt;/code&gt;  对象；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性赋值：第  &lt;code&gt;2&lt;/code&gt;  步，为  &lt;code&gt;bean&lt;/code&gt;  设置相关属性和依赖；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化：第  &lt;code&gt;3~7&lt;/code&gt;  步，步骤较多，其中第  &lt;code&gt;5、6&lt;/code&gt;  步为初始化操作，第  &lt;code&gt;3、4&lt;/code&gt;  步为在初始化前执行，第  &lt;code&gt;7&lt;/code&gt;  步在初始化后执行，该阶段结束，才能被用户使用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;销毁：第  &lt;code&gt;8~10&lt;/code&gt;  步，第 &lt;code&gt;8&lt;/code&gt;  步不是真正意义上的销毁（还没使用呢），而是先在使用前注册了销毁的相关调用接口，为了后面第 &lt;code&gt;9、10&lt;/code&gt;  步真正销毁  &lt;code&gt;bean&lt;/code&gt;  时再执行相应的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们结合代码来直观的看下，在  &lt;code&gt;doCreateBean()&lt;/code&gt;  方法中能看到依次执行了这  &lt;code&gt;4&lt;/code&gt;  个阶段：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// AbstractAutowireCapableBeanFactory.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Object &lt;span class=&#34;title&#34;&gt;doCreateBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String beanName, &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; RootBeanDefinition mbd, &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;@Nullable&lt;/span&gt; Object[] args)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;throws&lt;/span&gt; BeanCreationException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 1. 实例化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BeanWrapper instanceWrapper = &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (instanceWrapper == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        instanceWrapper = createBeanInstance(beanName, mbd, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Object exposedObject = bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 2. 属性赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        populateBean(beanName, mbd, instanceWrapper);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 3. 初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        exposedObject = initializeBean(beanName, exposedObject, mbd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 4. 销毁-注册回调接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        registerDisposableBeanIfNecessary(beanName, bean, mbd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; exposedObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于初始化包含了第  &lt;code&gt;3~7&lt;/code&gt;  步，较复杂，所以我们进到  &lt;code&gt;initializeBean()&lt;/code&gt;  方法里具体看下其过程（注释的序号对应图中序号）：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// AbstractAutowireCapableBeanFactory.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Object &lt;span class=&#34;title&#34;&gt;initializeBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String beanName, &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Object bean, &lt;span class=&#34;meta&#34;&gt;@Nullable&lt;/span&gt; RootBeanDefinition mbd)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 3. 检查 Aware 相关接口并设置相关依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (System.getSecurityManager() != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        AccessController.doPrivileged((PrivilegedAction&amp;lt;Object&amp;gt;) () -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            invokeAwareMethods(beanName, bean);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;, getAccessControlContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        invokeAwareMethods(beanName, bean);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 4. BeanPostProcessor 前置处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Object wrappedBean = bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mbd == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || !mbd.isSynthetic()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 5. 若实现 InitializingBean 接口，调用 afterPropertiesSet() 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 6. 若配置自定义的 init-method方法，则执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        invokeInitMethods(beanName, wrappedBean, mbd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; BeanCreationException(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (mbd != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; ? mbd.getResourceDescription() : &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            beanName, &lt;span class=&#34;string&#34;&gt;&amp;quot;Invocation of init method failed&amp;quot;&lt;/span&gt;, ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 7. BeanPostProceesor 后置处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mbd == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || !mbd.isSynthetic()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; wrappedBean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;```java&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// AbstractAutowireCapableBeanFactory.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Object &lt;span class=&#34;title&#34;&gt;initializeBean&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String beanName, &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Object bean, &lt;span class=&#34;meta&#34;&gt;@Nullable&lt;/span&gt; RootBeanDefinition mbd)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 3. 检查 Aware 相关接口并设置相关依赖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (System.getSecurityManager() != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        AccessController.doPrivileged((PrivilegedAction&amp;lt;Object&amp;gt;) () -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            invokeAwareMethods(beanName, bean);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;, getAccessControlContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        invokeAwareMethods(beanName, bean);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 4. BeanPostProcessor 前置处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Object wrappedBean = bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mbd == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || !mbd.isSynthetic()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 5. 若实现 InitializingBean 接口，调用 afterPropertiesSet() 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 6. 若配置自定义的 init-method方法，则执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        invokeInitMethods(beanName, wrappedBean, mbd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Throwable ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; BeanCreationException(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            (mbd != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; ? mbd.getResourceDescription() : &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            beanName, &lt;span class=&#34;string&#34;&gt;&amp;quot;Invocation of init method failed&amp;quot;&lt;/span&gt;, ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 7. BeanPostProceesor 后置处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mbd == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || !mbd.isSynthetic()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; wrappedBean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在  &lt;code&gt;invokInitMethods()&lt;/code&gt;  方法中会检查  &lt;code&gt;InitializingBean&lt;/code&gt;  接口和  &lt;code&gt;init-method&lt;/code&gt;  方法，销毁的过程也与其类似：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// DisposableBeanAdapter.java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 9. 若实现 DisposableBean 接口，则执行 destory()方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.invokeDisposableBean) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (System.getSecurityManager() != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                AccessController.doPrivileged((PrivilegedExceptionAction&amp;lt;Object&amp;gt;) () -&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    ((DisposableBean) &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.bean).destroy();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.acc);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ((DisposableBean) &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.bean).destroy();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// 10. 若配置自定义的 detory-method 方法，则执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.destroyMethod != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        invokeCustomDestroyMethod(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.destroyMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.destroyMethodName != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Method methodToInvoke = determineDestroyMethod(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.destroyMethodName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (methodToInvoke != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            invokeCustomDestroyMethod(ClassUtils.getInterfaceMethodIfPossible(methodToInvoke));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从  &lt;code&gt;Spring&lt;/code&gt;  的源码我们可以直观的看到其执行过程，而我们记忆其过程便可以从这  &lt;code&gt;4&lt;/code&gt;  个阶段出发，实例化、属性赋值、初始化、销毁。其中细节较多的便是初始化，涉及了  &lt;code&gt;Aware、BeanPostProcessor、InitializingBean、init-method&lt;/code&gt;  的概念。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3psMXpsMnpsMy9hcnRpY2xlL2RldGFpbHMvMTA1MDQ0OTU0&#34;&gt;拓展点讲解&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/31d0fffb/</guid>
            <title>Mybatis中#号和$号的区别</title>
            <link>https://smile1231.github.io/posts/31d0fffb/</link>
            <category>Java面试</category>
            <category>Mybatis</category>
            <pubDate>Tue, 15 Feb 2022 22:33:42 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mybatis中号和号的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis中号和号的区别&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Mybatis&lt;/code&gt;  中 &lt;code&gt;#&lt;/code&gt; 号和 &lt;code&gt;$&lt;/code&gt;  号的区别&lt;/h1&gt;
&lt;h2 id=&#34;默认会用引号将参数引起来&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#默认会用引号将参数引起来&#34;&gt;#&lt;/a&gt;  &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  默认会用引号将参数引起来&lt;/h2&gt;
&lt;h2 id=&#34;单纯替代&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单纯替代&#34;&gt;#&lt;/a&gt;  &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  单纯替代&lt;/h2&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;p&gt;之前的写法， &lt;code&gt;select * from product_tree_v pv where pv.product_code in(#&amp;#123;product&amp;#125;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;预编译出来的结果： &lt;code&gt;select * from product_tree_v pv where pv.product_code in ？&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  被当作一个占位符了，而参数前后也会被加上引号。&lt;/p&gt;
&lt;p&gt;运行时的 &lt;code&gt;sql&lt;/code&gt;  是： &lt;code&gt;select * from product_tree_v pv where pv.product_code in(&#39;‘p001&#39;,&#39;p002&#39;,&#39;p003&#39;&#39;)&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;所以无论如何都是查不到数据的。&lt;/p&gt;
&lt;p&gt;换成 &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt; ： &lt;code&gt;select * from product_tree_v pv where pv.product_code in($product&amp;#125;)&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;预编译出来的结果 ： &lt;code&gt;select * from product_tree_v pv where pv.product_code in (‘p001&#39;,&#39;p002&#39;,&#39;p003&#39;)&lt;/code&gt; ;&lt;/p&gt;
&lt;p&gt;这样就是纯粹的将参数传进去，没有做任何的转义操作。这才是我们真正想要的。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mybatis&lt;/code&gt;  作为 &lt;code&gt;ORM&lt;/code&gt;  框架，从性能，系统维护性，实用性上来说，都是非常优秀的，&lt;/p&gt;
&lt;p&gt;其所有的 &lt;code&gt;sql&lt;/code&gt;  在执行前都会通过数据库驱动进行预编译，这样 &lt;code&gt;DBMS&lt;/code&gt;  就可以不用编译直接接收参数运行，&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;#&lt;/code&gt; 和 &lt;code&gt;$&lt;/code&gt;  号的区别在预编译后就能看出来了， &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  预编译完是占位符 &lt;code&gt;?&lt;/code&gt; ，而 &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  预编译完就是传进来的参数。&lt;/p&gt;
&lt;h2 id=&#34;的优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#的优点&#34;&gt;#&lt;/a&gt;  &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  的优点：&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  可以预防 &lt;code&gt;sql&lt;/code&gt;  攻击，而 &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  却不能&lt;/p&gt;
&lt;p&gt;例如  &lt;code&gt;select * from $&amp;#123;tablename&amp;#125; &lt;/code&gt;   如果传入的是  &lt;code&gt;product; drop product;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么你的表数据就会被无声无息的干掉了。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  的场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作为 &lt;code&gt;in&lt;/code&gt;  条件时，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数为 &lt;code&gt;int&lt;/code&gt;  类型并且数据库中字段的类型是 &lt;code&gt;number&lt;/code&gt; ，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;order by $&amp;#123;&amp;#125;&lt;/code&gt; ，排序字段&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;--------------------------ps----------------------------&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;![CDATA[]]&amp;gt;&lt;/code&gt;  的用法，在该符号内的语句，将不会被当成字符串来处理，而是直接当成 &lt;code&gt;sql&lt;/code&gt;  语句，比如有大于，小于号，要执行一个存储过程都需要加上这个。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
