<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>JIN MAO &#39;s Blog • Posts by &#34;jvm&#34; category</title>
        <link>https://smile1231.github.io</link>
        <description></description>
        <language>en</language>
        <pubDate>Tue, 15 Feb 2022 22:33:11 +0800</pubDate>
        <lastBuildDate>Tue, 15 Feb 2022 22:33:11 +0800</lastBuildDate>
        <category>SAP</category>
        <category>Java</category>
        <category>Cache</category>
        <category>Cookie</category>
        <category>Session</category>
        <category>Java面试</category>
        <category>Corn</category>
        <category>生物信息</category>
        <category>基因编辑</category>
        <category>前端</category>
        <category>Css</category>
        <category>DDD</category>
        <category>领域驱动设计</category>
        <category>DisPlay属性</category>
        <category>FastJson</category>
        <category>blog</category>
        <category>hexo</category>
        <category>next</category>
        <category>Docker</category>
        <category>JavaScript</category>
        <category>Html</category>
        <category>IDEA</category>
        <category>SpringBoot</category>
        <category>Jvm</category>
        <category>map</category>
        <category>Stream流</category>
        <category>Assert</category>
        <category>Jenkins</category>
        <category>CI/CD</category>
        <category>函数式接口</category>
        <category>Springboot</category>
        <category>java</category>
        <category>calender</category>
        <category>Python</category>
        <category>Jupyter</category>
        <category>Machine Learning</category>
        <category>LeetCode</category>
        <category>算法</category>
        <category>递归</category>
        <category>numpy</category>
        <category>pandas</category>
        <category>sklearn</category>
        <category>Mybatis</category>
        <category>分页查询</category>
        <category>Linux</category>
        <category>模糊查询</category>
        <category>Nginx</category>
        <category>Spring</category>
        <category>SrpingBoot</category>
        <category>文件上传</category>
        <category>TypeScript</category>
        <category>WebPack</category>
        <category>master</category>
        <category>Groovy</category>
        <category>UML</category>
        <category>VsCode</category>
        <category>Shell</category>
        <category>事务</category>
        <category>Ubuntu</category>
        <category>Mysql</category>
        <category>VSCODE</category>
        <category>快捷键</category>
        <category>Vue</category>
        <category>git</category>
        <category>Stream</category>
        <category>日期</category>
        <category>线程池</category>
        <category>ubuntu</category>
        <category>虚拟机</category>
        <category>二分查找</category>
        <category>Hadoop</category>
        <category>数据挖掘</category>
        <category>EasyExcel</category>
        <category>操作系统</category>
        <category>node</category>
        <category>Hexo</category>
        <category>Yaml</category>
        <category>JVM</category>
        <category>数据库</category>
        <category>Mysql事务</category>
        <category>git,npm,node</category>
        <category>Git</category>
        <category>冒泡排序</category>
        <category>堆排序</category>
        <category>多线程</category>
        <category>动态规划</category>
        <category>Google</category>
        <category>junit</category>
        <category>流</category>
        <category>幂等性</category>
        <category>快速排序</category>
        <category>归并排序</category>
        <category>正则表达式</category>
        <category>选择排序</category>
        <category>直接插入排序</category>
        <category>Java 面试</category>
        <category>数据结构</category>
        <category>阻塞队列</category>
        <category>Spring事务</category>
        <category>JDK</category>
        <category>动态代理</category>
        <category>Date</category>
        <category>ArrayList</category>
        <category>接口</category>
        <category>SpringMvc</category>
        <category>排序</category>
        <category>执行计划</category>
        <category>HashMap</category>
        <category>Email</category>
        <category>设计模式</category>
        <category>cheatsheet</category>
        <item>
            <guid isPermalink="true">https://smile1231.github.io/posts/57681474/</guid>
            <title>JVM简单原理</title>
            <link>https://smile1231.github.io/posts/57681474/</link>
            <category>Java面试</category>
            <category>Jvm</category>
            <pubDate>Tue, 15 Feb 2022 22:33:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;jvm原理的第一次接触&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jvm原理的第一次接触&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Jvm&lt;/code&gt;  原理的第一次接触&lt;/h1&gt;
&lt;h2 id=&#34;jvm内存结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#jvm内存结构&#34;&gt;#&lt;/a&gt;  &lt;code&gt;JVM&lt;/code&gt;  内存结构&lt;/h2&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;img data-src=&#34;/posts/57681474/2022-02-16-20-49-46.png&#34; class=&#34;&#34;&gt;
&lt;ul&gt;
&lt;li&gt;第一， &lt;code&gt;JVM&lt;/code&gt;  分为五个区域：虚拟机栈 ( &lt;code&gt;VM Stack&lt;/code&gt; )、本地方法栈 ( &lt;code&gt;Native Method Stack&lt;/code&gt; )、方法区 ( &lt;code&gt;Method Area&lt;/code&gt; )、堆 ( &lt;code&gt;Heap&lt;/code&gt; )、程序计数器 ( &lt;code&gt;Program Counter Register&lt;/code&gt; )。 &lt;code&gt;PS&lt;/code&gt; ：大家不要排斥英语，此处用英文记忆反而更容易理解。&lt;/li&gt;
&lt;li&gt;第二， &lt;code&gt;JVM&lt;/code&gt;  五个区中虚拟机栈、本地方法栈、程序计数器为线程私有，方法区和堆为线程共享区。图中已经用颜色区分，绿色表示 “通行”，橘黄色表示停一停（需等待）。&lt;/li&gt;
&lt;li&gt;第三， &lt;code&gt;JVM&lt;/code&gt;  不同区域的占用内存大小不同，一般情况下堆最大，程序计数器较小。那么最大的区域会放什么？当然就是 &lt;code&gt;Java中最多的“对象”&lt;/code&gt;  了。&lt;br&gt;
学习延伸：如果你记住了这张图，是不是就可以说出关于 &lt;code&gt;JVM&lt;/code&gt;  的内存结构了呢？可以尝试一下，切记不用死记硬背，发挥你的想象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;堆heap&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#堆heap&#34;&gt;#&lt;/a&gt; 堆 ( &lt;code&gt;Heap&lt;/code&gt; )&lt;/h2&gt;
&lt;p&gt;上面已经得出结论，堆内存最大，堆是被线程共享，堆的目的就是存放对象。几乎所有的对象实例都在此分配。当然，随着优化技术的更新，某些数据也会被放在栈上等。&lt;/p&gt;
&lt;p&gt;枪打出头鸟，树大招风。因为堆占用内存空间最大，堆也是 &lt;code&gt;Java&lt;/code&gt;  垃圾回收的主要区域（重点对象），因此也称作 &lt;code&gt;“GC堆”&lt;/code&gt; （ &lt;code&gt;Garbage Collected Heap&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;关于 &lt;code&gt;GC&lt;/code&gt;  的操作，我们后面章节会详细讲，但正因为 &lt;code&gt;GC&lt;/code&gt;  的存在，而现代收集器基本都采用分代收集算法，堆又被细化了。&lt;/p&gt;
&lt;img data-src=&#34;/posts/57681474/2022-02-16-20-49-59.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;同样，对上图呈现内容汇总分析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，堆的 &lt;code&gt;GC&lt;/code&gt;  操作采用分代收集算法。&lt;/li&gt;
&lt;li&gt;第二，堆区分了新生代和老年代；&lt;/li&gt;
&lt;li&gt;第三，新生代又分为： &lt;code&gt;Eden&lt;/code&gt;  空间、 &lt;code&gt;From Survivor（S0）&lt;/code&gt; 空间、 &lt;code&gt;To Survivor（S1）&lt;/code&gt; 空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;  虚拟机规范规定， &lt;code&gt;Java&lt;/code&gt;  堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。也就是说堆的内存是一块块拼凑起来的。要增加堆空间时，往上 “拼凑”（可扩展性）即可，但当堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出 &lt;code&gt;OutOfMemoryError&lt;/code&gt;  异常。&lt;/p&gt;
&lt;h2 id=&#34;方法区method-area&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法区method-area&#34;&gt;#&lt;/a&gt; 方法区 &lt;code&gt;（Method Area）&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;方法区与堆有很多共性：线程共享、内存不连续、可扩展、可垃圾回收，同样当无法再扩展时会抛出 &lt;code&gt;OutOfMemoryError&lt;/code&gt;  异常。&lt;/p&gt;
&lt;p&gt;正因为如此相像， &lt;code&gt;Java&lt;/code&gt;  虚拟机规范把&lt;em&gt;&lt;strong&gt;方法区描述为堆&lt;/strong&gt;&lt;/em&gt;的一个逻辑部分，但目前实际上是与 &lt;code&gt;Java&lt;/code&gt;  堆分开的（ &lt;code&gt;Non-Heap&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;方法区个性化的是，它存储的是&lt;em&gt;&lt;strong&gt;已被虚拟机加载的类信息、常量、静态变量&lt;/strong&gt;&lt;/em&gt;即时编译器编译后的代码等数据。&lt;/p&gt;
&lt;p&gt;方法区的内存回收目标主要是针对&lt;em&gt;&lt;strong&gt;常量池的回收和对类型的卸载&lt;/strong&gt;&lt;/em&gt;，一般来说这个区域的回收 “成绩” 比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是回收确实是有必要的。&lt;/p&gt;
&lt;img data-src=&#34;/posts/57681474/2022-02-16-20-50-12.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;程序计数器program-counter-register&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#程序计数器program-counter-register&#34;&gt;#&lt;/a&gt; 程序计数器（ &lt;code&gt;Program Counter Register&lt;/code&gt; ）&lt;/h2&gt;
&lt;p&gt;关于程序计数器我们已经得知：占用内存较小，现成私有。它是唯一没有 &lt;code&gt;OutOfMemoryError&lt;/code&gt;  异常的区域。&lt;/p&gt;
&lt;p&gt;程序计数器的作用可以看做是当前线程所执行的&lt;strong&gt;字节码的行号指示器&lt;/strong&gt;，字节码解释器工作时就是通过改变计数器的值来选取下一条字节码指令。其中，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖计数器来完成。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;  虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。&lt;/p&gt;
&lt;img data-src=&#34;/posts/57681474/2022-02-16-20-50-23.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为 “线程私有” 的内存。&lt;/p&gt;
&lt;p&gt;如果线程正在执行的是一个 &lt;code&gt;Java&lt;/code&gt;  方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是 &lt;code&gt;Natvie&lt;/code&gt;  方法，这个计数器值则为空（ &lt;code&gt;Undefined&lt;/code&gt; ）。&lt;/p&gt;
&lt;h2 id=&#34;虚拟机栈jvm-stacks&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#虚拟机栈jvm-stacks&#34;&gt;#&lt;/a&gt; 虚拟机栈（ &lt;code&gt;JVM Stacks&lt;/code&gt; ）&lt;/h2&gt;
&lt;p&gt;虚拟机栈线程私有，生命周期与线程相同。&lt;/p&gt;
&lt;p&gt;栈帧 ( &lt;code&gt;Stack Frame&lt;/code&gt; ) 是用于支持虚拟机进行方法调用和方法执行的数据结构。栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用至执行完成的过程，都对应着一个栈帧在虚拟机栈里从入栈到出栈的过程。&lt;/p&gt;
&lt;img data-src=&#34;/posts/57681474/2022-02-16-20-50-34.png&#34; class=&#34;&#34;&gt;
&lt;p&gt;局部变量表 ( &lt;code&gt;Local Variable Table&lt;/code&gt; ) 是一组变量值存储空间，用于 &lt;code&gt;存放方法参数&lt;/code&gt; 和 &lt;code&gt;方法内定义&lt;/code&gt; 的局部变量。包括 8 种基本数据类型、对象引用（ &lt;code&gt;reference&lt;/code&gt;  类型）和 &lt;code&gt;returnAddress&lt;/code&gt;  类型（指向一条字节码指令的地址）。&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;64位&lt;/code&gt; 长度的 &lt;code&gt;long&lt;/code&gt;  和 &lt;code&gt;double&lt;/code&gt;  类型的数据会占用 2 个局部变量空间（ &lt;code&gt;Slot&lt;/code&gt; ），其余的数据类型只占用 &lt;code&gt;1&lt;/code&gt;  个。&lt;/p&gt;
&lt;p&gt;如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 &lt;code&gt;StackOverflowError&lt;/code&gt;  异常；如果虚拟机栈动态扩展时无法申请到足够的内存时会抛出 &lt;code&gt;OutOfMemoryError&lt;/code&gt;  异常。&lt;/p&gt;
&lt;p&gt;操作数栈 ( &lt;code&gt;Operand Stack&lt;/code&gt; ) 也称作操作栈，是一个 &lt;code&gt;后入先出栈(LIFO)&lt;/code&gt; 。随着方法执行和字节码指令的执行，会从局部变量表或对象实例的字段中复制常量或变量写入到操作数栈，再随着计算的进行将栈中元素出栈到局部变量表或者返回给方法调用者，也就是出栈 / 入栈操作。&lt;/p&gt;
&lt;p&gt;动态链接： &lt;code&gt;Java&lt;/code&gt;  虚拟机栈中，每个栈帧都包含一个指向运行时常量池中该栈所属方法的符号引用，持有这个引用的目的是为了支持方法调用过程中的动态链接 ( &lt;code&gt;Dynamic Linking&lt;/code&gt; )。&lt;/p&gt;
&lt;p&gt;方法返回：无论方法是否正常完成，都需要返回到方法被调用的位置，程序才能继续进行。&lt;/p&gt;
&lt;h2 id=&#34;本地方法栈native-method-stacks&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本地方法栈native-method-stacks&#34;&gt;#&lt;/a&gt; 本地方法栈（ &lt;code&gt;Native Method Stacks&lt;/code&gt; ）&lt;/h2&gt;
&lt;p&gt;本地方法栈（ &lt;code&gt;Native Method Stacks&lt;/code&gt; ）与虚拟机栈作用相似，也会抛出 &lt;code&gt;StackOverflowError和OutOfMemoryError&lt;/code&gt;  异常。&lt;/p&gt;
&lt;p&gt;区别在于虚拟机栈为虚拟机执行 &lt;code&gt;Java&lt;/code&gt;  方法（ &lt;code&gt;字节码&lt;/code&gt; ）服务，而本地方法栈是为虚拟机使用到的 &lt;code&gt;Native&lt;/code&gt;  方法服务。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小结&#34;&gt;#&lt;/a&gt; 小结&lt;/h2&gt;
&lt;img data-src=&#34;/posts/57681474/2022-02-16-20-50-46.png&#34; class=&#34;&#34;&gt;
 ]]></description>
        </item>
    </channel>
</rss>
