{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"spring\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/89080a8e/",
            "url": "https://smile1231.github.io/posts/89080a8e/",
            "title": "Spring Bean的生命周期",
            "date_published": "2022-02-15T14:34:55.000Z",
            "content_html": "<h1 id=\"spring-bean的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#spring-bean的生命周期\">#</a>  <code>Spring Bean</code>  的生命周期</h1>\n<p>大致流程：</p>\n<p>本文将从以下两方面去帮助理解  <code>Bean</code>  的生命周期：</p>\n<span id=\"more\"></span>\n<ul>\n<li>生命周期的概要流程：对  <code>Bean</code>  的生命周期进行概括，并且结合代码来理解；</li>\n<li>扩展点的作用：详细介绍  <code>Bean</code>  生命周期中所涉及到的扩展点的作用。</li>\n</ul>\n<h2 id=\"生命周期的概要流程\"><a class=\"markdownIt-Anchor\" href=\"#生命周期的概要流程\">#</a> 生命周期的概要流程</h2>\n<p><code>Bean</code>  的生命周期概括起来就是  <code>4</code>  个阶段：</p>\n<ul>\n<li>\n<p>实例化（ <code>Instantiation</code> ）</p>\n</li>\n<li>\n<p>属性赋值（ <code>Populate</code> ）</p>\n</li>\n<li>\n<p>初始化（ <code>Initialization</code> ）</p>\n</li>\n<li>\n<p>销毁（ <code>Destruction</code> ）</p>\n</li>\n<li>\n<p>实例化：第  <code>1</code>  步，实例化一个  <code>bean</code>  对象；</p>\n</li>\n<li>\n<p>属性赋值：第  <code>2</code>  步，为  <code>bean</code>  设置相关属性和依赖；</p>\n</li>\n<li>\n<p>初始化：第  <code>3~7</code>  步，步骤较多，其中第  <code>5、6</code>  步为初始化操作，第  <code>3、4</code>  步为在初始化前执行，第  <code>7</code>  步在初始化后执行，该阶段结束，才能被用户使用；</p>\n</li>\n<li>\n<p>销毁：第  <code>8~10</code>  步，第 <code>8</code>  步不是真正意义上的销毁（还没使用呢），而是先在使用前注册了销毁的相关调用接口，为了后面第 <code>9、10</code>  步真正销毁  <code>bean</code>  时再执行相应的方法。</p>\n</li>\n</ul>\n<p>下面我们结合代码来直观的看下，在  <code>doCreateBean()</code>  方法中能看到依次执行了这  <code>4</code>  个阶段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd, <span class=\"keyword\">final</span> <span class=\"meta\">@Nullable</span> Object[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> BeanCreationException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 1. 实例化</span></span><br><span class=\"line\">    BeanWrapper instanceWrapper = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instanceWrapper == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Object exposedObject = bean;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 属性赋值</span></span><br><span class=\"line\">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 初始化</span></span><br><span class=\"line\">        exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 4. 销毁-注册回调接口</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> exposedObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于初始化包含了第  <code>3~7</code>  步，较复杂，所以我们进到  <code>initializeBean()</code>  方法里具体看下其过程（注释的序号对应图中序号）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">initializeBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> Object bean, <span class=\"meta\">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 检查 Aware 相关接口并设置相关依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">            invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;, getAccessControlContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 4. BeanPostProcessor 前置处理</span></span><br><span class=\"line\">    Object wrappedBean = bean;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 5. 若实现 InitializingBean 接口，调用 afterPropertiesSet() 方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 6. 若配置自定义的 init-method方法，则执行</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">            (mbd != <span class=\"keyword\">null</span> ? mbd.getResourceDescription() : <span class=\"keyword\">null</span>),</span><br><span class=\"line\">            beanName, <span class=\"string\">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 7. BeanPostProceesor 后置处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrappedBean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"comment\">// AbstractAutowireCapableBeanFactory.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">initializeBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> Object bean, <span class=\"meta\">@Nullable</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 检查 Aware 相关接口并设置相关依赖</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">            invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;, getAccessControlContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        invokeAwareMethods(beanName, bean);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 4. BeanPostProcessor 前置处理</span></span><br><span class=\"line\">    Object wrappedBean = bean;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 5. 若实现 InitializingBean 接口，调用 afterPropertiesSet() 方法</span></span><br><span class=\"line\">    <span class=\"comment\">// 6. 若配置自定义的 init-method方法，则执行</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanCreationException(</span><br><span class=\"line\">            (mbd != <span class=\"keyword\">null</span> ? mbd.getResourceDescription() : <span class=\"keyword\">null</span>),</span><br><span class=\"line\">            beanName, <span class=\"string\">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 7. BeanPostProceesor 后置处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd == <span class=\"keyword\">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class=\"line\">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrappedBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在  <code>invokInitMethods()</code>  方法中会检查  <code>InitializingBean</code>  接口和  <code>init-method</code>  方法，销毁的过程也与其类似：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DisposableBeanAdapter.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 9. 若实现 DisposableBean 接口，则执行 destory()方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.invokeDisposableBean) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">                    ((DisposableBean) <span class=\"keyword\">this</span>.bean).destroy();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;, <span class=\"keyword\">this</span>.acc);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ((DisposableBean) <span class=\"keyword\">this</span>.bean).destroy();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 10. 若配置自定义的 detory-method 方法，则执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.destroyMethod != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        invokeCustomDestroyMethod(<span class=\"keyword\">this</span>.destroyMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.destroyMethodName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Method methodToInvoke = determineDestroyMethod(<span class=\"keyword\">this</span>.destroyMethodName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (methodToInvoke != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            invokeCustomDestroyMethod(ClassUtils.getInterfaceMethodIfPossible(methodToInvoke));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>从  <code>Spring</code>  的源码我们可以直观的看到其执行过程，而我们记忆其过程便可以从这  <code>4</code>  个阶段出发，实例化、属性赋值、初始化、销毁。其中细节较多的便是初始化，涉及了  <code>Aware、BeanPostProcessor、InitializingBean、init-method</code>  的概念。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3psMXpsMnpsMy9hcnRpY2xlL2RldGFpbHMvMTA1MDQ0OTU0\">拓展点讲解</span></p>\n",
            "tags": [
                "Java面试",
                "Spring"
            ]
        }
    ]
}