{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"mybatis\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/cb74ceb6/",
            "url": "https://smile1231.github.io/posts/cb74ceb6/",
            "title": "Mybatis批量插入",
            "date_published": "2022-08-21T13:57:09.000Z",
            "content_html": "<p>关于<code>Mybatia</code>实现插入<code>List</code>,每次一段时间就忘了，这次决定记载下来。</p>\n<blockquote>\n<p><code>Mapper层接口</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bulkInsertAppTable</span><span class=\"params\">(List&lt;AppTable&gt; appTableList)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Xml实现</code></p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bulkInsertAppTable&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span></span><br><span class=\"line\">insert into app_table</span><br><span class=\"line\">    (application_name,create_by)</span><br><span class=\"line\">values</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;appTableList&quot;</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;index&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;appTable&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">        (</span><br><span class=\"line\">            #&#123;appTable.applicationName,jdbcType=VARCHAR&#125;,</span><br><span class=\"line\">            #&#123;appTable.createBy,jdbcType=VARCHAR&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/31d0fffb/",
            "url": "https://smile1231.github.io/posts/31d0fffb/",
            "title": "Mybatis中#号和$号的区别",
            "date_published": "2022-02-15T14:33:42.000Z",
            "content_html": "<h1 id=\"Mybatis中-号和-号的区别\"><a href=\"#Mybatis中-号和-号的区别\" class=\"headerlink\" title=\"Mybatis中#号和$号的区别\"></a><code>Mybatis</code>中<code>#</code>号和<code>$</code>号的区别</h1><h2 id=\"默认会用引号将参数引起来\"><a href=\"#默认会用引号将参数引起来\" class=\"headerlink\" title=\"#{} 默认会用引号将参数引起来\"></a><code>#&#123;&#125;</code> 默认会用引号将参数引起来</h2><h2 id=\"单纯替代\"><a href=\"#单纯替代\" class=\"headerlink\" title=\"${}单纯替代\"></a><code>$&#123;&#125;</code>单纯替代</h2><p>示例：</p>\n<span id=\"more\"></span>\n\n<p>之前的写法，<code>select * from product_tree_v pv where pv.product_code in(#&#123;product&#125;)</code></p>\n<p>预编译出来的结果：<code>select * from product_tree_v pv where pv.product_code in ？</code>;</p>\n<p><code>#&#123;&#125;</code>被当作一个占位符了，而参数前后也会被加上引号。</p>\n<p>运行时的<code>sql</code>是：<code>select * from product_tree_v pv where pv.product_code in(&#39;‘p001&#39;,&#39;p002&#39;,&#39;p003&#39;&#39;)</code>;</p>\n<p>所以无论如何都是查不到数据的。</p>\n<p>换成<code>$&#123;&#125;</code>：<code>select * from product_tree_v pv where pv.product_code in($product&#125;)</code>;</p>\n<p>预编译出来的结果 ：<code>select * from product_tree_v pv where pv.product_code in (‘p001&#39;,&#39;p002&#39;,&#39;p003&#39;)</code>;</p>\n<p>这样就是纯粹的将参数传进去，没有做任何的转义操作。这才是我们真正想要的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>mybatis</code>作为<code>ORM</code>框架，从性能，系统维护性，实用性上来说，都是非常优秀的，</p>\n<p>其所有的<code>sql</code>在执行前都会通过数据库驱动进行预编译，这样<code>DBMS</code>就可以不用编译直接接收参数运行，</p>\n<p>而<code>#</code>和<code>$</code>号的区别在预编译后就能看出来了，<code>#&#123;&#125;</code>预编译完是占位符<code>?</code>，而<code>$&#123;&#125;</code>预编译完就是传进来的参数。</p>\n<h2 id=\"的优点：\"><a href=\"#的优点：\" class=\"headerlink\" title=\"#{}的优点：\"></a><code>#&#123;&#125;</code>的优点：</h2><p>  使用<code>#&#123;&#125;</code>可以预防<code>sql</code>攻击，而<code>$&#123;&#125;</code>却不能</p>\n<p>例如 <code>select * from $&#123;tablename&#125; </code>  如果传入的是 <code>product; drop product;</code></p>\n<p>那么你的表数据就会被无声无息的干掉了。</p>\n<p>使用<code>$&#123;&#125;</code>的场景：</p>\n<ol>\n<li><p>作为<code>in</code>条件时，</p>\n</li>\n<li><p>参数为<code>int</code>类型并且数据库中字段的类型是<code>number</code>，</p>\n</li>\n<li><p>表名</p>\n</li>\n<li><p><code>order by $&#123;&#125;</code>，排序字段</p>\n</li>\n</ol>\n<p><code>--------------------------ps----------------------------</code></p>\n<p><code>&lt;![CDATA[]]&gt;</code>的用法，在该符号内的语句，将不会被当成字符串来处理，而是直接当成<code>sql</code>语句，比如有大于，小于号，要执行一个存储过程都需要加上这个。</p>\n",
            "tags": [
                "Java面试",
                "Mybatis"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/c112412d/",
            "url": "https://smile1231.github.io/posts/c112412d/",
            "title": "Mybatis封装成Map结果",
            "date_published": "2022-02-13T13:42:17.000Z",
            "content_html": "<h1 id=\"Mybatis封装成Map结果\"><a href=\"#Mybatis封装成Map结果\" class=\"headerlink\" title=\"Mybatis封装成Map结果\"></a><code>Mybatis</code>封装成<code>Map</code>结果</h1><h2 id=\"Dao层\"><a href=\"#Dao层\" class=\"headerlink\" title=\"Dao层\"></a><code>Dao</code>层</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapKey(&quot;cityCode&quot;)</span></span><br><span class=\"line\"><span class=\"function\">Map&lt;String,InvoiceSubjectRuleCity&gt; <span class=\"title\">bulkSelectRuleCityByRuleIdList</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;ruleIdList&quot;)</span> List&lt;Long&gt; ruleIdList)</span></span>;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bulkSelectRuleCityByRuleIdList&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class=\"line\">    select</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class=\"line\">    from t_invoice_subject_rule_city</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">      rule_id in</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;ruleIdList&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;ruleId&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">           #&#123;ruleId&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>返回结果即为<code>Map</code>类型</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/2edf7887/",
            "url": "https://smile1231.github.io/posts/2edf7887/",
            "title": "MybatisPlus实现分页查询",
            "date_published": "2022-02-13T13:41:49.000Z",
            "content_html": "<h1 id=\"MybatisPlus实现分页查询\"><a href=\"#MybatisPlus实现分页查询\" class=\"headerlink\" title=\"MybatisPlus实现分页查询\"></a><code>MybatisPlus</code>实现分页查询</h1><h2 id=\"分页区别\"><a href=\"#分页区别\" class=\"headerlink\" title=\"分页区别\"></a>分页区别</h2><p>分页查询每个人程序猿几乎都使用过，但是有部分同学不懂什么是物理分页和逻辑分页。</p>\n<p>物理分页：相当于执行了<code>limit</code>分页语句，返回部分数据。物理分页只返回部分数据占用内存小，能够获取数据库最新的状态，实施性比较强，一般适用于数据量比较大，数据更新比较频繁的场景。</p>\n<p>逻辑分页：一次性把全部的数据取出来，通过程序进行筛选数据。如果数据量大的情况下会消耗大量的内存，由于逻辑分页只需要读取数据库一次，不能获取数据库最新状态，实施性比较差，适用于数据量小，数据稳定的场合。</p>\n<p>那么MP中的物理分页怎么实现呢？ 往下看往下看</p>\n<span id=\"more\"></span>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>需要新建一个<code>JavaConfig</code>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisPlusConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页插件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PaginationInterceptor <span class=\"title\">paginationInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PaginationInterceptor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体分页实现\"><a href=\"#具体分页实现\" class=\"headerlink\" title=\"具体分页实现\"></a>具体分页实现</h2><p><code>MP</code>的<code>Wrapper</code>提供了两种分页查询的方式，源码如下：</p>\n<img data-src=\"/blog/posts/2edf7887/2022-02-13-22-35-05.png\" class=\"\">\n\n<p>可见两个分页方法参数都是一致的，只是返回参数略有不同，具体选择根据实际业务为准。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectByPage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> QueryWrapper();</span><br><span class=\"line\">    wrapper.like(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;雨&quot;</span>).lt(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Page&lt;User&gt; page = <span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//IPage&lt;User&gt; userIPage = userMapper.selectPage(page, wrapper);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    IPage&lt;Map&lt;String, Object&gt;&gt; mapIPage = userMapper.selectMapsPage(page, wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总页数&quot;</span>+mapIPage.getPages());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总记录数&quot;</span>+mapIPage.getTotal());</span><br><span class=\"line\">    List&lt;Map&lt;String, Object&gt;&gt; records = mapIPage.getRecords();</span><br><span class=\"line\">    records.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上分页查询执行<code>sql</code>如下，先是查询了一次总记录数，然后在查询的数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span>  Preparing: <span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> ? <span class=\"keyword\">AND</span> age <span class=\"operator\">&lt;</span> ? </span><br><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span> Parameters: <span class=\"operator\">%</span>雨<span class=\"operator\">%</span>(String), <span class=\"number\">40</span>(<span class=\"type\">Integer</span>)</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>    Columns: <span class=\"built_in\">COUNT</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>        <span class=\"type\">Row</span>: <span class=\"number\">2</span></span><br><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span>  Preparing: <span class=\"keyword\">SELECT</span> id,name,age,email,manager_id,create_time <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> ? <span class=\"keyword\">AND</span> age <span class=\"operator\">&lt;</span> ? LIMIT ?,? </span><br><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span> Parameters: <span class=\"operator\">%</span>雨<span class=\"operator\">%</span>(String), <span class=\"number\">40</span>(<span class=\"type\">Integer</span>), <span class=\"number\">0</span>(Long), <span class=\"number\">2</span>(Long)</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>    Columns: id, name, age, email, manager_id, create_time</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>        <span class=\"type\">Row</span>: <span class=\"number\">2</span>, 张雨琪, <span class=\"number\">31</span>, zjq<span class=\"variable\">@baomidou</span>.com, <span class=\"number\">1088248166370832385</span>, <span class=\"number\">2021</span><span class=\"number\">-01</span><span class=\"number\">-14</span> <span class=\"number\">09</span>:<span class=\"number\">15</span>:<span class=\"number\">15</span></span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>        <span class=\"type\">Row</span>: <span class=\"number\">3</span>, 刘红雨, <span class=\"number\">31</span>, lhm<span class=\"variable\">@baomidou</span>.com, <span class=\"number\">1088248166370832385</span>, <span class=\"number\">2021</span><span class=\"number\">-01</span><span class=\"number\">-14</span> <span class=\"number\">09</span>:<span class=\"number\">48</span>:<span class=\"number\">16</span></span><br><span class=\"line\">DEBUG<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>      Total: <span class=\"number\">2</span></span><br><span class=\"line\">总页数<span class=\"number\">1</span></span><br><span class=\"line\">总记录数<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>现在我们有需求只要查询数据即可， 不关心总记录数等，如果使用默认的方式就消耗不必要的性能。那么解决办法也是很简单的，只需要在创建<code>page</code>对象时传入第三个参数为<code>false</code>即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page&lt;User&gt; page = <span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "分页查询"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/31dc52e1/",
            "url": "https://smile1231.github.io/posts/31dc52e1/",
            "title": "MyBatis之分页查询：MyBatis PageHelper",
            "date_published": "2022-02-13T13:40:27.000Z",
            "content_html": "<h1 id=\"MyBatis之分页查询：MyBatis-PageHelper\"><a href=\"#MyBatis之分页查询：MyBatis-PageHelper\" class=\"headerlink\" title=\"MyBatis之分页查询：MyBatis PageHelper\"></a><code>MyBatis</code>之分页查询：<code>MyBatis PageHelper</code></h1><h2 id=\"1-添加依赖\"><a href=\"#1-添加依赖\" class=\"headerlink\" title=\"1. 添加依赖\"></a>1. 添加依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--MyBatis 分页插件: MyBatis PageHelper--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-添加配置\"><a href=\"#2-添加配置\" class=\"headerlink\" title=\"2. 添加配置\"></a>2. 添加配置</h2><span id=\"more\"></span>\n\n<p>在<code>application.properties</code>配置文件中添加<code>MyBatis PageHelper</code>的配置项</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PageHelper 分页插件配置</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.helperDialect</span>=<span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.reasonable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.supportMethodsArguments</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.params</span>=<span class=\"string\">count=countSql</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-分页查询\"><a href=\"#3-分页查询\" class=\"headerlink\" title=\"3. 分页查询\"></a>3. 分页查询</h2><p>通过 <code>MyBatis PageHelper</code> 进行分页查询实际上非常简单，只需在<code>service(或mapper)</code>方法执行查询前，调用一次 <code>PageHelper.startPage(pageNum,pageSize)</code> <code>来设置分页查询参数即可，其中pageNum</code> 为记录页数，<code>pageSize</code> 为单页记录数量。此时<code>service(或mapper)</code>方法的查询结果就是分页后的结果了。如果期望获得相关的分页信息，还可以将查询结果封装到<code>PageInfo</code>对象中，以获得总页数、总记录数、当前页数等相关分页信息</p>\n<p>现在通过一个实际示例，来具体演示操作，这里我们提供了一个分页查询的<code>Controller</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageNum 记录页数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageSize 单页记录数量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/findPage&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">findPage</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> <span class=\"keyword\">int</span> pageNum, <span class=\"meta\">@RequestParam</span> <span class=\"keyword\">int</span> pageSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置分页查询参数</span></span><br><span class=\"line\">    PageHelper.startPage(pageNum,pageSize);</span><br><span class=\"line\">    List&lt;Student&gt; studentList = studentService.findList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Student student : studentList) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;element : &quot;</span> + student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 封装分页查询结果到 PageInfo 对象中以获取相关分页信息</span></span><br><span class=\"line\">    PageInfo pageInfo = <span class=\"keyword\">new</span> PageInfo( studentList );</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总页数: &quot;</span> + pageInfo.getPages());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总记录数: &quot;</span> + pageInfo.getTotal());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;当前页数: &quot;</span> + pageInfo.getPageNum());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;当前页面记录数量: &quot;</span> + pageInfo.getSize());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pageInfo.getList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>service</code>方法中所调用的查询<code>SQL</code>如下所示，可以看到，<code>SQL</code>中无需使用<code>limit</code>语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;studentResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.aaron.springbootdemo.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findList&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;studentResultMap&quot;</span>&gt;</span>    </span><br><span class=\"line\">    SELECT * FROM user</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>NOTE:</code> </p>\n</blockquote>\n<p><code>PageHelper.startPage(pageNum,pageSize)</code> 只对其后的第一次<code>SQL</code>查询进行分页。故若需进行分页查询，必须每次在<code>service（或mapper）</code>方法执行<code>SQL</code>查询前调用<code>PageHelper.startPage(pageNum,pageSize) </code>方法</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "分页查询"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/105c245f/",
            "url": "https://smile1231.github.io/posts/105c245f/",
            "title": "Mybatis使用Sql进行模糊查询",
            "date_published": "2022-02-13T13:39:52.000Z",
            "content_html": "<h1 id=\"Mybatis使用Sql进行模糊查询\"><a href=\"#Mybatis使用Sql进行模糊查询\" class=\"headerlink\" title=\"Mybatis使用Sql进行模糊查询\"></a><code>Mybatis</code>使用<code>Sql</code>进行模糊查询</h1><h2 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from user where username like #&#123;username&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>模糊查询的测试方法</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; users = userDao.findByName(<span class=\"string\">&quot;%王%&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/105c245f/2022-02-13-22-29-15.png\" class=\"\">\n\n<p>我们在配置文件中没有加入<code>%</code>来作为模糊查询的条件，所以在传入字符串实参时，就需要给定模糊查询的标<br>识%。配置文件中的<code>#&#123;username&#125;</code>也只是一个占位符，所以 <code>SQL</code> 语句显示为<code>“？”</code>。</p>\n<h2 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;string&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span>&gt;</span></span><br><span class=\"line\"> select * from user where username like &#x27;%$&#123;value&#125;%&#x27;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们在上面将原来的<code>#&#123;&#125;</code>占位符，改成了<code>&#123;value&#125;</code>。注意如果用模糊查询的这种写法，那么<code>$&#123;value&#125;</code>的写法就是固定的，不能写成其它名字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行查询一个方法</span></span><br><span class=\"line\">List&lt;User&gt; users = userDao.findByName(<span class=\"string\">&quot;王&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<img data-src=\"/blog/posts/105c245f/2022-02-13-22-29-25.png\" class=\"\">\n\n<p>可以发现，我们在程序代码中就不需要加入模糊查询的匹配符%了，这两种方式的实现效果是一样的，但执行<br>的语句是不一样的。</p>\n<h2 id=\"方式三\"><a href=\"#方式三\" class=\"headerlink\" title=\"方式三\"></a>方式三</h2><p>说明：通过前两种写法，虽然可以解决模糊查询的问题，但是还是不好，因为通过<code>%</code>的方式会引发<code>sql</code>注入的问题，现在的期望是：既能够解决<code>sql</code>注入又能在配置文件中写<code>%</code>该如何实现呢，可以借助<code>mysql</code>的函数。</p>\n<p>修改 <code>SQL</code> 语句的配置，配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;string&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span>&gt;</span></span><br><span class=\"line\"> select * from user where username like concat(&#x27;%&#x27;,#&#123;username&#125;,&#x27;%&#x27;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>*#&#123; &#125;</code>是预编译处理，<code>MyBatis</code>在处理<code>#&#123; &#125;</code>时，它会将<code>sql</code>中的<code>#&#123; &#125;</code>替换为<code>？</code>，然后调用<code>PreparedStatement</code>的<code>set</code>方法来赋值，传入字符串后，会在值两边加上单引号，使用占位符的方式提高效率，可以防止<code>sql</code>注入。<br><code>$&#123;&#125;:</code>表示拼接<code>sql</code>串，将接收到参数的内容不加任何修饰拼接在<code>sql</code>中，可能引发<code>sql</code>注入。</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "模糊查询"
            ]
        }
    ]
}