<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://smile1231.github.io</id>
    <title>JIN MAO &#39;s Blog • Posts by &#34;uml&#34; category</title>
    <link href="https://smile1231.github.io" />
    <updated>2022-02-13T13:52:04.000Z</updated>
    <category term="生物信息" />
    <category term="基因编辑" />
    <category term="SAP" />
    <category term="前端" />
    <category term="Css" />
    <category term="Java" />
    <category term="Cache" />
    <category term="Cookie" />
    <category term="Session" />
    <category term="Java面试" />
    <category term="DDD" />
    <category term="领域驱动设计" />
    <category term="DisPlay属性" />
    <category term="Docker" />
    <category term="Corn" />
    <category term="blog" />
    <category term="hexo" />
    <category term="next" />
    <category term="IDEA" />
    <category term="FastJson" />
    <category term="SpringBoot" />
    <category term="JavaScript" />
    <category term="Html" />
    <category term="Jvm" />
    <category term="函数式接口" />
    <category term="Jenkins" />
    <category term="CI/CD" />
    <category term="java" />
    <category term="calender" />
    <category term="map" />
    <category term="Stream流" />
    <category term="Springboot" />
    <category term="Assert" />
    <category term="Python" />
    <category term="Jupyter" />
    <category term="Machine Learning" />
    <category term="LeetCode" />
    <category term="算法" />
    <category term="递归" />
    <category term="numpy" />
    <category term="pandas" />
    <category term="sklearn" />
    <category term="Mybatis" />
    <category term="Linux" />
    <category term="分页查询" />
    <category term="Nginx" />
    <category term="Spring" />
    <category term="模糊查询" />
    <category term="Spoken English" />
    <category term="SrpingBoot" />
    <category term="事务" />
    <category term="TypeScript" />
    <category term="WebPack" />
    <category term="master" />
    <category term="文件上传" />
    <category term="Groovy" />
    <category term="UML" />
    <category term="Ubuntu" />
    <category term="Mysql" />
    <category term="VsCode" />
    <category term="Shell" />
    <category term="VSCODE" />
    <category term="快捷键" />
    <category term="Vue" />
    <category term="Stream" />
    <category term="git" />
    <category term="日期" />
    <category term="线程池" />
    <category term="ubuntu" />
    <category term="虚拟机" />
    <category term="二分查找" />
    <category term="数据挖掘" />
    <category term="Hadoop" />
    <category term="操作系统" />
    <category term="EasyExcel" />
    <category term="node" />
    <category term="JVM" />
    <category term="Yaml" />
    <category term="junit" />
    <category term="Hexo" />
    <category term="数据库" />
    <category term="Mysql事务" />
    <category term="Git" />
    <category term="冒泡排序" />
    <category term="动态规划" />
    <category term="git,npm,node" />
    <category term="Google" />
    <category term="多线程" />
    <category term="堆排序" />
    <category term="幂等性" />
    <category term="流" />
    <category term="快速排序" />
    <category term="归并排序" />
    <category term="正则表达式" />
    <category term="直接插入排序" />
    <category term="vue" />
    <category term="选择排序" />
    <category term="Java 面试" />
    <category term="数据结构" />
    <category term="阻塞队列" />
    <category term="Spring事务" />
    <category term="JDK" />
    <category term="动态代理" />
    <category term="Date" />
    <category term="ArrayList" />
    <category term="接口" />
    <category term="SpringMvc" />
    <category term="排序" />
    <category term="执行计划" />
    <category term="HashMap" />
    <category term="Email" />
    <category term="设计模式" />
    <category term="cheatsheet" />
    <entry>
        <id>https://smile1231.github.io/posts/f610585/</id>
        <title>UML:类图关系总结</title>
        <link rel="alternate" href="https://smile1231.github.io/posts/f610585/"/>
        <content type="html">&lt;h1 id=&#34;uml类图关系总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#uml类图关系总结&#34;&gt;#&lt;/a&gt;  &lt;code&gt;UML&lt;/code&gt; : 类图关系总结&lt;/h1&gt;
&lt;p&gt;UML 类图几种关系的总结，泛化 = 实现 &amp;gt; 组合 &amp;gt; 聚合 &amp;gt; 关联 &amp;gt; 依赖&lt;br&gt;
在 UML 类图中，常见的有以下几种关系:  &lt;code&gt;泛化（Generalization）&lt;/code&gt; ,  &lt;code&gt;实现（Realization）&lt;/code&gt; ， &lt;code&gt;关联（Association)&lt;/code&gt; ， &lt;code&gt;聚合（Aggregation）&lt;/code&gt; ， &lt;code&gt;组合(Composition)&lt;/code&gt; ， &lt;code&gt;依赖(Dependency)&lt;/code&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;h2 id=&#34;1-泛化generalization&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-泛化generalization&#34;&gt;#&lt;/a&gt; 1. 泛化（ &lt;code&gt;Generalization&lt;/code&gt; ）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;【泛化关系】：是一种&lt;strong&gt;继承&lt;/strong&gt;关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【箭头指向】：带三角箭头的实线，箭头指向父类.&lt;/p&gt;
  &lt;img data-src=&#34;/posts/f610585/2022-02-13-23-24-28.png&#34; class=&#34;&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2实现realization&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2实现realization&#34;&gt;#&lt;/a&gt; 2. 实现（ &lt;code&gt;Realization&lt;/code&gt; ）&lt;/h2&gt;
&lt;p&gt;【实现关系】：在这里插入图片描述是一种类与接口的关系，表示类是接口所有特征和行为的实现.&lt;/p&gt;
&lt;p&gt;【箭头指向】：带三角箭头的虚线，箭头指向接口&lt;/p&gt;
&lt;img data-src=&#34;/posts/f610585/2022-02-13-23-24-40.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;3关联association&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3关联association&#34;&gt;#&lt;/a&gt; 3. 关联（ &lt;code&gt;Association&lt;/code&gt; )&lt;/h2&gt;
&lt;p&gt;【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。&lt;/p&gt;
&lt;p&gt;【代码体现】：成员变量&lt;/p&gt;
&lt;p&gt;【箭头及指向】：带普通箭头的实心线，指向被拥有者&lt;/p&gt;
  &lt;img data-src=&#34;/posts/f610585/2022-02-13-23-24-49.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;4聚合aggregation&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4聚合aggregation&#34;&gt;#&lt;/a&gt; 4. 聚合（ &lt;code&gt;Aggregation&lt;/code&gt; ）&lt;/h2&gt;
&lt;p&gt;【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。&lt;br&gt;
聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。&lt;br&gt;
【代码体现】：成员变量&lt;br&gt;
【箭头及指向】：带空心菱形的实心线，菱形指向整体&lt;/p&gt;
&lt;img data-src=&#34;/posts/f610585/2022-02-13-23-24-59.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;5组合composition&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5组合composition&#34;&gt;#&lt;/a&gt; 5. 组合 ( &lt;code&gt;Composition&lt;/code&gt; )&lt;/h2&gt;
&lt;p&gt;【组合关系】：是&lt;strong&gt;整体与部分&lt;/strong&gt;的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。&lt;br&gt;
组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。&lt;br&gt;
【代码体现】：成员变量&lt;/p&gt;
&lt;p&gt;【箭头及指向】：带实心菱形的实线，菱形指向整体&lt;/p&gt;
&lt;img data-src=&#34;/posts/f610585/2022-02-13-23-25-08.png&#34; class=&#34;&#34;&gt;
&lt;h2 id=&#34;6-依赖dependency&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-依赖dependency&#34;&gt;#&lt;/a&gt; 6. 依赖 ( &lt;code&gt;Dependency&lt;/code&gt; )&lt;/h2&gt;
&lt;p&gt;只要在类中用到了对方，他们之间就存在依赖关系&lt;/p&gt;
&lt;img data-src=&#34;/posts/f610585/2022-02-13-23-25-20.png&#34; class=&#34;&#34;&gt;
&lt;img data-src=&#34;/posts/f610585/2022-02-13-23-25-27.png&#34; class=&#34;&#34;&gt;
</content>
        <category term="UML" />
        <updated>2022-02-13T13:52:04.000Z</updated>
    </entry>
</feed>
