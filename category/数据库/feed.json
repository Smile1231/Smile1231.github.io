{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"数据库\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/666b2933/",
            "url": "https://smile1231.github.io/posts/666b2933/",
            "title": "面试之旅关于数据库",
            "date_published": "2022-02-16T13:13:54.000Z",
            "content_html": "<h1 id=\"常见面试题整理数据库篇每位开发者必备\"><a class=\"markdownIt-Anchor\" href=\"#常见面试题整理数据库篇每位开发者必备\">#</a> 常见面试题整理–数据库篇（每位开发者必备）</h1>\n<img data-src=\"/posts/666b2933/2022-02-16-21-40-29.png\" class=\"\">\n<h2 id=\"1-什么是存储过程有哪些优缺点\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是存储过程有哪些优缺点\">#</a> 1. 什么是存储过程？有哪些优缺点？</h2>\n<span id=\"more\"></span>\n<p>存储过程是一些预编译的 <code>SQL</code>  语句。</p>\n<p>更加直白的理解：存储过程可以说是一个记录集，它是由一些 <code>T-SQL</code>  语句组成的代码块，这些 <code>T-SQL</code>  语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。</p>\n<p>存储过程是一个预编译的代码块，执行效率比较高<br>\n一个存储过程替代大量 <code>T_SQL</code>  语句 ，可以降低网络通信量，提高通信速率<br>\n可以一定程度上确保数据安全</p>\n<h2 id=\"2-索引是什么有什么作用以及优缺点\"><a class=\"markdownIt-Anchor\" href=\"#2-索引是什么有什么作用以及优缺点\">#</a> 2. 索引是什么？有什么作用以及优缺点</h2>\n<p>索引是对数据库表中一或多个列的值进行排序的结构，是帮助 <code>MySQL</code>  高效获取数据的数据结构</p>\n<p>你也可以这样理解：索引就是加快检索表中数据的方法。数据库的索引类似于书籍的索引。在书籍中，索引允许用户不必翻阅完整个书就能迅速地找到所需要的信息。在数据库中，索引也允许数据库程序迅速地找到表中的数据，而不必扫描整个数据库。</p>\n<p><code>MySQL</code>  数据库几个基本的索引类型：<em> <code>普通索引</code> 、 <code>唯一索引</code> 、 <code>主键索引</code> 、 <code>全文索引</code> </em></p>\n<ul>\n<li>索引加快数据库的检索速度</li>\n<li>索引降低了插入、删除、修改等维护任务的速度</li>\n<li>唯一索引可以确保每一行数据的唯一性</li>\n<li>通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能</li>\n<li>索引需要占物理和数据空间</li>\n</ul>\n<h2 id=\"3-什么是事务\"><a class=\"markdownIt-Anchor\" href=\"#3-什么是事务\">#</a> 3. 什么是事务？</h2>\n<p>事务（ <code>Transaction</code> ）是并发控制的基本单位。所谓的事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性。</p>\n<h2 id=\"4-数据库的乐观锁和悲观锁是什么\"><a class=\"markdownIt-Anchor\" href=\"#4-数据库的乐观锁和悲观锁是什么\">#</a> 4. 数据库的乐观锁和悲观锁是什么？</h2>\n<p>数据库管理系统（ <code>DBMS</code> ）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。</p>\n<p>乐观并发控制 (乐观锁) 和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p>\n<ul>\n<li>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</li>\n<li>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</li>\n</ul>\n<h2 id=\"5-使用索引查询一定能提高查询的性能吗为什么\"><a class=\"markdownIt-Anchor\" href=\"#5-使用索引查询一定能提高查询的性能吗为什么\">#</a> 5. 使用索引查询一定能提高查询的性能吗？为什么</h2>\n<p>通常，通过索引查询数据比全表扫描要快。但是我们也必须注意到它的代价.</p>\n<p>索引需要空间来存储，也需要定期维护，每当有记录在表中增减或索引列被修改时，索引本身也会被修改。这意味着每条记录的 <code>INSERT,DELETE,UPDATE</code>  将为此多付出 <code>4,5次</code> 的磁盘 <code>I/O</code> . 因为索引需要额外的存储空间和处理，那些不必要的索引反而会使查询反应时间变慢。使用索引查询不一定能提高查询性能，索引范围查询 ( <code>INDEX RANGE SCAN</code> ) 适用于两种情况:</p>\n<p>基于一个范围的检索，一般查询返回结果集小于表中记录数的 <code>30%</code>  基于非唯一性索引的检索</p>\n<h2 id=\"6-简单说一说drop-delete与truncate的区别\"><a class=\"markdownIt-Anchor\" href=\"#6-简单说一说drop-delete与truncate的区别\">#</a> 6. 简单说一说 <code>drop</code> 、 <code>delete</code>  与 <code>truncate</code>  的区别</h2>\n<p><code>SQL</code>  中的 <code>drop</code> 、 <code>delete</code> 、 <code>truncate</code>  都表示删除，但是三者有一些差别</p>\n<ul>\n<li><code>delete</code>  和 <code>truncate</code>  只删除表的数据不删除表的结构</li>\n<li>速度，一般来说:  <code>drop &gt; truncate &gt;delete</code></li>\n<li><code>delete</code>  语句是 <code>dml</code> , 这个操作会放到 <code>rollback segement</code>  中，事务提交之后才生效；</li>\n<li>如果有相应的 <code>trigger</code> , 执行的时候将被触发.  <code>truncate,drop</code>  是 <code>ddl</code> , 操作立即生效，原数据不放到 <code>rollback segment</code>  中，不能回滚。操作不触发 <code>trigger</code> .</li>\n</ul>\n<h2 id=\"7-drop-delete与truncate分别在什么场景之下使用\"><a class=\"markdownIt-Anchor\" href=\"#7-drop-delete与truncate分别在什么场景之下使用\">#</a> 7.  <code>drop</code> 、 <code>delete</code>  与 <code>truncate</code>  分别在什么场景之下使用？</h2>\n<ul>\n<li>不再需要一张表的时候，用 <code>drop</code></li>\n<li>想删除部分数据行时候，用 <code>delete</code> ，并且带上 <code>where</code>  子句</li>\n<li>保留表而删除所有数据的时候用 <code>truncate</code></li>\n</ul>\n<h2 id=\"8-超键-候选键-主键-外键分别是什么\"><a class=\"markdownIt-Anchor\" href=\"#8-超键-候选键-主键-外键分别是什么\">#</a> 8. 超键、候选键、主键、外键分别是什么？</h2>\n<ul>\n<li>\n<p>超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。</p>\n</li>\n<li>\n<p>候选键：是最小超键，即没有冗余元素的超键。</p>\n</li>\n<li>\n<p>主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（ <code>Null</code> ）。</p>\n</li>\n<li>\n<p>外键：在一个表中存在的另一个表的主键称此表的外键。</p>\n</li>\n</ul>\n<h2 id=\"9-什么是视图以及视图的使用场景有哪些\"><a class=\"markdownIt-Anchor\" href=\"#9-什么是视图以及视图的使用场景有哪些\">#</a> 9. 什么是视图？以及视图的使用场景有哪些？</h2>\n<blockquote>\n<p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p>\n</blockquote>\n<blockquote>\n<p>只暴露部分字段给访问者，所以就建一个虚表，就是视图。<br>\n查询的数据来源于不同的表，而查询者希望以统一的方式查询，这样也可以建立一个视图，把多个表查询结果联合起来，查询者只需要直接从视图中获取数据，不必考虑数据来源于不同表所带来的差异</p>\n</blockquote>\n<h2 id=\"10-说一说三个范式\"><a class=\"markdownIt-Anchor\" href=\"#10-说一说三个范式\">#</a> 10. 说一说三个范式。</h2>\n<p><strong>第一范式（ <code>1NF</code> ）</strong>：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。</p>\n<p><strong>第二范式（ <code>2NF</code> ）</strong>：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</p>\n<p><strong>第三范式（ <code>3NF</code> ）</strong>：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如 果存在 <code>&quot;A → B → C&quot;</code>  的决定关系，则 <code>C</code>  传递函数依赖于 <code>A</code> 。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段  <code>x </code> → 非关键字段 <code>y</code></p>\n",
            "tags": [
                "Java面试",
                "数据库"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/377b6f7d/",
            "url": "https://smile1231.github.io/posts/377b6f7d/",
            "title": "关于mysql中对Json类型字段进行筛选查询",
            "date_published": "2022-01-11T03:15:26.000Z",
            "content_html": "<p>最近用到了对 <code>Mysql</code>  中对 <code>JSON</code>  类型的字符串进行筛选，这边做个简单的总结:</p>\n<p>添加筛查条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> JSON_EXTRACT(JSON_String,<span class=\"string\">&#x27;$.json字段名&#x27;</span>) <span class=\"operator\">=</span> <span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">and</span> ...</span><br></pre></td></tr></table></figure>\n<p><code>JSON</code>  筛查加更新</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update table_name <span class=\"keyword\">set</span> JSON_String <span class=\"operator\">=</span> json_replace(JSON_String, <span class=\"string\">&#x27;$.json字段名&#x27;</span>, <span class=\"string\">&#x27;jinmao&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">where</span> id <span class=\"keyword\">in</span> (?,?)</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n",
            "tags": [
                "Mysql",
                "数据库"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/96e2d97b/",
            "url": "https://smile1231.github.io/posts/96e2d97b/",
            "title": "mysql 获取当前日期及格式化",
            "date_published": "2021-12-16T09:16:50.000Z",
            "content_html": "<p><code>MYSQL</code>  获取当前日期及日期格式</p>\n<ul>\n<li>获取系统日期：  <code>NOW()</code></li>\n<li>格式化日期：  <code>DATE_FORMAT(date, format)</code></li>\n</ul>\n<p>注： date：时间字段<br>\n format：日期格式</p>\n<span id=\"more\"></span>\n<ul>\n<li>\n<p><code>select now();</code></p>\n<p>输出 <code>2021-12-16 17:20:21</code></p>\n</li>\n<li>\n<p><code>select date_format(now(),'%Y-%m-%d');</code></p>\n<p>输出 <code>2021-12-16</code></p>\n</li>\n</ul>\n<p>根据 <code>format</code>  字符串格式化 <code>date</code>  值:</p>\n<table>\n<thead>\n<tr>\n<th>参数值</th>\n<th>效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>%S, %s</code></td>\n<td>两位数字形式的秒（ <code>00,01, ..., 59</code> ）</td>\n</tr>\n<tr>\n<td><code>%I, %i</code></td>\n<td>两位数字形式的分（  <code>00,01, ..., 59</code> ）</td>\n</tr>\n<tr>\n<td><code>%H</code></td>\n<td>两位数字形式的小时， <code>24</code>  小时（ <code>00,01, ..., 23</code> ）</td>\n</tr>\n<tr>\n<td><code>%h</code></td>\n<td>两位数字形式的小时， <code>12</code>  小时（ <code>01,02, ..., 12</code> ）</td>\n</tr>\n<tr>\n<td><code>%k</code></td>\n<td>数字形式的小时， <code>24</code>  小时（ <code>0,1, ..., 23</code> ）</td>\n</tr>\n<tr>\n<td><code>%l</code></td>\n<td>数字形式的小时， <code>12</code>  小时（ <code>1, 2, ..., 12</code> ）</td>\n</tr>\n<tr>\n<td><code>%T</code></td>\n<td><code>24</code>  小时的时间形式（ <code>hh:mm:ss</code> ）</td>\n</tr>\n<tr>\n<td><code>%r</code></td>\n<td><code>12</code>  小时的时间形式（ <code>hh:mm:ss AM</code>  或 <code>hh:mm:ss PM</code> ）</td>\n</tr>\n<tr>\n<td><code>%p</code></td>\n<td><code>AM</code>  或 <code>PM</code></td>\n</tr>\n<tr>\n<td><code>%W</code></td>\n<td>一周中每一天的名称（ <code>Sunday, Monday, ..., Saturday</code> ）</td>\n</tr>\n<tr>\n<td><code>%a</code></td>\n<td>一周中每一天名称的缩写（ <code>Sun, Mon, ..., Sat</code> ）</td>\n</tr>\n<tr>\n<td><code>%d</code></td>\n<td>两位数字表示月中的天数（ <code>00, 01,..., 31</code> ）</td>\n</tr>\n<tr>\n<td><code>%e</code></td>\n<td>数字形式表示月中的天数（ <code>1, 2， ..., 31</code> ）</td>\n</tr>\n<tr>\n<td><code>%D</code></td>\n<td>英文后缀表示月中的天数（ <code>1st, 2nd, 3rd,...</code> ）</td>\n</tr>\n<tr>\n<td><code>%w</code></td>\n<td>以数字形式表示周中的天数（  <code>0 = Sunday, 1=Monday, ..., 6=Saturday</code> ）</td>\n</tr>\n<tr>\n<td><code>%j</code></td>\n<td>以三位数字表示年中的天数（  <code>001, 002, ..., 366</code> ）</td>\n</tr>\n<tr>\n<td><code>%U</code></td>\n<td>周（ <code>0, 1, 52</code> ），其中 <code>Sunday</code>  为周中的第一天</td>\n</tr>\n<tr>\n<td><code>%u</code></td>\n<td>周（ <code>0, 1, 52</code> ），其中 <code>Monday</code>  为周中的第一天</td>\n</tr>\n<tr>\n<td><code>%M</code></td>\n<td>月名（ <code>January, February, ..., December</code> ）</td>\n</tr>\n<tr>\n<td><code>%b</code></td>\n<td>缩写的月名（  <code>January, February,...., December</code> ）</td>\n</tr>\n<tr>\n<td><code>%m</code></td>\n<td>两位数字表示的月份（ <code>01, 02, ..., 12</code> ）</td>\n</tr>\n<tr>\n<td><code>%c</code></td>\n<td>数字表示的月份（ <code>1, 2, ...., 12</code> ）</td>\n</tr>\n<tr>\n<td><code>%Y</code></td>\n<td>四位数字表示的年份</td>\n</tr>\n<tr>\n<td><code>%y</code></td>\n<td>两位数字表示的年份</td>\n</tr>\n<tr>\n<td><code>%%</code></td>\n<td>直接值 <code>“%”</code></td>\n</tr>\n</tbody>\n</table>\n",
            "tags": []
        },
        {
            "id": "https://smile1231.github.io/posts/388f5c14/",
            "url": "https://smile1231.github.io/posts/388f5c14/",
            "title": "mysql日期加减",
            "date_published": "2021-12-07T11:20:01.000Z",
            "content_html": "<h1 id=\"日期的加减\"><a class=\"markdownIt-Anchor\" href=\"#日期的加减\">#</a> 日期的加减</h1>\n<p><code>date_add</code>  和 <code>date_sub</code> <br>\n 语法为： <code>date_add(date,interval expr type)、date_sub(date,interval expr type)</code> <br>\n 其中常用的 type 的类型有： <code>second、minute、hour、day、month、year</code>  等</p>\n<p><code>date_add</code>  是对日期的增加，如果天数为负数时，则表示对日期减少，<br>\n <code>date_sub</code>  是对日期的减少，如果天数为负数时，则表示对日期增加<br>\n例如</p>\n<span id=\"more\"></span>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 获取日期 2020-04-07</span></span><br><span class=\"line\">curdate()</span><br><span class=\"line\"><span class=\"comment\">-- 获取日期加时间 2020-04-07 23:10:30</span></span><br><span class=\"line\">now()</span><br><span class=\"line\"><span class=\"comment\">-- 获取明天的日期 2020-04-08</span></span><br><span class=\"line\">date_add(curdate(),<span class=\"type\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">day</span>)</span><br><span class=\"line\"><span class=\"comment\">--或者</span></span><br><span class=\"line\">date_sub(curdate(),<span class=\"type\">interval</span> <span class=\"number\">-1</span> <span class=\"keyword\">day</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 获取明年的日期 2021-04-07</span></span><br><span class=\"line\">date_add(curdate(),<span class=\"type\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">year</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 或者</span></span><br><span class=\"line\">date_sub(curdate(),<span class=\"type\">interval</span> <span class=\"number\">-1</span> <span class=\"keyword\">year</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"日期的格式化\"><a class=\"markdownIt-Anchor\" href=\"#日期的格式化\">#</a> 日期的格式化</h1>\n<h2 id=\"date_format\"><a class=\"markdownIt-Anchor\" href=\"#date_format\">#</a>  <code>date_format</code></h2>\n<p>语法为： <code>date_format(date,format)，date</code>  参数是合法的日期。 <code>format </code> 规定日期 / 时间的输出格式。<br>\n常用的格式有：</p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%Y</td>\n<td>年，4 位</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>年，2 位</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>月，数值 (00-12)</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>月名</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>带有英文前缀的月中的天</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>月的天，数值 (00-31)</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>小时 (00-23)</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>小时 (01-12)</td>\n</tr>\n<tr>\n<td>%i</td>\n<td>分钟，数值 (00-59)</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>秒 (00-59)</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>秒 (00-59)</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 格式化当前日期 2020-04-07 23:23:23</span></span><br><span class=\"line\">date_format(now(),<span class=\"string\">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span> )</span><br></pre></td></tr></table></figure>\n<h1 id=\"日期的差值\"><a class=\"markdownIt-Anchor\" href=\"#日期的差值\">#</a> 日期的差值</h1>\n<h2 id=\"datediff\"><a class=\"markdownIt-Anchor\" href=\"#datediff\">#</a>  <code>datediff</code></h2>\n<p><code>DATEDIFF(date1，date2)</code>  返回起始时间  <code>date1</code>  和结束时间  <code>date2</code>  之间的天数（ <code>date2-date1</code> ，正负情况都存在）。 <code>date1</code>  和 <code> date2</code>  为日期或  <code>date-and-time </code> 表达式，计算差值时只会计算日期的差值，单位为天。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 当前时间2020-04-08，差值为-2</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> DATEDIFF(NOW(),<span class=\"string\">&#x27;2020-04-10&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">-- 当前时间2020-04-08，差值为2</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> DATEDIFF(NOW(),<span class=\"string\">&#x27;2020-04-06&#x27;</span>) </span><br></pre></td></tr></table></figure>\n<h2 id=\"timestampdiff\"><a class=\"markdownIt-Anchor\" href=\"#timestampdiff\">#</a>  <code>timestampdiff</code></h2>\n<p>语法为： <code>TIMESTAMPDIFF(interval,datetime_expr1,datetime_expr2)。</code> <br>\n返回日期或日期时间表达式 <code>datetime_expr1 和datetime_expr2the </code> 之间的整数差。其结果的单位由 <code>interval</code>  参数给出。<br>\n常用的值有：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FRAC_SECOND。表示间隔是毫秒</span><br><span class=\"line\"><span class=\"keyword\">SECOND</span>。秒</span><br><span class=\"line\"><span class=\"keyword\">MINUTE</span>。分钟</span><br><span class=\"line\"><span class=\"keyword\">HOUR</span>。小时</span><br><span class=\"line\"><span class=\"keyword\">DAY</span>。天</span><br><span class=\"line\">WEEK。星期</span><br><span class=\"line\"><span class=\"keyword\">MONTH</span>。月</span><br><span class=\"line\">QUARTER。季度</span><br><span class=\"line\"><span class=\"keyword\">YEAR</span>。年</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- now()值为 2020-04-08 23:20:20</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> TIMESTAMPDIFF(<span class=\"keyword\">DAY</span>,NOW(),<span class=\"string\">&#x27;2020-04-10 23:23:23&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">-- 结果为2，相差两天，取整数</span></span><br><span class=\"line\"><span class=\"comment\">-- 其他单位同理</span></span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://smile1231.github.io/posts/60f024c8/",
            "url": "https://smile1231.github.io/posts/60f024c8/",
            "title": "关于sql执行计划",
            "date_published": "2021-11-08T08:54:09.000Z",
            "content_html": "<p>最近受到客服的一个反馈：某个功能长时间无反馈，响应时间达到了 <code>20s</code>  以上，通过调用日志发现，某条 <code>sql</code>  查询竟然花费了 <code>12s</code>  的时间，而且查询了两次，于是准备通过执行计划对此进行找方向调优.</p>\n<h1 id=\"什么是执行计划\"><a class=\"markdownIt-Anchor\" href=\"#什么是执行计划\">#</a> 什么是执行计划</h1>\n<h2 id=\"1-mysql逻辑结构先知\"><a class=\"markdownIt-Anchor\" href=\"#1-mysql逻辑结构先知\">#</a> 1.  <code>MySQL</code>  逻辑结构先知</h2>\n<span id=\"more\"></span>\n<p>关于 <code>MySQL</code>  的逻辑结构，将其理解为四层，就像项目分层一样，每一层处理不同的业务逻辑，先看图后说话：</p>\n<img data-src=\"/posts/60f024c8/2021-11-17-15-24-30.png\" class=\"\">\n<p>上图概述：</p>\n<ul>\n<li>\n<p>客户端：这里指连接 <code>MySQL</code>  各种形式，如 <code>.Net</code>  中使用的 <code>ADO</code>  连接、 <code>Java</code>  使用 <code>JDBC</code>  连接等； <code>MySQL</code>  是客户端和服务器模式，前提先建立连接，才能传输数据，处理相关逻辑；</p>\n</li>\n<li>\n<p>业务逻辑：在 <code>MySQL</code>  内部有很多模块组成，分别处理相关业务逻辑；</p>\n</li>\n<li>\n<p>连接管理：负责连接认证、连接数判断、连接池处理等业务逻辑处理；</p>\n</li>\n<li>\n<p>查询缓存：当一个 <code>SQL</code>  进来时，如果开启查询缓存功能， <code>MySQL</code>  会优先去查询缓存中检查是否有数据匹配，如果匹配上，就不会再去解析对应的 <code>SQL</code>  啦，但如果语句中有用户自定义函数、存储函数、用户变量、临时表、 <code>mysql</code>  库中的系统表时，都不会走缓存； 对于查询缓存来说，在 <code>MySQL8.0</code>  已经去除，官方回应的是在一定场景上，查询缓存会导致性能上的瓶颈。</p>\n</li>\n<li>\n<p>解析器：对于一个 <code>SQL</code>  语句， <code>MySql</code>  根据语法规则需要对其进行解析，并生成一个内部能识别的解析树；</p>\n</li>\n<li>\n<p>优化器：负责对解析器得到的解析树进行优化， <code>MySQL</code>  会根据内部算法找到一个 <code>MySQL</code>  认为最优的执行计划，后续就按照这个执行计划执行。所以后续我们分析的就是 <code>MySQL</code>  针对 <code>SQL</code>  语句选择出来的最优执行计划，结合业务，根据规则对 <code>SQL</code>  进行优化，从而让 <code>SQL</code>  语句在 <code>MySQL</code>  内部达到真正的最优。</p>\n</li>\n<li>\n<p>执行器：得到执行计划之后，就会找到对应的存储引擎，根据执行计划给出的指令依次执行。</p>\n</li>\n<li>\n<p>存储引擎：数据的存储和提取最后是靠存储引擎； <code>MySQL</code>  内部实现可插拔式的存储引擎机制，不同的存储引擎执行不同的逻辑；</p>\n</li>\n<li>\n<p>物理文件：数据存储的最终位置，即磁盘上；协同存储引擎对数据进行读写操作。</p>\n</li>\n</ul>\n<p>关于 <code>MySql</code>  的逻辑结构，以上只是简单描述，业务逻辑层的功能模块远不止上面提到的，小伙伴有兴趣可以专门研究一下，这里的目的就是为了体现 <code>SQL</code>  语句到服务器上时经过的几个关键步骤，方便后续优化的理解。</p>\n<h2 id=\"2sql语句的中关键字执行顺序须知\"><a class=\"markdownIt-Anchor\" href=\"#2sql语句的中关键字执行顺序须知\">#</a> 2. <code>SQL</code>  语句的中关键字执行顺序须知</h2>\n<p>在编写一条查询语句时，习惯性的从头到尾开始敲出来，应该都是从 <code>select</code>  开始吧，但似乎没太注意它们真正的执行顺序；既然要优化，肯定需要得知道一条 <code>SQL</code>  语句大概的执行流程，结合执行计划，目的就更加清晰啦；上一张一看就明白的图：</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-15-55-16.png\" class=\"\">\n<p>关键字简述：</p>\n<ul>\n<li><code>FROM</code> ：确定数据来源，即指定表；</li>\n<li><code>JOIN...ON</code> ：确定关联表和关联条件；</li>\n<li><code>WHERE</code> ：指定过滤条件，过滤出满足条件的数据；</li>\n<li><code>GROUP BY</code> ：按指定的字段对过滤后的数据进行分组；</li>\n<li><code>HAVING</code> ：对分组之后的数据指定过滤条件；</li>\n<li><code>SELECT</code> ：查找想要的字段数据；</li>\n<li><code>DISTINCT</code> ：针对查找出来的数据进行去重；</li>\n<li><code>ORDER BY</code> ：对去重后的数据指定字段进行排序；</li>\n<li><code>LIMIT</code> ：对去重后的数据限制获取到的条数，即分页；<br>\n好啦，大概了解 <code>MySQL</code>  的逻辑结构和 <code>SQL</code>  查询关键字执行顺序之后，接下来就可以好好说说执行计划啦。</li>\n</ul>\n<h2 id=\"3-好好说说执行计划\"><a class=\"markdownIt-Anchor\" href=\"#3-好好说说执行计划\">#</a> 3. 好好说说执行计划</h2>\n<p>通过上面的逻辑结构，当一个 <code>SQL</code>  发送到 <code>MySQL</code>  执行时，需要经过内部优化器进行优化，而使用 <code>explain</code>  关键字可以模拟优化器执行 <code>SQL</code>  查询语句，从而知道 <code>MySQL</code>  是如何处理 <code>SQL</code>  的，即 <code>SQL</code>  的执行计划；根据 <code>explain</code>  提供的执行计划信息分析 <code>SQL</code>  语句，然后进行相关优化操作。接下来的示例演示用到五张表： <code>USER(用户表)、MENU(菜单表)、ROLE(角色表)、USER_ROLE(用户角色关系表)、ROLE_MENU(角色菜单关系表)、ADDR(用户地址表，这里认为和用户一一对应)、FRIEND(朋友表，一对多关系)</code> ，它们的关系这里就不详细说了吧，小伙伴肯定都明白，这是管控菜单权限的五张基础表和两个基础信息表；</p>\n<p>表 DDL</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">SQLyog Ultimate - MySQL GUI v8.2 </span></span><br><span class=\"line\"><span class=\"comment\">MySQL - 5.5.27 : Database - sql_optimization</span></span><br><span class=\"line\"><span class=\"comment\">*********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*!40101 SET NAMES utf8 */</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*!40101 SET SQL_MODE=&#x27;&#x27;*/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class=\"line\"><span class=\"comment\">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class=\"line\"><span class=\"comment\">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class=\"line\"><span class=\"comment\">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE <span class=\"comment\">/*!32312 IF NOT EXISTS*/</span>`sql_optimization` <span class=\"comment\">/*!40100 DEFAULT CHARACTER SET utf8 COLLATE utf8_bin */</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">USE `sql_optimization`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `addr` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `addr`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `addr` (</span><br><span class=\"line\">  `ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `ADDR` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`ID`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span><span class=\"operator\">=</span>utf8_bin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Data for the table `addr` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `friend` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `friend`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `friend` (</span><br><span class=\"line\">  `USER_ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `FRIEND_ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  KEY `idx_user_id` (`USER_ID`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span><span class=\"operator\">=</span>utf8_bin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Data for the table `friend` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `menu` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `menu`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `menu` (</span><br><span class=\"line\">  `ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `MENU_NAME` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `MENU_URL` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`ID`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span><span class=\"operator\">=</span>utf8_bin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Data for the table `menu` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span>  <span class=\"keyword\">into</span> `menu`(`ID`,`MENU_NAME`,`MENU_URL`) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">&#x27;用户新增&#x27;</span>,<span class=\"string\">&#x27;api/User/Add&#x27;</span>),(<span class=\"number\">2</span>,<span class=\"string\">&#x27;用户删除&#x27;</span>,<span class=\"string\">&#x27;api/User/Delete&#x27;</span>),(<span class=\"number\">3</span>,<span class=\"string\">&#x27;用户修改&#x27;</span>,<span class=\"string\">&#x27;api/User/Update&#x27;</span>),(<span class=\"number\">4</span>,<span class=\"string\">&#x27;用户查询&#x27;</span>,<span class=\"string\">&#x27;api/User/Query&#x27;</span>),(<span class=\"number\">5</span>,<span class=\"string\">&#x27;角色新增&#x27;</span>,<span class=\"string\">&#x27;api/Role/Add&#x27;</span>),(<span class=\"number\">6</span>,<span class=\"string\">&#x27;角色修改&#x27;</span>,<span class=\"string\">&#x27;api/Role/Update&#x27;</span>),(<span class=\"number\">7</span>,<span class=\"string\">&#x27;角色删除&#x27;</span>,<span class=\"string\">&#x27;api/Role/Delete&#x27;</span>),(<span class=\"number\">8</span>,<span class=\"string\">&#x27;角色查询&#x27;</span>,<span class=\"string\">&#x27;api/Role/Query&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `role` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `role`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `role` (</span><br><span class=\"line\">  `ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `ROLE_NAME` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`ID`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span><span class=\"operator\">=</span>utf8_bin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Data for the table `role` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span>  <span class=\"keyword\">into</span> `role`(`ID`,`ROLE_NAME`) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">&#x27;admin&#x27;</span>),(<span class=\"number\">2</span>,<span class=\"string\">&#x27;test&#x27;</span>),(<span class=\"number\">3</span>,<span class=\"string\">&#x27;custmor&#x27;</span>),(<span class=\"number\">4</span>,<span class=\"string\">&#x27;role1&#x27;</span>),(<span class=\"number\">5</span>,<span class=\"string\">&#x27;role2&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `role_menu` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `role_menu`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `role_menu` (</span><br><span class=\"line\">  `ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `ROLE_ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `MENU_ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`ID`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span><span class=\"operator\">=</span>utf8_bin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Data for the table `role_menu` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span>  <span class=\"keyword\">into</span> `role_menu`(`ID`,`ROLE_ID`,`MENU_ID`) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>),(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>),(<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>),(<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">4</span>),(<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>),(<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>),(<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>),(<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>),(<span class=\"number\">9</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>),(<span class=\"number\">10</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>),(<span class=\"number\">11</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),(<span class=\"number\">12</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>),(<span class=\"number\">13</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>),(<span class=\"number\">14</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>),(<span class=\"number\">15</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>),(<span class=\"number\">16</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>),(<span class=\"number\">17</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>),(<span class=\"number\">18</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `user` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `<span class=\"keyword\">user</span>`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `<span class=\"keyword\">user</span>` (</span><br><span class=\"line\">  `ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `USER_NAME` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `USER_PWD` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">COLLATE</span> utf8_bin <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`ID`),</span><br><span class=\"line\">  KEY `idx_user_name` (`USER_NAME`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span><span class=\"operator\">=</span>utf8_bin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Data for the table `user` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span>  <span class=\"keyword\">into</span> `<span class=\"keyword\">user</span>`(`ID`,`USER_NAME`,`USER_PWD`) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"string\">&#x27;Zoe&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>),(<span class=\"number\">2</span>,<span class=\"string\">&#x27;Coder&#x27;</span>,<span class=\"string\">&#x27;23452a&#x27;</span>),(<span class=\"number\">3</span>,<span class=\"string\">&#x27;Code综艺圈&#x27;</span>,<span class=\"string\">&#x27;231235&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Table structure for table `user_role` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `user_role`;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `user_role` (</span><br><span class=\"line\">  `ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `USER_ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `ROLE_ID` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`ID`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span><span class=\"operator\">=</span>utf8_bin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Data for the table `user_role` */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span>  <span class=\"keyword\">into</span> `user_role`(`ID`,`USER_ID`,`ROLE_ID`) <span class=\"keyword\">values</span> (<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>),(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>),(<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),(<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>),(<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class=\"line\"><span class=\"comment\">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class=\"line\"><span class=\"comment\">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class=\"line\"><span class=\"comment\">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br></pre></td></tr></table></figure>\n<p>演示用的版本是 <code>MySql5.5</code> ，各版本之间会有不同，所以小伙伴用的版本测试结果不一样的时候，千万别骂我渣哦；其实重要的是查看的思路，整体是大同小异。(求原谅…)</p>\n<p>通过 <code>explain</code>  会输出如下信息，很多小伙伴只关注红框标注部分 (即索引)，但其实是不够的，接下来就一个一个好好说说。</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-00-46.png\" class=\"\">\n<ul>\n<li>\n<p><code>id</code></p>\n<p>这个 <code>id</code>  和咱们平时表结构设计的主键 <code>ID</code>  不太一样，这里的 <code>id</code>  代表了每一条 <code>SQL</code>  语句执行计划中表加载的顺序，分为三种情况：</p>\n<blockquote>\n<p><code>id</code>  相同的时候：这时是从上到下依次执行；</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> t.ID,t.USER_NAME,r.ROLE_NAME <span class=\"keyword\">FROM</span> <span class=\"keyword\">USER</span> t </span><br><span class=\"line\">\t<span class=\"keyword\">JOIN</span> USER_ROLE tr <span class=\"keyword\">ON</span> t.ID <span class=\"operator\">=</span> tr.USER_ID</span><br><span class=\"line\">\t<span class=\"keyword\">JOIN</span> ROLE r <span class=\"keyword\">ON</span> tr.ROLE_ID <span class=\"operator\">=</span> r.ID</span><br></pre></td></tr></table></figure>\n<p>执行如下语句，得如下结果：</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-03-34.png\" class=\"\">\n<p>如上图所示， <code>id</code>  一样，从上到下依次执行，所对应表加载顺序为 <code>t-&gt;tr-&gt;r</code>  (这里的表是别名)；</p>\n<pre><code>&gt; `id`不同的时候：当`id`不同的时，`id`越大的越先执行；\n</code></pre>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> t.ID,t.MENU_NAME,t.MENU_URL <span class=\"keyword\">FROM</span> MENU t</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> t.ID <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> MENU_ID <span class=\"keyword\">FROM</span> ROLE_MENU rm </span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> rm.ROLE_ID <span class=\"keyword\">IN</span>(<span class=\"keyword\">SELECT</span> ROLE_ID <span class=\"keyword\">FROM</span> USER_ROLE ur <span class=\"keyword\">WHERE</span> ur.USER_ID<span class=\"operator\">=</span><span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<p>子查询会导致 <code>id</code>  递增，结果如下：</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-05-35.png\" class=\"\">\n<p>如上图所示， <code>id</code>  递增啦，所对应表的加载顺序为 <code>ur-&gt;rm-&gt;t</code>  (这里的表是别名)；</p>\n<pre><code>&gt; `id`相同和不同同时存在时：id相同的认为是同一组，还是从上往下加载；不一样的情况还是越大越优先执行\n</code></pre>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> t.ROLE_ID,m.ID,m.MENU_NAME,m.MENU_URL <span class=\"keyword\">FROM</span> </span><br><span class=\"line\">\t(<span class=\"keyword\">SELECT</span> ROLE_ID <span class=\"keyword\">FROM</span> USER_ROLE <span class=\"keyword\">WHERE</span> USER_ID<span class=\"operator\">=</span><span class=\"number\">3</span>) t,ROLE_MENU rm,MENU m</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> t.ROLE_ID<span class=\"operator\">=</span>rm.ROLE_ID</span><br><span class=\"line\">\t<span class=\"keyword\">AND</span> rm.MENU_ID<span class=\"operator\">=</span>m.ID</span><br></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-06-53.png\" class=\"\">\n<p>如上图所示， <code>id</code>  有一样的，也有不同的，则对应表的加载顺序为 <code>USER_ROLE-&gt;derived2 (衍生表)-&gt;rm-&gt;m</code> ；衍生表表名后面的 <code>2</code>  代表的是 <code>id</code> ，所以可以通过衍生表表名后面的 <code>id</code>  知道是哪一步产生的，即 <code>derived2</code>  衍生表是 <code>id</code>  为 <code>2</code>  的这一步产生的。</p>\n<ul>\n<li><code>select_type</code></li>\n</ul>\n<p><code>select_type</code>  是表示每一步的查询类型，方便分析人员很直接的看到当前步骤执行的是什么查询，有多种类型，见下图：</p>\n<blockquote>\n<p>1&gt;  <code>SIMPLE</code> ：简单的 <code>SELECT</code>  查询，不包含子查询或 <code>UNION</code>  的那种；</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">USER</span>;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-13-44.png\" class=\"\">\n<blockquote>\n<p>2&gt;  <code>PRIMARY</code> ：查询语句中包含其他子查询或 <code>UNION</code>  操作，那最外层的 <code>SELECT</code>  就被标记为该类型；</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-15-17.png\" class=\"\">\n<p>如上图所示，查询中包含子查询，最外层查询被标记为 <code>PRIMARY</code> ；</p>\n<blockquote>\n<p>3&gt;  <code>SUBQUERY</code> ：在 <code>SELECT</code>  或 <code>WHERE</code>  中包含的子查询会被标记为该类型；</p>\n</blockquote>\n<p>见 <code>PRIMARY</code>  图，当存在子查询时，会将子查询标记为 <code>SUBQUERY</code></p>\n<blockquote>\n<p>4&gt;  <code>MATERIALIZED</code> ：被物化的子查询，即针对对应的子查询将其物化为一个临时表；</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> t.ID,t.MENU_NAME,t.MENU_URL <span class=\"keyword\">FROM</span> MENU t</span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> t.ID <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> MENU_ID <span class=\"keyword\">FROM</span> ROLE_MENU rm </span><br><span class=\"line\">\t\t<span class=\"keyword\">WHERE</span> rm.ROLE_ID <span class=\"keyword\">IN</span>(<span class=\"keyword\">SELECT</span> ROLE_ID <span class=\"keyword\">FROM</span> USER_ROLE ur <span class=\"keyword\">WHERE</span> ur.USER_ID<span class=\"operator\">=</span><span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<p>测试物化用的是 <code>MySQL8.0</code> ，和 <code>5.*</code>  版本有所不同，输出结果如下：</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-16-49.png\" class=\"\">\n<p>如上图所示，将子查询物化为一个临时表 <code>subquery2</code> ，这个功能是可以通过设置优化器对应的开关的。</p>\n<blockquote>\n<p>5&gt;  <code>DERIVED</code> ：在 <code>FROM</code>  之后的子查询会被标记为该类型，同样会把结果放在一个临时表中</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> tm.MENU_NAME,rm.ROLE_ID <span class=\"keyword\">FROM</span> </span><br><span class=\"line\">\t(<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> MENU <span class=\"keyword\">WHERE</span> ID <span class=\"operator\">&gt;</span><span class=\"number\">3</span> ) tm ,ROLE_MENU rm </span><br><span class=\"line\">\t<span class=\"keyword\">WHERE</span> tm.ID<span class=\"operator\">=</span>rm.MENU_ID <span class=\"keyword\">AND</span> rm.ROLE_ID<span class=\"operator\">=</span><span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-17-39.png\" class=\"\">\n<p>如图所示， <code>FROM</code>  后面跟的子查询就被标记为 <code>DERIVED</code> ，对应步骤产生的衍生表为 <code>derived2</code> 。高版本好像对其进行了优化， <code>8.0</code>  版本这种形式认为是简单查询。</p>\n<blockquote>\n<p>6&gt;  <code>UNION：UNION</code>  操作中，查询中处于内层的 <code>SELECT</code> ；</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXPLAIN <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> USER_ROLE T1 <span class=\"keyword\">WHERE</span> T1.USER_ID<span class=\"operator\">=</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> USER_ROLE T2 <span class=\"keyword\">WHERE</span> T2.USER_ID<span class=\"operator\">=</span><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-18-35.png\" class=\"\">\n<p>如上图所示，将第二个 <code>SELECT</code>  标注为 <code>UNION</code>  ，即对应加载的表为 <code>T2</code> 。</p>\n<blockquote>\n<p>7&gt;  <code>UNIOIN RESULT：UNION</code>  操作的结果，对应的 <code>id</code>  为空，代表的是一个结果集；</p>\n</blockquote>\n<p>见 <code>UNIOIN</code>  图， <code>UNIOIN RESULT</code>  代表的是 <code>UNION</code>  之后的结果，对应 <code>id</code>  为空。</p>\n<ul>\n<li><code>table</code></li>\n</ul>\n<p><code>table</code>  代表对应步骤加载的是哪张表，中间会出现一些临时表，比如 <code>subquery2、derived2</code>  等这种，最后的数字代表产生该表对应步骤的 <code>id</code> 。</p>\n<ul>\n<li><code>type</code></li>\n</ul>\n<p>代表访问类型， <code>MySQL</code>  内部将其分为多类型，常用的类型从好到差的顺序展示如下：</p>\n<p><strong> <code>system-&gt;const-&gt;eq_ef-&gt;ref-&gt;fulltext-&gt;ref_or_null-&gt;index_merge-&gt;unique_subquery-&gt;index_subquery-&gt;range-&gt;index-&gt;ALL;</code> </strong></p>\n<p>而在实际开发场景中，比较常见的几种类型如下： <code>const-&gt;eq_ref-&gt;ref-&gt;range-&gt;index-&gt;ALL</code>  (顺序从好到差)，通常优化至少在 <code>range</code>  级别或以上，比如 <code>ref</code>  算是比较不错的啦；</p>\n<p>上面说到的从好到差指的是查询性能。</p>\n<blockquote>\n<p>1&gt; <code>const</code> ：表示通过索引一次就找到数据，用于比较 <code>primary key</code>  或者 <code>unique</code>  索引，很快就能找到对应的数据；</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-21-32.png\" class=\"\">\n<blockquote>\n<p>2&gt; <code>eq_ref</code> ：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配，常用于主键或唯一索引扫描；</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-22-02.png\" class=\"\">\n<blockquote>\n<p>3&gt; <code>ref</code> ：非唯一索引扫描，返回匹配的所有行，如建立一个朋友维护表，维护用户对应的朋友，而在用户 <code>ID</code>  建立非唯一索引；</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-22-32.png\" class=\"\">\n<blockquote>\n<p>4&gt; <code>range</code> ：使用一个索引检索指定范围的行，一般在 <code>where</code>  语句中会出现 <code>between、&lt;、&gt;、in</code>  等范围查询；</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-22-59.png\" class=\"\">\n<blockquote>\n<p>5&gt; <code>index</code> ：全索引扫描，只遍历索引树；</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-23-30.png\" class=\"\">\n<blockquote>\n<p>6&gt; <code>ALL</code> ：全表扫描，找到匹配行。与 <code>index</code>  比较， <code>ALL</code>  需要扫描磁盘数据， <code>index</code>  值需要遍历索引树。</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-23-57.png\" class=\"\">\n<ul>\n<li><code>possible_keys</code></li>\n</ul>\n<p>显示可能被用到的索引，但在实际查询中不一定能用到； 查询涉及到字段，如果存在索引，会被列出，但如果使用的是覆盖索引，只会在 <code>key</code>  中列出；</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-24-29.png\" class=\"\">\n<ul>\n<li><code>key</code></li>\n</ul>\n<p>实际使用到的索引，如果为 <code>NULL</code>  代表没有使用到索引；这也是平时小伙伴判断是否用上索引的关键。</p>\n<ul>\n<li><code>key_len</code></li>\n</ul>\n<p><code>key_len</code>  表示索引使用的字节数，根据这个值可以判断索引的使用情况，特别是在组合索引的时候，判断该索引有多少部分被使用到，非常重要； <code>key_len</code>  是根据表定义计算而得。这里测试在 <code>USER</code>  表中对 <code>USER_NAME</code>  创建一个非唯一索引，如下：</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-25-14.png\" class=\"\">\n<p>这里 <code>key_len</code>  是这么计算的，前提是指定的字符串集是 <code>utf8</code> ，可变长 且允许为空，计算过程如下：</p>\n<p><code>128(设置的可变长度)*3(utf8占3字节)+1(允许为空标识占一个字节)+2(长度信息占两个字节)=387；</code></p>\n<p><code>key_len</code>  针对不同类型字段的计算规则不一样，这里用 <code>USER(用户表)</code>  简单计算为例：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>Key_len</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ID(int，不为空)</code></td>\n<td><code>4</code></td>\n<td><code>int</code>  为 <code>4</code>  个字节，不为空</td>\n</tr>\n<tr>\n<td><code>USER_NAME(varchar(128)，utf8，可为空)</code></td>\n<td><code>128*3+1+2=387</code></td>\n<td>可变为 <code>128，utf8</code>  每个占 <code>3</code>  字节， <code>1</code>  个字节标识可控，两个字节标识长度</td>\n</tr>\n</tbody>\n</table>\n<p>不同类型占用的字节不一样，字符集不一样占用的字节也不一样，允许为空的字段需要 <code>1</code>  个字节做标识，可变长度的字段需要 <code>2</code>  个字节标识长度。小伙伴照着这个思路就可以计算其他类型啦。</p>\n<ul>\n<li><code>ef</code></li>\n</ul>\n<p>显示索引的哪些列被引用了，通常是对应字段或 <code>const</code> ；</p>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-30-20.png\" class=\"\">\n<img data-src=\"/posts/60f024c8/2021-11-22-16-30-30.png\" class=\"\">\n<ul>\n<li><code>rows</code></li>\n</ul>\n<p>根据表统计信息和索引的使用情况，大概估算出找到所需记录数据所扫描的数据行数；不是所需数据的行数。</p>\n<ul>\n<li><code>Extra</code></li>\n</ul>\n<p>这个字段里包含一些其他信息，但也是优化 <code>SQL</code>  的重要参考，通常会出现以下几种信息：</p>\n<blockquote>\n<p><code>Using index</code> ：表示查询语句中用到了覆盖索引，不访问表的数据行，查询效率比较好。</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-31-08.png\" class=\"\">\n<p>如果用 <code>SELECT *</code>  进行查询，就不会有 <code>Using index</code> ，关于索引的介绍下篇好好说说。</p>\n<blockquote>\n<p><code>Using filesort</code> ：代表 <code>MySQL</code>  会使用一个外部索引对数据进行排序 (文件排序)，而不是使用表内索引。这种情况在 <code>SQL</code>  查询需要避免，最好不要在 <code>Extra</code>  中出现此类型：</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-32-01.png\" class=\"\">\n<p>通常会是使用 <code>ORDER BY</code>  语句导致，上图中使用无索引的字段进行排序会出现，同样如果使用有索引的字段，但用法不对也会出现，比如使用组合索引不规范时。</p>\n<ul>\n<li><code>Using temporary</code> ：产生临时表保存中间结果，这种 SQL 是不允许的，遇见数据量大的场景，基本就跑不动啦；</li>\n</ul>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-32-30.png\" class=\"\">\n<p>这种类型常常因为 <code>ORDER BY</code>  和  <code>GROUP BY</code>  导致，所以在进行数据排序和分组查询时，要注意索引的合理利用。</p>\n<blockquote>\n<p><code>Using where</code> ：使用 <code>where</code>  过滤数据，小伙伴试一把。</p>\n</blockquote>\n<blockquote>\n<p><code>Using join buffer</code> ：表示使用到了表连接缓存； 当表数据量大，可能导致 <code>buffer</code>  过大，查询效率比较低，这种情况注意在表连接字段上正确使用索引。</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-33-30.png\" class=\"\">\n<p>如果表连接查询慢时，在连接字段上加个索引试试，药到病除；</p>\n<blockquote>\n<p><code>impossible where</code> ：代表 <code>where</code>  后面的条件永远为 <code>false</code> ，匹配不到数据；</p>\n</blockquote>\n<img data-src=\"/posts/60f024c8/2021-11-22-16-33-42.png\" class=\"\">\n",
            "tags": [
                "数据库",
                "执行计划"
            ]
        }
    ]
}