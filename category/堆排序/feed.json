{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"堆排序\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/c2a5fdc5/",
            "url": "https://smile1231.github.io/posts/c2a5fdc5/",
            "title": "堆排序",
            "date_published": "2022-03-12T13:58:00.000Z",
            "content_html": "<h2 id=\"堆排序（不稳定）\"><a href=\"#堆排序（不稳定）\" class=\"headerlink\" title=\"堆排序（不稳定）\"></a>堆排序（不稳定）</h2><p>个人感觉堆排序还是挺难的，虽然会有演示动画<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pdGltZXRyYXZlbGVyLmdpdGh1Yi5pby8yMDE3LzA3LzE4LyVFNSU4NSVBQiVFNSVBNCVBNyVFNiU4RSU5MiVFNSVCQSU4RiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4MCVCQiVFNyVCQiU5MyVFNCVCOCU4RWphdmElRTUlQUUlOUUlRTclOEUlQjAvIyVFNSU5QiU5QiVFMyU4MCU4MSVFNSVBMCU4NiVFNiU4RSU5MiVFNSVCQSU4RiVFRiVCQyU4OEhlYXAtU29ydCVFRiVCQyU4OQ==\">链接</span></p>\n<p>但是从代码层面就没有那么好的通俗</p>\n<span id=\"more\"></span>\n\n<p>堆的含义就是：完全二叉树中任何一个非叶子节点的值均不大于（或不小于）其左，右孩子节点的值。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。因此我们可使用大顶堆进行升序排序, 使用小顶堆进行降序排序。</p>\n<h3 id=\"1、基本思想\"><a href=\"#1、基本思想\" class=\"headerlink\" title=\"1、基本思想\"></a>1、基本思想</h3><p>此处以大顶堆为例，堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走，再把剩余的元素调整成堆，找出最大的再移走，重复直至有序。</p>\n<h3 id=\"2、算法描述\"><a href=\"#2、算法描述\" class=\"headerlink\" title=\"2、算法描述\"></a>2、算法描述</h3><p>①. 先将初始序列<code>K[1..n]</code>建成一个大顶堆, 那么此时第一个元素<code>K1</code>最大, 此堆为初始的无序区.<br>②. 再将关键字最大的记录<code>K1</code> (即堆顶, 第一个元素)和无序区的最后一个记录 <code>Kn</code> 交换, 由此得到新的无序区<code>K[1..n−1]</code>和有序区<code>K[n]</code>, 且满足<code>K[1..n−1].keys⩽K[n].key</code><br>③. 交换<code>K1</code> 和 <code>Kn</code> 后, 堆顶可能违反堆性质, 因此需将<code>K[1..n−1]</code>调整为堆. 然后重复步骤②, 直到无序区只有一个元素时停止.</p>\n<h3 id=\"3、代码实现\"><a href=\"#3、代码实现\" class=\"headerlink\" title=\"3、代码实现\"></a>3、代码实现</h3><p>从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆函数，二是反复调用建堆函数以选择出剩余未排元素中最大的数来实现排序的函数。</p>\n<p>总结起来就是定义了以下几种操作：</p>\n<ul>\n<li>最大堆调整（<code>Max_Heapify</code>）：将堆的末端子节点作调整，使得子节点永远小于父节点</li>\n<li>创建最大堆（<code>Build_Max_Heap</code>）：将堆所有数据重新排序</li>\n<li>堆排序（<code>HeapSort</code>）：移除位在第一个数据的根节点，并做最大堆调整的递归运算</li>\n</ul>\n<p>对于堆节点的访问：</p>\n<ul>\n<li>父节点i的左子节点在位置：<code>(2*i+1);</code></li>\n<li>父节点i的右子节点在位置：<code>(2*i+2);</code></li>\n<li>子节点i的父节点在位置：<code>floor((i-1)/2);</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = arr.length; i &gt; <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        max_heapify(arr, i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[<span class=\"number\">0</span>];      <span class=\"comment\">//堆顶元素(第一个元素)与Kn交换</span></span><br><span class=\"line\">        arr[<span class=\"number\">0</span>] = arr[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[i-<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">max_heapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> limit)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length &lt;= <span class=\"number\">0</span> || arr.length &lt; limit) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> parentIdx = limit / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; parentIdx &gt;= <span class=\"number\">0</span>; parentIdx--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(parentIdx * <span class=\"number\">2</span> &gt;= limit)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = parentIdx * <span class=\"number\">2</span>;       <span class=\"comment\">//左子节点位置</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = (left + <span class=\"number\">1</span>) &gt;= limit ? left : (left + <span class=\"number\">1</span>);    <span class=\"comment\">//右子节点位置，如果没有右节点，默认为左节点位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxChildId = arr[left] &gt;= arr[right] ? left : right;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[maxChildId] &gt; arr[parentIdx])&#123;   <span class=\"comment\">//交换父节点与左右子节点中的最大值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[parentIdx];</span><br><span class=\"line\">            arr[parentIdx] = arr[maxChildId];</span><br><span class=\"line\">            arr[maxChildId] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Max_Heapify: &quot;</span> + Arrays.toString(arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Tips: 由于堆排序中初始化堆的过程比较次数较多, 因此它不太适用于小序列. 同时由于多次任意下标相互交换位置, 相同元素之间原本相对的顺序被破坏了, 因此, 它是不稳定的排序.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pdGltZXRyYXZlbGVyLmdpdGh1Yi5pby8yMDE3LzA3LzE4LyVFNSU4NSVBQiVFNSVBNCVBNyVFNiU4RSU5MiVFNSVCQSU4RiVFNyVBRSU5NyVFNiVCMyU5NSVFNiU4MCVCQiVFNyVCQiU5MyVFNCVCOCU4RWphdmElRTUlQUUlOUUlRTclOEUlQjAv\">链接</span></p>\n",
            "tags": [
                "Java面试",
                "算法",
                "堆排序"
            ]
        }
    ]
}