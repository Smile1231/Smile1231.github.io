{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"daily\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/9a0369ec/",
            "url": "https://smile1231.github.io/posts/9a0369ec/",
            "title": "布隆过滤器",
            "date_published": "2022-01-26T14:53:19.000Z",
            "content_html": "<h1 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h1><h2 id=\"什么是布隆过滤器\"><a href=\"#什么是布隆过滤器\" class=\"headerlink\" title=\"什么是布隆过滤器\"></a>什么是布隆过滤器</h2><p>布隆过滤器（<code>Bloom Filter</code>），是1970年，由一个叫布隆的小伙子提出的，距今已经五十年了，和老哥一样老。</p>\n<p>它实际上是一个很长的二进制向量和一系列随机映射函数，二进制大家应该都清楚，存储的数据不是<code>0</code>就是<code>1</code>，默认是<code>0</code>。</p>\n<p>主要用于判断一个元素是否在一个集合中，<code>0</code>代表不存在某个数据，<code>1</code>代表存在某个数据。</p>\n<p>懂了吗？作为暖男的老哥在给你们画张图来帮助理解：</p>\n<img data-src=\"/posts/9a0369ec/2022-01-26-22-56-13.png\" class=\"\">\n<span id=\"more\"></span>\n\n<h2 id=\"布隆过滤器用途\"><a href=\"#布隆过滤器用途\" class=\"headerlink\" title=\"布隆过滤器用途\"></a>布隆过滤器用途</h2><ul>\n<li>解决<code>Redis</code>缓存穿透（今天重点讲解）</li>\n<li>在爬虫时，对爬虫网址进行过滤，已经存在布隆中的网址，不在爬取。</li>\n<li>垃圾邮件过滤，对每一个发送邮件的地址进行判断是否在布隆的黑名单中，如果在就判断为垃圾邮件。</li>\n</ul>\n<p>以上只是简单的用途举例，大家可以举一反三，灵活运用在工作中。</p>\n<h2 id=\"布隆过滤器原理\"><a href=\"#布隆过滤器原理\" class=\"headerlink\" title=\"布隆过滤器原理\"></a>布隆过滤器原理</h2><blockquote>\n<p>存入过程</p>\n</blockquote>\n<p>布隆过滤器上面说了，就是一个二进制数据的集合。当一个数据加入这个集合时，经历如下洗礼（这里有缺点，下面会讲）：</p>\n<p>通过K个哈希函数计算该数据，返回K个计算出的hash值<br>这些K个hash值映射到对应的K个二进制的数组下标<br>将K个下标对应的二进制数据改成1。<br>例如，第一个哈希函数返回x，第二个第三个哈希函数返回y与z，那么： X、Y、Z对应的二进制改成1。</p>\n<p>如图所示：</p>\n<img data-src=\"/posts/9a0369ec/2022-01-26-22-56-38.png\" class=\"\">\n<blockquote>\n<p>查询过程<br>布隆过滤器主要作用就是查询一个数据，在不在这个二进制的集合中，查询过程如下：</p>\n</blockquote>\n<p>通过<code>K</code>个哈希函数计算该数据，对应计算出的<code>K</code>个<code>hash</code>值<br>通过<code>hash</code>值找到对应的二进制的数组下标<br>判断：如果存在一处位置的二进制数据是<code>0</code>，那么该数据不存在。如果都是<code>1</code>，该数据存在集合中。（这里有缺点，下面会讲）</p>\n<blockquote>\n<p>删除过程<br>一般不能删除布隆过滤器里的数据，这是一个缺点之一，我们下面会分析。</p>\n</blockquote>\n<h2 id=\"布隆过滤器的优缺点\"><a href=\"#布隆过滤器的优缺点\" class=\"headerlink\" title=\"布隆过滤器的优缺点\"></a>布隆过滤器的优缺点</h2><blockquote>\n<p>优点<br>由于存储的是二进制数据，所以占用的空间很小<br>它的插入和查询速度是非常快的，时间复杂度是<code>O（K）</code>，可以联想一下<code>HashMap</code>的过程<br>保密性很好，因为本身不存储任何原始数据，只有二进制数据<br>缺点<br>这就要回到我们上面所说的那些缺点了。</p>\n</blockquote>\n<p>添加数据是通过计算数据的<code>hash</code>值，那么很有可能存在这种情况：两个不同的数据计算得到相同的<code>hash</code>值。</p>\n<img data-src=\"/posts/9a0369ec/2022-01-26-22-56-49.png\" class=\"\">\n<p>例如图中的“你好”和“hello”，假如最终算出hash值相同，那么他们会将同一个下标的二进制数据改为1。</p>\n<p>这个时候，你就不知道下标为2的二进制，到底是代表“你好”还是“hello”。</p>\n<h2 id=\"由此得出如下缺点：\"><a href=\"#由此得出如下缺点：\" class=\"headerlink\" title=\"由此得出如下缺点：\"></a>由此得出如下缺点：</h2><ol>\n<li>存在误判<br>假如上面的图没有存<code>&quot;hello&quot;</code>，只存了”你好”，那么用<code>&quot;hello&quot;</code>来查询的时候，会判断<code>&quot;hello&quot;</code>存在集合中。</li>\n</ol>\n<p>因为“你好”和<code>“hello”</code>的<code>hash</code>值是相同的，通过相同的<code>hash</code>值，找到的二进制数据也是一样的，都是1。</p>\n<ol start=\"2\">\n<li>删除困难</li>\n</ol>\n<p>到这里我不说大家应该也明白为什么吧，作为你们的暖男老哥，还是讲一下吧。</p>\n<p>还是用上面的举例，因为“你好”和<code>“hello”</code>的<code>hash</code>值相同，对应的数组下标也是一样的。</p>\n<p>这时候老哥想去删除“你好”，将下标为<code>2</code>里的二进制数据，由1改成了<code>0</code>。</p>\n<p>那么我们是不是连<code>“hello”</code>都一起删了呀。（<code>0</code>代表有这个数据，<code>1</code>代表没有这个数据）</p>\n<h2 id=\"实现布隆过滤器\"><a href=\"#实现布隆过滤器\" class=\"headerlink\" title=\"实现布隆过滤器\"></a>实现布隆过滤器</h2><blockquote>\n<p>引入依赖</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>29.0-jre<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BloomFilterCase</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 预计要插入多少数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> size = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 期望的误判率</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> fpp = <span class=\"number\">0.01</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 布隆过滤器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(),size,fpp);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//插入10万条样本数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            bloomFilter.put(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//用另外十万条测试数据,测试误判率</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size; i &lt; size + <span class=\"number\">1000000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bloomFilter.mightContain(i))&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                System.out.println(i+<span class=\"string\">&quot;误判了&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;总共误判了:&quot;</span> + count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/9a0369ec/2022-01-26-22-57-09.png\" class=\"\">\n<p><code>100</code>万数据里有<code>947</code>个误判，约等于<code>0.01%</code>，也就是我们代码里设置的误判率：<code>fpp = 0.01。</code></p>\n<h2 id=\"深入分析代码\"><a href=\"#深入分析代码\" class=\"headerlink\" title=\"深入分析代码\"></a>深入分析代码</h2><p>核心<code>BloomFilter.create</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@VisibleForTesting</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">BloomFilter&lt;T&gt; <span class=\"title\">create</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      Funnel&lt;? <span class=\"keyword\">super</span> T&gt; funnel, <span class=\"keyword\">long</span> expectedInsertions, <span class=\"keyword\">double</span> fpp, Strategy strategy)</span> </span>&#123;</span><br><span class=\"line\">    。。。。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里有四个参数：</p>\n<ul>\n<li><code>funnel</code>：数据类型(一般是调用<code>Funnels</code>工具类中的)</li>\n<li><code>expectedInsertions</code>：期望插入的值的个数</li>\n<li><code>fpp</code>：误判率(默认值为<code>0.03</code>)</li>\n<li><code>strategy</code>：哈希算法</li>\n</ul>\n<p>我们重点讲一下<code>fpp</code>参数</p>\n<h3 id=\"情景总结\"><a href=\"#情景总结\" class=\"headerlink\" title=\"情景总结\"></a>情景总结</h3><ul>\n<li>误判率可以通过<code>fpp</code>参数进行调节</li>\n<li><code>fpp</code>越小，需要的内存空间就越大：<code>0.0</code>1需要<code>900</code>多万位数，<code>0.03</code>需要<code>700</code>多万位数。</li>\n<li><code>fpp</code>越小，集合添加数据时，就需要更多的<code>hash</code>函数运算更多的<code>hash</code>值，去存储到对应的数组下标里。（忘了去看上面的布隆过滤存入数据的过程）</li>\n</ul>\n<p>上面的<code>numBits</code>，表示存一百万个<code>int</code>类型数字，需要的位数为<code>7298440</code>，<code>700</code>多万位。理论上存一百万个数，一个<code>int</code>是<code>4</code>字节<code>32</code>位，需要<code>481000000=3200</code>万位。如果使用<code>HashMap</code>去存，按<code>HashMap50%</code>的存储效率，需要<code>6400</code>万位。可以看出<code>BloomFilter</code>的存储空间很小，只有<code>HashMap</code>的<code>1/10</code>左右</p>\n<p>上面的<code>numHashFunctions</code>表示需要几个<code>hash</code>函数运算，去映射不同的下标存这些数字是否存在（<code>0 </code>or<code> 1</code>）。</p>\n<h2 id=\"解决Redis缓存雪崩\"><a href=\"#解决Redis缓存雪崩\" class=\"headerlink\" title=\"解决Redis缓存雪崩\"></a>解决<code>Redis</code>缓存雪崩</h2><p>上面使用<code>Guava</code>实现的布隆过滤器是把数据放在了本地内存中。分布式的场景中就不合适了，无法共享内存。</p>\n<p>我们还可以用<code>Redis</code>来实现布隆过滤器，这里使用<code>Redis</code>封装好的客户端工具<code>Redisson</code>。</p>\n<p>其底层是使用数据结构<code>bitMap</code>，大家就把它理解成上面说的二进制结构，由于篇幅原因，<code>bitmap</code>不在这篇文章里讲</p>\n<blockquote>\n<p>代码实现</p>\n</blockquote>\n<p><code>pom</code>配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.13.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Java</code>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedissonBloomFilter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Config config = <span class=\"keyword\">new</span> Config();</span><br><span class=\"line\">    config.useSingleServer().setAddress(<span class=\"string\">&quot;redis://127.0.0.1:6379&quot;</span>);</span><br><span class=\"line\">    config.useSingleServer().setPassword(<span class=\"string\">&quot;1234&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//构造Redisson</span></span><br><span class=\"line\">    RedissonClient redisson = Redisson.create(config);</span><br><span class=\"line\"></span><br><span class=\"line\">    RBloomFilter&lt;String&gt; bloomFilter = redisson.getBloomFilter(<span class=\"string\">&quot;phoneList&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span></span><br><span class=\"line\">    bloomFilter.tryInit(<span class=\"number\">100000000L</span>,<span class=\"number\">0.03</span>);</span><br><span class=\"line\">    <span class=\"comment\">//将号码10086插入到布隆过滤器中</span></span><br><span class=\"line\">    bloomFilter.add(<span class=\"string\">&quot;10086&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断下面号码是否在布隆过滤器中</span></span><br><span class=\"line\">    <span class=\"comment\">//输出false</span></span><br><span class=\"line\">    System.out.println(bloomFilter.contains(<span class=\"string\">&quot;123456&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">//输出true</span></span><br><span class=\"line\">    System.out.println(bloomFilter.contains(<span class=\"string\">&quot;10086&quot;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n",
            "tags": []
        }
    ]
}