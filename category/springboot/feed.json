{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"springboot\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/67f40b37/",
            "url": "https://smile1231.github.io/posts/67f40b37/",
            "title": "Spring Boot 获取服务IP地址和端口号",
            "date_published": "2022-05-21T14:58:51.000Z",
            "content_html": "<blockquote>\n<p><code>IP</code>  地址</p>\n</blockquote>\n<p><code>IP</code>  地址非常简单，直接上代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    String result = InetAddress.getLocalHost().getHostAddress();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">    LOGGER.error(<span class=\"string\">&quot;获取IP失败&quot;</span>, e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<blockquote>\n<p>端口号</p>\n</blockquote>\n<p>获取端口号有四种方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- `<span class=\"meta\">@Value</span>`注解</span><br><span class=\"line\">- `<span class=\"meta\">@LocalServerPort</span>`注解</span><br><span class=\"line\">- `Environment`</span><br><span class=\"line\"></span><br><span class=\"line\">我们将`<span class=\"meta\">@Value</span>和<span class=\"meta\">@LocalServerPort</span>`放在一起, 其实`<span class=\"meta\">@LocalServerPort</span>`等价于`<span class=\"meta\">@Value(&quot;$&#123;local.server.port&#125;&quot;)</span>`:</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> serverPort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@LocalServerPort</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> localServerPort</span><br></pre></td></tr></table></figure>\n<p>这里要特别注意，如果没有在配置文件中配置 <code>local.server.port, @LocalServerPort</code>  会为 <code>null</code> <br>\n <code>Environment</code>  本质和上述方法类似，用它来读取配置属性:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">Environment environment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPort</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> environment.getProperty(<span class=\"string\">&quot;server.port&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTY2OTIwMTQwNDYxOTY1MzIw\">参考链接</span></p>\n",
            "tags": [
                "Java",
                "SpringBoot"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/f976ebe7/",
            "url": "https://smile1231.github.io/posts/f976ebe7/",
            "title": "SpringMvc中标准的后端接口格式",
            "date_published": "2022-02-19T05:46:06.000Z",
            "content_html": "<h1 id=\"用springboot手把手教你写出优雅的后端接口\"><a class=\"markdownIt-Anchor\" href=\"#用springboot手把手教你写出优雅的后端接口\">#</a> 用 <code>SpringBoot</code>  手把手教你写出优雅的后端接口</h1>\n<p>一个后端接口大致分为四个部分组成： <code>接口地址（url）</code> 、 <code>接口请求方式（get、post等）</code> 、 <code>请求数据（request）</code> 、 <code>响应数据（response）</code> 。如何构建这几个部分每个公司要求都不同，没有什么 “一定是最好的” 标准，但一个优秀的后端接口和一个糟糕的后端接口对比起来差异还是蛮大的，其中最重要的关键点就是看是否规范！</p>\n<p>本文就一步一步演示如何构建起一个优秀的后端接口体系，体系构建好了自然就有了规范，同时再构建新的后端接口也会十分轻松。</p>\n<p>所需依赖包</p>\n<span id=\"more\"></span>\n<p>这里用的是 <code>SpringBoot</code>  配置项目，本文讲解的重点是后端接口，所以只需要导入一个 <code>spring-boot-starter-web</code>  包就可以了：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--web依赖包，web应用必备--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--StringUtils的使用--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-lang<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>本文还用了 <code>swagger</code>  来生成 <code>API</code>  文档， <code>lombok</code>  来简化类，不过这两者不是必须的，可用可不用。</p>\n<h2 id=\"一-参数校验\"><a class=\"markdownIt-Anchor\" href=\"#一-参数校验\">#</a> 一、参数校验</h2>\n<p>一个接口一般对参数（请求数据）都会进行安全校验，参数校验的重要性自然不必多说，那么如何对参数进行校验就有讲究了。</p>\n<h2 id=\"二-业务层校验\"><a class=\"markdownIt-Anchor\" href=\"#二-业务层校验\">#</a> 二、业务层校验</h2>\n<p>首先我们来看一下最常见的做法，就是在业务层进行参数校验：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user == <span class=\"keyword\">null</span> || user.getId() == <span class=\"keyword\">null</span> || user.getAccount() == <span class=\"keyword\">null</span> || user.getPassword() == <span class=\"keyword\">null</span> || user.getEmail() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;对象或者对象字段不能为空&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isEmpty(user.getAccount()) || StringUtils.isEmpty(user.getPassword()) || StringUtils.isEmpty(user.getEmail())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;不能输入空字符串&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.getAccount().length() &lt; <span class=\"number\">6</span> || user.getAccount().length() &gt; <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;账号长度必须是6-11个字符&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user.getPassword().length() &lt; <span class=\"number\">6</span> || user.getPassword().length() &gt; <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;密码长度必须是6-16个字符&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Pattern.matches(<span class=\"string\">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+$&quot;</span>, user.getEmail())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;邮箱格式不正确&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 参数校验完毕后这里就写上业务逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做当然是没有什么错的，而且格式排版整齐也一目了然，不过这样太繁琐了，这还没有进行业务操作呢光是一个参数校验就已经这么多行代码，实在不够优雅。</p>\n<p>我们来改进一下，使用 <code>Spring Validator</code>  和 <code>Hibernate Validator</code>  这两套 <code>Validator</code>  来进行方便的参数校验！这两套 <code>Validator</code>  依赖包已经包含在前面所说的 <code>web</code>  依赖包里了，所以可以直接使用。<br>\n但是从 <code>springboot-2.3</code>  开始，校验包被独立成了一个 <code>starter</code>  组件<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctYm9vdC93aWtpL1NwcmluZy1Cb290LTIuMy1SZWxlYXNlLU5vdGVzI3ZhbGlkYXRpb24tc3RhcnRlci1uby1sb25nZXItaW5jbHVkZWQtaW4td2ViLXN0YXJ0ZXJz\">参见：validation-starter-no-longer-included-in-web-starters</span>，<br>\n所以需要引入如下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--校验组件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-validation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>内置的校验有很多</p>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>校验功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@AssertFalse</td>\n<td>必须是 false</td>\n</tr>\n<tr>\n<td>@AssertTrue</td>\n<td>必须是 true</td>\n</tr>\n<tr>\n<td>@DecimalMax</td>\n<td>小于等于给定的值</td>\n</tr>\n<tr>\n<td>@DecimalMin</td>\n<td>大于等于给定的值</td>\n</tr>\n<tr>\n<td>@Digits</td>\n<td>可设定最大整数位数和最大小数位数</td>\n</tr>\n<tr>\n<td>@Email</td>\n<td>校验是否符合 Email 格式</td>\n</tr>\n<tr>\n<td>@Future</td>\n<td>必须是将来的时间</td>\n</tr>\n<tr>\n<td>@FutureOrPresent</td>\n<td>当前或将来时间</td>\n</tr>\n<tr>\n<td>@Max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>@Min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>@Negative</td>\n<td>负数（不包括 0）</td>\n</tr>\n<tr>\n<td>@NegativeOrZero</td>\n<td>负数或 0</td>\n</tr>\n<tr>\n<td>@NotBlank</td>\n<td>不为 null 并且包含至少一个非空白字符</td>\n</tr>\n<tr>\n<td>@NotEmpty</td>\n<td>不为 null 并且不为空</td>\n</tr>\n<tr>\n<td>@NotNull</td>\n<td>不为 null</td>\n</tr>\n<tr>\n<td>@Null</td>\n<td>为 null</td>\n</tr>\n<tr>\n<td>@Past</td>\n<td>必须是过去的时间</td>\n</tr>\n<tr>\n<td>@PastOrPresent</td>\n<td>必须是过去的时间，包含现在</td>\n</tr>\n<tr>\n<td>@Pattern</td>\n<td>必须满足正则表达式</td>\n</tr>\n<tr>\n<td>@PositiveOrZero</td>\n<td>正数或 0</td>\n</tr>\n<tr>\n<td>@Size</td>\n<td>校验容器的元素个数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三-validator-bindresult进行校验\"><a class=\"markdownIt-Anchor\" href=\"#三-validator-bindresult进行校验\">#</a> 三、 <code>Validator</code>  +  <code>BindResult</code>  进行校验</h2>\n<p><code>Validator</code>  可以非常方便的制定校验规则，并自动帮你完成校验。首先在入参里需要校验的字段加上注解，每个注解对应不同的校验规则，并可制定校验失败后的信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户id不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户账号不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Size(min = 6, max = 11, message = &quot;账号长度必须是6-11个字符&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String account;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户密码不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Size(min = 6, max = 11, message = &quot;密码长度必须是6-16个字符&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NotNull(message = &quot;用户邮箱不能为空&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>校验规则和错误提示信息配置完毕后，接下来只需要在接口需要校验的参数上加上 <code>@Valid</code>  注解，并添加 <code>BindResult</code>  参数即可方便完成验证：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> <span class=\"meta\">@Valid</span> User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有参数校验失败，会将错误信息封装成对象组装在BindingResult里</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> error.getDefaultMessage();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userService.addUser(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样当请求数据传递到接口的时候 <code>Validator</code>  就自动完成校验了，校验的结果就会封装到 <code>BindingResult</code>  中去，如果有错误信息我们就直接返回给前端，业务逻辑代码也根本没有执行下去。</p>\n<p>此时，业务层里的校验代码就已经不需要了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 直接编写业务逻辑</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>现在可以看一下参数校验效果。我们故意给这个接口传递一个不符合校验规则的参数，先传递一个错误数据给接口，故意将 <code>password</code>  这个字段不满足校验条件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;account&quot;</span>: <span class=\"string\">&quot;12345678&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;email&quot;</span>: <span class=\"string\">&quot;123@qq.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;123&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再来看一下接口的响应数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-08-48.png\" class=\"\">\n<p>这样是不是方便很多？不难看出使用 <code>Validator</code>  校验有如下几个好处：</p>\n<ul>\n<li>\n<p>简化代码，之前业务层那么一大段校验代码都被省略掉了。</p>\n</li>\n<li>\n<p>使用方便，那么多校验规则可以轻而易举的实现，比如邮箱格式验证，之前自己手写正则表达式要写那么一长串，还容易出错，用 <code>Validator</code>  直接一个注解搞定。（还有更多校验规则注解，可以自行去了解哦）</p>\n</li>\n<li>\n<p>减少耦合度，使用 <code>Validator</code>  能够让业务层只关注业务逻辑，从基本的参数校验逻辑中脱离出来。</p>\n</li>\n</ul>\n<p>使用 <code>Validator + BindingResult</code>  已经是非常方便实用的参数校验方式了，在实际开发中也有很多项目就是这么做的，不过这样还是不太方便，因为你每写一个接口都要添加一个 <code>BindingResult</code>  参数，然后再提取错误信息返回给前端。</p>\n<p>这样有点麻烦，并且重复代码很多（尽管可以将这个重复代码封装成方法）。我们能否去掉 <code>BindingResult</code>  这一步呢？当然是可以的！</p>\n<h2 id=\"validator-自动抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#validator-自动抛出异常\">#</a>  <code>Validator</code>  + 自动抛出异常</h2>\n<p>将 <code>BindingResult</code>  去掉：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addUser</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> <span class=\"meta\">@Valid</span> User user)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;sucess&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>去掉之后会发生什么事情呢？直接来试验一下，还是按照之前一样故意传递一个不符合校验规则的参数给接口。此时我们观察控制台可以发现接口已经引发 <code>MethodArgumentNotValidException</code>  异常了：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-00.png\" class=\"\">\n<p>其实这样就已经达到我们想要的效果了，参数校验不通过自然就不执行接下来的业务逻辑，去掉 <code>BindingResult</code>  后会自动引发异常，异常发生了自然而然就不会执行业务逻辑。也就是说，我们完全没必要添加相关 <code>BindingResult</code>  相关操作嘛。</p>\n<p>不过事情还没有完，异常是引发了，可我们并没有编写返回错误信息的代码呀，那参数校验失败了会响应什么数据给前端呢？</p>\n<p>我们来看一下刚才异常发生后接口响应的数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-15.png\" class=\"\">\n<p>没错，是直接将整个错误对象相关信息都响应给前端了！这样就很难受，不过解决这个问题也很简单，就是我们接下来要讲的全局异常处理！</p>\n<h2 id=\"五-全局异常处理\"><a class=\"markdownIt-Anchor\" href=\"#五-全局异常处理\">#</a> 五、全局异常处理</h2>\n<p>参数校验失败会自动引发异常，我们当然不可能再去手动捕捉异常进行处理，不然还不如用之前 <code>BindingResult</code>  方式呢。又不想手动捕捉这个异常，又要对这个异常进行处理，那正好使用 <code>SpringBoot</code>  全局异常处理来达到一劳永逸的效果！</p>\n<h2 id=\"六-基本使用\"><a class=\"markdownIt-Anchor\" href=\"#六-基本使用\">#</a> 六、基本使用</h2>\n<p>首先，我们需要新建一个类，在这个类上加上 <code>@ControllerAdvice</code>  或 <code>@RestControllerAdvice</code>  注解，这个类就配置成全局处理类了。（这个根据你的 <code>Controller</code>  层用的是 <code>@Controller</code>  还是 <code>@RestController</code>  来决定）</p>\n<p>然后在类中新建方法，在方法上加上 <code>@ExceptionHandler</code>  注解并指定你想处理的异常类型，接着在方法内编写对该异常的操作逻辑，就完成了对该异常的全局处理！</p>\n<p>我们现在就来演示一下对参数校验失败抛出的 <code>MethodArgumentNotValidException</code>  全局处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionControllerAdvice</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">MethodArgumentNotValidExceptionHandler</span><span class=\"params\">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从异常对象中拿到ObjectError对象</span></span><br><span class=\"line\">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 然后提取错误提示信息进行返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> objectError.getDefaultMessage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看下这次校验失败后的响应数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-28.png\" class=\"\">\n<p>没错，这次返回的就是我们制定的错误提示信息！我们通过全局异常处理优雅的实现了我们想要的功能！以后我们再想写接口参数校验，就只需要在入参的成员变量上加上 <code>Validator</code>  校验规则注解，然后在参数上加上 <code>@Valid</code>  注解即可完成校验，校验失败会自动返回错误提示信息，无需任何其他代码！更多的校验思路： <code>SpringBoot</code>  实现通用的接口参数校验</p>\n<h2 id=\"七-自定义异常\"><a class=\"markdownIt-Anchor\" href=\"#七-自定义异常\">#</a> 七、自定义异常</h2>\n<p>全局处理当然不会只能处理一种异常，用途也不仅仅是对一个参数校验方式进行优化。在实际开发中，如何对异常处理其实是一个很麻烦的事情。传统处理异常一般有以下烦恼：</p>\n<ul>\n<li>\n<p>是捕获异常 <code>(try…catch)</code>  还是抛出异常 <code>(throws)</code></p>\n</li>\n<li>\n<p>是在 <code>controller</code>  层做处理还是在 <code>service</code>  层处理又或是在 <code>dao</code>  层做处理</p>\n</li>\n<li>\n<p>处理异常的方式是啥也不做，还是返回特定数据，如果返回又返回什么数据</p>\n</li>\n<li>\n<p>不是所有异常我们都能预先进行捕捉，如果发生了没有捕捉到的异常该怎么办？</p>\n</li>\n</ul>\n<p>以上这些问题都可以用全局异常处理来解决，全局异常处理也叫统一异常处理，全局和统一处理代表什么？代表规范！规范有了，很多问题就会迎刃而解！</p>\n<p>全局异常处理的基本使用方式大家都已经知道了，我们接下来更进一步的规范项目中的异常处理方式：自定义异常。</p>\n<p>在很多情况下，我们需要手动抛出异常，比如在业务层当有些条件并不符合业务逻辑，我这时候就可以手动抛出异常从而触发事务回滚。那手动抛出异常最简单的方式就是 <code>throw new RuntimeException(&quot;异常信息&quot;)</code>  了，不过使用自定义会更好一些：</p>\n<ul>\n<li>\n<p>自定义异常可以携带更多的信息，不像这样只能携带一个字符串。</p>\n</li>\n<li>\n<p>项目开发中经常是很多人负责不同的模块，使用自定义异常可以统一了对外异常展示的方式。</p>\n</li>\n<li>\n<p>自定义异常语义更加清晰明了，一看就知道是项目中手动抛出的异常。</p>\n</li>\n</ul>\n<p>我们现在就来开始写一个自定义异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span> <span class=\"comment\">//只要getter方法，无需setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">APIException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">APIException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1001</span>, <span class=\"string\">&quot;接口错误&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">APIException</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1001</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">APIException</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(msg);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在刚才的全局异常处理类中记得添加对我们自定义异常的处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(APIException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">APIExceptionHandler</span><span class=\"params\">(APIException e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e.getMsg();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就对异常的处理就比较规范了，当然还可以添加对 <code>Exception</code>  的处理，这样无论发生什么异常我们都能屏蔽掉然后响应数据给前端，不过建议最后项目上线时这样做，能够屏蔽掉错误信息暴露给前端，在开发中为了方便调试还是不要这样做。</p>\n<p>现在全局异常处理和自定义异常已经弄好了，不知道大家有没有发现一个问题，就是当我们抛出自定义异常的时候全局异常处理只响应了异常中的错误信息 <code>msg</code>  给前端，并没有将错误代码 <code>code</code>  返回。这就要引申出我们接下来要讲的东西了：数据统一响应</p>\n<h2 id=\"八-数据统一响应\"><a class=\"markdownIt-Anchor\" href=\"#八-数据统一响应\">#</a> 八、数据统一响应</h2>\n<p>现在我们规范好了参数校验方式和异常处理方式，然而还没有规范响应数据！比如我要获取一个分页信息数据，获取成功了呢自然就返回的数据列表，获取失败了后台就会响应异常信息，即一个字符串，就是说前端开发者压根就不知道后端响应过来的数据会是啥样的！所以，统一响应数据是前后端规范中必须要做的！</p>\n<h2 id=\"九-自定义统一响应\"><a class=\"markdownIt-Anchor\" href=\"#九-自定义统一响应\">#</a> 九、自定义统一响应</h2>\n<p>统一数据响应第一步肯定要做的就是我们自己自定义一个响应体类，无论后台是运行正常还是发生异常，响应给前端的数据格式是不变的！那么如何定义响应体呢？关于异常的设计：如何更优雅的设计异常</p>\n<p>可以参考我们自定义异常类，也来一个响应信息代码 <code>code</code>  和响应信息说明 <code>msg</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResultVO</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码，比如1000代表响应成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 响应信息，用来说明响应情况</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 响应的具体数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(<span class=\"number\">1000</span>, <span class=\"string\">&quot;success&quot;</span>, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(<span class=\"keyword\">int</span> code, String msg, T data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们修改一下全局异常处理那的返回值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(APIException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">APIExceptionHandler</span><span class=\"params\">(APIException e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里返回类型是自定义响应体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(e.getCode(), <span class=\"string\">&quot;响应失败&quot;</span>, e.getMsg());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">MethodArgumentNotValidExceptionHandler</span><span class=\"params\">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class=\"line\">    ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里返回类型是自定义响应体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(<span class=\"number\">1001</span>, <span class=\"string\">&quot;参数校验失败&quot;</span>, objectError.getDefaultMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看一下此时如果发生异常了会响应什么数据给前端：</p>\n<p>OK，这个异常信息响应就非常好了，状态码和响应说明还有错误提示数据都返给了前端，并且是所有异常都会返回相同的格式！异常这里搞定了，别忘了我们到接口那也要修改返回类型，我们新增一个接口好来看看效果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;User&gt; <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    user.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    user.setAccount(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;123@qq.com&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看一下如果响应正确返回的是什么效果：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-09-48.png\" class=\"\">\n<p>这样无论是正确响应还是发生异常，响应数据的格式都是统一的，十分规范！</p>\n<p>数据格式是规范了，不过响应码 <code>code</code>  和响应信息 <code>msg</code>  还没有规范呀！大家发现没有，无论是正确响应，还是异常响应，响应码和响应信息是想怎么设置就怎么设置，要是 <code>10</code>  个开发人员对同一个类型的响应写 <code>10</code>  个不同的响应码，那这个统一响应体的格式规范就毫无意义！所以，必须要将响应码和响应信息给规范起来。</p>\n<h2 id=\"十-响应码枚举\"><a class=\"markdownIt-Anchor\" href=\"#十-响应码枚举\">#</a> 十、响应码枚举</h2>\n<p>要规范响应体中的响应码和响应信息用枚举简直再恰当不过了，我们现在就来创建一个响应码枚举类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ResultCode</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SUCCESS(<span class=\"number\">1000</span>, <span class=\"string\">&quot;操作成功&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    FAILED(<span class=\"number\">1001</span>, <span class=\"string\">&quot;响应失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    VALIDATE_FAILED(<span class=\"number\">1002</span>, <span class=\"string\">&quot;参数校验失败&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    ERROR(<span class=\"number\">5000</span>, <span class=\"string\">&quot;未知错误&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    ResultCode(<span class=\"keyword\">int</span> code, String msg) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后修改响应体的构造方法，让其只准接受响应码枚举来设置响应码和响应信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(T data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(ResultCode.SUCCESS, data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResultVO</span><span class=\"params\">(ResultCode resultCode, T data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.code = resultCode.getCode();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.msg = resultCode.getMsg();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后同时修改全局异常处理的响应码设置方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(APIException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">APIExceptionHandler</span><span class=\"params\">(APIException e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里传递的响应码枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(ResultCode.FAILED, e.getMsg());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ResultVO&lt;String&gt; <span class=\"title\">MethodArgumentNotValidExceptionHandler</span><span class=\"params\">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class=\"line\">    ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里传递的响应码枚举</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(ResultCode.VALIDATE_FAILED, objectError.getDefaultMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样响应码和响应信息只能是枚举规定的那几个，就真正做到了响应数据格式、响应码和响应信息规范化、统一化！这些可以参考： <code>Java</code>  项目构建基础：统一结果，统一异常，统一日志</p>\n<h2 id=\"十一-全局处理响应数据\"><a class=\"markdownIt-Anchor\" href=\"#十一-全局处理响应数据\">#</a> 十一、全局处理响应数据</h2>\n<p>接口返回统一响应体 + 异常也返回统一响应体，其实这样已经很好了，但还是有可以优化的地方。要知道一个项目下来定义的接口搞个几百个太正常不过了，要是每一个接口返回数据时都要用响应体来包装一下好像有点麻烦，有没有办法省去这个包装过程呢？当然是有滴，还是要用到全局处理。</p>\n<p>首先，先创建一个类加上注解使其成为全局处理类。然后继承 <code>ResponseBodyAdvice</code>  接口重写其中的方法，即可对我们的 <code>controller</code>  进行增强操作，具体看代码和注释：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestControllerAdvice(basePackages = &#123;&quot;com.cy.controller&quot;&#125;)</span> <span class=\"comment\">// 注意哦，这里要加上需要扫描的包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseControllerAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title\">ResponseBodyAdvice</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// supports方法是来给定条件判断是否该调用beforeBodyWrite，MethodParameter里面有各种数据，false就不调用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果接口返回的类型本身就是ResultVO那就没有必要进行额外的操作，返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> !returnType.getGenericParameterType().equals(ResultVO.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 响应结果拦截根据业务去封装返回体</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">beforeBodyWrite</span><span class=\"params\">(Object data, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// String类型不能直接包装，所以要进行些特别的处理</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (returnType.getGenericParameterType().equals(String.class)) &#123;</span><br><span class=\"line\">            ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将数据包装在ResultVO里后，再转换为json字符串响应给前端</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> objectMapper.writeValueAsString(<span class=\"keyword\">new</span> ResultVO&lt;&gt;(data));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (JsonProcessingException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> APIException(<span class=\"string\">&quot;返回String类型错误&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将原本的数据包装在ResultVO里</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResultVO&lt;&gt;(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重写的这两个方法是用来在 <code>controller</code>  将数据进行返回前进行增强操作， <code>supports</code>  方法要返回为 <code>true</code>  才会执行 <code>beforeBodyWrite</code>  方法，所以如果有些情况不需要进行增强操作可以在 <code>supports</code>  方法里进行判断。对返回数据进行真正的操作还是在 <code>beforeBodyWrite</code>  方法中，我们可以直接在该方法里包装数据，这样就不需要每个接口都进行数据包装了，省去了很多麻烦。</p>\n<p>我们可以现在去掉接口的数据包装来看下效果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    User user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">    user.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">    user.setAccount(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setPassword(<span class=\"string\">&quot;12345678&quot;</span>);</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;123@qq.com&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意哦，这里是直接返回的User类型，并没有用ResultVO进行包装</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们来看下响应数据：</p>\n<img data-src=\"/posts/f976ebe7/2022-02-19-14-10-03.png\" class=\"\">\n<p>成功对数据进行了包装！</p>\n<blockquote>\n<p>注意： <code>beforeBodyWrite</code>  方法里包装数据无法对 <code>String</code>  类型的数据直接进行强转，所以要进行特殊处理，这里不讲过多的细节，有兴趣可以自行深入了解。</p>\n</blockquote>\n<h2 id=\"十二-总结\"><a class=\"markdownIt-Anchor\" href=\"#十二-总结\">#</a> 十二、总结</h2>\n<p>自此整个后端接口基本体系就构建完毕了</p>\n<ul>\n<li>\n<p>通过 <code>Validator</code>  + 自动抛出异常来完成了方便的参数校验</p>\n</li>\n<li>\n<p>通过全局异常处理 + 自定义异常完成了异常操作的规范</p>\n</li>\n<li>\n<p>通过数据统一响应完成了响应数据的规范</p>\n</li>\n<li>\n<p>多个方面组装非常优雅的完成了后端接口的协调，让开发人员有更多的经历注重业务逻辑代码，轻松构建后端接口</p>\n</li>\n</ul>\n",
            "tags": [
                "SpringBoot",
                "接口",
                "SpringMvc"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/20ac1950/",
            "url": "https://smile1231.github.io/posts/20ac1950/",
            "title": "SpringBoot文件上传下载",
            "date_published": "2022-02-15T14:44:58.000Z",
            "content_html": "<blockquote>\n<p>文件上传与下载</p>\n</blockquote>\n<ol>\n<li><code>Spring Boot</code>  默认单个文件上传大小是 <code>1MB</code> , 默认多个文件上传总大小是 <code>10MB</code></li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"comment\">#配置单个上传文件的大小的限制</span></span><br><span class=\"line\">    <span class=\"attr\">multipart:</span></span><br><span class=\"line\">      <span class=\"attr\">max-file-size:</span> <span class=\"string\">20MB</span></span><br><span class=\"line\">    <span class=\"comment\">#配置在一次请求中上传文件的总容量的限制</span></span><br><span class=\"line\">      <span class=\"attr\">max-request-size:</span> <span class=\"string\">50MB</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">uploadFile</span><span class=\"params\">(MultipartFile file)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//生成文件在服务器端存放的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//扩展名</span></span><br><span class=\"line\">            String fileSuffix = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(<span class=\"string\">&quot;.&quot;</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            String fileName = System.currentTimeMillis() + <span class=\"string\">&quot;.&quot;</span> +fileSuffix;</span><br><span class=\"line\">            <span class=\"comment\">//获取项目路径</span></span><br><span class=\"line\">            System.out.println(System.getProperty(<span class=\"string\">&quot;user.dir&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            File files = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;/Users/jinmao/Documents/IDEASpace/springboot01/src/&quot;</span> + fileName);</span><br><span class=\"line\">            <span class=\"comment\">//上传</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!files.exists()) files.mkdirs();</span><br><span class=\"line\">            file.transferTo(files);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;上传失败&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;上传成功&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//多文件上传</span></span><br><span class=\"line\">     <span class=\"meta\">@PostMapping(&quot;/batch&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">handleFileUpload</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;MultipartFile&gt; files = ((MultipartHttpServletRequest) request).getFiles(<span class=\"string\">&quot;file&quot;</span>);</span><br><span class=\"line\">        MultipartFile file = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedOutputStream stream = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; files.size(); ++i) &#123;</span><br><span class=\"line\">            file = files.get(i);</span><br><span class=\"line\">            String filePath = <span class=\"string\">&quot;/Users/dalaoyang/Downloads/&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!file.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">byte</span>[] bytes = file.getBytes();</span><br><span class=\"line\">                    stream = <span class=\"keyword\">new</span> BufferedOutputStream(<span class=\"keyword\">new</span> FileOutputStream(</span><br><span class=\"line\">                            <span class=\"keyword\">new</span> File(filePath + file.getOriginalFilename())));<span class=\"comment\">//设置文件路径及名字</span></span><br><span class=\"line\">                    stream.write(bytes);<span class=\"comment\">// 写入</span></span><br><span class=\"line\">                    stream.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    stream = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&quot;第 &quot;</span> + i + <span class=\"string\">&quot; 个文件上传失败 ==&gt; &quot;</span></span><br><span class=\"line\">                            + e.getMessage();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;第 &quot;</span> + i</span><br><span class=\"line\">                        + <span class=\"string\">&quot; 个文件上传失败因为文件为空&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;上传成功&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件下载</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/download&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">downloadFile</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        String fileName = <span class=\"string\">&quot;dalaoyang.jpeg&quot;</span>;<span class=\"comment\">// 文件名</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fileName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置文件路径</span></span><br><span class=\"line\">            File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;/Users/dalaoyang/Documents/dalaoyang.jpeg&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//File file = new File(realPath , fileName);</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (file.exists()) &#123;</span><br><span class=\"line\">                response.setContentType(<span class=\"string\">&quot;application/force-download&quot;</span>);<span class=\"comment\">// 设置强制下载不打开</span></span><br><span class=\"line\">                response.addHeader(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">&quot;attachment;fileName=&quot;</span> + fileName);<span class=\"comment\">// 设置文件名</span></span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                FileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                BufferedInputStream bis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">                    bis = <span class=\"keyword\">new</span> BufferedInputStream(fis);</span><br><span class=\"line\">                    OutputStream os = response.getOutputStream();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i = bis.read(buffer);</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (i != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        os.write(buffer, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">                        i = bis.read(buffer);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&quot;下载成功&quot;</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (bis != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            bis.close();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fis != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                            fis.close();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;下载失败&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于文件上传的理解\"><a class=\"markdownIt-Anchor\" href=\"#关于文件上传的理解\">#</a> 关于文件上传的理解</h2>\n<p>以前是这样认为的，就像代码中所展示的那样</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">swiper-item</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/Users/jinmao/Documents/Vscode/Space/StudyPlatform/images/swiper/1.png&quot;</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;widthFix&quot;</span> <span class=\"attr\">lazy-load</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">binderror</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">bindload</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>  <span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">swiper-item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>image</code>  标签只要 <code>src</code>  是静态的文件目录，感觉就是可以的，然后这就犯了一个很严重的错误，他是无法被解析的，必须是后端项目所带有的资源</p>\n<p>类似于一个服务端，一个客户端去访问他的资源，这个资源是服务端所带有的，并不是服务器上有的，只要是有他的全限定类名就 <code>ok</code>  的</p>\n<p>所以任何资源都要通过后端去获取，后端所带有的，所以这个代码有很严重的错误，也是一个关于文件上传的大误区</p>\n<img data-src=\"/posts/20ac1950/2022-02-16-21-04-44.png\" class=\"\">\n<img data-src=\"/posts/20ac1950/2022-02-16-21-04-53.png\" class=\"\">\n<p>就可以显示出来了</p>\n<p><strong>续：</strong></p>\n<p>后来我又发现了新的问题，就是需要重启项目之后才能访问到相应的资源</p>\n<h3 id=\"配置访问虚拟路径\"><a class=\"markdownIt-Anchor\" href=\"#配置访问虚拟路径\">#</a> 配置访问虚拟路径</h3>\n<p>文件实际是存在 路径下面，但是当访问 <code>http://ip:port/upload/xxx.jpg</code>  时，虚拟路径会映射到  <code>file://Users/path/xxx.jpg</code>  的路径中访问文件。也是对服务器文件的一种保护措施吧.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        String path = System.getProperty(<span class=\"string\">&quot;user.dir&quot;</span>) + <span class=\"string\">&quot;/src/main/resources/upload/&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//registry.addResourceHandler(&quot;/static/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//linux服务器文件目录</span></span><br><span class=\"line\">        <span class=\"comment\">//配置磁盘映射 , pathPattern  访问路径                                        磁盘映射路径，不然不能够访问</span></span><br><span class=\"line\">                                        <span class=\"comment\">//这是因为对服务器的保护措施导致的，服务器不能对外部暴露真实的资源路径，需要配置虚拟路径映射访问。</span></span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;/upload/**&quot;</span>).addResourceLocations(<span class=\"string\">&quot;file:&quot;</span>+path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java面试",
                "SpringBoot"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/eec4b728/",
            "url": "https://smile1231.github.io/posts/eec4b728/",
            "title": "SpringBoot中如何优雅的使用多线程",
            "date_published": "2022-02-15T14:36:33.000Z",
            "content_html": "<h1 id=\"springboot中如何优雅的使用多线程\"><a class=\"markdownIt-Anchor\" href=\"#springboot中如何优雅的使用多线程\">#</a>  <code>SpringBoot</code>  中如何优雅的使用多线程</h1>\n<p>在  <code>SpringBoot</code>  应用中，经常会遇到在一个接口中，同时做事情 1，事情 2，事情 3，如果同步执行的话，则本次接口时间取决于事情 1 2 3 执行时间之和；如果三件事同时执行，则本次接口时间取决于事情 1 2 3 执行时间最长的那个，合理使用多线程，可以大大缩短接口时间。那么在  <code>SpringBoot</code>  应用中如何优雅的使用多线程呢？</p>\n<p><code>Don't bb, show me code.</code></p>\n<h2 id=\"快速使用\"><a class=\"markdownIt-Anchor\" href=\"#快速使用\">#</a> <strong>快速使用</strong></h2>\n<span id=\"more\"></span>\n<p><code>SpringBoot</code>  应用中需要添加 <code>@EnableAsync</code>  注解，来开启异步调用，一般还会配置一个线程池，异步的方法交给特定的线程池完成，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAsync</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(&quot;doSomethingExecutor&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">doSomethingExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ThreadPoolTaskExecutor executor = <span class=\"keyword\">new</span> ThreadPoolTaskExecutor();</span><br><span class=\"line\">        <span class=\"comment\">// 核心线程数：线程池创建时候初始化的线程数</span></span><br><span class=\"line\">        executor.setCorePoolSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 最大线程数：线程池最大的线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程</span></span><br><span class=\"line\">        executor.setMaxPoolSize(<span class=\"number\">20</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 缓冲队列：用来缓冲执行任务的队列</span></span><br><span class=\"line\">        executor.setQueueCapacity(<span class=\"number\">500</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 允许线程的空闲时间60秒：当超过了核心线程之外的线程在空闲时间到达之后会被销毁</span></span><br><span class=\"line\">        executor.setKeepAliveSeconds(<span class=\"number\">60</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 线程池名的前缀：设置好了之后可以方便我们定位处理任务所在的线程池</span></span><br><span class=\"line\">        executor.setThreadNamePrefix(<span class=\"string\">&quot;do-something-&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 缓冲队列满了之后的拒绝策略：由调用线程处理（一般是主线程）</span></span><br><span class=\"line\">        executor.setRejectedExecutionHandler(<span class=\"keyword\">new</span> ThreadPoolExecutor.DiscardPolicy());</span><br><span class=\"line\">        executor.initialize();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的方式非常简单，在需要异步的方法上加 <code>@Async</code>  注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AsyncService asyncService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/open/something&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">something</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            asyncService.doSomething(<span class=\"string\">&quot;index = &quot;</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lon</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指定使用beanname为doSomethingExecutor的线程池</span></span><br><span class=\"line\">    <span class=\"meta\">@Async(&quot;doSomethingExecutor&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doSomething</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;do something, message=&#123;&#125;&quot;</span>, message);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;do something error: &quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问： <code>127.0.0.1:8080/open/something</code> ，日志如下</p>\n<img data-src=\"/posts/eec4b728/2022-02-16-21-01-21.png\" class=\"\">\n<p>由此可见已经达到异步执行的效果了，并且使用到了咱们配置的线程池。</p>\n<h2 id=\"获取异步方法返回值\"><a class=\"markdownIt-Anchor\" href=\"#获取异步方法返回值\">#</a> <strong>获取异步方法返回值</strong></h2>\n<p>当异步方法有返回值时，如何获取异步方法执行的返回结果呢？这时需要异步调用的方法带有返回 <code>CompletableFuture</code> 。</p>\n<p><code>CompletableFuture</code>  是对 <code>Feature</code>  的增强， <code>Feature</code>  只能处理简单的异步任务，而 <code>CompletableFuture</code>  可以将多个异步任务进行复杂的组合。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AsyncService asyncService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(&quot;异步 有返回值&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/open/somethings&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">somethings</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CompletableFuture&lt;String&gt; createOrder = asyncService.doSomething1(<span class=\"string\">&quot;create order&quot;</span>);</span><br><span class=\"line\">        CompletableFuture&lt;String&gt; reduceAccount = asyncService.doSomething2(<span class=\"string\">&quot;reduce account&quot;</span>);</span><br><span class=\"line\">        CompletableFuture&lt;String&gt; saveLog = asyncService.doSomething3(<span class=\"string\">&quot;save log&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 等待所有任务都执行完</span></span><br><span class=\"line\">        CompletableFuture.allOf(createOrder, reduceAccount, saveLog).join();</span><br><span class=\"line\">        <span class=\"comment\">// 获取每个任务的返回结果</span></span><br><span class=\"line\">        String result = createOrder.get() + reduceAccount.get() + saveLog.get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Async(&quot;doSomethingExecutor&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CompletableFuture&lt;String&gt; <span class=\"title\">doSomething1</span><span class=\"params\">(String message)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;do something1: &#123;&#125;&quot;</span>, message);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"string\">&quot;do something1: &quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Async(&quot;doSomethingExecutor&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CompletableFuture&lt;String&gt; <span class=\"title\">doSomething2</span><span class=\"params\">(String message)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;do something2: &#123;&#125;&quot;</span>, message);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"string\">&quot;; do something2: &quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Async(&quot;doSomethingExecutor&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CompletableFuture&lt;String&gt; <span class=\"title\">doSomething3</span><span class=\"params\">(String message)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;do something3: &#123;&#125;&quot;</span>, message);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"string\">&quot;; do something3: &quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台上日志：</p>\n<img data-src=\"/posts/eec4b728/2022-02-16-21-01-47.png\" class=\"\">\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> <strong>注意事项</strong></h2>\n<p><code>@Async</code>  注解会在以下几个场景失效，也就是说明明使用了 <code>@Async</code>  注解，但就没有走多线程。</p>\n<ul>\n<li>异步方法使用 <code>static</code>  关键词修饰；</li>\n<li>异步类不是一个 <code>Spring</code>  容器的 <code>bean</code> （一般使用注解 <code>@Component</code>  和 <code>@Service</code> ，并且能被 <code>Spring</code>  扫描到）；</li>\n<li><code>SpringBoot</code>  应用中没有添加 <code>@EnableAsync</code>  注解；</li>\n<li>在同一个类中，一个方法调用另外一个有 <code>@Async</code>  注解的方法，注解不会生效。原因是 <code>@Async</code>  注解的方法，是在代理类中执行的。</li>\n</ul>\n<p>需要注意的是： 异步方法使用注解 <code>@Async</code>  的返回值只能为 <code>void</code>  或者 <code>Future</code>  及其子类，当返回结果为其他类型时，方法还是会异步执行，但是返回值都是 <code>null</code> ，部分源码如下：</p>\n<p><code>AsyncExecutionInterceptor</code> - <code>#invoke</code></p>\n<img data-src=\"/posts/eec4b728/2022-02-16-21-01-58.png\" class=\"\">\n<p>通过上边几个示例， <code>@Async</code>  实际还是通过 <code>Future</code>  或 <code>CompletableFuture</code>  来异步执行的， <code>Spring</code>  又封装了一下，让我们使用的更方便。</p>\n",
            "tags": [
                "Java面试",
                "SpringBoot"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/59de1824/",
            "url": "https://smile1231.github.io/posts/59de1824/",
            "title": "spring中/和/*和/**的区别",
            "date_published": "2022-02-15T13:35:15.000Z",
            "content_html": "<h1 id=\"spring中和和的区别\"><a class=\"markdownIt-Anchor\" href=\"#spring中和和的区别\">#</a> spring 中 <code>/</code>  和 <code>/*</code>  和 <code>/**</code>  的区别</h1>\n<h2 id=\"和-区别\"><a class=\"markdownIt-Anchor\" href=\"#和-区别\">#</a>  <code>/</code>  和  <code>/*</code>  区别</h2>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ 拦截所有请求 包括静态资源和动态请求 但是不拦截jsp</span><br><span class=\"line\">/* 拦截所有请求 包括静态资源和动态请求 也拦截jsp</span><br><span class=\"line\">区别就在于<span class=\"regexp\">/ 不拦截jsp /</span>*拦截jsp</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"和-区别-2\"><a class=\"markdownIt-Anchor\" href=\"#和-区别-2\">#</a>  <code>/*</code>  和  <code>/**</code>  区别</h2>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"strong\">** 的意思是所有文件夹及里面的子文件夹</span></span><br><span class=\"line\"><span class=\"strong\">/*</span> 是所有文件夹，不含子文件夹</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意点案例\"><a class=\"markdownIt-Anchor\" href=\"#注意点案例\">#</a> 注意点案例</h2>\n<p>理解下面的案例有助于理解如何使用</p>\n<p>场景：当我在客户端调用 <code>URL</code> ： <code>/user/list</code>  然后返回 <code>user.jsp</code>  视图，</p>\n<ul>\n<li>当配置的是 <code>/</code> ： <code>DispathcherServlet</code>  拿到这个请求然后返回对应的 <code>controller</code> ，然后依据 <code>Dispather Type</code>  为 <code>Forward</code>  类型转发到 <code>user.jsp</code>  视图，即就是请求 <code>user.jsp</code>  视图 ( <code>/user/user.jsp</code> )，此时 <code>Dispather</code>  没有拦截 <code>/user/user.jsp</code> , 因为此时你配置的是默认的 <code>/</code> ，就顺利的交给 <code>ModleAndView</code>  去处理显示了。</li>\n<li>当配置的是 <code>/*</code> ： <code>DispathcherServlet</code>  拿到这个请求然后返回对应的 <code>controller</code> ，然后通过 <code>Dispather Type</code>  通过 <code>Forward</code>  转发到 <code>user.jsp</code>  视图，即就是请求 <code>user.jsp</code>  视图 ( <code>/user/user.jsp</code> )，此时 <code>Dispather</code>  已经拦截 <code>/user/user.jsp</code> ， <code>Dispatcher</code>  会把他当作 <code>Controller</code>  去匹配，没有匹配到就会报 <code>404</code>  错误。</li>\n</ul>\n<p>在 springboot 中建了一个过滤器，测试</p>\n\n<p>当请求为 <code>/user/login</code>  的时候可以被拦截，当为 <code>/page/login.html</code>  页面的时候不拦截</p>\n\n<p>当请求为 <code>/user/login</code>  的时候可以被拦截，当为 <code>/page/login.html</code>  页面的时候也会被拦截</p>\n<ul>\n<li>\n<p><code>/</code>  不会拦截页面，只会拦截路径。</p>\n</li>\n<li>\n<p><code>/*</code>  会路径和页面</p>\n</li>\n</ul>\n<p><strong>结论：在配置视图的时候尽量用 <code>/</code>  这种方式。</strong></p>\n",
            "tags": [
                "Java",
                "Java面试",
                "SpringBoot"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/5e7baeeb/",
            "url": "https://smile1231.github.io/posts/5e7baeeb/",
            "title": "过滤器和拦截器的区别",
            "date_published": "2022-02-15T13:34:17.000Z",
            "content_html": "<h1 id=\"过滤器和拦截器的区别\"><a class=\"markdownIt-Anchor\" href=\"#过滤器和拦截器的区别\">#</a> 过滤器和拦截器的区别</h1>\n<img data-src=\"/posts/5e7baeeb/2022-02-15-22-48-46.png\" class=\"\">\n<ol>\n<li>\n<p>过滤器和拦截器触发时机不一样，过滤器是在请求进入容器后，但请求进入 <code>servlet</code>  之前进行预处理的。请求结束返回也是，是在 <code>servlet</code>  处理完后，返回给前端之前。</p>\n</li>\n<li>\n<p>拦截器可以获取 <code>IOC</code>  容器中的各个 <code>bean</code> ，而过滤器就不行，因为拦截器是 <code>spring</code>  提供并管理的， <code>spring</code>  的功能可以被拦截器使用，在拦截器里注入一个 <code>service</code> ，可以调用业务逻辑。而过滤器是 <code>JavaEE</code>  标准，只需依赖 <code>servlet api</code>  ，不需要依赖 <code>spring</code> 。</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n<img data-src=\"/posts/5e7baeeb/2022-02-15-22-48-57.png\" class=\"\">\n<ol start=\"3\">\n<li>\n<p>过滤器的实现基于 <code>回调函数</code> 。而 <code>拦截器（代理模式）</code> 的实现基于反射</p>\n</li>\n<li>\n<p><code>Filter</code>  是依赖于 <code>Servlet</code>  容器，属于 <code>Servlet</code>  规范的一部分，而拦截器则是独立存在的，可以在任何情况下使用。</p>\n</li>\n<li>\n<p><code>Filter</code>  的执行由 <code>Servlet</code>  容器回调完成，而拦截器通常通过动态代理（反射）的方式来执行。</p>\n</li>\n<li>\n<p><code>Filter</code>  的生命周期由 <code>Servlet</code>  容器管理，而拦截器则可以通过 <code>IoC</code>  容器来管理，因此可以通过注入等方式来获取其他 <code>Bean</code>  的实例，因此使用会更方便。</p>\n</li>\n</ol>\n<h2 id=\"springboot使用过滤器\"><a class=\"markdownIt-Anchor\" href=\"#springboot使用过滤器\">#</a>  <code>SpringBoot</code>  使用过滤器</h2>\n<p>两种方式：</p>\n<ol>\n<li>使用 <code>spring boot</code>  提供的 <code>FilterRegistrationBean</code>  注册 <code>Filter </code></li>\n<li>使用原生 <code>servlet</code>  注解定义 <code>Filter </code> <br>\n两种方式的本质都是一样的，都是去 <code>FilterRegistrationBean</code>  注册自定义 <code>Filter</code></li>\n</ol>\n<blockquote>\n<p>方式一: （使用 <code>spring boot</code>  提供的 <code>FilterRegistrationBean</code>  注册 <code>Filter</code>  ）</p>\n</blockquote>\n<p>①. 先定义 <code>Filter</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cy.springboot01.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> cy</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2021-03-12-9:04 上午</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something 处理request 或response</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;filter1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 调用filter链中的下一个filter</span></span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>②、注册自定义 <code>Filter</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">registrationBean</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean filterRegistrationBean = <span class=\"keyword\">new</span> FilterRegistrationBean(<span class=\"keyword\">new</span> MyFilter());</span><br><span class=\"line\">        filterRegistrationBean.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>方式一的 <code>①②步骤</code> 可以用下面这段代码代替：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterConfig</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">registFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">        registration.setFilter(<span class=\"keyword\">new</span> LogCostFilter());</span><br><span class=\"line\">        registration.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\">        registration.setName(<span class=\"string\">&quot;LogCostFilter&quot;</span>);</span><br><span class=\"line\">        registration.setOrder(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogCostFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Execute cost=&quot;</span>+(System.currentTimeMillis()-start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>方式二：（使用原生 <code>servlet</code>  注解定义 <code>Filter</code>  ）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注入spring容器</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"comment\">// 定义filterName 和过滤的url</span></span><br><span class=\"line\"><span class=\"meta\">@WebFilter(filterName = &quot;my2Filter&quot; ,urlPatterns = &quot;/*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">My2Filter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;filter2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里直接用 <code>@WebFilter</code>  就可以进行配置，同样，可以设置 <code>url</code>  匹配模式，过滤器名称等。这里需要注意一点的是 <code>@WebFilter</code>  这个注解是 <code>Servlet3.0</code>  的规范，并不是 <code>Spring boot</code>  提供的。<strong>除了这个注解以外，我们还需在启动类中加另外一个注解： <code>@ServletComponetScan</code> ，指定扫描的包。</strong></p>\n<h2 id=\"springboot配置拦截器\"><a class=\"markdownIt-Anchor\" href=\"#springboot配置拦截器\">#</a>  <code>SpringBoot</code>  配置拦截器</h2>\n<p>首先我们实现拦截器类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LogCostInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        start = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Interceptor cost=&quot;</span>+(System.currentTimeMillis()-start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>我们还需要实现 <code>HandlerInterceptor</code>  这个接口</strong>，这个接口包括三个方法， <code>preHandle</code>  是请求执行前执行的， <code>postHandler</code>  是请求结束执行的，但只有 <code>preHandle</code>  方法返回 <code>true</code>  的时候才会执行， <code>afterCompletion</code>  是视图渲染完成后才执行，同样需要 <code>preHandle</code>  返回 <code>true</code> ，</p>\n<p>该方法通常用于清理资源等工作。除了实现上面的接口外，我们还需对其进行配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> LogCostInterceptor()).addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.addInterceptors(registry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>这里我们实现了 <code>WebMvcConfigurer</code> </strong>，这里我们重写了 <code>addInterceptors</code>  这个方法，进行拦截器的配置，主要配置项就两个，一个是指定拦截器，第二个是指定拦截的 <code>URL</code> 。</p>\n",
            "tags": [
                "Java",
                "Java面试",
                "SpringBoot"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/a3dfcd98/",
            "url": "https://smile1231.github.io/posts/a3dfcd98/",
            "title": "SpringBoot中常见的几种解决跨域的方式",
            "date_published": "2022-02-13T13:43:13.000Z",
            "content_html": "<h1 id=\"springboot中常见的几种解决跨域的方式\"><a class=\"markdownIt-Anchor\" href=\"#springboot中常见的几种解决跨域的方式\">#</a>  <code>SpringBoot</code>  中常见的几种解决跨域的方式</h1>\n<h2 id=\"一-为什么会出现跨域问题\"><a class=\"markdownIt-Anchor\" href=\"#一-为什么会出现跨域问题\">#</a> 一、为什么会出现跨域问题</h2>\n<p>出于浏览器的同源策略限制。同源策略（ <code>Sameoriginpolicy</code> ）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 <code>Web</code>  是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</p>\n<p>同源策略会阻止一个域的 <code>javascript</code>  脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（ <code>protocol</code> ），主机（ <code>host</code> ）和端口号（ <code>port</code> ）</p>\n<span id=\"more\"></span>\n<h2 id=\"二-什么是跨域\"><a class=\"markdownIt-Anchor\" href=\"#二-什么是跨域\">#</a> 二、什么是跨域</h2>\n<p>当一个请求 <code>url</code>  的协议、域名、端口三者之间任意一个与当前页面 <code>url</code>  不同即为跨域</p>\n<h2 id=\"三-非同源限制\"><a class=\"markdownIt-Anchor\" href=\"#三-非同源限制\">#</a> 三、非同源限制</h2>\n<p>【1】无法读取非同源网页的  <code>Cookie</code> 、 <code>LocalStorage</code>  和  <code>IndexedDB</code></p>\n<p>【2】无法接触非同源网页的  <code>DOM</code></p>\n<p>【3】无法向非同源地址发送  <code>AJAX</code>  请求</p>\n<h2 id=\"四-java-后端-实现-cors-跨域请求的方式\"><a class=\"markdownIt-Anchor\" href=\"#四-java-后端-实现-cors-跨域请求的方式\">#</a> 四、 <code>java</code>  后端 实现  <code>CORS</code>  跨域请求的方式</h2>\n<p>对于  <code>CORS</code>  的跨域请求，主要有以下几种方式可供选择：</p>\n<ul>\n<li>返回新的 <code>CorsFilter</code></li>\n<li>重写  <code>WebMvcConfigurer</code></li>\n<li>使用注解  <code>@CrossOrigin</code></li>\n<li>手动设置响应头 ( <code>HttpServletResponse</code> )</li>\n<li>自定 <code>web filter</code>  实现跨域</li>\n</ul>\n<p>注意:</p>\n<ul>\n<li><code>CorFilter / WebMvConfigurer / @CrossOrigin</code>  需要  <code>SpringMVC 4.2</code>  以上版本才支持，对应 <code>springBoot 1.3</code>  版本以上</li>\n<li>上面前两种方式属于全局  <code>CORS</code>  配置，后两种属于局部  <code>CORS</code>  配置。如果使用了局部跨域是会覆盖全局跨域的规则，所以可以通过  <code>@CrossOrigin</code>  注解来进行细粒度更高的跨域资源控制。</li>\n<li>其实无论哪种方案，最终目的都是修改响应头，向响应头中添加浏览器所要求的数据，进而实现跨域</li>\n</ul>\n<h2 id=\"1返回新的-corsfilter全局跨域\"><a class=\"markdownIt-Anchor\" href=\"#1返回新的-corsfilter全局跨域\">#</a> 1. 返回新的  <code>CorsFilter</code>  (全局跨域)</h2>\n<p>在任意配置类，返回一个 新的  <code>CorsFIlter Bean</code>  ，并添加映射路径和具体的 <code>CORS</code>  配置路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalCorsConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CorsFilter <span class=\"title\">corsFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 添加 CORS配置信息</span></span><br><span class=\"line\">        CorsConfiguration config = <span class=\"keyword\">new</span> CorsConfiguration();</span><br><span class=\"line\">        <span class=\"comment\">//放行哪些原始域</span></span><br><span class=\"line\">        config.addAllowedOrigin(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//是否发送 Cookie</span></span><br><span class=\"line\">        config.setAllowCredentials(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//放行哪些请求方式</span></span><br><span class=\"line\">        config.addAllowedMethod(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//放行哪些原始请求头部信息</span></span><br><span class=\"line\">        config.addAllowedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//暴露哪些头部信息</span></span><br><span class=\"line\">        config.addExposedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2. 添加映射路径</span></span><br><span class=\"line\">        UrlBasedCorsConfigurationSource corsConfigurationSource = <span class=\"keyword\">new</span> UrlBasedCorsConfigurationSource();</span><br><span class=\"line\">        corsConfigurationSource.registerCorsConfiguration(<span class=\"string\">&quot;/**&quot;</span>,config);</span><br><span class=\"line\">        <span class=\"comment\">//3. 返回新的CorsFilter</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CorsFilter(corsConfigurationSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-重写-webmvcconfigurer全局跨域\"><a class=\"markdownIt-Anchor\" href=\"#2-重写-webmvcconfigurer全局跨域\">#</a> 2. 重写  <code>WebMvcConfigurer</code>  (全局跨域)</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CorsConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCorsMappings</span><span class=\"params\">(CorsRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">//是否发送Cookie</span></span><br><span class=\"line\">                .allowCredentials(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                <span class=\"comment\">//放行哪些原始域</span></span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .allowedMethods(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;DELETE&quot;</span>&#125;)</span><br><span class=\"line\">                .allowedHeaders(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\">                .exposedHeaders(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-使用注解-局部跨域\"><a class=\"markdownIt-Anchor\" href=\"#3-使用注解-局部跨域\">#</a> 3. 使用注解 (局部跨域)</h2>\n<p>在控制器 (类上) 上使用注解  <code>@CrossOrigin:</code> ，表示该类的所有方法允许跨域。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@CrossOrigin(origins = &quot;*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在方法上使用注解  <code>@CrossOrigin</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin(origins = &quot;*&quot;)</span></span><br><span class=\"line\">     <span class=\"comment\">//@CrossOrigin(value = &quot;http://localhost:8081&quot;) //指定具体ip允许跨域</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-手动设置响应头局部跨域\"><a class=\"markdownIt-Anchor\" href=\"#4-手动设置响应头局部跨域\">#</a> 4. 手动设置响应头 (局部跨域)</h2>\n<p>使用  <code>HttpServletResponse</code>  对象添加响应头 <code>(Access-Control-Allow-Origin)</code>  来授权原始域，这里  <code>Origin</code>  的值也可以设置为 <code> “*”</code> , 表示全部放行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/index&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">    response.addHeader(<span class=\"string\">&quot;Access-Allow-Control-Origin&quot;</span>,<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;index&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-使用自定义filter实现跨域\"><a class=\"markdownIt-Anchor\" href=\"#5-使用自定义filter实现跨域\">#</a> 5. 使用自定义 <code>filter</code>  实现跨域</h2>\n<p>首先编写一个过滤器，可以起名字为 <code>MyCorsFilter.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mesnac.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCorsFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">    HttpServletResponse response = (HttpServletResponse) res;</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;POST, GET, OPTIONS, DELETE&quot;</span>);</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&quot;Access-Control-Max-Age&quot;</span>, <span class=\"string\">&quot;3600&quot;</span>);</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;x-requested-with,content-type&quot;</span>);</span><br><span class=\"line\">    chain.doFilter(req, res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>web.xml</code>  中配置这个过滤器，使其生效</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 跨域访问 START--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CorsFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.mesnac.aop.MyCorsFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CorsFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 跨域访问 END  --&gt;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java",
                "SpringBoot"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/c112412d/",
            "url": "https://smile1231.github.io/posts/c112412d/",
            "title": "Mybatis封装成Map结果",
            "date_published": "2022-02-13T13:42:17.000Z",
            "content_html": "<h1 id=\"mybatis封装成map结果\"><a class=\"markdownIt-Anchor\" href=\"#mybatis封装成map结果\">#</a>  <code>Mybatis</code>  封装成 <code>Map</code>  结果</h1>\n<h2 id=\"dao层\"><a class=\"markdownIt-Anchor\" href=\"#dao层\">#</a>  <code>Dao</code>  层</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapKey(&quot;cityCode&quot;)</span></span><br><span class=\"line\"><span class=\"function\">Map&lt;String,InvoiceSubjectRuleCity&gt; <span class=\"title\">bulkSelectRuleCityByRuleIdList</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;ruleIdList&quot;)</span> List&lt;Long&gt; ruleIdList)</span></span>;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bulkSelectRuleCityByRuleIdList&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class=\"line\">    select</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class=\"line\">    from t_invoice_subject_rule_city</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">      rule_id in</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;ruleIdList&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;ruleId&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span>&gt;</span></span><br><span class=\"line\">           #&#123;ruleId&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>返回结果即为 <code>Map</code>  类型</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/2edf7887/",
            "url": "https://smile1231.github.io/posts/2edf7887/",
            "title": "MybatisPlus实现分页查询",
            "date_published": "2022-02-13T13:41:49.000Z",
            "content_html": "<h1 id=\"mybatisplus实现分页查询\"><a class=\"markdownIt-Anchor\" href=\"#mybatisplus实现分页查询\">#</a>  <code>MybatisPlus</code>  实现分页查询</h1>\n<h2 id=\"分页区别\"><a class=\"markdownIt-Anchor\" href=\"#分页区别\">#</a> 分页区别</h2>\n<p>分页查询每个人程序猿几乎都使用过，但是有部分同学不懂什么是物理分页和逻辑分页。</p>\n<p>物理分页：相当于执行了 <code>limit</code>  分页语句，返回部分数据。物理分页只返回部分数据占用内存小，能够获取数据库最新的状态，实施性比较强，一般适用于数据量比较大，数据更新比较频繁的场景。</p>\n<p>逻辑分页：一次性把全部的数据取出来，通过程序进行筛选数据。如果数据量大的情况下会消耗大量的内存，由于逻辑分页只需要读取数据库一次，不能获取数据库最新状态，实施性比较差，适用于数据量小，数据稳定的场合。</p>\n<p>那么 MP 中的物理分页怎么实现呢？ 往下看往下看</p>\n<span id=\"more\"></span>\n<h2 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h2>\n<p>需要新建一个 <code>JavaConfig</code>  类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisPlusConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页插件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PaginationInterceptor <span class=\"title\">paginationInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PaginationInterceptor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体分页实现\"><a class=\"markdownIt-Anchor\" href=\"#具体分页实现\">#</a> 具体分页实现</h2>\n<p><code>MP</code>  的 <code>Wrapper</code>  提供了两种分页查询的方式，源码如下：</p>\n<img data-src=\"/posts/2edf7887/2022-02-13-22-35-05.png\" class=\"\">\n<p>可见两个分页方法参数都是一致的，只是返回参数略有不同，具体选择根据实际业务为准。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectByPage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> QueryWrapper();</span><br><span class=\"line\">    wrapper.like(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;雨&quot;</span>).lt(<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Page&lt;User&gt; page = <span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//IPage&lt;User&gt; userIPage = userMapper.selectPage(page, wrapper);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    IPage&lt;Map&lt;String, Object&gt;&gt; mapIPage = userMapper.selectMapsPage(page, wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总页数&quot;</span>+mapIPage.getPages());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总记录数&quot;</span>+mapIPage.getTotal());</span><br><span class=\"line\">    List&lt;Map&lt;String, Object&gt;&gt; records = mapIPage.getRecords();</span><br><span class=\"line\">    records.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上分页查询执行 <code>sql</code>  如下，先是查询了一次总记录数，然后在查询的数据。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span>  Preparing: <span class=\"keyword\">SELECT</span> <span class=\"built_in\">COUNT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> ? <span class=\"keyword\">AND</span> age <span class=\"operator\">&lt;</span> ? </span><br><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span> Parameters: <span class=\"operator\">%</span>雨<span class=\"operator\">%</span>(String), <span class=\"number\">40</span>(<span class=\"type\">Integer</span>)</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>    Columns: <span class=\"built_in\">COUNT</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>        <span class=\"type\">Row</span>: <span class=\"number\">2</span></span><br><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span>  Preparing: <span class=\"keyword\">SELECT</span> id,name,age,email,manager_id,create_time <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> name <span class=\"keyword\">LIKE</span> ? <span class=\"keyword\">AND</span> age <span class=\"operator\">&lt;</span> ? LIMIT ?,? </span><br><span class=\"line\">DEBUG<span class=\"operator\">=</span><span class=\"operator\">=</span><span class=\"operator\">&gt;</span> Parameters: <span class=\"operator\">%</span>雨<span class=\"operator\">%</span>(String), <span class=\"number\">40</span>(<span class=\"type\">Integer</span>), <span class=\"number\">0</span>(Long), <span class=\"number\">2</span>(Long)</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>    Columns: id, name, age, email, manager_id, create_time</span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>        <span class=\"type\">Row</span>: <span class=\"number\">2</span>, 张雨琪, <span class=\"number\">31</span>, zjq<span class=\"variable\">@baomidou</span>.com, <span class=\"number\">1088248166370832385</span>, <span class=\"number\">2021</span><span class=\"number\">-01</span><span class=\"number\">-14</span> <span class=\"number\">09</span>:<span class=\"number\">15</span>:<span class=\"number\">15</span></span><br><span class=\"line\">TRACE<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>        <span class=\"type\">Row</span>: <span class=\"number\">3</span>, 刘红雨, <span class=\"number\">31</span>, lhm<span class=\"variable\">@baomidou</span>.com, <span class=\"number\">1088248166370832385</span>, <span class=\"number\">2021</span><span class=\"number\">-01</span><span class=\"number\">-14</span> <span class=\"number\">09</span>:<span class=\"number\">48</span>:<span class=\"number\">16</span></span><br><span class=\"line\">DEBUG<span class=\"operator\">&lt;=</span><span class=\"operator\">=</span>      Total: <span class=\"number\">2</span></span><br><span class=\"line\">总页数<span class=\"number\">1</span></span><br><span class=\"line\">总记录数<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>现在我们有需求只要查询数据即可， 不关心总记录数等，如果使用默认的方式就消耗不必要的性能。那么解决办法也是很简单的，只需要在创建 <code>page</code>  对象时传入第三个参数为 <code>false</code>  即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page&lt;User&gt; page = <span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "分页查询"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/31dc52e1/",
            "url": "https://smile1231.github.io/posts/31dc52e1/",
            "title": "MyBatis之分页查询：MyBatis PageHelper",
            "date_published": "2022-02-13T13:40:27.000Z",
            "content_html": "<h1 id=\"mybatis之分页查询mybatis-pagehelper\"><a class=\"markdownIt-Anchor\" href=\"#mybatis之分页查询mybatis-pagehelper\">#</a>  <code>MyBatis</code>  之分页查询： <code>MyBatis PageHelper</code></h1>\n<h2 id=\"1-添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#1-添加依赖\">#</a> 1. 添加依赖</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--MyBatis 分页插件: MyBatis PageHelper--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-添加配置\"><a class=\"markdownIt-Anchor\" href=\"#2-添加配置\">#</a> 2. 添加配置</h2>\n<span id=\"more\"></span>\n<p>在 <code>application.properties</code>  配置文件中添加 <code>MyBatis PageHelper</code>  的配置项</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PageHelper 分页插件配置</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.helperDialect</span>=<span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.reasonable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.supportMethodsArguments</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"meta\">pagehelper.params</span>=<span class=\"string\">count=countSql</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-分页查询\"><a class=\"markdownIt-Anchor\" href=\"#3-分页查询\">#</a> 3. 分页查询</h2>\n<p>通过  <code>MyBatis PageHelper</code>  进行分页查询实际上非常简单，只需在 <code>service(或mapper)</code>  方法执行查询前，调用一次  <code>PageHelper.startPage(pageNum,pageSize)</code>   <code>来设置分页查询参数即可，其中pageNum</code>  为记录页数， <code>pageSize</code>  为单页记录数量。此时 <code>service(或mapper)</code>  方法的查询结果就是分页后的结果了。如果期望获得相关的分页信息，还可以将查询结果封装到 <code>PageInfo</code>  对象中，以获得总页数、总记录数、当前页数等相关分页信息</p>\n<p>现在通过一个实际示例，来具体演示操作，这里我们提供了一个分页查询的 <code>Controller</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageNum 记录页数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pageSize 单页记录数量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/findPage&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">findPage</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> <span class=\"keyword\">int</span> pageNum, <span class=\"meta\">@RequestParam</span> <span class=\"keyword\">int</span> pageSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置分页查询参数</span></span><br><span class=\"line\">    PageHelper.startPage(pageNum,pageSize);</span><br><span class=\"line\">    List&lt;Student&gt; studentList = studentService.findList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Student student : studentList) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;element : &quot;</span> + student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 封装分页查询结果到 PageInfo 对象中以获取相关分页信息</span></span><br><span class=\"line\">    PageInfo pageInfo = <span class=\"keyword\">new</span> PageInfo( studentList );</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总页数: &quot;</span> + pageInfo.getPages());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;总记录数: &quot;</span> + pageInfo.getTotal());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;当前页数: &quot;</span> + pageInfo.getPageNum());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;当前页面记录数量: &quot;</span> + pageInfo.getSize());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pageInfo.getList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>service</code>  方法中所调用的查询 <code>SQL</code>  如下所示，可以看到， <code>SQL</code>  中无需使用 <code>limit</code>  语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;studentResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.aaron.springbootdemo.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;sex&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findList&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;studentResultMap&quot;</span>&gt;</span>    </span><br><span class=\"line\">    SELECT * FROM user</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>NOTE:</code></p>\n</blockquote>\n<p><code>PageHelper.startPage(pageNum,pageSize)</code>  只对其后的第一次 <code>SQL</code>  查询进行分页。故若需进行分页查询，必须每次在 <code>service（或mapper）</code> 方法执行 <code>SQL</code>  查询前调用 <code>PageHelper.startPage(pageNum,pageSize) </code> 方法</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "分页查询"
            ]
        },
        {
            "id": "https://smile1231.github.io/posts/105c245f/",
            "url": "https://smile1231.github.io/posts/105c245f/",
            "title": "Mybatis使用Sql进行模糊查询",
            "date_published": "2022-02-13T13:39:52.000Z",
            "content_html": "<h1 id=\"mybatis使用sql进行模糊查询\"><a class=\"markdownIt-Anchor\" href=\"#mybatis使用sql进行模糊查询\">#</a>  <code>Mybatis</code>  使用 <code>Sql</code>  进行模糊查询</h1>\n<h2 id=\"方式一\"><a class=\"markdownIt-Anchor\" href=\"#方式一\">#</a> 方式一</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;String&quot;</span>&gt;</span></span><br><span class=\"line\">    select * from user where username like #&#123;username&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>模糊查询的测试方法</p>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; users = userDao.findByName(<span class=\"string\">&quot;%王%&quot;</span>);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/105c245f/2022-02-13-22-29-15.png\" class=\"\">\n<p>我们在配置文件中没有加入 <code>%</code>  来作为模糊查询的条件，所以在传入字符串实参时，就需要给定模糊查询的标<br>\n识 %。配置文件中的 <code>#&#123;username&#125;</code>  也只是一个占位符，所以  <code>SQL</code>  语句显示为 <code>“？”</code> 。</p>\n<h2 id=\"方式二\"><a class=\"markdownIt-Anchor\" href=\"#方式二\">#</a> 方式二</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;string&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span>&gt;</span></span><br><span class=\"line\"> select * from user where username like &#x27;%$&#123;value&#125;%&#x27;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我们在上面将原来的 <code>#&#123;&#125;</code>  占位符，改成了 <code>&#123;value&#125;</code> 。注意如果用模糊查询的这种写法，那么 <code>$&#123;value&#125;</code>  的写法就是固定的，不能写成其它名字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//执行查询一个方法</span></span><br><span class=\"line\">List&lt;User&gt; users = userDao.findByName(<span class=\"string\">&quot;王&quot;</span>);</span><br></pre></td></tr></table></figure>\n<img data-src=\"/posts/105c245f/2022-02-13-22-29-25.png\" class=\"\">\n<p>可以发现，我们在程序代码中就不需要加入模糊查询的匹配符 % 了，这两种方式的实现效果是一样的，但执行<br>\n的语句是不一样的。</p>\n<h2 id=\"方式三\"><a class=\"markdownIt-Anchor\" href=\"#方式三\">#</a> 方式三</h2>\n<p>说明：通过前两种写法，虽然可以解决模糊查询的问题，但是还是不好，因为通过 <code>%</code>  的方式会引发 <code>sql</code>  注入的问题，现在的期望是：既能够解决 <code>sql</code>  注入又能在配置文件中写 <code>%</code>  该如何实现呢，可以借助 <code>mysql</code>  的函数。</p>\n<p>修改  <code>SQL</code>  语句的配置，配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;findByName&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;string&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.sc.domain.User&quot;</span>&gt;</span></span><br><span class=\"line\"> select * from user where username like concat(&#x27;%&#x27;,#&#123;username&#125;,&#x27;%&#x27;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>*#&#123; &#125;</code>  是预编译处理， <code>MyBatis</code>  在处理 <code>#&#123; &#125;</code>  时，它会将 <code>sql</code>  中的 <code>#&#123; &#125;</code>  替换为 <code>？</code> ，然后调用 <code>PreparedStatement</code>  的 <code>set</code>  方法来赋值，传入字符串后，会在值两边加上单引号，使用占位符的方式提高效率，可以防止 <code>sql</code>  注入。<br>\n <code>$&#123;&#125;:</code>  表示拼接 <code>sql</code>  串，将接收到参数的内容不加任何修饰拼接在 <code>sql</code>  中，可能引发 <code>sql</code>  注入。</p>\n",
            "tags": [
                "Java",
                "SpringBoot",
                "Mybatis",
                "模糊查询"
            ]
        }
    ]
}