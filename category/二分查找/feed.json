{
    "version": "https://jsonfeed.org/version/1",
    "title": "JIN MAO 's Blog • All posts by \"二分查找\" category",
    "description": "",
    "home_page_url": "https://smile1231.github.io",
    "items": [
        {
            "id": "https://smile1231.github.io/posts/e8eb0481/",
            "url": "https://smile1231.github.io/posts/e8eb0481/",
            "title": "二分查找",
            "date_published": "2022-02-16T13:06:36.000Z",
            "content_html": "<h1 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h1><p>二分查找（<code>binary search</code>），也称作折半查找（<code>half-interval search</code>），每次划分一半进行下一步搜索，所以时间复杂度无非就是<code>while</code>循环的次数！</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二分查找 Java 实现 （升序数组）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(Integer[] srcArray, <span class=\"keyword\">int</span> des)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> high = srcArray.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((low &lt;= high) &amp;&amp; (low &lt;= srcArray.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">            &amp;&amp; (high &lt;= srcArray.length - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &gt;&gt; 右移符号 表示除以 2</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> middle = (high + low) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (des == srcArray[middle]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">        <span class=\"comment\">// 如果要查找的值 小于最中间的值 就算选择 左边的区间</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (des &lt; srcArray[middle]) &#123;</span><br><span class=\"line\">            high = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            low = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><p>比如：总共有<code>n</code>个元素，每次查找的区间大小就是<code>n，n/2，n/4，…，n/2^k</code>（接下来操作元素的剩余个数），其中<code>k</code>就是循环的次数。<br>由于<code>n/2^k</code>取整后<code>&gt;=1</code>，即令<code>n/2^k=1</code>，<br>可得<code>k=log2n</code>,（是以<code>2</code>为底，<code>n</code>的对数），所以时间复杂度可以表示<code>O()=O(log2n)</code></p>\n<h2 id=\"二分查找的缺点\"><a href=\"#二分查找的缺点\" class=\"headerlink\" title=\"二分查找的缺点\"></a>二分查找的缺点</h2><p>虽然二分查找的效率高，但是要将表按关键字排序。而排序本身是一种很费时的运算。既使采用高效率的排序方法也要花费<code>O(nlgn)</code>的时间。</p>\n<p>　　二分查找只适用顺序存储结构。为保持表的有序性，在顺序结构里插入和删除都必须移动大量的结点。因此，二分查找特别适用于那种一经建立就很少改动、而又经常需要查找的线性表。</p>\n<p>　　对那些查找少而又经常需要改动的线性表，可采用链表作存储结构，进行顺序查找。链表上无法实现二分查找。</p>\n",
            "tags": [
                "Java面试",
                "算法",
                "二分查找"
            ]
        }
    ]
}