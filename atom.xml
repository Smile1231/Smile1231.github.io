<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JIN MAO &#39;s Blog</title>
  
  <subtitle>when to get rich</subtitle>
  <link href="https://smile1231.github.io/atom.xml" rel="self"/>
  
  <link href="https://smile1231.github.io/"/>
  <updated>2022-05-21T15:15:48.225Z</updated>
  <id>https://smile1231.github.io/</id>
  
  <author>
    <name>JIN Mao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot 获取服务IP地址和端口号</title>
    <link href="https://smile1231.github.io/posts/67f40b37/"/>
    <id>https://smile1231.github.io/posts/67f40b37/</id>
    <published>2022-05-21T14:58:51.000Z</published>
    <updated>2022-05-21T15:15:48.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>IP</code>地址</p></blockquote><p><code>IP</code>地址非常简单, 直接上代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    String result = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">    LOGGER.error(<span class="string">&quot;获取IP失败&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>端口号</p></blockquote><p>获取端口号有四种方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- `<span class="meta">@Value</span>`注解</span><br><span class="line">- `<span class="meta">@LocalServerPort</span>`注解</span><br><span class="line">- `Environment`</span><br><span class="line"></span><br><span class="line">我们将`<span class="meta">@Value</span>和<span class="meta">@LocalServerPort</span>`放在一起, 其实`<span class="meta">@LocalServerPort</span>`等价于`<span class="meta">@Value(&quot;$&#123;local.server.port&#125;&quot;)</span>`:</span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">int</span> serverPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LocalServerPort</span></span><br><span class="line"><span class="keyword">int</span> localServerPort</span><br></pre></td></tr></table></figure><p>这里要特别注意, 如果没有在配置文件中配置<code>local.server.port, @LocalServerPort</code>会为<code>null</code><br><code>Environment</code>本质和上述方法类似, 用它来读取配置属性:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Environment environment;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> environment.getProperty(<span class="string">&quot;server.port&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/6966920140461965320">参考链接</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;IP&lt;/code&gt;地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;IP&lt;/code&gt;地址非常简单, 直接上代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String result = InetAddress.getLocalHost().getHostAddress();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (UnknownHostException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOGGER.error(&lt;span class=&quot;string&quot;&gt;&amp;quot;获取IP失败&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/categories/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>一图看懂Java中的PO,BO,VO,DTO,POJO,DAO,DO</title>
    <link href="https://smile1231.github.io/posts/bd76a990/"/>
    <id>https://smile1231.github.io/posts/bd76a990/</id>
    <published>2022-05-21T14:57:50.000Z</published>
    <updated>2022-05-21T15:15:48.228Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6952848675924082718"> 参考链接 </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6952848675924082718&quot;&gt; 参考链接 &lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在Javadoc注释中引用方法</title>
    <link href="https://smile1231.github.io/posts/d6d1be75/"/>
    <id>https://smile1231.github.io/posts/d6d1be75/</id>
    <published>2022-05-21T14:00:19.000Z</published>
    <updated>2022-05-21T15:15:48.229Z</updated>
    
    <content type="html"><![CDATA[<p>最近用到如何在注释中<code>link</code>到另一个类</p><ol><li><code>@link</code>标签<br><code>Javadoc</code> 提供了<code>@link</code>内联标记来引用Java 类中的成员。我们可以认为<code>@link</code>标签类似于 <code>HTML</code> 中的锚标签，用于通过超链接将一个页面链接到另一个页面。</li></ol><p>让我们看看使用<code>@link</code>标记引用 <code>Javadoc</code> 注释中的方法的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">@link</span> path_to_member label&#125;</span><br></pre></td></tr></table></figure><p>与锚标签类似，<code>path_to_member</code>是目的地，标签是显示文本。</p><p>标签是可选的，但<code>path_to_member</code>是引用方法所必需的。但是，始终使用标签名称来避免复杂的参考链接是一种很好的做法。<code>path_to_member</code>的语法 根据我们引用的方法是否驻留在同一个类中而有所不同。</p><p>需要注意的是，大括号<code>&#123;</code>和<code>@link</code>之间不能有空格。如果它们之间有空格，<code>Javadoc </code>工具将无法正确生成引用。但是， <code>path_to_member、label</code>和右大括号之间没有空间限制。</p><span id="more"></span><ol start="2"><li>引用同一个类中的方法<br>引用方法的最简单方法是在同一个类中：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">@link</span> #methodName() LabelName&#125;</span><br></pre></td></tr></table></figure>假设我们正在记录一个方法，并且我们想从同一个类中引用另一个方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Also, check the &#123;<span class="doctag">@link</span> #move() Move&#125; method for more movement details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在这种情况下，<code>walk()</code>方法引用同一类中的<code>move()</code>实例方法。</li></ol><p>如果被引用的方法有参数，当我们想要引用一个重载或参数化的方法时，我们必须相应地指定其参数的类型。</p><p>考虑以下引用重载方法的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check this &#123;<span class="doctag">@link</span> #move(String) Move&#125; method for direction-oriented movement.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(String direction)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>move()</code>方法是指一种采用一个String参数的重载方法。</p><ol start="3"><li>引用另一个类中的方法<br>要引用另一个类中的方法，我们将使用类名，后跟标签，然后是方法名：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">@link</span> ClassName#methodName() LabelName&#125;</span><br></pre></td></tr></table></figure>语法类似于引用同一类中的方法，除了在<code>#</code>符号之前提到类名。</li></ol><p>现在，让我们考虑在另一个类中引用方法的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Additionally, check this &#123;<span class="doctag">@link</span> Animal#run(String) Run&#125; method for direction based run.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用的方法在同一个包中的<code>Animal</code>类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String direction)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想引用另一个包中的方法，我们有两个选择。一种方法是直接指定包以及类名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Also consider checking &#123;<span class="doctag">@link</span> com.baeldung.sealed.classes.Vehicle#Vehicle() Vehicle&#125; </span></span><br><span class="line"><span class="comment"> * constructor to initialize vehicle object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，已经使用完整的包名称提到了<code>Vehicle</code>类，以引用<code>Vehicle()</code>方法。</p><p>此外，我们可以导入包并单独提及类名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baeldung.sealed.records.Car;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Have a look at &#123;<span class="doctag">@link</span> Car#getNumberOfSeats() SeatsAvailability&#125; </span></span><br><span class="line"><span class="comment"> * method for checking the available seats needed for driving.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，驻留在另一个包中的<code>Car</code>类已被导入。所以，<code>@link</code>只需要包含类名和方法。</p><p>我们可以选择两种方式中的任何一种来引用不同包中的方法。如果是单次使用包，那么我们可以使用第一种方式，否则，如果有多个依赖项，我们应该选择第二种方式。</p><ol start="4"><li><code>@linkplain</code>标签<br>我们已经在注释中看到了用于引用方法的<code>@link Javadoc</code> 标记。<code>Javadoc</code> 提供了另一个名为<code>@linkplain</code> 的标记，用于在注释中引用方法，类似于<code>@link</code>标记。主要区别在于，在生成文档时，<code>@link</code>以等宽格式文本生成标签值，而<code>@linkplain</code>以标准格式（如纯文本）生成它。</li></ol><p><a href="https://www.zditect.com/main-advanced/java/java-method-in-javadoc.html"> 原文章地址 </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近用到如何在注释中&lt;code&gt;link&lt;/code&gt;到另一个类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@link&lt;/code&gt;标签&lt;br&gt;&lt;code&gt;Javadoc&lt;/code&gt; 提供了&lt;code&gt;@link&lt;/code&gt;内联标记来引用Java 类中的成员。我们可以认为&lt;code&gt;@link&lt;/code&gt;标签类似于 &lt;code&gt;HTML&lt;/code&gt; 中的锚标签，用于通过超链接将一个页面链接到另一个页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们看看使用&lt;code&gt;@link&lt;/code&gt;标记引用 &lt;code&gt;Javadoc&lt;/code&gt; 注释中的方法的语法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;meta&quot;&gt;@link&lt;/span&gt; path_to_member label&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;与锚标签类似，&lt;code&gt;path_to_member&lt;/code&gt;是目的地，标签是显示文本。&lt;/p&gt;
&lt;p&gt;标签是可选的，但&lt;code&gt;path_to_member&lt;/code&gt;是引用方法所必需的。但是，始终使用标签名称来避免复杂的参考链接是一种很好的做法。&lt;code&gt;path_to_member&lt;/code&gt;的语法 根据我们引用的方法是否驻留在同一个类中而有所不同。&lt;/p&gt;
&lt;p&gt;需要注意的是，大括号&lt;code&gt;&amp;#123;&lt;/code&gt;和&lt;code&gt;@link&lt;/code&gt;之间不能有空格。如果它们之间有空格，&lt;code&gt;Javadoc &lt;/code&gt;工具将无法正确生成引用。但是， &lt;code&gt;path_to_member、label&lt;/code&gt;和右大括号之间没有空间限制。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Springboot+Vue二进制文件传输</title>
    <link href="https://smile1231.github.io/posts/a1926332/"/>
    <id>https://smile1231.github.io/posts/a1926332/</id>
    <published>2022-05-21T13:42:10.000Z</published>
    <updated>2022-05-21T15:15:48.227Z</updated>
    
    <content type="html"><![CDATA[<p>最近用到了<code>springboot</code>项目返回二进制流，话不多说，代码贴上:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/file/&#123;fileName&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;FileSystemResource&gt; <span class="title">getFile</span><span class="params">(<span class="meta">@PathVariable(&quot;fileName&quot;)</span> String fileName)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(filePath, fileName);</span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> export(file);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(file);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;FileSystemResource&gt; <span class="title">export</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">headers.add(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span>);</span><br><span class="line">headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + file.getName());</span><br><span class="line">headers.add(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">headers.add(<span class="string">&quot;Expires&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">headers.add(<span class="string">&quot;Last-Modified&quot;</span>, <span class="keyword">new</span> Date().toString());</span><br><span class="line">headers.add(<span class="string">&quot;ETag&quot;</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                        .headers(headers)</span><br><span class="line">                        .contentLength(file.length())</span><br><span class="line">                        .contentType(MediaType.parseMediaType(<span class="string">&quot;application/octet-stream&quot;</span>))</span><br><span class="line">                        .body(<span class="keyword">new</span> FileSystemResource(file));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>前端<code>Vue</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">downloadXLSXFile() &#123;</span><br><span class="line"><span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">that.axios</span><br><span class="line">.post(</span><br><span class="line"><span class="string">&quot;/download/XLSXExampleFile&quot;</span>,</span><br><span class="line">&#123; fileId: <span class="number">123</span> &#125;, <span class="comment">//入参</span></span><br><span class="line">&#123; responseType: <span class="string">&quot;blob&quot;</span> &#125; <span class="comment">// 设置responseType对象格式为 blob:</span></span><br><span class="line">)</span><br><span class="line">.then((res) =&gt; &#123;</span><br><span class="line">let blob = <span class="keyword">new</span> Blob([res.data], &#123;</span><br><span class="line">type: <span class="string">&quot;application/octet-stream&quot;</span>,</span><br><span class="line">&#125;); <span class="comment">// 获取请求返回的response对象中的blob 设置文件类型</span></span><br><span class="line"></span><br><span class="line">let url = window.URL.createObjectURL(blob); <span class="comment">// 创建一个临时的url指向blob对象</span></span><br><span class="line">let a = document.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">a.href = url;</span><br><span class="line">a.download = <span class="string">&quot;text.xslx&quot;</span>; <span class="comment">//下载的文件名</span></span><br><span class="line">a.click();</span><br><span class="line">window.URL.revokeObjectURL(url); <span class="comment">//释放blob对象</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同时贴一个<code>Springboot</code>接受前端`Vue``对象参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/business&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubmitController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SubmitService submitService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">submitAction</span><span class="params">(<span class="meta">@RequestBody</span> UploadFileSubmitEntity uploadFileSubmitEntity)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start submitAction ...&quot;</span>);</span><br><span class="line">        log.info(uploadFileSubmitEntity.toString());</span><br><span class="line">        <span class="keyword">return</span> submitService.submitAction(uploadFileSubmitEntity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileSubmitEntity</span> </span>&#123;</span><br><span class="line">    <span class="comment">//gz 文件列表</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;GZFileList&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;UploadRes&gt; GZFileList;</span><br><span class="line">    <span class="comment">//xlsx 文件列表</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;XLSXFileList&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;UploadRes&gt; XLSXFileList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line"><span class="string">&quot;GZFileList&quot;</span>: <span class="built_in">this</span>.GZFileList,</span><br><span class="line"><span class="string">&quot;XLSXFileList&quot;</span>: <span class="built_in">this</span>.XLSXFileList,</span><br><span class="line">&#125;;</span><br><span class="line">that.axios(&#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/business/submit&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(param),</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(res.data.code == <span class="number">200</span>)&#123;</span><br><span class="line">that.$message.success(<span class="string">&quot;submit successfully! , Plz wait for some time .&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近用到了&lt;code&gt;springboot&lt;/code&gt;项目返回二进制流，话不多说，代码贴上:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@PostMapping(value = &amp;quot;/file/&amp;#123;fileName&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ResponseEntity&amp;lt;FileSystemResource&amp;gt; &lt;span class=&quot;title&quot;&gt;getFile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;meta&quot;&gt;@PathVariable(&amp;quot;fileName&amp;quot;)&lt;/span&gt; String fileName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; FileNotFoundException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	File file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(filePath, fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file.exists()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; export(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.out.println(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ResponseEntity&amp;lt;FileSystemResource&amp;gt; &lt;span class=&quot;title&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File file)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HttpHeaders headers = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpHeaders();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Cache-Control&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;no-cache, no-store, must-revalidate&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Content-Disposition&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;attachment; filename=&amp;quot;&lt;/span&gt; + file.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Pragma&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;no-cache&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Expires&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Last-Modified&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date().toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;ETag&amp;quot;&lt;/span&gt;, String.valueOf(System.currentTimeMillis()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ResponseEntity.ok()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .headers(headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .contentLength(file.length())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .contentType(MediaType.parseMediaType(&lt;span class=&quot;string&quot;&gt;&amp;quot;application/octet-stream&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .body(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileSystemResource(file));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
    <category term="文件上传" scheme="https://smile1231.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>文件上传前端小结</title>
    <link href="https://smile1231.github.io/posts/7733848a/"/>
    <id>https://smile1231.github.io/posts/7733848a/</id>
    <published>2022-05-21T13:24:07.000Z</published>
    <updated>2022-05-21T15:15:48.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页面a标签-点击不跳转"><a href="#页面a标签-点击不跳转" class="headerlink" title="页面a标签 点击不跳转"></a>页面<code>a</code>标签 点击不跳转</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">href=&quot;javascript:viod(0)&quot;</span><br><span class="line"></span><br><span class="line">href=&quot;javascript:;&quot;</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;页面a标签-点击不跳转&quot;&gt;&lt;a href=&quot;#页面a标签-点击不跳转&quot; class=&quot;headerlink&quot; title=&quot;页面a标签 点击不跳转&quot;&gt;&lt;/a&gt;页面&lt;code&gt;a&lt;/code&gt;标签 点击不跳转&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;href=&amp;quot;javascript:viod(0)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;href=&amp;quot;javascript:;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://smile1231.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://smile1231.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://smile1231.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>The learning of Shell</title>
    <link href="https://smile1231.github.io/posts/55b095e0/"/>
    <id>https://smile1231.github.io/posts/55b095e0/</id>
    <published>2022-05-10T15:35:17.000Z</published>
    <updated>2022-05-21T15:14:51.316Z</updated>
    
    <content type="html"><![CDATA[<p>Nowdays , i hava a task about how to use shell script ,so it is time to learn shell .</p><p><a href="https://www.cnblogs.com/jingmoxukong/p/7867397.html"> shell  入门 </a></p><p><a href="http://tool.rbtree.cn/"> 好用的工具网站 </a></p><span id="more"></span><h2 id="zip和upzip"><a href="#zip和upzip" class="headerlink" title="zip和upzip"></a><code>zip</code>和<code>upzip</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zip命令的选项说明</span></span><br><span class="line"><span class="comment"># -A：调整可执行的自动解压缩文件。</span></span><br><span class="line"><span class="comment"># -b&lt;工作目录&gt;：指定暂时存放文件的目录。</span></span><br><span class="line"><span class="comment"># -c：替每个被压缩的文件加上注释。</span></span><br><span class="line"><span class="comment"># -d：从压缩文件内删除指定的文件。</span></span><br><span class="line"><span class="comment"># -D：压缩文件内不建立目录名称。</span></span><br><span class="line"><span class="comment"># -f：此参数的效果和指定&quot;-u&quot;参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中。</span></span><br><span class="line"><span class="comment"># -F：尝试修复已损坏的压缩文件。</span></span><br><span class="line"><span class="comment"># -g：将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。</span></span><br><span class="line"><span class="comment"># -h：在线帮助。</span></span><br><span class="line"><span class="comment"># -i&lt;范本样式&gt;：只压缩符合条件的文件。</span></span><br><span class="line"><span class="comment"># -j：只保存文件名称及其内容，而不存放任何目录名称。</span></span><br><span class="line"><span class="comment"># -J：删除压缩文件前面不必要的数据。</span></span><br><span class="line"><span class="comment"># -k：使用MS-DOS兼容格式的文件名称。</span></span><br><span class="line"><span class="comment"># -l：压缩文件时，把LF字符置换成LF+CR字符。</span></span><br><span class="line"><span class="comment"># -ll：压缩文件时，把LF+CR字符置换成LF字符。</span></span><br><span class="line"><span class="comment"># -L：显示版权信息。</span></span><br><span class="line"><span class="comment"># -m：将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。</span></span><br><span class="line"><span class="comment"># -n&lt;字尾字符串&gt;：不压缩具有特定字尾字符串的文件。</span></span><br><span class="line"><span class="comment"># -o：以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。</span></span><br><span class="line"><span class="comment"># -q：不显示指令执行过程。</span></span><br><span class="line"><span class="comment"># -r：递归处理，将指定目录下的所有文件和子目录一并处理。</span></span><br><span class="line"><span class="comment"># -S：包含系统和隐藏文件。</span></span><br><span class="line"><span class="comment"># -t&lt;日期时间&gt;：把压缩文件的日期设成指定的日期。</span></span><br><span class="line"><span class="comment"># -T：检查备份文件内的每个文件是否正确无误。</span></span><br><span class="line"><span class="comment"># -u：更换较新的文件到压缩文件内。</span></span><br><span class="line"><span class="comment"># -v：显示指令执行过程或显示版本信息。</span></span><br><span class="line"><span class="comment"># -V：保存VMS操作系统的文件属性。</span></span><br><span class="line"><span class="comment"># -w：在文件名称里假如版本编号，本参数仅在VMS操作系统下有效。</span></span><br><span class="line"><span class="comment"># -x&lt;范本样式&gt;：压缩时排除符合条件的文件。</span></span><br><span class="line"><span class="comment"># -X：不保存额外的文件属性。</span></span><br><span class="line"><span class="comment"># -y：直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。</span></span><br><span class="line"><span class="comment"># -z：替压缩文件加上注释。</span></span><br><span class="line"><span class="comment"># -$：保存第一个被压缩文件所在磁盘的卷册名称。</span></span><br><span class="line"><span class="comment"># -&lt;压缩效率&gt;：压缩效率是一个介于1-9的数值。</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$zip</span> -m new_zip_name old_filename</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压到当前目录 如果文件已存在，会提示是否替换，可以使用 -o 或 -n 参数简化交互；</span></span><br><span class="line"><span class="variable">$unzip</span> test.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压到指定目录 解压后的文件路径:/&#123;targetPath&#125;/test</span></span><br><span class="line"><span class="variable">$unzip</span> -d &#123;targetPath&#125; test.zip </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不覆盖已经存在的文件</span></span><br><span class="line"><span class="variable">$unzip</span> -n test.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">#强制覆盖已经存在的文件</span></span><br><span class="line"><span class="variable">$unzip</span> -o test.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看压缩包中的文件列表</span></span><br><span class="line"><span class="comment"># 文件大小、时间、文件名称 不进行解压缩</span></span><br><span class="line"><span class="variable">$unzip</span> -l test.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看压缩包中的文件信息【更详细】 </span></span><br><span class="line"><span class="comment"># 文件大小、压缩比、日期、文件名称</span></span><br><span class="line"><span class="variable">$unzip</span> -v test.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查压缩包是否损坏</span></span><br><span class="line"><span class="variable">$unzip</span> -t test.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示压缩文件的备注</span></span><br><span class="line"><span class="variable">$unzip</span> -z test.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行解压不显示任何信息</span></span><br><span class="line"><span class="variable">$unzip</span> -q test.zip</span><br><span class="line"><span class="variable">$unzip</span> -oq test.zip <span class="comment"># 静默解压没有任何提示</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bash-shell脚本打印出正在执行的命令"><a href="#Bash-shell脚本打印出正在执行的命令" class="headerlink" title="Bash shell脚本打印出正在执行的命令"></a><code>Bash shell</code>脚本打印出正在执行的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，bash脚本不会打印执行的每个命令，这个有时候不太方面。</span></span><br><span class="line"><span class="comment"># 如下的方法可以让bash脚本打印出执行的命令：</span></span><br><span class="line">1） 在脚本里添加 </span><br><span class="line">    <span class="built_in">set</span> -v 或者</span><br><span class="line">    <span class="comment">#!/bin/bash -v</span></span><br><span class="line"></span><br><span class="line">    以加 <span class="built_in">set</span> -v 最好。</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span> -v  和 <span class="built_in">set</span> -o verbose  是一样的</span><br><span class="line"></span><br><span class="line">2) 添加</span><br><span class="line">    <span class="built_in">set</span> -x </span><br><span class="line"></span><br><span class="line">    或者</span><br><span class="line">    <span class="comment">#!/bin/bash -x</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="sed指令"><a href="#sed指令" class="headerlink" title="sed指令"></a><code>sed</code>指令</h2><p><a href="http://c.biancheng.net/view/4028.html"> 参考地址 </a></p><p><code>sed</code> 命令的基本格式如下：<code>sed [选项] [脚本命令] 文件名</code></p><p>该命令常用的选项及含义:</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-e</code></td><td>脚本命令    该选项会将其后跟的脚本命令添加到已有的命令中。</td></tr><tr><td><code>-f</code></td><td>脚本命令文件    该选项会将其后文件中的脚本命令添加到已有的命令中。</td></tr><tr><td><code>-n</code></td><td>默认情况下，<code>sed</code> 会在所有的脚本指定执行完毕后，会自动输出处理后的内容，而该选项会屏蔽启动输出，需使用 <code>print</code> 命令来完成输出。</td></tr><tr><td><code>-i</code></td><td>此选项会直接修改源文件，要慎用。</td></tr></tbody></table><h3 id="sed-s-替换脚本命令"><a href="#sed-s-替换脚本命令" class="headerlink" title="sed s 替换脚本命令"></a><code>sed s </code>替换脚本命令</h3><p>此命令的基本格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中，address 表示指定要操作的具体行，pattern 指的是需要替换的内容，replacement 指的是要替换的新内容。</span></span><br><span class="line">[address]s/pattern/replacement/flags</span><br></pre></td></tr></table></figure><p>其中<code>flag</code>:</p><table><thead><tr><th><code>flags</code> 标记</th><th>功能</th></tr></thead><tbody><tr><td><code>n</code></td><td><code>1~512</code> 之间的数字，表示指定要替换的字符串出现第几次时才进行替换，例如，一行中有 <code>3</code> 个 <code>A</code>，但用户只想替换第二个 <code>A</code>，这是就用到这个标记；</td></tr><tr><td><code>g</code></td><td>对数据中所有匹配到的内容进行替换，如果没有 <code>g</code>，则只会在第一次匹配成功时做替换操作。例如，一行数据中有 <code>3</code> 个 <code>A</code>，则只会替换第一个 <code>A</code>；</td></tr><tr><td><code>p</code></td><td>会打印与替换命令中指定的模式匹配的行。此标记通常与 <code>-n</code> 选项一起使用。</td></tr><tr><td><code>w file</code></td><td>将缓冲区中的内容写到指定的 <code>file</code> 文件中；</td></tr><tr><td><code>&amp;</code></td><td>用正则表达式匹配的内容进行替换；</td></tr><tr><td><code>\n</code></td><td>匹配第 <code>n</code> 个子串，该子串之前在 <code>pattern</code> 中用 () 指定。</td></tr><tr><td><code>\</code></td><td>转义（转义替换部分包含：<code>&amp;、\</code> 等）。</td></tr></tbody></table><blockquote><p><code>tips</code>  – 需要转义的一些字符:</p></blockquote><img data-src="/posts/55b095e0/2022-05-13-00-07-09.png" class=""><ol><li><p>比如，可以指定 <code>sed</code> 用新文本替换第几处模式匹配的地方：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sed</span> <span class="string">&#x27;s/test/trial/2&#x27;</span> data4.txt</span><br><span class="line">This is a <span class="built_in">test</span> of the trial script.</span><br><span class="line">This is the second <span class="built_in">test</span> of the trial script.</span><br></pre></td></tr></table></figure><p> 可以看到，使用数字 <code>2</code> 作为标记的结果就是，<code>sed</code> 编辑器只替换每行中第 <code>2</code> 次出现的匹配模式。</p></li><li><p>如果要用新文件替换所有匹配的字符串，可以使用 <code>g</code> 标记：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sed</span> <span class="string">&#x27;s/test/trial/g&#x27;</span> data4.txt</span><br><span class="line">This is a trial of the trial script.</span><br><span class="line">This is the second trial of the trial script.</span><br></pre></td></tr></table></figure></li><li><p>我们知道，<code>-n</code> 选项会禁止 <code>sed</code> 输出，但 <code>p</code> 标记会输出修改过的行，将二者匹配使用的效果就是只输出被替换命令修改过的行，例如：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> data5.txt</span><br><span class="line">This is a <span class="built_in">test</span> line.</span><br><span class="line">This is a different line.</span><br><span class="line"><span class="variable">$sed</span> -n <span class="string">&#x27;s/test/trial/p&#x27;</span> data5.txt</span><br><span class="line">This is a trial line.</span><br></pre></td></tr></table></figure></li><li><p><code>w</code> 标记会将匹配后的结果保存到指定文件中，比如：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sed</span> <span class="string">&#x27;s/test/trial/w test.txt&#x27;</span> data5.txt</span><br><span class="line">This is a trial line.</span><br><span class="line">This is a different line.</span><br><span class="line"><span class="variable">$#cat</span> test.txt</span><br><span class="line">This is a trial line.</span><br></pre></td></tr></table></figure></li><li><p>在使用 <code>s</code> 脚本命令时，替换类似文件路径的字符串会比较麻烦，需要将路径中的正斜线进行转义，例如：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/\/bin\/bash/\/bin\/csh/&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure><h3 id="sed-d-替换脚本命令"><a href="#sed-d-替换脚本命令" class="headerlink" title="sed d 替换脚本命令"></a><code>sed d</code> 替换脚本命令</h3><p>此命令的基本格式为：<code>[address]d</code></p></li></ol><p>如果需要删除文本中的特定行，可以用 <code>d</code> 脚本命令，它会删除指定行中的所有内容。但使用该命令时要特别小心，如果你忘记指定具体行的话，文件中的所有内容都会被删除，举个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> data1.txt</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line">The quick brown fox jumps over the lazy dog</span><br><span class="line"><span class="variable">$sed</span> <span class="string">&#x27;d&#x27;</span> data1.txt</span><br><span class="line"><span class="comment">#什么也不输出，证明成了空文件</span></span><br></pre></td></tr></table></figure><ol><li><p>通过行号指定，比如删除 <code>data6.txt</code> 文件内容中的第 <code>3</code> 行：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> data6.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 3.</span><br><span class="line">This is line number 4.</span><br><span class="line"><span class="variable">$sed</span> <span class="string">&#x27;3d&#x27;</span> data6.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure></li><li><p>或者通过特定行区间指定，比如删除 <code>data6.txt</code> 文件内容中的第 <code>2、3</code> 行：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sed</span> <span class="string">&#x27;2,3d&#x27;</span> data6.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure></li><li><p>也可以使用两个文本模式来删除某个区间内的行，但这么做时要小心，你指定的第一个模式会“打开”行删除功能，第二个模式会“关闭”行删除功能，因此，<code>sed</code> 会删除两个指定行之间的所有行（包括指定的行），例如：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sed</span> <span class="string">&#x27;/1/,/3/d&#x27;</span> data6.txt</span><br><span class="line"><span class="comment">#删除第 1~3 行的文本数据</span></span><br><span class="line">This is line number 4.</span><br></pre></td></tr></table></figure></li><li><p>或者通过特殊的文件结尾字符，比如删除 <code>data6.txt</code> 文件内容中第 <code>3</code> 行开始的所有的内容：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sed</span> <span class="string">&#x27;3,$d&#x27;</span> data6.txt</span><br><span class="line">This is line number 1.</span><br><span class="line">This is line number 2.</span><br></pre></td></tr></table></figure></li></ol><p>在此强调，在默认情况下 <code>sed</code> 并不会修改原始文件，这里被删除的行只是从 <code>sed</code> 的输出中消失了，原始文件没做任何改变。</p><p><a href="http://c.biancheng.net/view/4028.html"> 完整版参考地址 </a></p><h2 id="Grep指令"><a href="#Grep指令" class="headerlink" title="Grep指令"></a><code>Grep</code>指令</h2><p><a href="https://www.runoob.com/linux/linux-comm-grep.html"> 菜鸟链接 </a></p><h2 id="awk指令"><a href="#awk指令" class="headerlink" title="awk指令"></a><code>awk</code>指令</h2><p><a href="https://www.runoob.com/linux/linux-comm-awk.html"> 菜鸟链接 </a></p><p><a href="https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html"> good 1 </a></p><h2 id="cut指令"><a href="#cut指令" class="headerlink" title="cut指令"></a><code>cut</code>指令</h2><p><a href="https://www.runoob.com/linux/linux-comm-cut.html"> 菜鸟链接 </a></p><p><a href="https://www.cnblogs.com/along21/p/10366886.html"> 三剑客链接 </a></p><h2 id="JSON格式化工具jq指令"><a href="#JSON格式化工具jq指令" class="headerlink" title="JSON格式化工具jq指令"></a><code>JSON</code>格式化工具<code>jq</code>指令</h2><p><a href="https://www.cnblogs.com/kevingrace/p/7565371.html"> 参考链接 </a></p><h2 id="awk内置函数-split-substr-length-gsub"><a href="#awk内置函数-split-substr-length-gsub" class="headerlink" title="awk内置函数(split/substr/length/gsub)"></a><code>awk</code>内置函数<code>(split/substr/length/gsub)</code></h2><p>一、<code>split</code> 初始化和类型强制</p><p><code>awk</code>的内建函数<code>split</code>允许你把一个字符串分隔为单词并存储在数组中。你可以自己定义域分隔符或者使用现在<code>FS(域分隔符)</code>的值。<br>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">split (string, array, field separator)</span><br><span class="line">split (string, array) –&gt;如果第三个参数没有提供，awk就默认使用当前FS值。</span><br></pre></td></tr></table></figure><blockquote><p>例子：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line">time=<span class="string">&quot;12:34:56&quot;</span>  </span><br><span class="line">out=`<span class="built_in">echo</span> <span class="variable">$time</span> | awk <span class="string">&#x27;&#123;split($0,a,&quot;:&quot;);print a[1],a[2],a[3]&#125;&#x27;</span>`  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$out</span>  </span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="comment">#12 34 56  </span></span><br></pre></td></tr></table></figure><p>计算指定范围内的和(计算每个人<code>1</code>月份的工资之和)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.txt:</span></span><br><span class="line"><span class="comment"># Tom　　  2012-12-11      car     53000  </span></span><br><span class="line"><span class="comment"># John　　 2013-01-13      bike    41000  </span></span><br><span class="line"><span class="comment"># vivi    2013-01-18      car     42800  </span></span><br><span class="line"><span class="comment"># Tom　　  2013-01-20      car     32500  </span></span><br><span class="line"><span class="comment"># John　　 2013-01-28      bike    63500  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#`awk`处理命令：</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;&#123;split($2,a,&quot;-&quot;);if(a[2]==01)&#123;b[$1]=b[$1]+$4&#125;&#125;END&#123;for(i in b)print i,b[i]&#125;&#x27;</span> test.txt   </span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment"># Tom　　 32500  </span></span><br><span class="line"><span class="comment"># vivi 42800  </span></span><br><span class="line"><span class="comment"># John　　 104500  </span></span><br></pre></td></tr></table></figure><p>二、<code>substr</code> 截取字符串</p><p>返回从起始位置起，指定长度之子字符串；若未指定长度，则返回从起始位置到字符串末尾的子字符串。<br>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">substr(s,p) 返回字符串s中从p开始的后缀部分</span><br><span class="line">substr(s,p,n) 返回字符串s中从p开始长度为n的后缀部分</span><br></pre></td></tr></table></figure><blockquote><p>例子：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> | awk <span class="string">&#x27;&#123;print substr($0,2,2)&#125;&#x27;</span>  </span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment"># bc  </span></span><br><span class="line"><span class="comment"># 解释：</span></span><br><span class="line"><span class="comment"># awk -F &#x27;,&#x27; &#x27;&#123;print substr($3,6)&#125;&#x27;    ---&gt;  表示是从第3个字段里的第6个字符开始，一直到设定的分隔符&quot;,&quot;结束.</span></span><br><span class="line"><span class="comment"># substr($3,10,8)  ---&gt;  表示是从第3个字段里的第10个字符开始，截取8个字符结束.</span></span><br><span class="line"><span class="comment"># substr($3,6)     ---&gt;  表示是从第3个字段里的第6个字符开始，一直到结尾</span></span><br></pre></td></tr></table></figure><p>三、<code>length</code> 字符串长度</p><p><code>length</code>函数返回没有参数的字符串的长度。<code>length</code>函数返回整个记录中的字符数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;abc&quot;</span> | awk <span class="string">&#x27;&#123;print length&#125;&#x27;</span>   </span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># 3  </span></span><br></pre></td></tr></table></figure><p>四、<code>gsub</code>函数</p><p>gsub函数则使得在所有正则表达式被匹配的时候都发生替换。<code>gsub(regular expression, subsitution string, target string);简称 gsub（r,s,t)</code>。</p><p>举例：把一个文件里面所有包含 <code>abc</code> 的行里面的 <code>abc</code> 替换成 <code>def</code>，然后输出第一列和第三列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;abc cde abr&quot;</span> | awk <span class="string">&#x27;$0 ~ /abc/ &#123;gsub(&quot;abc&quot;,&quot;def&quot;,$0); print $1, $3&#125;&#x27;</span>  </span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># def abr </span></span><br></pre></td></tr></table></figure><h2 id="Linux-shell-将字符串分割成数组"><a href="#Linux-shell-将字符串分割成数组" class="headerlink" title="Linux shell 将字符串分割成数组"></a><code>Linux shell</code> 将字符串分割成数组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;one,two,three,four&quot;</span></span><br><span class="line"><span class="comment"># 要将$a分割开，可以这样：</span></span><br><span class="line"></span><br><span class="line">OLD_IFS=<span class="string">&quot;<span class="variable">$IFS</span>&quot;</span></span><br><span class="line">IFS=<span class="string">&quot;,&quot;</span></span><br><span class="line">arr=(<span class="variable">$a</span>)</span><br><span class="line">IFS=<span class="string">&quot;<span class="variable">$OLD_IFS</span>&quot;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="variable">$&#123;arr[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$s</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># arr=($a)用于将字符串$a分割到数组$arr $&#123;arr[0]&#125; $&#123;arr[1]&#125; ... 分别存储分割后的数组第1 2 ... 项 ，$&#123;arr[@]&#125;存储整个数组。变量$IFS存储着分隔符，这里我们将其设为逗号 &quot;,&quot; OLD_IFS用于备份默认的分隔符，使用完后将之恢复默认。</span></span><br></pre></td></tr></table></figure><h2 id="linux截取中间字符串-shell截取指定字符串之间的内容"><a href="#linux截取中间字符串-shell截取指定字符串之间的内容" class="headerlink" title="linux截取中间字符串,shell截取指定字符串之间的内容"></a><code>linux</code>截取中间字符串,<code>shell</code>截取指定字符串之间的内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#截取字符串</span></span><br><span class="line"><span class="comment">#path=ss/usr/share/src/root/home/admin</span></span><br><span class="line">path=ss/usr/share/src/root/home/admin/src/add</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$path</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path%src*&#125;</span> <span class="comment">#从右向左截取第一个 src 后的字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path%/*&#125;</span>从右向左截取 第一个 / 后的字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path%%/*&#125;</span>从右向左截取 最后一个 / 后的字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path#*/&#125;</span>从左向右截取第一个 / 后的字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path##*/&#125;</span>从左向右截取最后一个 / 后的字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path:3&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path:6:60&#125;</span>截取变量path从前三个字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#path&#125;</span>计算 path变量 一共有几个字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path/root/kyo&#125;</span>把path变量里的第一个root字符串，替换为 kyo字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path//s/m&#125;</span>把path变量里的所有的s字符，替换为 m 字符</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;path&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Shell环境生成UUID"><a href="#Shell环境生成UUID" class="headerlink" title="Shell环境生成UUID"></a><code>Shell</code>环境生成<code>UUID</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UUID=$(uuidgen |sed <span class="string">&#x27;s/-//g&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$UUID</span></span><br><span class="line"><span class="comment"># 918c61bd48914f0e8fb1295208b6e87e</span></span><br></pre></td></tr></table></figure><h2 id="Shell中-各种含义"><a href="#Shell中-各种含义" class="headerlink" title="Shell中$ 各种含义"></a><code>Shell</code>中<code>$</code> 各种含义</h2><table><thead><tr><th>符 号</th><th>含 义</th></tr></thead><tbody><tr><td><code>$0</code></td><td>脚本名</td></tr><tr><td><code>$#</code></td><td>参数个数</td></tr><tr><td><code>$n</code></td><td>传递给脚本的参数值，<code>$1</code>第<code>1</code>参数、<code>$2</code>第<code>2</code>参数</td></tr><tr><td><code>$?</code></td><td>上次退出的状态（返回值），<code>0</code>没有错误，<code>1</code>错误</td></tr><tr><td><code>$*</code></td><td>所有参数列表。<code>&quot;$*&quot;</code>时，是<code>&quot;$1 $2 … $n&quot;</code>的形式</td></tr><tr><td><code>$@</code></td><td>所有参数列表。<code>&quot;$@&quot;</code>时，是<code>&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; </code>的形式</td></tr><tr><td><code>$$</code></td><td>当前进程的编号<code>（ProcessID）</code></td></tr><tr><td><code>$!</code></td><td><code>shell</code>最后运行的后台<code>Process</code>的<code>PID</code></td></tr><tr><td><code>$var</code></td><td>变量，会与后面的连接，如<code>$var_a</code>，会当做变量<code>var_a</code></td></tr><tr><td><code>$&#123;var&#125;</code></td><td>变量，界定范围</td></tr><tr><td><code>$()</code></td><td>与<code>(反引号)类似，里面执行完再返回值，</code>所有<code>shell</code>通用</td></tr><tr><td><code>$[]</code></td><td>可进行算术运算和逻辑运算，不支持浮点和字符串</td></tr><tr><td><code>$(())</code></td><td>可进行算术运算和逻辑运算，不支持浮点和字符串。里面的变量可以省略<code>$</code></td></tr></tbody></table><h2 id="linux-下shell中if的“-e，-d，-f”是什么意思"><a href="#linux-下shell中if的“-e，-d，-f”是什么意思" class="headerlink" title="linux 下shell中if的“-e，-d，-f”是什么意思"></a><code>linux</code> 下<code>shell</code>中<code>if</code>的<code>“-e，-d，-f”</code>是什么意思</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">文件表达式</span><br><span class="line">-e filename 如果 filename存在，则为真</span><br><span class="line">-d filename 如果 filename为目录，则为真 </span><br><span class="line">-f filename 如果 filename为常规文件，则为真</span><br><span class="line">-L filename 如果 filename为符号链接，则为真</span><br><span class="line">-r filename 如果 filename可读，则为真 </span><br><span class="line">-w filename 如果 filename可写，则为真 </span><br><span class="line">-x filename 如果 filename可执行，则为真</span><br><span class="line">-s filename 如果文件长度不为0，则为真</span><br><span class="line">-h filename 如果文件是软链接，则为真</span><br><span class="line">filename1 -nt filename2 如果 filename1比 filename2新，则为真。</span><br><span class="line">filename1 -ot filename2 如果 filename1比 filename2旧，则为真。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">整数变量表达式</span><br><span class="line">-eq 等于</span><br><span class="line">-ne 不等于</span><br><span class="line">-gt 大于</span><br><span class="line">-ge 大于等于</span><br><span class="line">-lt 小于</span><br><span class="line">-le 小于等于</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">字符串变量表达式</span><br><span class="line">If  [ <span class="variable">$a</span> = <span class="variable">$b</span> ]                 如果string1等于string2，则为真</span><br><span class="line">                                字符串允许使用赋值号做等号</span><br><span class="line"><span class="keyword">if</span>  [ <span class="variable">$string1</span> !=  <span class="variable">$string2</span> ]   如果string1不等于string2，则为真       </span><br><span class="line"><span class="keyword">if</span>  [ -n <span class="variable">$string</span>  ]             如果string 非空(非0），返回0(<span class="literal">true</span>)  </span><br><span class="line"><span class="keyword">if</span>  [ -z <span class="variable">$string</span>  ]             如果string 为空，则为真</span><br><span class="line"><span class="keyword">if</span>  [ <span class="variable">$sting</span> ]                  如果string 非空，返回0 (和-n类似) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    逻辑非 !                   条件表达式的相反</span><br><span class="line"><span class="keyword">if</span> [ ! 表达式 ]</span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$num</span> ]               如果不存在目录<span class="variable">$num</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    逻辑与 –a                   条件表达式的并列</span><br><span class="line"><span class="keyword">if</span> [ 表达式1  –a  表达式2 ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    逻辑或 -o                   条件表达式的或</span><br><span class="line"><span class="keyword">if</span> [ 表达式1  –o 表达式2 ]</span><br></pre></td></tr></table></figure><h2 id="shell获取文件扩展名"><a href="#shell获取文件扩展名" class="headerlink" title="shell获取文件扩展名"></a><code>shell</code>获取文件扩展名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">basename example.tar.a.b.c.gz .c.gz</span><br><span class="line"><span class="comment"># =&gt; example.tar.a.b</span></span><br><span class="line"> </span><br><span class="line">FILE=<span class="string">&quot;example.tar.gz&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;FILE%%.*&#125;</span>&quot;</span>     取头   example </span><br><span class="line"><span class="comment"># =&gt; example</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;FILE%.*&#125;</span>&quot;</span>      去尾   example.tar.a.b.c</span><br><span class="line"><span class="comment"># =&gt; example.tar</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;FILE#*.&#125;</span>&quot;</span>      去头   tar.a.b.c.gz</span><br><span class="line"><span class="comment"># =&gt; tar.gz</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;FILE##*.&#125;</span>&quot;</span>     取尾   gz</span><br><span class="line"><span class="comment"># =&gt; gz</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 在bash中可以这么写</span></span><br><span class="line">filename=$(basename <span class="string">&quot;<span class="variable">$fullfile</span>&quot;</span>)   </span><br><span class="line">extension=<span class="string">&quot;<span class="variable">$&#123;filename##*.&#125;</span>&quot;</span></span><br><span class="line">filename=<span class="string">&quot;<span class="variable">$&#123;filename%.*&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Linux-shell-中获取当前目录的方法"><a href="#Linux-shell-中获取当前目录的方法" class="headerlink" title="Linux shell 中获取当前目录的方法"></a><code>Linux shell</code> 中获取当前目录的方法</h2><blockquote><p>当前目录</p></blockquote><p>每当你在终端进行操作时，你都会有一个当前工作目录。 使用pwd来判定当前目录在文件系统内的确切位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pwd</span></span><br><span class="line">/root</span><br></pre></td></tr></table></figure><p>在<code>shell</code>中也可以使用<code>pwd</code>来获取当前目录，并赋值给变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CRTDIR=$(<span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure><blockquote><p>工作目录</p></blockquote><p>获取当前执行的脚本文件的父目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workdir=$(<span class="built_in">cd</span> $(dirname <span class="variable">$0</span>); <span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure><blockquote><p>复杂点的工作目录获取</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PRG=<span class="string">&quot;<span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="keyword">while</span> [ -h <span class="string">&quot;<span class="variable">$PRG</span>&quot;</span> ] ; <span class="keyword">do</span></span><br><span class="line">  ls=`ls -ld <span class="string">&quot;<span class="variable">$PRG</span>&quot;</span>`</span><br><span class="line">  link=`expr <span class="string">&quot;<span class="variable">$ls</span>&quot;</span> : <span class="string">&#x27;.*-&gt; \(.*\)$&#x27;</span>`</span><br><span class="line">  <span class="keyword">if</span> expr <span class="string">&quot;<span class="variable">$link</span>&quot;</span> : <span class="string">&#x27;/.*&#x27;</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    PRG=<span class="string">&quot;<span class="variable">$link</span>&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    PRG=`dirname <span class="string">&quot;<span class="variable">$PRG</span>&quot;</span>`/<span class="string">&quot;<span class="variable">$link</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">PRGDIR=$(<span class="built_in">cd</span> $(dirname <span class="variable">$PRG</span>); <span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure><h2 id="Linux-Shell获取文件夹下的文件名"><a href="#Linux-Shell获取文件夹下的文件名" class="headerlink" title="Linux Shell获取文件夹下的文件名"></a><code>Linux Shell</code>获取文件夹下的文件名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># get all filename in specified path</span></span><br><span class="line">path=<span class="variable">$1</span></span><br><span class="line">files=$(ls <span class="variable">$path</span>)</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> <span class="variable">$files</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$filename</span> &gt;&gt; filename.txt</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="shell获取目录下所有文件夹的名称并输出"><a href="#shell获取目录下所有文件夹的名称并输出" class="headerlink" title="shell获取目录下所有文件夹的名称并输出"></a><code>shell</code>获取目录下所有文件夹的名称并输出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#方法一 </span></span><br><span class="line">dir=$(ls -l /usr/ |awk <span class="string">&#x27;/^d/ &#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">or i <span class="keyword">in</span> <span class="variable">$dir</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span>   </span><br><span class="line"><span class="comment">#######</span></span><br><span class="line"><span class="comment">#方法二</span></span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> $(ls /usr/)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    [ -d <span class="variable">$dir</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="variable">$dir</span></span><br><span class="line"><span class="keyword">done</span>        </span><br><span class="line"><span class="comment">##方法三</span></span><br><span class="line">ls -l /usr/ |awk <span class="string">&#x27;/^d/ &#123;print $NF&#125;&#x27;</span>   <span class="comment">## 其实同方法一，直接就可以显示不用for循环</span></span><br></pre></td></tr></table></figure><h2 id="常用-Linux-jq命令语法整理"><a href="#常用-Linux-jq命令语法整理" class="headerlink" title="常用 Linux jq命令语法整理"></a>常用 <code>Linux jq</code>命令语法整理</h2><p><a href="https://blog.csdn.net/Cheat1173010256/article/details/118230562#:~:text=JQ%20%E6%98%AF%E4%B8%80%E4%B8%AA%20%E5%91%BD%E4%BB%A4%20%E8%A1%8C%E5%B7%A5%E5%85%B7%EF%BC%8C%E4%B8%BB%E8%A6%81%E7%94%A8%E4%BA%8E%E5%A4%84%E7%90%86json%E6%96%87%E6%9C%AC%E3%80%82%20%E8%AF%AD%E6%B3%95,%E5%BE%88%E7%AE%80%E5%8D%95%EF%BC%8C%E5%A6%82%E4%B8%8B%EF%BC%9A%20jq%20%5Boptions...%5D%20filter%20%5Bfiles...%5D">参考链接</a></p><img data-src="/posts/55b095e0/2022-05-13-20-25-50.png" class=""><img data-src="/posts/55b095e0/2022-05-13-20-26-18.png" class=""><img data-src="/posts/55b095e0/2022-05-13-20-26-42.png" class=""><img data-src="/posts/55b095e0/2022-05-13-20-27-00.png" class=""><h2 id="shell脚本中整数型变量自增（加1）的实现方式"><a href="#shell脚本中整数型变量自增（加1）的实现方式" class="headerlink" title="shell脚本中整数型变量自增（加1）的实现方式"></a><code>shell</code>脚本中整数型变量自增（加<code>1</code>）的实现方式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">本脚本测试shell脚本中整型变量自增 加1的几种方法</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">定义整型变量</span></span><br><span class="line">a=1</span><br><span class="line">echo $a</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">第一种整型变量自增方式</span></span><br><span class="line">a=$(($a+1))</span><br><span class="line">echo $a</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">第二种整型变量自增方式</span></span><br><span class="line">a=$[$a+1]</span><br><span class="line">echo $a</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">第三种整型变量自增方式</span></span><br><span class="line">a=`expr $a + 1`</span><br><span class="line">echo $a</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">第四种整型变量自增方式</span></span><br><span class="line">let a++</span><br><span class="line">echo $a</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">第五种整型变量自增方式</span></span><br><span class="line">let a+=1</span><br><span class="line">echo $a</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">第六种整型变量自增方式</span></span><br><span class="line">((a++))</span><br><span class="line">echo $a</span><br></pre></td></tr></table></figure><h2 id="shell判断一个变量是否为空"><a href="#shell判断一个变量是否为空" class="headerlink" title="shell判断一个变量是否为空"></a><code>shell</code>判断一个变量是否为空</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[ ! $a ] &amp;&amp; echo &quot;a is null&quot; </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span> </span><br><span class="line">a= </span><br><span class="line">if [ ! -n &quot;$a&quot; ]; then </span><br><span class="line">echo &quot;IS NULL&quot; </span><br><span class="line">else </span><br><span class="line">echo &quot;NOT NULL&quot; </span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span> </span><br><span class="line">a= </span><br><span class="line">if [ ! $a ]; then</span><br><span class="line">echo &quot;IS NULL&quot; </span><br><span class="line">else </span><br><span class="line">echo &quot;NOT NULL&quot; </span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span> </span><br><span class="line">a= </span><br><span class="line">if test -z &quot;$a&quot; then </span><br><span class="line">echo &quot;a is not set!&quot; </span><br><span class="line">else </span><br><span class="line">echo &quot;a is set !&quot; </span><br><span class="line">fi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span> </span><br><span class="line">a= </span><br><span class="line">if [ &quot;$a&quot; = &quot;&quot; ]; then </span><br><span class="line">echo &quot;a is not set!&quot; </span><br><span class="line">else </span><br><span class="line">echo &quot;a is set !&quot; </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">两种方法：</span></span><br><span class="line"><span class="meta">2&gt;</span><span class="bash">&amp;1 | tee mylog.log</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> test.txt</span></span><br><span class="line"><span class="meta">#</span><span class="bash">举例：</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">sh batchjob.sh 2&gt;&amp;1 | tee mylog.log</span><br><span class="line">ls * &gt; test.txt</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">find ./ -name &quot;*.xml&quot; &gt; result.txt</span><br><span class="line">find ./ -name &quot;*.xml&quot; 2&gt;&amp;1 | tee mylog.log</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Nowdays , i hava a task about how to use shell script ,so it is time to learn shell .&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/jingmoxukong/p/7867397.html&quot;&gt; shell  入门 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tool.rbtree.cn/&quot;&gt; 好用的工具网站 &lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Shell" scheme="https://smile1231.github.io/categories/Shell/"/>
    
    
    <category term="Shell" scheme="https://smile1231.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>some sap links</title>
    <link href="https://smile1231.github.io/posts/9f1e6853/"/>
    <id>https://smile1231.github.io/posts/9f1e6853/</id>
    <published>2022-05-05T03:38:23.000Z</published>
    <updated>2022-05-18T06:06:06.437Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.tools.sap/CPICACF/cf-us30-ica-iat/"> cf-us30-ica-iat </a></p><p><a href="https://cockpit.canary.scp.sapns2.us/cockpit/#/globalaccount/f573e8a6-301b-4e75-aa26-9e8e805353a4/subaccount"> BTP Link </a></p><p><a href="https://pages.github.tools.sap/IO-CLOUD/ica-docs/development/ica/custom-domain/"> INFRA process </a></p><p><a href="https://icaauthor-ns2.cfapps.canary.scp.sapns2.us/shell/ica.authoring"> NS2 authoring app </a>  <a href="https://icaauthor-iacd.cfapps.eu10.hana.ondemand.com/shell/ica.authoring"> eu10 </a></p><p><a href="https://pages.github.tools.sap/IO-CLOUD-REL-ENG/dev-guide/getting_started/getting_access/"> local destop to pull Pro </a></p><p><a href="https://github.tools.sap/IO-CLOUD/ia-ts-contents"> ia-ts-contents </a></p><p><a href="https://pages.github.tools.sap/agile/scrum-course/course-description.html"> Scrum course </a></p><p><a href="https://github.tools.sap/cloudfoundry/iacbox"> Iacbox - A Self-Contained DevOps Environment </a></p><p><a href="https://github.tools.sap/CPICACF"> landscape </a></p><p><a href="https://common.repositories.cloud.sap/ui/native/build.milestones/com/sap/it/spc/icaclientnode/"> repo – clientNode </a></p><blockquote><p><code>githubToken</code><br><code>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</code></p></blockquote><blockquote><p><code>JFrogToken</code><br><code>AKCp8mYoWpf7cpTkXiyXuHq6TFxVng1HnkAukttfSWPjpZ63GnRduzP6jSRL9XLUfu1VHa4r8</code></p></blockquote><p>TypeSystemId + VersionId + Revision ==&gt; Primary key</p><p>🆔： I568938</p><p>docker login iacbox.common.cdn.repositories.cloud.sap -u “i568938” -p “AKCp8mYoWpf7cpTkXiyXuHq6TFxVng1HnkAukttfSWPjpZ63GnRduzP6jSRL9XLUfu1VHa4r8”</p><blockquote><p>devOps Env </p></blockquote><p><a href="https://github.tools.sap/cloudfoundry/iacbox"> wiki </a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git clone --recursive https://github.tools.sap/CPICACF/cf-us30-ica-iat</span><br><span class="line"></span><br><span class="line">iacbox -iv=iacbox.common.cdn.repositories.cloud.sap/iacbox2:v530</span><br><span class="line"></span><br><span class="line">iac state pull</span><br><span class="line"></span><br><span class="line">lscrypt unseal</span><br><span class="line"></span><br><span class="line">Master-Password:  2020IntegrationAdvisorHeidelberg!</span><br><span class="line"></span><br><span class="line">iac init-config -p product-cf-ica --secure-data -d env_setup -f    (subscribe)</span><br><span class="line"></span><br><span class="line">iac action create_manifest -d icaautoimport   (ctx.yml file)</span><br><span class="line"></span><br><span class="line">iac action deploy -d icaautoimport</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> common</span>  </span><br><span class="line"></span><br><span class="line">iac init-config -p product-cf-ica --secure-data -d env_setup -f  #初始化一个component </span><br><span class="line"></span><br><span class="line">iac action deploy -d env_setup</span><br><span class="line"></span><br><span class="line">iac -d icaworkspacenode lifecycle deploy --skip-state-update #一个完整的命令，包含所有的步骤</span><br><span class="line"></span><br><span class="line">curl &#x27;http://localhost:8080/api/v1/cli?arch=amd64&amp;platform=linux&#x27; -o fly &amp;&amp; chmod +x ./fly &amp;&amp; mv ./fly /usr/local/bin/</span><br><span class="line"></span><br><span class="line">sudo ln -s /usr/local/bin/fly /usr/bin/fly</span><br><span class="line"></span><br><span class="line">iacbox -iv=iacbox.common.cdn.repositories.cloud.sap/iacbox2:v391</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> because creadentials file can is not visible , we must use this script</span> </span><br><span class="line">lscrypt edit -d ianode credentials.yml </span><br><span class="line"></span><br><span class="line">lscrypt read -d icaworkspacenode credentials.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> two procedure : iac push and git push</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> push code to cf-us30</span></span><br><span class="line">iac state</span><br><span class="line">iac state status</span><br><span class="line"><span class="meta">#</span><span class="bash"> push to state branch</span></span><br><span class="line">iac state push</span><br><span class="line"><span class="meta">#</span><span class="bash"> the next produre is git push.so ..</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>credentials:<br>  api:<br>    apitoken: Z5R1nVh4Sca0YDNOrdlHE<br>  cflogin:<br>    email: <a href="mailto:&#83;&#65;&#x50;&#95;&#83;&#x43;&#80;&#x5f;&#67;&#x46;&#95;&#73;&#x43;&#x41;&#95;&#83;&#69;&#84;&#85;&#80;&#x5f;&#80;&#82;&#79;&#x44;&#64;&#x53;&#65;&#80;&#x2e;&#67;&#x4f;&#77;">&#83;&#65;&#x50;&#95;&#83;&#x43;&#80;&#x5f;&#67;&#x46;&#95;&#73;&#x43;&#x41;&#95;&#83;&#69;&#84;&#85;&#80;&#x5f;&#80;&#82;&#79;&#x44;&#64;&#x53;&#65;&#80;&#x2e;&#67;&#x4f;&#77;</a><br>    password: 08IntegrationAdvisorWalldorf!<br>    user: P2002213338<br>  nexus:<br>    basic:<br>      name: cpiproduser<br>      password: AKCp8kqCFKc5w75bF2C4Dvfc5qGpicKravMR7dtkv1TyyhQ1xUEZXHWYSHw3my49Wauz7FHMh</p><p><a href="https://password.wdf.sap.corp/passvault/index.html"> <code>SAP PassVault</code></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.tools.sap/CPICACF/cf-us30-ica-iat/&quot;&gt; cf-us30-ica-iat &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cockpit.canary.scp.sapns2.us/co</summary>
      
    
    
    
    <category term="SAP" scheme="https://smile1231.github.io/categories/SAP/"/>
    
    
    <category term="SAP" scheme="https://smile1231.github.io/tags/SAP/"/>
    
  </entry>
  
  <entry>
    <title>CEST与北京时间转换表</title>
    <link href="https://smile1231.github.io/posts/ef55dc85/"/>
    <id>https://smile1231.github.io/posts/ef55dc85/</id>
    <published>2022-04-29T13:41:49.000Z</published>
    <updated>2022-04-29T14:08:18.035Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://datetime360.com/cn/cet-beijing-time/">参考链接</a></p><span id="more"></span><table><thead><tr><th>中欧夏令时间(CEST)</th><th>北京时间(Beijing)</th></tr></thead><tbody><tr><td>00:00</td><td>06:00</td></tr><tr><td>01:00</td><td>07:00</td></tr><tr><td>02:00</td><td>08:00</td></tr><tr><td>03:00</td><td>09:00</td></tr><tr><td>04:00</td><td>10:00</td></tr><tr><td>05:00</td><td>11:00</td></tr><tr><td>06:00</td><td>12:00</td></tr><tr><td>07:00</td><td>13:00</td></tr><tr><td>08:00</td><td>14:00</td></tr><tr><td>09:00</td><td>15:00</td></tr><tr><td>10:00</td><td>16:00</td></tr><tr><td>11:00</td><td>17:00</td></tr><tr><td>12:00</td><td>18:00</td></tr><tr><td>13:00</td><td>19:00</td></tr><tr><td>14:00</td><td>20:00</td></tr><tr><td>15:00</td><td>21:00</td></tr><tr><td>16:00</td><td>22:00</td></tr><tr><td>17:00</td><td>23:00</td></tr><tr><td>18:00</td><td>00:00+1天</td></tr><tr><td>19:00</td><td>01:00+1天</td></tr><tr><td>20:00</td><td>02:00+1天</td></tr><tr><td>21:00</td><td>03:00+1天</td></tr><tr><td>22:00</td><td>04:00+1天</td></tr><tr><td>23:00</td><td>05:00+1天</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://datetime360.com/cn/cet-beijing-time/&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="SAP" scheme="https://smile1231.github.io/categories/SAP/"/>
    
    
    <category term="SAP" scheme="https://smile1231.github.io/tags/SAP/"/>
    
  </entry>
  
  <entry>
    <title>simple self introduction</title>
    <link href="https://smile1231.github.io/posts/96b6e8a1/"/>
    <id>https://smile1231.github.io/posts/96b6e8a1/</id>
    <published>2022-04-28T09:33:16.000Z</published>
    <updated>2022-04-29T14:08:18.037Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈，今天要当着印度的同事和德国的同事来介绍自己，初中作文来啦！</p><span id="more"></span><p>这是一次简单的自我介绍</p><p>hello，大家好，我是Team C 最近新入职的同事，Darry，我将会花几分钟时间简单的介绍自己以便你们认识我。首先，我将会打开我的摄像头，这可能和我的ppt中照片有差别，哈哈，可能头发会有一些长并且凌乱，因为我太久没有出门了。 同时呢，很高兴在SAP这个大家庭和大家认识并有机会一起工作，我来自中国的江苏省泰州市，可能是一所不太出名的城市，他是我们前任国家主席的故乡，因此我也感觉很荣幸。 我出生于1997年，我于2016年-2020年就读于  ，目前我正在华东师范大学攻读硕士学位，我本硕所读专业都为计算机科学与技术。在来到SAP之前，我曾在上汽集团的子公司工作了一段时间，主要是做一些关于Java开发相关的工作，由于工作年限并不是很久，所以以后可能会有很多的问题来请教你们，希望不要拒绝我哦。同时呢，也希望自己和大家在SAP都能够愉快的工作，一起提升自己。</p><p>关于我平时呢，特别喜欢打篮球，然后大学期间也是学院篮球队的一员，希望以后也能有机会一起打篮球，此外呢，我也喜欢弹弹吉他，听听音乐，平时也会在朋友圈发一些视频，如果可以的话，大家也可以来我的朋友圈一起听听音乐。接下来，我也愿意分享一下一次比赛的绝杀时刻。</p><p>This is a brief self-introduction</p><p>Hello, everyone, my name is Darry, the newest member of Team C, and I will take a few minutes to briefly introduce myself so you can get to know me. First, I will turn on my camera, which may be different from the photos in my ppt, haha, maybe the hair will be a little long and messy, because I haven’t been out for a long time. At the same time, I am very happy to meet everyone in the SAP family and have the opportunity to work together. I am from Taizhou City, Jiangsu Province, China, which may be a less famous city. He is the hometown of our former president, so I am also I feel honored. I was born in 1997, I studied in 2016-2020 in jiangsu , I am currently studying for a master’s degree at East China Normal University, and my undergraduate and master’s majors are computer science and technology. Before coming to SAP, I worked in SAIC Group for a period of time, mainly doing some work related to Java development. Since my working experience is not long, I may have many questions to ask you in the future. I hope Don’t reject me. At the same time, I also hope that myself and everyone can work happily in SAP and improve themselves together.</p><p>As for me, I especially like playing basketball, and then I was a member of the college basketball team during college. I hope to have the opportunity to play basketball together in the future. Besides, I also like to play the guitar, listen to music, and usually hang out with friends. Circle some videos, if possible, you can also come to my circle of friends to listen to music together. Next, I am also willing to share the lore moment of a game.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;哈哈，今天要当着印度的同事和德国的同事来介绍自己，初中作文来啦！&lt;/p&gt;</summary>
    
    
    
    <category term="SAP" scheme="https://smile1231.github.io/categories/SAP/"/>
    
    
    <category term="SAP" scheme="https://smile1231.github.io/tags/SAP/"/>
    
  </entry>
  
  <entry>
    <title>工作难点</title>
    <link href="https://smile1231.github.io/posts/d0966c4d/"/>
    <id>https://smile1231.github.io/posts/d0966c4d/</id>
    <published>2022-03-24T12:39:16.000Z</published>
    <updated>2022-04-29T14:08:18.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="索引失效的原因"><a href="#索引失效的原因" class="headerlink" title="索引失效的原因"></a>索引失效的原因</h2><p>发票项目当初查询列表时queryInvoicesForCom接口，该接口主要用来列表发票信息的，当时是因为业务反应前端很久才会有显示，然后当时我来优化</p><p>主要的耗时点是在一条sql上，老sql遗留问题，由于当初在设计t_invoice表的时候，是一条记录进行作用的，所以查询的时候，需要进行拆分 operate，通过状态进行拆分、</p><p>sql语句是 union all </p><p>explain 执行计划下来 type中有all全扫描，应该是没有击中索引，其实常见的未击中索引我都有去考虑过，</p><p>where 中使用 != 或 &lt;&gt; 或 or 或表达式或函数（左侧）<br>like 语句 % 开头<br>字符串未加’’<br>索引字段区分度过低，如性别<br>未匹配最左前缀</p><p>一点点的抽丝剥茧，也问了很多同事，身边的架构师，讲道理来说是会命中索引的，应该是mysql自己优化成不走索引了，线上数据目前是800w左右，时间区间是三个月，数据量过于大的时候，就会不走索引<br>所以这也是急需要优化的点，加上mybatis会查询两次，时间就进行了翻倍，<br>执行计划一条type为ref rows属性达到了100w，所以数据量<br>所以需要删除一些历史遗留的merchantID，以及缩小时间区间看看是否能够优化，因为在测试环境是可以走通的，测试环境的话只有几十万，所以都是没有问题的，最后原因如果数据量过大的话，也不会一定走索引，所以这个时候只能多加限制了。。。。</p><p>各属性含义：<br>id：查询的序列号</p><p>select_type：查询的类型，主要是区别普通查询和联合查询、子查询之类的复杂查询</p><p>SIMPLE：查询中不包含子查询或者UNION<br>查询中若包含任何复杂的子部分，最外层查询则被标记为：PRIMARY<br>在SELECT或WHERE列表中包含了子查询，该子查询被标记为：SUBQUERY<br>table：输出的行所引用的表</p><p>type：访问类型</p><p>从左至右，性能由差到好</p><p>ALL：扫描全表<br>index：扫描全部索引树<br>range：扫描部分索引，索引范围扫描，对索引的扫描开始于某一点，返回匹配值域的行，常见于between、&lt;、&gt;等的查询<br>ref：使用非唯一索引或非唯一索引前缀进行的查找<br>（eq_ref和const的区别：）<br>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描<br>const：单表中最多有一个匹配行，查询起来非常迅速，例如根据主键或唯一索引查询。<br>system：system是const类型的特例，当查询的表只有一行的情况下， 使用system。<br>NULL：不用访问表或者索引，直接就能得到结果，如select 1 from test where 1<br>possible_keys：表示查询时可能使用的索引。如果是空的，没有相关的索引。这时要提高性能，可通过检验WHERE子句，看是否引用某些字段，或者检查字段不是适合索引。</p><p>key：显示MySQL实际决定使用的索引。如果没有索引被选择，是NULL</p><p>key_len：使用到索引字段的长度<br>注：key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。</p><p>ref：显示哪个字段或常数与key一起被使用</p><p>rows：这个数表示mysql要遍历多少数据才能找到，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数，在innodb上可能是不准确的</p><p>Extra：执行情况的说明和描述。包含不适合在其他列中显示但十分重要的额外信息。</p><p>Using index：表示使用索引，如果只有 Using index，说明他没有查询到数据表，只用索引表就完成了这个查询，这个叫覆盖索引。</p><p>Using where：表示条件查询，如果不读取表的所有数据，或不是仅仅通过索引就可以获取所有需要的数据，则会出现 Using where。</p><p>查询条件中IS NULL，当命中结果数量小于40%的时候，会走索引。</p><p>查询条件中的IS NOT NULL,命中结果数小于30%的时候，会走索引。</p><h2 id="当初对账项目找不到mapper文件的原因（多数据源引起）"><a href="#当初对账项目找不到mapper文件的原因（多数据源引起）" class="headerlink" title="当初对账项目找不到mapper文件的原因（多数据源引起）"></a>当初对账项目找不到mapper文件的原因（多数据源引起）</h2><p>其实这个问题是当初开发日清算的时候有的，其实这个问题是因为多数据源引起的，多数据源primary注解，多数据源时会逐步扫描config包下的config文件，读取config文件时，当时项目的分层出现了严重的问题，不同数据源需要<br>不同的包进行隔离，但是但是主数据源就卸载了dao下，但是另一个副数据源缺新建了包，这个问题呢，很巧的是本地环境不会有问题，开发和测试环境出现过一次但是生产环境就会一直报错。。。</p><h2 id="文件上传前端超时的问题如何解决"><a href="#文件上传前端超时的问题如何解决" class="headerlink" title="文件上传前端超时的问题如何解决"></a>文件上传前端超时的问题如何解决</h2><p>有一个上传的需求需要上传1000个司机，但是由于是同步操作</p><h2 id="在同一个事务中调用服务的另一个方法引起的问题（司机离职）"><a href="#在同一个事务中调用服务的另一个方法引起的问题（司机离职）" class="headerlink" title="在同一个事务中调用服务的另一个方法引起的问题（司机离职）"></a>在同一个事务中调用服务的另一个方法引起的问题（司机离职）</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;索引失效的原因&quot;&gt;&lt;a href=&quot;#索引失效的原因&quot; class=&quot;headerlink&quot; title=&quot;索引失效的原因&quot;&gt;&lt;/a&gt;索引失效的原因&lt;/h2&gt;&lt;p&gt;发票项目当初查询列表时queryInvoicesForCom接口，该接口主要用来列表发票信息的，当时</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>English self_introduction</title>
    <link href="https://smile1231.github.io/posts/4187faeb/"/>
    <id>https://smile1231.github.io/posts/4187faeb/</id>
    <published>2022-03-24T08:56:54.000Z</published>
    <updated>2022-04-29T14:08:18.041Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>面试官们好，我是今天的面试者，陈宜，你也可以称呼我的英文名Darry，我今天面试的岗位是java开发，我于2020年在江苏理工学院毕业，目前已有两年经验，我有两份工作经历，第一家是在一家专门为医院开发系统的公司，由于公司不是很大，所以职责一般都是前后端都会开发，届时也有开发小程序的经验。这份工作中开发了很多医院的项目，类似于华山医院投诉管理系统，华山北院医技预约系统等等，华山医院主要是用来记录华山医院的一些客诉，然后后续投诉处理等等，医技预约系统是用来预约医院内部的各种检查：例如CT检查。前端主要是用的技术是Vue + ElementUI ，后端为SpringBoot项目，ORM都是使用的mybatis框架，都是比较简单的单体服务项目。第二那份工作就是我目前所在的企业：享道出行，该企业是一家互联网公司，产品为享道出行app，我所在的部门为支付部门，所在的小组为结算小组，职位为Java开发，公司统一使用规范的分布式解决方案，注册中心使用consul，配置中心为Apollo，Rpc框架为公司研制的Krpc，和谷歌的Grpc类似，前后端规范都定义在proto文件中。 我主要负责的项目为公司的发票项目，该项目主要的难点在于业务的梳理以及开票流程的理解。       该项目涵盖了所有公司的发票业务：申请开票，进行开票，发送邮件。申请开票的来源有很多，有app，渠道，以及MIS端，其中渠道端就是对接的外部渠道，类似于滴滴，高德等等。开票采用了接口+job的形式，以开票请求量最大的渠道开票来说，当开票请求请求到服务上时，一开始会做一些简单的参数验证，邮箱，电话等等 ，也会调用专门接口查询待开票列表 ， 其次将会对请求订单进行幂等验证和金额验证，特定的商户可能开票通道也会有所不同，最后对发票基本信息进行数据库存表，同时会返回对应的享道内部发票号，为一个异步行为，该发票号可以调用专门的接口查询发票信息，同时发票请求借口也使用redis做了防止重复点击。job是整个开票的业务核心逻辑，首先筛选指定状态的发票进行开票，首先开票时会直接请求发票供应商接口，发票供应商也为一个异步开票流程，发票请求之后将需要轮询去查询发票是否开具成功，当发票成功开具之后，将会进行信息状态的更新，然后执行特定的后置处理器，主要事发票邮件的发送或者渠道的信息同步。整个开票逻辑的轮廓就是如此。同时我还负责了车司管项目的研发，该项目主要是负责享道签约合作公司对出租车司机的管理平台，我主要负责了与承包方案相关的接口开发，其中的难点在于定时修改承包方案时间点，从某个日期点生效的方案设计。另外也有一些其他服务的简单开发，对账服务的日清算周清算；羊刀平台的前后端开发等。在享道待的时间里，学到了很多，处理线上事件时正确的步骤以及方式，以及联调开发时单测的完整性等等。我想辞职的原因是因为公司于年初搬了新家，离我目前所在居住的地点车程过远，所以想找一份近一点的工作，以上就是我的个人介绍，谢谢你们的聆听！</p><p>Hello interviewers, I am today’s interviewee, Chen Yi, you can also call my English name Darry. The position I am interviewing for today is Java development. I graduated from Jiangsu university of Technology in 2020 and have two years of experience. , I have two work experiences.</p><h2 id="第一份工作"><a href="#第一份工作" class="headerlink" title="第一份工作"></a>第一份工作</h2><p> The first one is in a company that develops systems for hospitals. Since the company is not very large, the responsibility is generally that the front and back ends will be developed, and there will also be experience in developing mini programs at that time. In this job, many hospital projects have been developed, similar to Huashan Hospital Complaint Management System, Huashan North Hospital Medical Technology Reservation System, etc. Huashan Hospital is mainly used to record some customer complaints of Huashan Hospital, and then follow-up complaint handling, etc., The medical technology reservation system is used to book various examinations within the hospital: CT examination and so on. The front-end technology is mainly Vue + ElementUI, the back-end is the SpringBoot project, and the ORM is the mybatis framework, which is a relatively simple single service project. </p><h2 id="第二份工作"><a href="#第二份工作" class="headerlink" title="第二份工作"></a>第二份工作</h2><p> The second job is the company I am currently working for: Xiangdao Travel, an Internet company whose product is the Xiangdao Travel app, my department is the payment department, my team is the settlement team, and my position is Java development. The company uses standardized distributed solutions in a unified manner. The registration center uses consul, the configuration center is Apollo, and the Rpc framework is Krpc developed by the company, which is similar to Google’s Grpc. The front-end and back-end specifications are defined in the proto file.</p><h1 id="发票"><a href="#发票" class="headerlink" title="发票"></a>发票</h1><p> The project I am mainly responsible for is the company’s invoicing project. The main difficulty of this project lies in the sorting out of the business and the understanding of the invoicing process. The project covers all the company’s invoicing business: apply for invoicing, do invoicing, send mail. There are many sources for invoicing applications, including apps, channels, and MIS, where the channel is the external channel for docking, similar to Didi, gaode, etc. Invoicing adopts the form of interface + job. Taking the channel with the largest amount of invoicing requests for this project, when the invoicing request is requested to the service, it will do some simple parameter verification at the beginning, such as email, telephone, etc., and will also call the special interface. Query the to-be-invoiced list, and then perform idempotent（美  [aɪˈdempətənt]） verification and amount verification on the requested order. Certain merchants may have different invoicing channels. Finally, perform a database table on the basic information of the invoice, and return the corresponding Xiangdao internal invoiceNO, which is an asynchronous behavior, the invoice number can call a special interface to query the invoice information, and the invoice request excuse also uses redis to prevent repeated clicks. Job is the core business logic of the entire invoicing business. First, the invoices in the special state are screened for invoicing. First, the invoice supplier interface will be directly requested when the invoice is issued. The invoice supplier is also an asynchronous invoicing process. After the issuance is successful, when the invoice is successfully issued, the information status will be updated, and then a specific post-processor will be executed, which is mainly responsible for the sending of the invoice email or the information synchronization of the channel. This is the outline of the entire billing logic. </p><p> At the same time, I was also in charge of the research and development of the car driver management project. This project is mainly responsible for the management platform for taxi drivers by the contracted cooperative company of Xiangdao. I was mainly responsible for the interface development related to the contracting scheme. The difficulty lies in modifying the contracting scheme regularly. A time point, a scheme design that takes effect from a certain date point. In addition, there are also simple development of some other services, daily settlement and weekly settlement of account  services; front-end and back-end development of the Yangdao platform, etc. During the time I spent, I learned a lot, the correct steps and methods for handling online events, and the integrity of unit testing during joint debugging and development. The reason I want to resign is because the company moved to a new home at the beginning of the year, which is too far from where I currently live, so I want to find a closer job. The above is my personal introduction, thank you for listening!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;面试官们好，我是今天的面试者，陈宜，你也可以称呼我的英文名Darry，我今天面试的岗位是java开发，我于2020年在江苏理工学院毕业，目前已有两年经验，我有两份工作经历，第一家是在一家专门为医院开发系统的公司，由于公司不是</summary>
      
    
    
    
    <category term="SAP" scheme="https://smile1231.github.io/categories/SAP/"/>
    
    
    <category term="SAP" scheme="https://smile1231.github.io/tags/SAP/"/>
    
  </entry>
  
  <entry>
    <title>Web-based design and analysis tools for CRISPR base editing 文献阅读</title>
    <link href="https://smile1231.github.io/posts/4da9c93/"/>
    <id>https://smile1231.github.io/posts/4da9c93/</id>
    <published>2022-03-21T09:53:50.000Z</published>
    <updated>2022-05-12T18:22:27.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-based-design-and-analysis-tools-for-CRISPR-base-editing"><a href="#Web-based-design-and-analysis-tools-for-CRISPR-base-editing" class="headerlink" title="Web-based design and analysis tools for CRISPR base editing"></a><code>Web-based design and analysis tools for CRISPR base editing</code></h2><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Web-based-design-and-analysis-tools-for-CRISPR-base-editing&quot;&gt;&lt;a href=&quot;#Web-based-design-and-analysis-tools-for-CRISPR-base-editing&quot; class=&quot;headerlink&quot; title=&quot;Web-based design and analysis tools for CRISPR base editing&quot;&gt;&lt;/a&gt;&lt;code&gt;Web-based design and analysis tools for CRISPR base editing&lt;/code&gt;&lt;/h2&gt;</summary>
    
    
    
    
    <category term="生物信息" scheme="https://smile1231.github.io/tags/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF/"/>
    
    <category term="基因编辑" scheme="https://smile1231.github.io/tags/%E5%9F%BA%E5%9B%A0%E7%BC%96%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>JDK动态代理原理剖析(简洁版)</title>
    <link href="https://smile1231.github.io/posts/dfdc2005/"/>
    <id>https://smile1231.github.io/posts/dfdc2005/</id>
    <published>2022-03-14T09:40:52.000Z</published>
    <updated>2022-03-14T14:49:10.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态代理两个实例-视频中学的"><a href="#动态代理两个实例-视频中学的" class="headerlink" title="动态代理两个实例(视频中学的)"></a>动态代理两个实例(视频中学的)</h2><p>动态代理在<code>Java</code>中有着广泛的应用，比如<code>Spring AOP、Hibernate</code>数据查询、测试框架的后端<code>mock、RPC</code>远程调用、<code>Java</code>注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等。<br>本文主要介绍<code>Java</code>中两种常见的动态代理方式：<code>JDK</code>原生动态代理和<code>CGLIB</code>动态代理。</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p>本文将介绍的<code>Java</code>动态代理与设计模式中的代理模式有关，什么是代理模式呢？</p><span id="more"></span><p><strong>代理模式：</strong>给某一个对象提供一个代理，并由代理对象来控制对真实对象的访问。代理模式是一种结构型设计模式。</p><p>代理模式角色分为 <code>3</code> 种：</p><ul><li><p><code>Subject（抽象主题角色）</code>：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</p></li><li><p><code>RealSubject（真实主题角色）</code>：真正实现业务逻辑的类；</p></li><li><p><code>Proxy（代理主题角色）</code>：用来代理和封装真实主题；</p></li></ul><p>代理模式的结构比较简单，其核心是代理类，为了让客户端能够一致性地对待真实对象和代理对象，在代理模式中引入了抽象层</p><img data-src="/posts/dfdc2005/2022-03-14-17-42-04.png" class=""><blockquote><p>代理模式按照职责（使用场景）来分类，至少可以分为以下几类：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、远程代理。 </span><br><span class="line"><span class="number">2</span>、虚拟代理。 </span><br><span class="line"><span class="number">3</span>、Copy-on-Write 代理。 </span><br><span class="line"><span class="number">4</span>、保护（Protect or Access）代理。 </span><br><span class="line"><span class="number">5</span>、Cache代理。 </span><br><span class="line"><span class="number">6</span>、防火墙（Firewall）代理。 </span><br><span class="line"><span class="number">7</span>、同步化（Synchronization）代理。 </span><br><span class="line"><span class="number">8</span>、智能引用（Smart Reference）代理等等。</span><br></pre></td></tr></table></figure><p>如果根据字节码的创建时机来分类，可以分为静态代理和动态代理：</p><ul><li>所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和真实主题角色的关系在运行前就确定了。</li><li>而动态代理的源码是在程序运行期间由<code>JVM</code>根据反射等机制动态的生成，所以在运行前并不存在代理类的字节码文件</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>我们先通过实例来学习静态代理，然后理解静态代理的缺点，再来学习本文的主角：动态代理</p><p>编写一个接口 <code>UserService</code> ，以及该接口的一个实现类 <code>UserServiceImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;查询 selectById&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新 update&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将通过静态代理对 <code>UserServiceImpl</code> 进行功能增强，在调用 <code>select</code> 和 <code>update</code> 之前记录一些日志。写一个代理类 <code>UserServiceProxy</code>，代理类需要实现 <code>UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserService target; <span class="comment">// 被代理的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxy</span><span class="params">(UserService target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        target.select();    <span class="comment">// 这里才实际调用真实主题角色的方法</span></span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        target.update();    <span class="comment">// 这里才实际调用真实主题角色的方法</span></span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;     <span class="comment">// 在执行方法之前执行</span></span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;log start time [%s] &quot;</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;      <span class="comment">// 在执行方法之后执行</span></span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;log end time [%s] &quot;</span>, <span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserService userServiceImpl = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        UserService proxy = <span class="keyword">new</span> UserServiceProxy(userServiceImpl);</span><br><span class="line"></span><br><span class="line">        proxy.select();</span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过静态代理，我们达到了功能增强的目的，而且没有侵入原代码，这是静态代理的一个优点。</p><h4 id="静态代理的缺点"><a href="#静态代理的缺点" class="headerlink" title="静态代理的缺点"></a>静态代理的缺点</h4><p>虽然静态代理实现简单，且不侵入原代码，但是，当场景稍微复杂一些的时候，静态代理的缺点也会暴露出来。<br>1、 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：</p><pre><code>- 只维护一个代理类，由这个代理类实现多个接口，但是这样就导致代理类过于庞大- 新建多个代理类，每个目标对象对应一个代理类，但是这样会产生过多的代理类</code></pre><p>2、 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，不易维护</p><h3 id="如何改进？"><a href="#如何改进？" class="headerlink" title="如何改进？"></a>如何改进？</h3><p>当然是让代理类<strong>动态的生成</strong>啦，也就是动态代理。</p><p><strong>为什么类可以动态的生成？</strong></p><p>这就涉及到<code>Java</code>虚拟机的<strong>类加载机制</strong>了，推荐翻看《深入理解Java虚拟机》7.3节 类加载的过程。</p><p>Java虚拟机类加载过程主要分为五个阶段：加载、验证、准备、解析、初始化。其中加载阶段需要完成以下3件事情：</p><p>通过一个类的全限定名来获取定义此类的二进制字节流<br>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构<br>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据访问入口</p><p>由于虚拟机规范对这3点要求并不具体，所以实际的实现是非常灵活的，关于第1点，获取类的二进制字节流（class字节码）就有很多途径：</p><p>从ZIP包获取，这是JAR、EAR、WAR等格式的基础<br>从网络中获取，典型的应用是 Applet<br>运行时计算生成，这种场景使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 *$Proxy 的代理类的二进制字节流<br>由其它文件生成，典型应用是JSP，即由JSP文件生成对应的Class类<br>从数据库中获取等等</p><p>所以，动态代理就是想办法，根据接口或目标对象，计算出代理类的字节码，然后再加载到JVM中使用。但是如何计算？如何生成？情况也许比想象的复杂得多，我们需要借助现有的方案。</p><h3 id="常见的字节码操作类库"><a href="#常见的字节码操作类库" class="headerlink" title="常见的字节码操作类库"></a>常见的字节码操作类库</h3><p>这里有一些介绍：<a href="https://link.juejin.cn/?target=https://java-source.net/open-source/bytecode-libraries">java-source.net/open-source…</a></p><h3 id="实现动态代理的思考方向"><a href="#实现动态代理的思考方向" class="headerlink" title="实现动态代理的思考方向"></a>实现动态代理的思考方向</h3><p>为了让生成的代理类与目标对象（真实主题角色）保持一致性，从现在开始将介绍以下两种最常见的方式：</p><ul><li>通过实现接口的方式 -&gt; <code>JDK</code>动态代理</li><li>通过继承类的方式 -&gt; <code>CGLIB</code>动态代理</li></ul><p>注：使用<code>ASM</code>对使用者要求比较高，使用<code>Javassist</code>会比较麻烦</p><h3 id="JDk动态代理"><a href="#JDk动态代理" class="headerlink" title="JDk动态代理"></a><code>JDk</code>动态代理</h3><p>JDK动态代理主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code>，我们仍然通过案例来学习</p><p>编写一个调用逻辑处理器 <code>LogHandler</code> 类，提供日志增强功能，并实现 <code>InvocationHandler</code> 接口；在 <code>LogHandler</code> 中维护一个目标对象，这个对象是被代理的对象（真实主题角色）；在 <code>invoke</code> 方法中编写方法调用的逻辑处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jinmao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-14-10:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> LogHandler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理的对象，实际的方法执行者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogHandler</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy:代理类代理的真实代理对象com.sun.proxy.$Proxy0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method:我们所要调用某个对象真实的方法的Method对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args:指代代理对象方法传递的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="comment">//调用target的method方法</span></span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用invoke方法之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;log start time [%s] %n&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用invoke方法之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;log end time [%s] %n&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写客户端，获取动态生成的代理类的对象须借助 <code>Proxy</code> 类的 <code>newProxyInstance</code> 方法，具体步骤可见代码和注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.cy.learn.dynamic.proxy.utils.ProxyUtils;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@creator</span> jinmao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-14-13:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置变量可以保存动态代理类，默认名称以 $Proxy0 格式命名</span></span><br><span class="line">        <span class="comment">// System.getProperties().setProperty(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span></span><br><span class="line">        <span class="comment">// 1. 创建被代理的对象，UserService接口的实现类</span></span><br><span class="line">        UserServiceImpl userServiceImpl = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">// 2. 获取对应的 ClassLoader</span></span><br><span class="line">        ClassLoader classLoader = userServiceImpl.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">// 3. 获取所有接口的Class，这里的UserServiceImpl只实现了一个接口UserService，</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = userServiceImpl.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">// 4. 创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用</span></span><br><span class="line">        LogHandler logHandler = <span class="keyword">new</span> LogHandler(userServiceImpl);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        5.根据上面提供的信息，创建代理对象 在这个过程中，</span></span><br><span class="line"><span class="comment">           a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码</span></span><br><span class="line"><span class="comment">           b.然后根据相应的字节码转换成对应的class，</span></span><br><span class="line"><span class="comment">           c.然后调用newInstance()创建代理实例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        UserService proxy = (UserService) Proxy.newProxyInstance(classLoader, interfaces, logHandler);</span><br><span class="line">        <span class="comment">// 调用代理的方法</span></span><br><span class="line">        proxy.select();</span><br><span class="line">        proxy.update();</span><br><span class="line">        <span class="comment">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy</span></span><br><span class="line">        <span class="comment">//ProxyUtils.generateClassFile(userServiceImpl.getClass(), &quot;UserServiceProxy&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">log start time [Mon Mar <span class="number">14</span> <span class="number">18</span>:<span class="number">02</span>:<span class="number">11</span> CST <span class="number">2022</span>] </span><br><span class="line">查询 selectById</span><br><span class="line">log end time [Mon Mar <span class="number">14</span> <span class="number">18</span>:<span class="number">02</span>:<span class="number">11</span> CST <span class="number">2022</span>] </span><br><span class="line">log start time [Mon Mar <span class="number">14</span> <span class="number">18</span>:<span class="number">02</span>:<span class="number">11</span> CST <span class="number">2022</span>] </span><br><span class="line">更新 update</span><br><span class="line">log end time [Mon Mar <span class="number">14</span> <span class="number">18</span>:<span class="number">02</span>:<span class="number">11</span> CST <span class="number">2022</span>] </span><br></pre></td></tr></table></figure><p><code>InvocationHandler</code> 和 <code>Proxy</code> 的主要方法介绍如下：</p><p><strong><code>java.lang.reflect.InvocationHandler</code></strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object invoke(Object proxy, <span class="function"><span class="keyword">Method</span> <span class="title">method</span>, <span class="title">Object</span>[] <span class="title">args</span>) 定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用</span></span><br></pre></td></tr></table></figure><p><strong><code>java.lang.reflect.Proxy</code></strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static InvocationHandler getInvocationHandler(Object proxy)  用于获取指定代理对象所关联的调用处理器<span class="keyword"></span></span><br><span class="line"><span class="keyword">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) 返回指定接口的代理类<span class="keyword"></span></span><br><span class="line"><span class="keyword">static</span> Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) 构造实现指定接口的代理类的一个新实例，所有方法会调用给定处理器对象的<span class="built_in"> invoke </span>方法<span class="keyword"></span></span><br><span class="line"><span class="keyword">static</span> boolean isProxyClass(Class&lt;?&gt; cl) 返回 cl 是否为一个代理类</span><br></pre></td></tr></table></figure><h3 id="代理类的调用过程"><a href="#代理类的调用过程" class="headerlink" title="代理类的调用过程"></a>代理类的调用过程</h3><p>生成的代理类到底长什么样子呢？借助下面的工具类，把代理类保存下来再探个究竟</p><p>（通过设置环境变量<code>sun.misc.ProxyGenerator.saveGeneratedFiles=true</code>也可以保存代理类）</p><p>手写一个工具类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.misc.ProxyGenerator;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@creator</span> jinmao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2022-03-14-13:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> ProxyUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将根据类信息动态生成的二进制字节码保存到硬盘中，默认的是clazz目录下</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz: 需要生成动态代理类的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxyName: 为动态生成的代理类的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateClassFile</span><span class="params">(Class clazz, String proxyName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据类信息和提供的代理类名称，生成字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] classFile = ProxyGenerator.generateProxyClass(proxyName, clazz.getInterfaces());</span><br><span class="line">        String paths = clazz.getResource(<span class="string">&quot;.&quot;</span>).getPath();</span><br><span class="line">        System.out.println(paths);</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//保留到硬盘中</span></span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(paths + proxyName + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line">            out.write(classFile);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将这两行注释放开即可:</p><img data-src="/posts/dfdc2005/2022-03-14-18-10-35.png" class=""><p>运行结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">log start time [Mon Mar <span class="number">14</span> <span class="number">18</span>:<span class="number">25</span>:<span class="number">57</span> CST <span class="number">2022</span>] </span><br><span class="line">查询 selectById</span><br><span class="line">log end time [Mon Mar <span class="number">14</span> <span class="number">18</span>:<span class="number">25</span>:<span class="number">57</span> CST <span class="number">2022</span>] </span><br><span class="line">log start time [Mon Mar <span class="number">14</span> <span class="number">18</span>:<span class="number">25</span>:<span class="number">57</span> CST <span class="number">2022</span>] </span><br><span class="line">更新 update</span><br><span class="line">log end time [Mon Mar <span class="number">14</span> <span class="number">18</span>:<span class="number">25</span>:<span class="number">57</span> CST <span class="number">2022</span>] </span><br></pre></td></tr></table></figure><p><code>IDEA</code> 再次运行之后就可以在 <code>out</code> 的类路径下找到 <code>UserServiceProxy.class</code>，双击后<code>IDEA</code>的反编译插件会将该二进制<code>class</code>文件</p><img data-src="/posts/dfdc2005/2022-03-14-18-12-41.png" class=""><p><code>UserServiceProxy</code>的反编译代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cy.learn.dynamic.proxy.UserService;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxy</span><span class="params">(InvocationHandler var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">&quot;com.cy.learn.dynamic.proxy.UserService&quot;</span>).getMethod(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.cy.learn.dynamic.proxy.UserService&quot;</span>).getMethod(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中看一段我们自己的和新方法<code>select()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var2;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的<code>super</code>就是<code>extends</code>的<code>Proxy</code>类,我们来看<code>super</code>中的<code>h</code>到底是什么?</p><img data-src="/posts/dfdc2005/2022-03-14-18-24-12.png" class=""><p>而<code>super.h.invoke</code>方法即为我们手写的<code>LogHandler</code>中的<code>invoke</code>方法,所以日志才会打印</p><img data-src="/posts/dfdc2005/2022-03-14-18-25-17.png" class=""><blockquote><p>小总结</p></blockquote><p>从 <code>UserServiceProxy</code> 的代码中我们可以发现：</p><ul><li><code>UserServiceProxy</code> 继承了 <code>Proxy</code> 类，并且实现了被代理的所有接口，以及<code>equals、hashCode、toString</code>等方法</li><li>由于 <code>UserServiceProxy</code> 继承了 <code>Proxy</code> 类，所以每个代理类都会关联一个 <code>InvocationHandler</code> 方法调用处理器</li><li>类和所有方法都被 <code>public final</code> 修饰，所以代理类只可被使用，不可以再被继承</li><li>每个方法都有一个 <code>Method</code> <code>对象来描述，Method</code> 对象在<code>static</code>静态代码块中创建，以<code> m + 数字</code> 的格式命名</li><li>调用方法的时候通过 <code>super.h.invoke(this, m1, (Object[])null)</code>; 调用，其中的 <code>super.h.invoke</code> 实际上是在创建代理的时候传递给 <code>Proxy.newProxyInstance</code> 的 <code>LogHandler</code> 对象，它继承 <code>InvocationHandler</code> 类，负责实际的调用处理逻辑</li></ul><p>而 <code>LogHandler</code> 的 <code>invoke</code> 方法接收到 <code>method、args</code> 等参数后，进行一些处理，然后通过反射让被代理的对象 <code>target</code> 执行方法</p><p>JDK动态代理执行方法调用的过程简图如下：</p><img data-src="/posts/dfdc2005/2022-03-14-18-28-41.png" class=""><h2 id="Proxy-newProxyInstance源码debug"><a href="#Proxy-newProxyInstance源码debug" class="headerlink" title="Proxy.newProxyInstance源码debug"></a><code>Proxy.newProxyInstance</code>源码<code>debug</code></h2><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回将方法调用分派到指定调用处理程序的指定接口的代理类的实例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        InvocationHandler h)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line">    <span class="comment">//复制一份传入的接口字节码对象数组</span></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">    <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找或生成指定的代理类</span></span><br><span class="line">    <span class="comment">//此处使用类加载器和接口生成一个Proxy子类字节码对象</span></span><br><span class="line">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs); ------------------------------------&gt;  进入该核心方法</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用指定的调用处理程序调用其构造函数</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取构造器对象和调用处理器</span></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">        <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用构造器和调用处理器创建proxy代理对象并返回</span></span><br><span class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span>  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>getProxyClass0</code>方法：</p><img data-src="/posts/dfdc2005/2022-03-14-22-06-24.png" class=""><p>进入到<code>get</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过缓存查找值。如果给定的 (key, subKey) 对的缓存中没有条目或条目已被清除</span></span><br><span class="line"><span class="comment">// 则这始终评估subKeyFactory函数并可选地评估valueFactory函数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key, P parameter)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(parameter);</span><br><span class="line"></span><br><span class="line">    expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">    Object cacheKey = CacheKey.valueOf(key, refQueue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 惰性地为特定的cacheKey安装第二级值map</span></span><br><span class="line">    ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; valuesMap = map.get(cacheKey);</span><br><span class="line">    <span class="keyword">if</span> (valuesMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ConcurrentMap&lt;Object, Supplier&lt;V&gt;&gt; oldValuesMap</span><br><span class="line">            = map.putIfAbsent(cacheKey,</span><br><span class="line">                                valuesMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;());</span><br><span class="line">        <span class="keyword">if</span> (oldValuesMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            valuesMap = oldValuesMap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建subKey并从valuesMap中检索由该subKey存储的可能的Supplier&lt;V&gt;</span></span><br><span class="line">    Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter));</span><br><span class="line">    Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">    Factory factory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (supplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// supplier可以是一个Factory或者CacheValue&lt;V&gt;实例</span></span><br><span class="line">            V value = supplier.get(); -----------------------------------&gt;  进入该和新方法</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则缓存中没有供应商 </span></span><br><span class="line">        <span class="comment">//或返回null的供应商(可以是一个清除的CacheValue)</span></span><br><span class="line">        <span class="comment">//或一个工厂，没有成功安装CacheValue)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 懒惰地建造工厂</span></span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            factory = <span class="keyword">new</span> Factory(key, parameter, subKey, valuesMap);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">            supplier = valuesMap.putIfAbsent(subKey, factory);</span><br><span class="line">            <span class="keyword">if</span> (supplier == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// successfully installed Factory</span></span><br><span class="line">                supplier = factory;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else retry with winning supplier</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (valuesMap.replace(subKey, supplier, factory)) &#123;</span><br><span class="line">                <span class="comment">// successfully replaced</span></span><br><span class="line">                <span class="comment">// cleared CacheEntry / unsuccessful Factory</span></span><br><span class="line">                <span class="comment">// with our Factory</span></span><br><span class="line">                supplier = factory;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// retry with current supplier</span></span><br><span class="line">                supplier = valuesMap.get(subKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Supplier.get</code>方法,此处是<code>Factory</code>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="comment">// serialize access</span></span><br><span class="line">    <span class="comment">// re-check</span></span><br><span class="line">    Supplier&lt;V&gt; supplier = valuesMap.get(subKey);</span><br><span class="line">    <span class="keyword">if</span> (supplier != <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//在我们等待的时候发生了一些变化: </span></span><br><span class="line">        <span class="comment">//可能是我们被CacheValue替换了 </span></span><br><span class="line">        <span class="comment">//或因为失败而被删除-&gt; </span></span><br><span class="line">        <span class="comment">//返回null信号WeakCache.get()重试 </span></span><br><span class="line">        <span class="comment">//循环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// else still us (supplier == this)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create new value</span></span><br><span class="line">    V value = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        value = Objects.requireNonNull(valueFactory.apply(key, parameter)); ---------&gt; 进入该apply核心方法</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">// remove us on failure</span></span><br><span class="line">            valuesMap.remove(subKey, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 断言非空值</span></span><br><span class="line">    <span class="keyword">assert</span> value != <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用CacheValue (WeakReference)包装值</span></span><br><span class="line">    CacheValue&lt;V&gt; cacheValue = <span class="keyword">new</span> CacheValue&lt;&gt;(value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// put into reverseMap</span></span><br><span class="line">    reverseMap.put(cacheValue, Boolean.TRUE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try replacing us with CacheValue (this should always succeed)</span></span><br><span class="line">    <span class="keyword">if</span> (!valuesMap.replace(subKey, <span class="keyword">this</span>, cacheValue)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Should not reach here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// successfully replaced us with new CacheValue -&gt; return the value</span></span><br><span class="line">    <span class="comment">// wrapped by it</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>apply</code>源码,此处为<code>Proxy</code>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">        <span class="comment">//验证类装入器解析此名称 指向同一个Class对象的接口</span></span><br><span class="line">        Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                intf + <span class="string">&quot; is not visible from class loader&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证Class对象实际表示接口。</span></span><br><span class="line">        <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                interfaceClass.getName() + <span class="string">&quot; is not an interface&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 确认该接口不是重复的接口。</span></span><br><span class="line">        <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;repeated interface: &quot;</span> + interfaceClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line">    <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录非公共代理接口的包，</span></span><br><span class="line">    <span class="comment">// 使代理类将在同一个包中定义。</span></span><br><span class="line">    <span class="comment">// 验证所有的非公共代理接口都在同一个包中。</span></span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">        <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">            accessFlags = Modifier.FINAL;</span><br><span class="line">            String name = intf.getName();</span><br><span class="line">            <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            String pkg = ((n == -<span class="number">1</span>) ? <span class="string">&quot;&quot;</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                proxyPkg = pkg;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">&quot;non-public interfaces from different packages&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有非公共代理接口，使用  com.sun.proxy 包</span></span><br><span class="line">        proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为要生成的代理类选择一个名称</span></span><br><span class="line">    <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">    <span class="comment">// 这理解解释了为什么我们每次debug的时候都会有一个 com.sun.proxy.$Proxy0  这种类名</span></span><br><span class="line">    String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成特定的代理类</span></span><br><span class="line">    <span class="comment">//在上面中我讲生成的class文件输出在了out中，就是调用了这个方法，地方使用了AccessController.doPrivileged，为native方法，由C++编写</span></span><br><span class="line">    <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">        proxyName, interfaces, accessFlags);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用native方法</span></span><br><span class="line">        <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                            proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">        <span class="comment">//类formaterror表示(禁止代理类生成代码)还有一些其他的 提供给代理的参数的无效方面 类创建(如虚拟机限制超过)</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小总结</p></blockquote><p><code>newProxyInstance</code> -&gt; <code>getProxyClass0</code> -&gt; <code>supplier.get()</code> -&gt; <code>valueFactory.apply</code> 就是生成代理类的大概原理啦，只要有兴趣，<code>debug</code>一下就可以了。</p><p><a href="https://juejin.cn/post/6844903744954433544">参考文章</a> </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;动态代理两个实例-视频中学的&quot;&gt;&lt;a href=&quot;#动态代理两个实例-视频中学的&quot; class=&quot;headerlink&quot; title=&quot;动态代理两个实例(视频中学的)&quot;&gt;&lt;/a&gt;动态代理两个实例(视频中学的)&lt;/h2&gt;&lt;p&gt;动态代理在&lt;code&gt;Java&lt;/code&gt;中有着广泛的应用，比如&lt;code&gt;Spring AOP、Hibernate&lt;/code&gt;数据查询、测试框架的后端&lt;code&gt;mock、RPC&lt;/code&gt;远程调用、&lt;code&gt;Java&lt;/code&gt;注解对象获取、日志、用户鉴权、全局性异常处理、性能监控，甚至事务处理等。&lt;br&gt;本文主要介绍&lt;code&gt;Java&lt;/code&gt;中两种常见的动态代理方式：&lt;code&gt;JDK&lt;/code&gt;原生动态代理和&lt;code&gt;CGLIB&lt;/code&gt;动态代理。&lt;/p&gt;
&lt;h3 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h3&gt;&lt;p&gt;本文将介绍的&lt;code&gt;Java&lt;/code&gt;动态代理与设计模式中的代理模式有关，什么是代理模式呢？&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java面试" scheme="https://smile1231.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
    <category term="JDK" scheme="https://smile1231.github.io/tags/JDK/"/>
    
    <category term="动态代理" scheme="https://smile1231.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>阻塞队列</title>
    <link href="https://smile1231.github.io/posts/159c6098/"/>
    <id>https://smile1231.github.io/posts/159c6098/</id>
    <published>2022-03-13T08:31:51.000Z</published>
    <updated>2022-03-13T12:07:21.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阻塞队列接口结构和实现类"><a href="#阻塞队列接口结构和实现类" class="headerlink" title="阻塞队列接口结构和实现类"></a>阻塞队列接口结构和实现类</h2><p><strong>阻塞队列</strong>，顾名思义，首先它是一个队列，而一个阻塞队列在数据结构中所起的作用大致如下图所示：</p><img data-src="/posts/159c6098/2022-03-13-16-33-09.png" class=""><span id="more"></span><p>线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素。</p><p>当阻塞队列是空时，从队列中获取元素的操作将会被阻塞。</p><p>当阻塞队列是满时，往队列里添加元素的操作将会被阻塞。</p><p>试图从空的阻塞队列中获取元素的线程将会被阻塞，直到其他的线程往空的队列插入新的元素。</p><p>同样试图往已满的阻塞队列中添加新元素的线程同样也会被阻塞，直到其他的线程从列中移除一个或者多个元素或者完全清空队列后使队列重新变得空闲起来并后续新增</p><p><strong>为什么用？有什么好处？</strong></p><p>在多线程领域：所谓阻塞，在某些情况下余挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒</p><p>为什么需要<code>BlockingQueue</code><br>好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切<code>BlockingQueue</code>都给你一手包办了</p><p>在<code>Concurrent</code>包发布以前，在多线程环境下，我们每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。</p><p>架构介绍</p><img data-src="/posts/159c6098/2022-03-13-16-39-46.png" class=""><p>种类分析：</p><ul><li><code>ArrayBlockingQueue</code>：由数组结构组成的有界阻塞队列。</li><li><code>LinkedBlockingQueue</code>：由链表结构组成的有界（但大小默认值为<code>Integer.MAX_VALUE</code>）阻塞队列。</li><li><code>PriorityBlockingQueue</code>：支持优先级排序的无界阻塞队列。</li><li><code>DelayQueue</code>：使用优先级队列实现妁延迟无界阻塞队列。</li><li><code>SynchronousQueue</code>：不存储元素的阻塞队列。</li><li><code>LinkedTransferQueue</code>：由链表结构绒成的无界阻塞队列。</li><li><code>LinkedBlockingDeque</code>：由链表结构组成的双向阻塞队列。</li></ul><p><strong><code>BlockingQueue</code>的核心方法</strong></p><table><thead><tr><th>方法类型</th><th>抛出异常</th><th>特殊值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检查</td><td>element()</td><td>peek()</td><td>不可用</td><td>不可用</td></tr></tbody></table><table><thead><tr><th>性质</th><th>说明</th></tr></thead><tbody><tr><td>抛出异常</td><td>当阻塞队列满时：在往队列中add插入元素会抛出 IIIegalStateException：Queue full    当阻塞队列空时：再往队列中remove移除元素，会抛出NoSuchException</td></tr><tr><td>特殊性</td><td>插入方法，成功true，失败false  移除方法：成功返回出队列元素，队列没有就返回空</td></tr><tr><td>一直阻塞</td><td>当阻塞队列满时，生产者继续往队列里put元素，队列会一直阻塞生产线程直到put数据or响应中断退出。  当阻塞队列空时，消费者线程试图从队列里take元素，队列会一直阻塞消费者线程直到队列可用。</td></tr><tr><td>超时退出</td><td>当阻塞队列满时，队里会阻塞生产者线程一定时间，超过限时后生产者线程会退出</td></tr></tbody></table><h2 id="线程通信之生产者消费者传统"><a href="#线程通信之生产者消费者传统" class="headerlink" title="线程通信之生产者消费者传统"></a>线程通信之生产者消费者传统</h2><p>阻塞队列用在哪里？</p><ul><li>生产者消费者模式<ul><li>传统版（<code>synchronized, wait, notify</code>）</li><li>阻塞队列版（<code>lock, await, signal</code>）</li></ul></li><li>线程池</li><li>消息中间件</li></ul><p>实现一个简单的生产者消费者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 同步代码块，加锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 等待不能生产</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 干活</span></span><br><span class="line">            number++;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t &quot;</span> + number);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通知 唤醒</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 同步代码块，加锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">while</span>(number == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 等待不能消费</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 干活</span></span><br><span class="line">            number--;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t &quot;</span> + number);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通知 唤醒</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<code>increment()</code>和<code>decrement()</code>内的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="keyword">while</span>(number != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 等待不能生产</span></span><br><span class="line">    condition.await();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能用 (javaw文档中指出)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断</span></span><br><span class="line"><span class="keyword">if</span>(number != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 等待不能生产</span></span><br><span class="line">    condition.await();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronized和Lock有什么区别"><a href="#Synchronized和Lock有什么区别" class="headerlink" title="Synchronized和Lock有什么区别"></a><code>Synchronized</code>和<code>Lock</code>有什么区别</h2><ol><li><code>synchronized</code>属于<code>JVM</code>层面，属于<code>java</code>的关键字<ul><li><code>monitorenter</code>（底层是通过<code>monitor</code>对象来完成，其实<code>wait/notify</code>等方法也依赖于<code>monitor</code>对象 只能在同步块或者方法中才能调用 <code>wait/ notify</code>等方法）</li><li><code>Lock</code>是具体类（<code>java.util.concurrent.locks.Lock</code>）是<code>api</code>层面的锁</li></ul></li><li>使用方法：<ul><li><code>synchronized：</code>不需要用户去手动释放锁，当<code>synchronized</code>代码执行后，系统会自动让线程释放对锁的占用。</li><li><code>ReentrantLock：</code>则需要用户去手动释放锁，若没有主动释放锁，就有可能出现死锁的现象，需要<code>lock()</code> 和 <code>unlock()</code> 配置<code>try catch</code>语句来完成</li></ul></li><li>等待是否中断<ul><li><code>synchronized：</code>不可中断，除非抛出异常或者正常运行完成。</li><li><code>ReentrantLock：</code>可中断，可以设置超时方法<ul><li>设置超时方法，<code>trylock(long timeout, TimeUnit unit)</code></li><li><code>lockInterrupible()</code> 放代码块中，调用<code>interrupt()</code> 方法可以中断</li></ul></li></ul></li><li>加锁是否公平<ul><li><code>synchronized</code>：非公平锁</li><li><code>ReentrantLock</code>：默认非公平锁，构造函数可以传递<code>boolean</code>值，<code>true</code>为公平锁，<code>false</code>为非公平锁</li></ul></li><li>锁绑定多个条件<code>Condition</code><ul><li><code>synchronized</code>：没有，要么随机，要么全部唤醒</li><li><code>ReentrantLock</code>：用来实现分组唤醒需要唤醒的线程，可以精确唤醒，而不是像<code>synchronized</code>那样，要么随机，要么全部唤醒</li></ul></li></ol><h2 id="锁绑定多个条件Condition"><a href="#锁绑定多个条件Condition" class="headerlink" title="锁绑定多个条件Condition"></a>锁绑定多个条件<code>Condition</code></h2><p>实现场景</p><p>多线程之间按顺序调用，实现 <code>A-&gt; B -&gt; C</code> 三个线程启动，要求如下：<br><code>AA</code>打印<code>5</code>次，<code>BB</code>打印<code>10</code>次，<code>CC</code>打印<code>15</code>次<br>紧接着<br><code>AA</code>打印<code>5</code>次，<code>BB</code>打印<code>10</code>次，<code>CC</code>打印<code>15</code>次<br>…<br>来<code>10</code>轮</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareResource</span> </span>&#123;</span><br><span class="line">    <span class="comment">// A 1   B 2   c 3</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 创建一个重入锁</span></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这三个相当于备用钥匙</span></span><br><span class="line">    <span class="keyword">private</span> Condition condition1 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition2 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition condition3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 不等于1，需要等待</span></span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 干活</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t &quot;</span> + number + <span class="string">&quot;\t&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 唤醒 （干完活后，需要通知B线程执行）</span></span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 通知2号去干活了</span></span><br><span class="line">            condition2.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 不等于1，需要等待</span></span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 干活</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t &quot;</span> + number + <span class="string">&quot;\t&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 唤醒 （干完活后，需要通知C线程执行）</span></span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            <span class="comment">// 通知2号去干活了</span></span><br><span class="line">            condition3.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print15</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="comment">// 不等于1，需要等待</span></span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 干活</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t &quot;</span> + number + <span class="string">&quot;\t&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 唤醒 （干完活后，需要通知C线程执行）</span></span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 通知1号去干活了</span></span><br><span class="line">            condition1.signal();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedAndReentrantLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ShareResource shareResource = <span class="keyword">new</span> ShareResource();</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">                    shareResource.print5();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">                shareResource.print10();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">                shareResource.print15();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">A <span class="number">1</span><span class="number">0</span></span><br><span class="line">A <span class="number">1</span><span class="number">1</span></span><br><span class="line">A <span class="number">1</span><span class="number">2</span></span><br><span class="line">A <span class="number">1</span><span class="number">3</span></span><br><span class="line">A <span class="number">1</span><span class="number">4</span></span><br><span class="line">B <span class="number">2</span><span class="number">0</span></span><br><span class="line">B <span class="number">2</span><span class="number">1</span></span><br><span class="line">B <span class="number">2</span><span class="number">2</span></span><br><span class="line">B <span class="number">2</span><span class="number">3</span></span><br><span class="line">B <span class="number">2</span><span class="number">4</span></span><br><span class="line">B <span class="number">2</span><span class="number">5</span></span><br><span class="line">B <span class="number">2</span><span class="number">6</span></span><br><span class="line">B <span class="number">2</span><span class="number">7</span></span><br><span class="line">B <span class="number">2</span><span class="number">8</span></span><br><span class="line">B <span class="number">2</span><span class="number">9</span></span><br><span class="line">C <span class="number">3</span><span class="number">0</span></span><br><span class="line">C <span class="number">3</span><span class="number">1</span></span><br><span class="line">C <span class="number">3</span><span class="number">2</span></span><br><span class="line">C <span class="number">3</span><span class="number">3</span></span><br><span class="line">C <span class="number">3</span><span class="number">4</span></span><br><span class="line">C <span class="number">3</span><span class="number">5</span></span><br><span class="line">C <span class="number">3</span><span class="number">6</span></span><br><span class="line">C <span class="number">3</span><span class="number">7</span></span><br><span class="line">C <span class="number">3</span><span class="number">8</span></span><br><span class="line">C <span class="number">3</span><span class="number">9</span></span><br><span class="line">C <span class="number">3</span><span class="number">10</span></span><br><span class="line">C <span class="number">3</span><span class="number">11</span></span><br><span class="line">C <span class="number">3</span><span class="number">12</span></span><br><span class="line">C <span class="number">3</span><span class="number">13</span></span><br><span class="line">C <span class="number">3</span><span class="number">14</span></span><br><span class="line">A <span class="number">1</span><span class="number">0</span></span><br><span class="line">A <span class="number">1</span><span class="number">1</span></span><br><span class="line">A <span class="number">1</span><span class="number">2</span></span><br><span class="line">A <span class="number">1</span><span class="number">3</span></span><br><span class="line">A <span class="number">1</span><span class="number">4</span></span><br><span class="line">B <span class="number">2</span><span class="number">0</span></span><br><span class="line">B <span class="number">2</span><span class="number">1</span></span><br><span class="line">B <span class="number">2</span><span class="number">2</span></span><br><span class="line">B <span class="number">2</span><span class="number">3</span></span><br><span class="line">B <span class="number">2</span><span class="number">4</span></span><br><span class="line">B <span class="number">2</span><span class="number">5</span></span><br><span class="line">B <span class="number">2</span><span class="number">6</span></span><br><span class="line">B <span class="number">2</span><span class="number">7</span></span><br><span class="line">B <span class="number">2</span><span class="number">8</span></span><br><span class="line">B <span class="number">2</span><span class="number">9</span></span><br><span class="line">C <span class="number">3</span><span class="number">0</span></span><br><span class="line">C <span class="number">3</span><span class="number">1</span></span><br><span class="line">C <span class="number">3</span><span class="number">2</span></span><br><span class="line">C <span class="number">3</span><span class="number">3</span></span><br><span class="line">C <span class="number">3</span><span class="number">4</span></span><br><span class="line">C <span class="number">3</span><span class="number">5</span></span><br><span class="line">C <span class="number">3</span><span class="number">6</span></span><br><span class="line">C <span class="number">3</span><span class="number">7</span></span><br><span class="line">C <span class="number">3</span><span class="number">8</span></span><br><span class="line">C <span class="number">3</span><span class="number">9</span></span><br><span class="line">C <span class="number">3</span><span class="number">10</span></span><br><span class="line">C <span class="number">3</span><span class="number">11</span></span><br><span class="line">C <span class="number">3</span><span class="number">12</span></span><br><span class="line">C <span class="number">3</span><span class="number">13</span></span><br><span class="line">C <span class="number">3</span><span class="number">14</span></span><br></pre></td></tr></table></figure><h2 id="线程通信之生产者消费者阻塞队列版"><a href="#线程通信之生产者消费者阻塞队列版" class="headerlink" title="线程通信之生产者消费者阻塞队列版"></a>线程通信之生产者消费者阻塞队列版</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyResource</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认开启，进行生产消费</span></span><br><span class="line">    <span class="comment">// 这里用到了volatile是为了保持数据的可见性，也就是当TLAG修改时，要马上通知其它线程进行修改</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> FLAG = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用原子包装类，而不用number++</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里不能为了满足条件，而实例化一个具体的SynchronousBlockingQueue</span></span><br><span class="line">    BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 而应该采用依赖注入里面的，构造注入方法传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyResource</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">        <span class="comment">// 查询出传入的class是什么</span></span><br><span class="line">        System.out.println(blockingQueue.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myProducer</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> retValue;</span><br><span class="line">        <span class="comment">// 多线程环境的判断，一定要使用while进行，防止出现虚假唤醒</span></span><br><span class="line">        <span class="comment">// 当FLAG为true的时候，开始生产</span></span><br><span class="line">        <span class="keyword">while</span>(FLAG) &#123;</span><br><span class="line">            data = atomicInteger.incrementAndGet() + <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2秒存入1个data</span></span><br><span class="line">            retValue = blockingQueue.offer(data, <span class="number">2L</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span>(retValue) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 插入队列:&quot;</span> + data  + <span class="string">&quot;成功&quot;</span> );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 插入队列:&quot;</span> + data  + <span class="string">&quot;失败&quot;</span> );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 停止生产，表示FLAG=false，生产介绍&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myConsumer</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String retValue;</span><br><span class="line">        <span class="comment">// 多线程环境的判断，一定要使用while进行，防止出现虚假唤醒</span></span><br><span class="line">        <span class="comment">// 当FLAG为true的时候，开始生产</span></span><br><span class="line">        <span class="keyword">while</span>(FLAG) &#123;</span><br><span class="line">            <span class="comment">// 2秒存入1个data</span></span><br><span class="line">            retValue = blockingQueue.poll(<span class="number">2L</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">if</span>(retValue != <span class="keyword">null</span> &amp;&amp; retValue != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 消费队列:&quot;</span> + retValue  + <span class="string">&quot;成功&quot;</span> );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                FLAG = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 消费失败，队列中已为空，退出&quot;</span> );</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 退出消费队列</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止生产的判断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.FLAG = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerWithBlockingQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入具体的实现类， ArrayBlockingQueue</span></span><br><span class="line">        MyResource myResource = <span class="keyword">new</span> MyResource(<span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 生产线程启动\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                myResource.myProducer();</span><br><span class="line">                System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;producer&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 消费线程启动&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                myResource.myConsumer();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;consumer&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5秒后，停止生产和消费</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n\n5秒中后，生产和消费线程停止，线程结束&quot;</span>);</span><br><span class="line">        myResource.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent.ArrayBlockingQueue</span><br><span class="line">producer 生产线程启动</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">consumer 消费线程启动</span><br><span class="line">producer 插入队列:<span class="number">1</span>成功</span><br><span class="line">consumer 消费队列:<span class="number">1</span>成功</span><br><span class="line">producer 插入队列:<span class="number">2</span>成功</span><br><span class="line">consumer 消费队列:<span class="number">2</span>成功</span><br><span class="line">producer 插入队列:<span class="number">3</span>成功</span><br><span class="line">consumer 消费队列:<span class="number">3</span>成功</span><br><span class="line">producer 插入队列:<span class="number">4</span>成功</span><br><span class="line">consumer 消费队列:<span class="number">4</span>成功</span><br><span class="line">producer 插入队列:<span class="number">5</span>成功</span><br><span class="line">consumer 消费队列:<span class="number">5</span>成功</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>秒中后，生产和消费线程停止，线程结束</span><br><span class="line">producer 停止生产，表示FLAG=<span class="keyword">false</span>，生产介绍</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">consumer 消费失败，队列中已为空，退出</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;阻塞队列接口结构和实现类&quot;&gt;&lt;a href=&quot;#阻塞队列接口结构和实现类&quot; class=&quot;headerlink&quot; title=&quot;阻塞队列接口结构和实现类&quot;&gt;&lt;/a&gt;阻塞队列接口结构和实现类&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;阻塞队列&lt;/strong&gt;，顾名思义，首先它是一个队列，而一个阻塞队列在数据结构中所起的作用大致如下图所示：&lt;/p&gt;
&lt;img src=&quot;/posts/159c6098/2022-03-13-16-33-09.png&quot; class=&quot;&quot;&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://smile1231.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Java 面试" scheme="https://smile1231.github.io/tags/Java-%E9%9D%A2%E8%AF%95/"/>
    
    <category term="阻塞队列" scheme="https://smile1231.github.io/tags/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>关于Linux排查问题命令</title>
    <link href="https://smile1231.github.io/posts/56be7cc9/"/>
    <id>https://smile1231.github.io/posts/56be7cc9/</id>
    <published>2022-03-13T07:13:24.000Z</published>
    <updated>2022-03-14T12:40:24.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux命令之top"><a href="#Linux命令之top" class="headerlink" title="Linux命令之top"></a><code>Linux</code>命令之<code>top</code></h2><blockquote><p>top - 整机性能查看</p></blockquote><span id="more"></span><img data-src="/posts/56be7cc9/2022-03-13-22-54-06.png" class=""><img data-src="/posts/56be7cc9/2022-03-13-22-58-37.png" class=""><p>主要看<code>load average, CPU, MEN</code>三部分</p><ul><li><code>load average</code>表示系统负载，即任务队列的平均长度。 三个数值分别为 <code>1</code>分钟、<code>5</code>分钟、<code>15</code>分钟前到现在的平均值。</li><li><code>load average</code>: 如果这个数除以逻辑<code>CPU</code>的数量，结果高于<code>5</code>的时候就表明系统在超负荷运转了。</li></ul><p><a href="https://yjclsx.blog.csdn.net/article/details/81508455"><code>Linux</code>中<code>top</code>命令参数详解</a></p><blockquote><p>uptime - 系统性能命令的精简版</p></blockquote><img data-src="/posts/56be7cc9/2022-03-13-23-00-56.png" class=""><h2 id="Linux之cpu查看vmstat-mac中为vm-stat"><a href="#Linux之cpu查看vmstat-mac中为vm-stat" class="headerlink" title="Linux之cpu查看vmstat (mac中为vm_stat)"></a><code>Linux</code>之<code>cpu</code>查看<code>vmstat</code> (<code>mac</code>中为<code>vm_stat</code>)</h2><img data-src="/posts/56be7cc9/2022-03-13-23-05-38.png" class=""><ul><li><code>procs</code><ul><li><code>r</code>：运行和等待的<code>CPU</code>时间片的进程数，原则上<code>1</code>核的<code>CPU</code>的运行队列不要超过<code>2</code>，整个系统的运行队列不超过总核数的2倍，否则代表系统压力过大，我们看蘑菇博客测试服务器，能发现都超过了<code>2</code>，说明现在压力过大</li><li><code>b</code>：等待资源的进程数，比如正在等待磁盘<code>I/O</code>、网络<code>I/O</code>等</li></ul></li><li><code>cpu</code><br>  <code>us</code>：用户进程消耗<code>CPU</code>时间百分比，<code>us</code>值高，用户进程消耗<code>CPU</code>时间多，如果长期大于<code>50%</code>，优化程序<br>  <code>sy</code>：内核进程消耗的CPU时间百分比<br>  <code>us + sy </code>参考值为<code>80%</code>，如果<code>us + sy</code> 大于<code>80%</code>，说明可能存在<code>CPU</code>不足，从上面的图片可以看出，<code>us + sy</code>还没有超过百分80，因此说明蘑菇博客的<code>CPU</code>消耗不是很高<br>  <code>id</code>：处于空闲的<code>CPU</code>百分比<br>  <code>wa</code>：系统等待<code>IO</code>的<code>CPU</code>时间百分比<br>  <code>st</code>：来自于一个虚拟机偷取的<code>CPU</code>时间比</li></ul><h2 id="Linux之cpu查看pidstat（Mac中没有）"><a href="#Linux之cpu查看pidstat（Mac中没有）" class="headerlink" title="Linux之cpu查看pidstat（Mac中没有）"></a><code>Linux</code>之<code>cpu</code>查看<code>pidstat</code>（<code>Mac</code>中没有）</h2><p>查看看所有<code>cpu</code>核信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mpstat -P ALL 2</span><br></pre></td></tr></table></figure><img data-src="/posts/56be7cc9/2022-03-13-23-10-51.png" class=""><p>每个进程使用<code>cpu</code>的用量分解信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidstat -u 1 -p 进程编号</span><br></pre></td></tr></table></figure><img data-src="/posts/56be7cc9/2022-03-13-23-11-14.png" class=""><h2 id="Linux之内存查看free和pidstat（Mac中没有）"><a href="#Linux之内存查看free和pidstat（Mac中没有）" class="headerlink" title="Linux之内存查看free和pidstat（Mac中没有）"></a><code>Linux</code>之内存查看<code>free</code>和<code>pidstat</code>（<code>Mac</code>中没有）</h2><p>应用程序可用内存数</p><p>经验值</p><p>应用程序可用内存l系统物理内存&gt;<code>70%</code>内存充足</p><p>应用程序可用内存/系统物理内存&lt;<code>20%</code>内存不足，需要增加内存</p><p><code>20%</code>&lt;应用程序可用内存/系统物理内存&lt;<code>70%</code>内存基本够用</p><p><code>m/g</code>：兆/吉</p><img data-src="/posts/56be7cc9/2022-03-13-23-12-13.png" class=""><p>查看额外</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidstat -p 进程号 -r 采样间隔秒数</span><br></pre></td></tr></table></figure><h2 id="Linux之硬盘查看df"><a href="#Linux之硬盘查看df" class="headerlink" title="Linux之硬盘查看df"></a><code>Linux</code>之硬盘查看<code>df</code></h2><p>查看磁盘剩余空间数</p><img data-src="/posts/56be7cc9/2022-03-13-23-13-22.png" class=""><h2 id="Linux之磁盘IO查看iostat和pidstat"><a href="#Linux之磁盘IO查看iostat和pidstat" class="headerlink" title="Linux之磁盘IO查看iostat和pidstat"></a><code>Linux</code>之磁盘<code>IO</code>查看<code>iostat</code>和<code>pidstat</code></h2><p>磁盘<code>I/O</code>性能评估<br><code>mac</code>:</p><img data-src="/posts/56be7cc9/2022-03-13-23-16-06.png" class=""><p><code>linux</code>:</p><img data-src="/posts/56be7cc9/2022-03-13-23-16-54.png" class=""><p>磁盘块设备分布</p><ul><li><code>rkB/s</code>每秒读取数据量<code>kB;wkB/s</code>每秒写入数据量<code>kB</code>;</li><li><code>svctm lO</code>请求的平均服务时间，单位毫秒;</li><li><code>await l/O</code>请求的平均等待时间，单位毫秒;值越小，性能越好;</li><li><code>util</code>一秒中有百分几的时间用于<code>I/O</code>操作。接近<code>100%</code>时，表示磁盘带宽跑满，需要优化程序或者增加磁盘;</li><li><code>rkB/s、wkB/s</code>根据系统应用不同会有不同的值，但有规律遵循:长期、超大数据读写，肯定不正常，需要优化程序读取。</li><li><code>svctm</code>的值与<code>await</code>的值很接近，表示几乎没有IO等待，磁盘性能好。</li><li>如果<code>await</code>的值远高于<code>svctm</code>的值，则表示<code>IO</code>队列等待太长，需要优化程序或更换更快磁盘。</li></ul><h2 id="Linux之网络IO查看ifstat"><a href="#Linux之网络IO查看ifstat" class="headerlink" title="Linux之网络IO查看ifstat"></a><code>Linux</code>之网络<code>IO</code>查看<code>ifstat</code></h2><p>默认本地没有，下载<code>ifstat</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://gael.roualland.free.fr/lifstat/ifstat-1.1.tar.gz</span><br><span class="line">tar -xzvf ifstat-1.1.tar.gz</span><br><span class="line">cd ifstat-1.1</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>查看网络<code>IO</code></p><p>各个网卡的<code>in、out</code></p><p>观察网络负载情况程序</p><p>网络读写是否正常</p><ul><li>程序网络<code>I/O</code>优化</li><li>增加网络<code>I/O</code>带宽</li></ul><img data-src="/posts/56be7cc9/2022-03-13-23-19-52.png" class=""><h2 id="Linux查看物理CPU个数、核数、逻辑CPU个数"><a href="#Linux查看物理CPU个数、核数、逻辑CPU个数" class="headerlink" title="Linux查看物理CPU个数、核数、逻辑CPU个数"></a><code>Linux</code>查看物理<code>CPU</code>个数、核数、逻辑<code>CPU</code>个数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 总核数 = 物理CPU个数 X 每颗物理CPU的核数 </span></span><br><span class="line"><span class="comment"># 总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看物理CPU个数</span></span><br><span class="line">cat /proc/cpuinfo| grep <span class="string">&quot;physical id&quot;</span>| sort| uniq| wc -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每个物理CPU中core的个数(即核数)</span></span><br><span class="line">cat /proc/cpuinfo| grep <span class="string">&quot;cpu cores&quot;</span>| uniq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看逻辑CPU的个数 , 这是我们关心的,涉及到线程池大小</span></span><br><span class="line">cat /proc/cpuinfo| grep <span class="string">&quot;processor&quot;</span>| wc -l</span><br></pre></td></tr></table></figure><blockquote><p>查看服务器信息指令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看CPU信息（型号）</span></span><br><span class="line">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看内存信息</span></span><br><span class="line">cat /proc/meminfo</span><br><span class="line"></span><br><span class="line"><span class="comment">#如何查看Linux 内核</span></span><br><span class="line">uname -a</span><br><span class="line">cat /proc/version</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看机器型号（机器硬件型号）</span></span><br><span class="line">dmidecode | grep <span class="string">&quot;Product Name&quot;</span></span><br><span class="line">dmidecode</span><br><span class="line"></span><br><span class="line"><span class="comment">#如何查看linux 系统版本</span></span><br><span class="line">cat /etc/redhat-release</span><br><span class="line">lsb_release -a</span><br><span class="line">cat  /etc/issue</span><br><span class="line"> </span><br><span class="line"><span class="comment">#如何查看linux系统和CPU型号，类型和大小</span></span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line"></span><br><span class="line"><span class="comment">#如何查看linux 系统内存大小的信息，可以查看总内存，剩余内存，可使用内存等信息  </span></span><br><span class="line">cat /proc/meminfo</span><br></pre></td></tr></table></figure><h2 id="CPU占用过高的定位分析思路"><a href="#CPU占用过高的定位分析思路" class="headerlink" title="CPU占用过高的定位分析思路"></a><code>CPU</code>占用过高的定位分析思路</h2><p>结合<code>Linux</code>和<code>JDK</code>命令一块分析</p><p>案例步骤</p><ul><li>先用<code>top</code>命令找出<code>CPU</code>占比最高的</li></ul><img data-src="/posts/56be7cc9/2022-03-13-23-20-27.png" class=""><ul><li><p><code>ps -ef</code>或者<code>jps</code>进一步定位，得知是一个怎么样的一个后台程序作搞屎棍</p><img data-src="/posts/56be7cc9/2022-03-13-23-24-51.png" class=""></li><li><p>定位到具体线程或者代码</p><ul><li><code>ps -mp</code> 进程 <code>-o THREAD,tid,time</code></li><li><code>-m</code> 显示所有的线程</li><li><code>-p pid</code>进程使用<code>cpu</code>的时间</li><li><code>-o</code> 该参数后是用户自定义格式</li></ul></li></ul><img data-src="/posts/56be7cc9/2022-03-13-23-25-31.png" class=""><ul><li>将需要的线程<code>ID</code>转换为<code>16</code>进制格式（英文小写格式），命令<code>printf %x 172 </code>将<code>172</code>转换为十六进制</li><li><code>jstack 进程ID | grep tid</code>（<code>16</code>进制线程<code>ID</code>小写英文）<code>-A60</code></li></ul><blockquote><p>ps - process status<br>-A Display information about other users’ processes, including those without controlling terminals.<br>-e Identical to -A.<br>-f Display the uid, pid, parent pid, recent CPU usage, process start time, controlling tty, elapsed CPU usage, and the associated command. If the -u option is also used, display the user name rather then the numeric uid. When -o or -O is used to add to the display following -f, the command field is not truncated as severely as it is in other formats.<br><a href="https://blog.csdn.net/lzufeng/article/details/83537275">ps -ef中的e、f是什么含义</a></p></blockquote><p>对于<code>JDK</code>自带的<code>JVM</code>监控和性能分析工具用过哪些?一般你是怎么用的?<a href="https://blog.csdn.net/u011863024/article/details/106651068">link</a></p><h2 id="GitHub骚操作之awesome搜索"><a href="#GitHub骚操作之awesome搜索" class="headerlink" title="GitHub骚操作之awesome搜索"></a><code>GitHub</code>骚操作之<code>awesome</code>搜索</h2><ul><li>公式：<code>awesome</code> 关键字：<code>awesome</code>系列，一般用来收集学习、工具、书籍类相关的项目</li><li>搜索优秀的<code>redis</code>相关的项目，包括框架，教程等 <code>awesome redis</code><h2 id="GitHub骚操作之-L数字"><a href="#GitHub骚操作之-L数字" class="headerlink" title="GitHub骚操作之#L数字"></a><code>GitHub</code>骚操作之<code>#L</code>数字</h2>一行：地址后面紧跟 <code>#L10</code><br><code>https://github.com/abc/abc/pom.xml#L13</code><br>多行：地址后面紧跟 <code>#Lx - #Ln</code><br><code>https://github.com/moxi624/abc/abc/pom.xml#L13-L30</code><h2 id="GitHub骚操作之T搜索"><a href="#GitHub骚操作之T搜索" class="headerlink" title="GitHub骚操作之T搜索"></a><code>GitHub</code>骚操作之<code>T</code>搜索</h2></li></ul><img data-src="/posts/56be7cc9/2022-03-13-23-31-47.png" class="">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Linux命令之top&quot;&gt;&lt;a href=&quot;#Linux命令之top&quot; class=&quot;headerlink&quot; title=&quot;Linux命令之top&quot;&gt;&lt;/a&gt;&lt;code&gt;Linux&lt;/code&gt;命令之&lt;code&gt;top&lt;/code&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;top - 整机性能查看&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Java面试" scheme="https://smile1231.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
    <category term="Linux" scheme="https://smile1231.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于JVM常用参数</title>
    <link href="https://smile1231.github.io/posts/a72f470b/"/>
    <id>https://smile1231.github.io/posts/a72f470b/</id>
    <published>2022-03-13T07:12:45.000Z</published>
    <updated>2022-03-13T08:19:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记链接： <a href="https://blog.csdn.net/u011863024/article/details/114684428">大厂面试视频</a></p><h2 id="JVM的标配参数和X参数"><a href="#JVM的标配参数和X参数" class="headerlink" title="JVM的标配参数和X参数"></a><code>JVM</code>的标配参数和<code>X</code>参数</h2><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html">官方文档</a></p><p><code>JVM</code>的参数类型：</p><span id="more"></span><blockquote><p>标配参数</p></blockquote><ul><li><code>-version java -version</code></li><li><code>-help</code></li></ul><blockquote><p><code>X</code>参数（了解）</p></blockquote><ul><li><code>-Xint</code>：解释执行</li><li><code>-Xcomp</code>：第一次使用就编译成本地代码</li><li><code>-Xmixed</code>：混合模式</li></ul><h2 id="VM的XX参数之布尔类型"><a href="#VM的XX参数之布尔类型" class="headerlink" title="VM的XX参数之布尔类型"></a><code>VM</code>的<code>XX</code>参数之布尔类型</h2><p>公式：<code>-XX:+</code> 或者 <code>-</code> 某个属性值（<code>+</code>表示开启，<code>-</code>表示关闭）</p><p>如何查看一个正在运行中的<code>java</code>程序，它的某个<code>jvm</code>参数是否开启？具体值是多少？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jps -l 查看一个正在运行中的java程序，得到Java程序号。</span><br><span class="line">jinfo -<span class="function">flag <span class="title">PrintGCDetails</span> <span class="params">(Java程序号 )</span>查看它的某个jvm参数（如PrintGCDetails ）是否开启。</span></span><br><span class="line"><span class="function">jinfo -<span class="title">flags</span> <span class="params">(Java程序号 )</span>查看它的所有jvm参数</span></span><br></pre></td></tr></table></figure><p>Case</p><blockquote><p>是否打印<code>GC</code>收集细节</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:-PrintGCDetails</span><br><span class="line">-XX:+PrintGCDetails</span><br></pre></td></tr></table></figure><blockquote><p>是否使用串行垃圾回收器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:-UseSerialGC</span><br><span class="line">-XX:+UserSerialGC</span><br></pre></td></tr></table></figure><h2 id="JVM的XX参数之设值类型"><a href="#JVM的XX参数之设值类型" class="headerlink" title="JVM的XX参数之设值类型"></a><code>JVM</code>的<code>XX</code>参数之设值类型</h2><p>公式：<code>-XX</code>:属性<code>key=</code>属性值<code>value</code></p><p>Case</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:MetaspaceSize=128m</span><br><span class="line">-XX:MaxTenuringThreshold=<span class="number">15</span></span><br></pre></td></tr></table></figure><h2 id="VM的XX参数之XmsXmx坑题"><a href="#VM的XX参数之XmsXmx坑题" class="headerlink" title="VM的XX参数之XmsXmx坑题"></a><code>VM</code>的<code>XX</code>参数之<code>XmsXmx</code>坑题</h2><p>两个经典参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms等价于-XX:InitialHeapSize，初始大小内存，默认物理内存<span class="number">1</span>/<span class="number">64</span></span><br><span class="line">-Xmx等价于-XX:MaxHeapSize，最大分配内存，默认为物理内存<span class="number">1</span>/<span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="JVM盘点家底查看初始默认"><a href="#JVM盘点家底查看初始默认" class="headerlink" title="JVM盘点家底查看初始默认"></a><code>JVM</code>盘点家底查看初始默认</h2><blockquote><p>查看初始默认参数值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintFlagsInitial</span><br></pre></td></tr></table></figure><p>公式：<code>java -XX:+PrintFlagsInitial</code></p><img data-src="/posts/a72f470b/2022-03-13-15-29-37.png" class=""><blockquote><p>查看修改更新参数值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintFlagsFinal</span><br></pre></td></tr></table></figure><p>公式：<code>java -XX:+PrintFlagsFinal</code></p><img data-src="/posts/a72f470b/2022-03-13-15-32-07.png" class=""><p><strong><code>=</code>表示默认，<code>:=</code>表示修改过的。</strong></p><h2 id="JVM盘点家底查看修改变更值"><a href="#JVM盘点家底查看修改变更值" class="headerlink" title="JVM盘点家底查看修改变更值"></a><code>JVM</code>盘点家底查看修改变更值</h2><p><code>PrintFlagsFinal</code>举例，运行<code>java</code>命令的同时打印出参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -XX:MetaspaceSize=512m HelloWorld</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line">...</span><br><span class="line">   size_t MetaspaceSize                            := <span class="number">536870912</span>                               &#123;pd product&#125; &#123;<span class="keyword">default</span>&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>打印命令行参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintCommandLineFlags</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) ➜  ~ java -XX:+PrintCommandLineFlags -version</span><br><span class="line"></span><br><span class="line">-XX:G1ConcRefinementThreads=<span class="number">8</span> -XX:GCDrainStackTargetSize=<span class="number">64</span> -XX:InitialHeapSize=<span class="number">268435456</span> -XX:MaxHeapSize=<span class="number">4294967296</span> -XX:+PrintCommandLineFlags -XX:ReservedCodeCacheSize=<span class="number">251658240</span> -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC</span><br><span class="line">java version <span class="string">&quot;11.0.10&quot;</span> <span class="number">2021</span>-<span class="number">01</span>-<span class="number">19</span> <span class="function">LTS</span></span><br><span class="line"><span class="function"><span class="title">Java</span><span class="params">(TM)</span> SE Runtime Environment 18.9 <span class="params">(build <span class="number">11.0</span><span class="number">.10</span>+<span class="number">8</span>-LTS-<span class="number">162</span>)</span></span></span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server VM 18.9 <span class="params">(build <span class="number">11.0</span><span class="number">.10</span>+<span class="number">8</span>-LTS-<span class="number">162</span>, mixed mode)</span></span></span><br></pre></td></tr></table></figure><h2 id="堆内存初始大小快速复习"><a href="#堆内存初始大小快速复习" class="headerlink" title="堆内存初始大小快速复习"></a>堆内存初始大小快速复习</h2><p><code>JDK 1.8</code>之后将最初的永久代取消了，由元空间取代。</p><img data-src="/posts/a72f470b/2022-03-13-15-48-45.png" class=""><p>在<code>Java8</code>中，永久代已经被移除，被一个称为元空间的区域所取代。元空间的本质和永久代类似。</p><p>元空间(<code>Java8</code>)与永久代(<code>Java7</code>)之间最大的区别在于：永久带使用的<code>JVM</code>的堆内存，但是<code>Java8</code>以后的元空间<strong>并不在虚拟机中而是使用本机物理内存</strong>。</p><p>因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入<code>native memory</code>，字符串池和类的静态变量放入<code>java</code>堆中，这样可以加载多少类的元数据就不再由<code>MaxPermSize</code>控制，而由系统的实际可用空间来控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMMemorySizeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 返回Java虚拟机中内存的总量</span></span><br><span class="line">        <span class="keyword">long</span> totalMemory = Runtime.getRuntime().totalMemory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回Java虚拟机中试图使用的最大内存量</span></span><br><span class="line">        <span class="keyword">long</span> maxMemory = Runtime.getRuntime().maxMemory();</span><br><span class="line"></span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;TOTAL_MEMORY(-Xms): %d B, %.2f MB.&quot;</span>, totalMemory, totalMemory / <span class="number">1024.0</span> / <span class="number">1024</span>));</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;MAX_MEMORY(-Xmx): %d B, %.2f MB.&quot;</span>, maxMemory, maxMemory / <span class="number">1024.0</span> / <span class="number">1024</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><img data-src="/posts/a72f470b/2022-03-13-15-51-39.png" class=""><h2 id="常用基础参数栈内存Xss讲解"><a href="#常用基础参数栈内存Xss讲解" class="headerlink" title="常用基础参数栈内存Xss讲解"></a>常用基础参数栈内存<code>Xss</code>讲解</h2><p>设置单个线程栈的大小，一般默认为<code>512k~1024K</code></p><p>等价于<code>-XX:ThreadStackSize</code></p><blockquote><p>-XX:ThreadStackSize=size<br>Sets the thread stack size (in bytes). Append the letter k or K to indicate kilobytes, m or M to indicate megabytes, g or G to indicate gigabytes. The default value depends on virtual memory.<br>The following examples show how to set the thread stack size to 1024 KB in different units:<br>-XX:ThreadStackSize=1m<br>-XX:ThreadStackSize=1024k<br>-XX:ThreadStackSize=1048576<br>This option is equivalent to <code>-Xss</code>. <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html#BGBCIEFC">文档</a></p></blockquote><h2 id="常用基础参数元空间MetaspaceSize讲解"><a href="#常用基础参数元空间MetaspaceSize讲解" class="headerlink" title="常用基础参数元空间MetaspaceSize讲解"></a>常用基础参数元空间<code>MetaspaceSize</code>讲解</h2><ul><li><code>-Xmn</code>：设置年轻代大小</li><li><code>-XX:MetaspaceSize</code> 设置元空间大小</li></ul><p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制</p><p>典型设置案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m -Xmx4096m -Xss1024k -XX:MetaspaceSize=512m -XX:+PrintCommandLineFlags -XX:+PrintGCDetails-XX:+UseSerialGC</span><br></pre></td></tr></table></figure><h2 id="常用基础参数PrintGCDetails回收前后对比讲解"><a href="#常用基础参数PrintGCDetails回收前后对比讲解" class="headerlink" title="常用基础参数PrintGCDetails回收前后对比讲解"></a>常用基础参数<code>PrintGCDetails</code>回收前后对比讲解</h2><p><code>-XX:+PrintGCDetails</code> 输出详细<code>GC</code>收集日志信息</p><p>设置参数 <code>-Xms10m -Xmx10m -XX:+PrintGCDetails</code> 运行以下程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintGCDetailsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] byteArray = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">TimeUnit.SECONDS.sleep(Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [PSYoungGen: 778K-&gt;480K(2560K)] 778K-&gt;608K(9728K), <span class="number">0.0029909</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 480K-&gt;480K(2560K)] 608K-&gt;616K(9728K), <span class="number">0.0007890</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 480K-&gt;0<span class="title">K</span><span class="params">(2560K)</span>] [ParOldGen: 136K-&gt;518<span class="title">K</span><span class="params">(7168K)</span>] 616K-&gt;518<span class="title">K</span><span class="params">(9728K)</span>, [Metaspace: 2644K-&gt;2644<span class="title">K</span><span class="params">(1056768K)</span>], 0.0058272 secs] [Times: user</span>=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2560K)] 518K-&gt;518K(9728K), <span class="number">0.0002924</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs] </span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 0K-&gt;0<span class="title">K</span><span class="params">(2560K)</span>] [ParOldGen: 518K-&gt;506<span class="title">K</span><span class="params">(7168K)</span>] 518K-&gt;506<span class="title">K</span><span class="params">(9728K)</span>, [Metaspace: 2644K-&gt;2644<span class="title">K</span><span class="params">(1056768K)</span>], 0.0056906 secs] [Times: user</span>=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs] </span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at com.lun.jvm.PrintGCDetailsDemo.main(PrintGCDetailsDemo.java:<span class="number">9</span>)</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 2560K, used 61K [<span class="number">0x00000000ffd00000</span>, <span class="number">0x0000000100000000</span>, <span class="number">0x0000000100000000</span>)</span><br><span class="line">  eden space 2048K, <span class="number">3</span>% used [<span class="number">0x00000000ffd00000</span>,<span class="number">0x00000000ffd0f748</span>,<span class="number">0x00000000fff00000</span>)</span><br><span class="line">  from space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff00000</span>,<span class="number">0x00000000fff80000</span>)</span><br><span class="line">  to   space 512K, <span class="number">0</span>% used [<span class="number">0x00000000fff80000</span>,<span class="number">0x00000000fff80000</span>,<span class="number">0x0000000100000000</span>)</span><br><span class="line"> ParOldGen       total 7168K, used 506K [<span class="number">0x00000000ff600000</span>, <span class="number">0x00000000ffd00000</span>, <span class="number">0x00000000ffd00000</span>)</span><br><span class="line">  object space 7168K, <span class="number">7</span>% used [<span class="number">0x00000000ff600000</span>,<span class="number">0x00000000ff67ea58</span>,<span class="number">0x00000000ffd00000</span>)</span><br><span class="line"> Metaspace       used 2676K, capacity 4486K, committed 4864K, reserved 1056768K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 285<span class="title">K</span>, <span class="title">capacity</span> 386<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure><img data-src="/posts/a72f470b/2022-03-13-16-04-30.png" class=""><img data-src="/posts/a72f470b/2022-03-13-16-04-40.png" class=""><h2 id="常用基础参数SurvivorRatio讲解"><a href="#常用基础参数SurvivorRatio讲解" class="headerlink" title="常用基础参数SurvivorRatio讲解"></a>常用基础参数<code>SurvivorRatio</code>讲解</h2><img data-src="/posts/a72f470b/2022-03-13-16-05-01.png" class=""><p>调节新生代中 <code>eden</code> 和 <code>S0、S1</code>的空间比例，默认为 <code>-XX:SuriviorRatio=8，Eden:S0:S1 = 8:1:1</code></p><p>假如设置成 <code>-XX:SurvivorRatio=4</code>，则为 <code>Eden:S0:S1 = 4:1:1</code></p><p><code>SurvivorRatio</code>值就是设置<code>eden</code>区的比例占多少，<code>S0</code>和<code>S1</code>相同。</p><h2 id="常用基础参数NewRatio讲解"><a href="#常用基础参数NewRatio讲解" class="headerlink" title="常用基础参数NewRatio讲解"></a>常用基础参数<code>NewRatio</code>讲解</h2><p>配置年轻代<code>new</code>和老年代<code>old</code> 在堆结构的占比</p><p>默认：<code>-XX:NewRatio=2</code> 新生代占<code>1</code>，老年代<code>2</code>，年轻代占整个堆的<code>1/3</code></p><p><code>-XX:NewRatio=4：</code>新生代占<code>1</code>，老年代占<code>4</code>，年轻代占整个堆的<code>1/5</code>，</p><p><code>NewRadio</code>值就是设置老年代的占比，剩下的<code>1</code>个新生代。</p><p>新生代特别小，会造成频繁的进行<code>GC</code>收集。</p><h2 id="常用基础参数MaxTenuringThreshold讲解"><a href="#常用基础参数MaxTenuringThreshold讲解" class="headerlink" title="常用基础参数MaxTenuringThreshold讲解"></a>常用基础参数<code>MaxTenuringThreshold</code>讲解</h2><p>晋升到老年代的对象年龄。</p><p><code>SurvivorTo和SurvivorFrom</code>互换，原<code>SurvivorTo</code>成为下一次<code>GC</code>时的<code>SurvivorFrom</code>区，部分对象会在<code>From</code>和<code>To</code>区域中复制来复制去，如此交换<code>15</code>次（由<code>JVM</code>参数<code>MaxTenuringThreshold</code>决定，这个参数默认为<code>15</code>），最终如果还是存活，就存入老年代。</p><p>这里就是调整这个次数的，默认是15，并且设置的值 在 <code>0~15</code>之间。</p><p><code>-XX:MaxTenuringThreshold=0</code>：设置垃圾最大年龄。如果设置为0的话，则年轻对象不经过<code>Survivor</code>区，直接进入老年代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大的值，则年轻代对象会在<code>Survivor</code>区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概念。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;笔记链接： &lt;a href=&quot;https://blog.csdn.net/u011863024/article/details/114684428&quot;&gt;大厂面试视频&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;JVM的标配参数和X参数&quot;&gt;&lt;a href=&quot;#JVM的标配参数和X参数&quot; class=&quot;headerlink&quot; title=&quot;JVM的标配参数和X参数&quot;&gt;&lt;/a&gt;&lt;code&gt;JVM&lt;/code&gt;的标配参数和&lt;code&gt;X&lt;/code&gt;参数&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JVM&lt;/code&gt;的参数类型：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java面试" scheme="https://smile1231.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
    <category term="JVM" scheme="https://smile1231.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>关于JDK中的Arrays.sort排序方法</title>
    <link href="https://smile1231.github.io/posts/de5e33d7/"/>
    <id>https://smile1231.github.io/posts/de5e33d7/</id>
    <published>2022-03-13T05:11:15.000Z</published>
    <updated>2022-03-13T07:04:07.031Z</updated>
    
    <content type="html"><![CDATA[<p>是这样的，我们在刚学数据结构时候，都会学什么八大排序算法乱七八糟的，但是真正在写<code>Java</code>项目时，都是直接化身<code>API</code>调用工程师，<code>Arrays.sort()</code>完事，无意间点开，其实里面的玄机另有洞天。</p><span id="more"></span><h2 id="Debug源码"><a href="#Debug源码" class="headerlink" title="Debug源码"></a><code>Debug</code>源码</h2><p>我们以最基础的方法<code>public static void sort(int[] a)</code>为例；</p><p>点开<code>Arrays.sort()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    DualPivotQuicksort.sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接进去，此处<code>Sort</code>有很多的重载，需要仔细注意</p><p><code>Arrays.sort()</code>重载了四类方法</p><ol><li><code>sort(T[] a)</code>：对指定T型数组按数字升序排序。</li><li><code>sort(T[] a,int formIndex, int toIndex)</code>：对指定<code>T</code>型数组的指定范围按数字升序排序。</li><li><code>sort(T[] a, Comparator&lt;? supre T&gt; c)</code>: 根据指定比较器产生的顺序对指定对象数组进行排序。</li><li><code>sort(T[] a, int formIndex, int toIndex, Comparator&lt;? supre T&gt; c)</code>: 根据指定比较器产生的顺序对指定对象数组的指定对象数组进行排序。</li></ol><img data-src="/posts/de5e33d7/2022-03-13-14-55-38.png" class=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    如果可能合并，使用给定的工作空间数组片对数组的指定范围进行排序</span></span><br><span class="line"><span class="comment">    参数:</span></span><br><span class="line"><span class="comment">    a -要排序的数组</span></span><br><span class="line"><span class="comment">    left - 要排序的第一个元素的索引(包括第一个元素)</span></span><br><span class="line"><span class="comment">    right - 最后一个要排序的元素的下标</span></span><br><span class="line"><span class="comment">    Work -工作空间数组(片)</span></span><br><span class="line"><span class="comment">    workBase -工作数组中可用空间的来源</span></span><br><span class="line"><span class="comment">    workLen -工作数组的可用大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要排序的数组长度小于这个常量，则优先使用快速排序，而不是归并排序。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QUICKSORT_THRESHOLD = <span class="number">286</span>;</span><br><span class="line"><span class="comment">//归并排序的最大运行次数。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RUN_COUNT = <span class="number">67</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right,<span class="keyword">int</span>[] work, <span class="keyword">int</span> workBase, <span class="keyword">int</span> workLen)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 小数组使用快排，阈值为286</span></span><br><span class="line">    <span class="keyword">if</span> (right - left &lt; QUICKSORT_THRESHOLD) &#123;</span><br><span class="line">        <span class="comment">//快排</span></span><br><span class="line">        sort(a, left, right, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//索引运行[i]是第i次运行的开始(升序或降序)。</span></span><br><span class="line">    <span class="keyword">int</span>[] run = <span class="keyword">new</span> <span class="keyword">int</span>[MAX_RUN_COUNT + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>; run[<span class="number">0</span>] = left;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查数组是否接近排序 见解释 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = left; k &lt; right; run[count] = k) &#123;</span><br><span class="line">        <span class="comment">// 序列开头相等的项</span></span><br><span class="line">        <span class="keyword">while</span> (k &lt; right &amp;&amp; a[k] == a[k + <span class="number">1</span>])</span><br><span class="line">            k++;</span><br><span class="line">        <span class="keyword">if</span> (k == right) <span class="keyword">break</span>;  <span class="comment">// 序列以相等的项结束</span></span><br><span class="line">        <span class="keyword">if</span> (a[k] &lt; a[k + <span class="number">1</span>]) &#123; <span class="comment">// 升序</span></span><br><span class="line">            <span class="keyword">while</span> (++k &lt;= right &amp;&amp; a[k - <span class="number">1</span>] &lt;= a[k]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[k] &gt; a[k + <span class="number">1</span>]) &#123; <span class="comment">// 降序</span></span><br><span class="line">            <span class="keyword">while</span> (++k &lt;= right &amp;&amp; a[k - <span class="number">1</span>] &gt;= a[k]);</span><br><span class="line">            <span class="comment">//转换成一个升序序列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> lo = run[count] - <span class="number">1</span>, hi = k; ++lo &lt; --hi; ) &#123;</span><br><span class="line">                <span class="keyword">int</span> t = a[lo]; </span><br><span class="line">                a[lo] = a[hi]; </span><br><span class="line">                a[hi] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并一个转换后的降序序列，后面跟着升序序列</span></span><br><span class="line">        <span class="keyword">if</span> (run[count] &gt; left &amp;&amp; a[run[count]] &gt;= a[run[count] - <span class="number">1</span>]) &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 如果count == 归并排序的最大次数说明数组不是高度结构化的，使用快速排序代替归并排序。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (++count == MAX_RUN_COUNT) &#123;</span><br><span class="line">            <span class="comment">//进入到快排</span></span><br><span class="line">            sort(a, left, right, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些不变量应该是正确的:</span></span><br><span class="line">    <span class="comment">//    run[0] = 0</span></span><br><span class="line">    <span class="comment">//    run[&lt;last&gt;] = right + 1; (terminator)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 单次相等跑</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span> &amp;&amp; run[count] &gt; right) &#123;</span><br><span class="line">        <span class="comment">//单个升序或转换后的降序运行。总是检查一个最终运行是一个适当的结束符，否则我们有一个未终止的尾随运行，以处理下游。</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    right++;</span><br><span class="line">    <span class="keyword">if</span> (run[count] &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 极端情况:最后的运行不是终结者。</span></span><br><span class="line">        <span class="comment">//这可能发生：如果最后一次运行是一个等于运行，或有一个单元素运行在结尾。通过在末尾添加适当的终止符来解决这个问题。</span></span><br><span class="line">        <span class="comment">//注意，我们以(right + 1)结束，在前面加1。</span></span><br><span class="line">        run[++count] = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定合并的交替基</span></span><br><span class="line">    <span class="keyword">byte</span> odd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; (n &lt;&lt;= <span class="number">1</span>) &lt; count; odd ^= <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用或创建临时数组b进行合并</span></span><br><span class="line">    <span class="keyword">int</span>[] b;                 <span class="comment">// temp array; alternates with a</span></span><br><span class="line">    <span class="keyword">int</span> ao, bo;              <span class="comment">// array offsets from &#x27;left&#x27;</span></span><br><span class="line">    <span class="keyword">int</span> blen = right - left; <span class="comment">// space needed for b</span></span><br><span class="line">    <span class="keyword">if</span> (work == <span class="keyword">null</span> || workLen &lt; blen || workBase + blen &gt; work.length) &#123;</span><br><span class="line">        work = <span class="keyword">new</span> <span class="keyword">int</span>[blen];</span><br><span class="line">        workBase = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (odd == <span class="number">0</span>) &#123;</span><br><span class="line">        System.arraycopy(a, left, work, workBase, blen);</span><br><span class="line">        b = a;</span><br><span class="line">        bo = <span class="number">0</span>;</span><br><span class="line">        a = work;</span><br><span class="line">        ao = workBase - left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b = work;</span><br><span class="line">        ao = <span class="number">0</span>;</span><br><span class="line">        bo = workBase - left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 归并</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> last; count &gt; <span class="number">1</span>; count = last) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = (last = <span class="number">0</span>) + <span class="number">2</span>; k &lt;= count; k += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> hi = run[k], mi = run[k - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = run[k - <span class="number">2</span>], p = i, q = mi; i &lt; hi; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (q &gt;= hi || p &lt; mi &amp;&amp; a[p + ao] &lt;= a[q + ao]) &#123;</span><br><span class="line">                    b[i + bo] = a[p++ + ao];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    b[i + bo] = a[q++ + ao];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            run[++last] = hi;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((count &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = right, lo = run[count - <span class="number">1</span>]; --i &gt;= lo;</span><br><span class="line">                b[i + bo] = a[i + ao]</span><br><span class="line">            );</span><br><span class="line">            run[++last] = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] t = a; a = b; b = t;</span><br><span class="line">        <span class="keyword">int</span> o = ao; ao = bo; bo = o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上文快速排序入口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要排序的数组长度小于这个值常量，插入排序优先于快速排序。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INSERTION_SORT_THRESHOLD = <span class="number">47</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 按双重Povit快速排序 对数组的指定范围进行排序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> a 待排序数组</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> left 待排数组左索引</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> right 待排数组右索引</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> leftmost 指示这部分是否为范围的最左边</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">boolean</span> leftmost)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = right - left + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小于47，使用插入排序</span></span><br><span class="line">    <span class="keyword">if</span> (length &lt; INSERTION_SORT_THRESHOLD) &#123;</span><br><span class="line">        <span class="keyword">if</span> (leftmost) &#123;</span><br><span class="line">           <span class="comment">//传统的(没有哨兵的)插入排序，为服务器虚拟机优化，用于最左边的部分。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = left, j = i; i &lt; right; j = ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> ai = a[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span> (ai &lt; a[j]) &#123;</span><br><span class="line">                    a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">                    <span class="keyword">if</span> (j-- == left) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                a[j + <span class="number">1</span>] = ai;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//跳过最长升序序列。</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (a[++left] &gt;= a[left - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//来自相邻部分的每一个元素都起着作用，因此这允许我们避免每次迭代的左范围检查。</span></span><br><span class="line">            <span class="comment">//此外,我们使用更优化的算法，所谓的对插入排序，它更快(在快速排序的上下文中)比传统的插入排序实现。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = left; ++left &lt;= right; k = ++left) &#123;</span><br><span class="line">                <span class="keyword">int</span> a1 = a[k], a2 = a[left];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (a1 &lt; a2) &#123;</span><br><span class="line">                    a2 = a1; a1 = a[left];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (a1 &lt; a[--k]) &#123;</span><br><span class="line">                    a[k + <span class="number">2</span>] = a[k];</span><br><span class="line">                &#125;</span><br><span class="line">                a[++k + <span class="number">1</span>] = a1;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (a2 &lt; a[--k]) &#123;</span><br><span class="line">                    a[k + <span class="number">1</span>] = a[k];</span><br><span class="line">                &#125;</span><br><span class="line">                a[k + <span class="number">1</span>] = a2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> last = a[right];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (last &lt; a[--right]) &#123;</span><br><span class="line">                a[right + <span class="number">1</span>] = a[right];</span><br><span class="line">            &#125;</span><br><span class="line">            a[right + <span class="number">1</span>] = last;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//////////////以下为双轴快排</span></span><br><span class="line">    <span class="comment">// 长度/7的近似</span></span><br><span class="line">    <span class="keyword">int</span> seventh = (length &gt;&gt; <span class="number">3</span>) + (length &gt;&gt; <span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对五个均匀间隔的元素进行排序 ，在范围的中心元素。这些元素将被用于枢轴选择如下所述。</span></span><br><span class="line">    <span class="comment">//间隔的选择 根据经验，这些因素决定很好地发挥作用 各种各样的输入。</span></span><br><span class="line">    <span class="keyword">int</span> e3 = (left + right) &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// The midpoint</span></span><br><span class="line">    <span class="keyword">int</span> e2 = e3 - seventh;</span><br><span class="line">    <span class="keyword">int</span> e1 = e2 - seventh;</span><br><span class="line">    <span class="keyword">int</span> e4 = e3 + seventh;</span><br><span class="line">    <span class="keyword">int</span> e5 = e4 + seventh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用插入排序对这些元素进行排序</span></span><br><span class="line">    <span class="keyword">if</span> (a[e2] &lt; a[e1]) &#123; <span class="keyword">int</span> t = a[e2]; a[e2] = a[e1]; a[e1] = t; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a[e3] &lt; a[e2]) &#123; <span class="keyword">int</span> t = a[e3]; a[e3] = a[e2]; a[e2] = t;</span><br><span class="line">        <span class="keyword">if</span> (t &lt; a[e1]) &#123; a[e2] = a[e1]; a[e1] = t; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[e4] &lt; a[e3]) &#123; <span class="keyword">int</span> t = a[e4]; a[e4] = a[e3]; a[e3] = t;</span><br><span class="line">        <span class="keyword">if</span> (t &lt; a[e2]) &#123; a[e3] = a[e2]; a[e2] = t;</span><br><span class="line">            <span class="keyword">if</span> (t &lt; a[e1]) &#123; a[e2] = a[e1]; a[e1] = t; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[e5] &lt; a[e4]) &#123; <span class="keyword">int</span> t = a[e5]; a[e5] = a[e4]; a[e4] = t;</span><br><span class="line">        <span class="keyword">if</span> (t &lt; a[e3]) &#123; a[e4] = a[e3]; a[e3] = t;</span><br><span class="line">            <span class="keyword">if</span> (t &lt; a[e2]) &#123; a[e3] = a[e2]; a[e2] = t;</span><br><span class="line">                <span class="keyword">if</span> (t &lt; a[e1]) &#123; a[e2] = a[e1]; a[e1] = t; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pointers</span></span><br><span class="line">    <span class="keyword">int</span> less  = left;  <span class="comment">// The index of the first element of center part</span></span><br><span class="line">    <span class="keyword">int</span> great = right; <span class="comment">// The index before the first element of right part</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a[e1] != a[e2] &amp;&amp; a[e2] != a[e3] &amp;&amp; a[e3] != a[e4] &amp;&amp; a[e4] != a[e5]) &#123;</span><br><span class="line">        <span class="comment">//使用五个排序元素中的第二个和第四个作为枢轴。 </span></span><br><span class="line">        <span class="comment">//这些值是第一个和的廉价近似值. Note that pivot1 &lt;= pivot2.</span></span><br><span class="line">        <span class="keyword">int</span> pivot1 = a[e2];</span><br><span class="line">        <span class="keyword">int</span> pivot2 = a[e4];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * The first and the last elements to be sorted are moved to the</span></span><br><span class="line"><span class="comment">            * locations formerly occupied by the pivots. When partitioning</span></span><br><span class="line"><span class="comment">            * is complete, the pivots are swapped back into their final</span></span><br><span class="line"><span class="comment">            * positions, and excluded from subsequent sorting.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        a[e2] = a[left];</span><br><span class="line">        a[e4] = a[right];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Skip elements, which are less or greater than pivot values.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">while</span> (a[++less] &lt; pivot1);</span><br><span class="line">        <span class="keyword">while</span> (a[--great] &gt; pivot2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Partitioning:</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            *   left part           center part                   right part</span></span><br><span class="line"><span class="comment">            * +--------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">            * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |</span></span><br><span class="line"><span class="comment">            * +--------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">            *               ^                          ^       ^</span></span><br><span class="line"><span class="comment">            *               |                          |       |</span></span><br><span class="line"><span class="comment">            *              less                        k     great</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * Invariants:</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            *              all in (left, less)   &lt; pivot1</span></span><br><span class="line"><span class="comment">            *    pivot1 &lt;= all in [less, k)     &lt;= pivot2</span></span><br><span class="line"><span class="comment">            *              all in (great, right) &gt; pivot2</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * Pointer k is the first index of ?-part.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        outer:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = less - <span class="number">1</span>; ++k &lt;= great; ) &#123;</span><br><span class="line">            <span class="keyword">int</span> ak = a[k];</span><br><span class="line">            <span class="keyword">if</span> (ak &lt; pivot1) &#123; <span class="comment">// Move a[k] to left part</span></span><br><span class="line">                a[k] = a[less];</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    * Here and below we use &quot;a[i] = b; i++;&quot; instead</span></span><br><span class="line"><span class="comment">                    * of &quot;a[i++] = b;&quot; due to performance issue.</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                a[less] = ak;</span><br><span class="line">                ++less;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ak &gt; pivot2) &#123; <span class="comment">// Move a[k] to right part</span></span><br><span class="line">                <span class="keyword">while</span> (a[great] &gt; pivot2) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (great-- == k) &#123;</span><br><span class="line">                        <span class="keyword">break</span> outer;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a[great] &lt; pivot1) &#123; <span class="comment">// a[great] &lt;= pivot2</span></span><br><span class="line">                    a[k] = a[less];</span><br><span class="line">                    a[less] = a[great];</span><br><span class="line">                    ++less;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// pivot1 &lt;= a[great] &lt;= pivot2</span></span><br><span class="line">                    a[k] = a[great];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    * Here and below we use &quot;a[i] = b; i--;&quot; instead</span></span><br><span class="line"><span class="comment">                    * of &quot;a[i--] = b;&quot; due to performance issue.</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                a[great] = ak;</span><br><span class="line">                --great;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Swap pivots into their final positions</span></span><br><span class="line">        a[left]  = a[less  - <span class="number">1</span>]; a[less  - <span class="number">1</span>] = pivot1;</span><br><span class="line">        a[right] = a[great + <span class="number">1</span>]; a[great + <span class="number">1</span>] = pivot2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sort left and right parts recursively, excluding known pivots</span></span><br><span class="line">        sort(a, left, less - <span class="number">2</span>, leftmost);</span><br><span class="line">        sort(a, great + <span class="number">2</span>, right, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * If center part is too large (comprises &gt; 4/7 of the array),</span></span><br><span class="line"><span class="comment">            * swap internal pivot values to ends.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">if</span> (less &lt; e1 &amp;&amp; e5 &lt; great) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Skip elements, which are equal to pivot values.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            <span class="keyword">while</span> (a[less] == pivot1) &#123;</span><br><span class="line">                ++less;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (a[great] == pivot2) &#123;</span><br><span class="line">                --great;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Partitioning:</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                *   left part         center part                  right part</span></span><br><span class="line"><span class="comment">                * +----------------------------------------------------------+</span></span><br><span class="line"><span class="comment">                * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |</span></span><br><span class="line"><span class="comment">                * +----------------------------------------------------------+</span></span><br><span class="line"><span class="comment">                *              ^                        ^       ^</span></span><br><span class="line"><span class="comment">                *              |                        |       |</span></span><br><span class="line"><span class="comment">                *             less                      k     great</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                * Invariants:</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                *              all in (*,  less) == pivot1</span></span><br><span class="line"><span class="comment">                *     pivot1 &lt; all in [less,  k)  &lt; pivot2</span></span><br><span class="line"><span class="comment">                *              all in (great, *) == pivot2</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                * Pointer k is the first index of ?-part.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            outer:</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = less - <span class="number">1</span>; ++k &lt;= great; ) &#123;</span><br><span class="line">                <span class="keyword">int</span> ak = a[k];</span><br><span class="line">                <span class="keyword">if</span> (ak == pivot1) &#123; <span class="comment">// Move a[k] to left part</span></span><br><span class="line">                    a[k] = a[less];</span><br><span class="line">                    a[less] = ak;</span><br><span class="line">                    ++less;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ak == pivot2) &#123; <span class="comment">// Move a[k] to right part</span></span><br><span class="line">                    <span class="keyword">while</span> (a[great] == pivot2) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (great-- == k) &#123;</span><br><span class="line">                            <span class="keyword">break</span> outer;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (a[great] == pivot1) &#123; <span class="comment">// a[great] &lt; pivot2</span></span><br><span class="line">                        a[k] = a[less];</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            * Even though a[great] equals to pivot1, the</span></span><br><span class="line"><span class="comment">                            * assignment a[less] = pivot1 may be incorrect,</span></span><br><span class="line"><span class="comment">                            * if a[great] and pivot1 are floating-point zeros</span></span><br><span class="line"><span class="comment">                            * of different signs. Therefore in float and</span></span><br><span class="line"><span class="comment">                            * double sorting methods we have to use more</span></span><br><span class="line"><span class="comment">                            * accurate assignment a[less] = a[great].</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line">                        a[less] = pivot1;</span><br><span class="line">                        ++less;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// pivot1 &lt; a[great] &lt; pivot2</span></span><br><span class="line">                        a[k] = a[great];</span><br><span class="line">                    &#125;</span><br><span class="line">                    a[great] = ak;</span><br><span class="line">                    --great;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对中心部分进行递归排序</span></span><br><span class="line">        sort(a, less, great, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// Partitioning with one pivot</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Use the third of the five sorted elements as pivot.</span></span><br><span class="line"><span class="comment">            * This value is inexpensive approximation of the median.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">int</span> pivot = a[e3];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Partitioning degenerates to the traditional 3-way</span></span><br><span class="line"><span class="comment">            * (or &quot;Dutch National Flag&quot;) schema:</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            *   left part    center part              right part</span></span><br><span class="line"><span class="comment">            * +-------------------------------------------------+</span></span><br><span class="line"><span class="comment">            * |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |</span></span><br><span class="line"><span class="comment">            * +-------------------------------------------------+</span></span><br><span class="line"><span class="comment">            *              ^              ^        ^</span></span><br><span class="line"><span class="comment">            *              |              |        |</span></span><br><span class="line"><span class="comment">            *             less            k      great</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * Invariants:</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            *   all in (left, less)   &lt; pivot</span></span><br><span class="line"><span class="comment">            *   all in [less, k)     == pivot</span></span><br><span class="line"><span class="comment">            *   all in (great, right) &gt; pivot</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * Pointer k is the first index of ?-part.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = less; k &lt;= great; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[k] == pivot) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ak = a[k];</span><br><span class="line">            <span class="keyword">if</span> (ak &lt; pivot) &#123; <span class="comment">// Move a[k] to left part</span></span><br><span class="line">                a[k] = a[less];</span><br><span class="line">                a[less] = ak;</span><br><span class="line">                ++less;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// a[k] &gt; pivot - Move a[k] to right part</span></span><br><span class="line">                <span class="keyword">while</span> (a[great] &gt; pivot) &#123;</span><br><span class="line">                    --great;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a[great] &lt; pivot) &#123; <span class="comment">// a[great] &lt;= pivot</span></span><br><span class="line">                    a[k] = a[less];</span><br><span class="line">                    a[less] = a[great];</span><br><span class="line">                    ++less;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// a[great] == pivot</span></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        * Even though a[great] equals to pivot, the</span></span><br><span class="line"><span class="comment">                        * assignment a[k] = pivot may be incorrect,</span></span><br><span class="line"><span class="comment">                        * if a[great] and pivot are floating-point</span></span><br><span class="line"><span class="comment">                        * zeros of different signs. Therefore in float</span></span><br><span class="line"><span class="comment">                        * and double sorting methods we have to use</span></span><br><span class="line"><span class="comment">                        * more accurate assignment a[k] = a[great].</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                    a[k] = pivot;</span><br><span class="line">                &#125;</span><br><span class="line">                a[great] = ak;</span><br><span class="line">                --great;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对左右部分递归排序。所有元素从中心部分是相等的，因此，已经排序。</span></span><br><span class="line">        sort(a, left, less - <span class="number">1</span>, leftmost);</span><br><span class="line">        sort(a, great + <span class="number">1</span>, right, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips： </p><ul><li>如果<code>length&lt;47</code>，那么采用插入排序算法。</li><li>如果<code>47&lt;=length&lt;286</code>，或者<code>286&lt;=length</code>，但数组不具备特定结构，那么使用快速排序的一种优化形式：双轴快排算法。</li><li>如果<code>286&lt;=length</code>，并且数组具备特定结构，那么使用归并排序算法。</li></ul><h3 id="解释1"><a href="#解释1" class="headerlink" title="解释1:"></a>解释1:</h3><p>这里主要作用是看他数组具不具备结构：实际逻辑是分组排序，每个降序序列为一个组，像<code>1,9,8,7,6,8。9</code>到<code>6</code>是降序，为一个组，然后把降序的一组排成升序：<code>1,6,7,8,9,8。</code>然后再从最后的8开始继续往后面找。</p><p>每遇到这样一个降序组，<code>++count</code>，当<code>count</code>大于<code>MAX_RUN_COUNT（67）</code>，被判断为这个数组不具备结构，也就是说这数据时而升时而降，波峰波谷太多，排列太过陡峭，说明不适合采用归并排序，还是使用快速排序为宜。</p><p>如果<code>count</code>少于<code>MAX_RUN_COUNT（67）</code>的，说明这个数组还有点结构，就继续往下走下面的归并排序。</p><p>参考链接 :</p><p><a href="https://cherish-ls.github.io/2020/10/14/JAVA%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8FArrays-sort%E5%AE%9E%E7%8E%B0%E7%AE%80%E8%BF%B0/">源码讲解</a><br><a href="https://blog.csdn.net/Holmofy/article/details/71168530">单轴与双轴快排</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;是这样的，我们在刚学数据结构时候，都会学什么八大排序算法乱七八糟的，但是真正在写&lt;code&gt;Java&lt;/code&gt;项目时，都是直接化身&lt;code&gt;API&lt;/code&gt;调用工程师，&lt;code&gt;Arrays.sort()&lt;/code&gt;完事，无意间点开，其实里面的玄机另有洞天。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java面试" scheme="https://smile1231.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
    <category term="算法" scheme="https://smile1231.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://smile1231.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://smile1231.github.io/posts/1599bffe/"/>
    <id>https://smile1231.github.io/posts/1599bffe/</id>
    <published>2022-03-12T17:09:11.000Z</published>
    <updated>2022-03-13T07:03:27.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序（稳定）"><a href="#归并排序（稳定）" class="headerlink" title="归并排序（稳定）"></a>归并排序（稳定）</h2><p>归并排序是建立在归并操作上的一种有效的排序算法，1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。</p><span id="more"></span><img data-src="/posts/1599bffe/2022-03-13-13-44-14.png" class=""><h3 id="1、基本思想"><a href="#1、基本思想" class="headerlink" title="1、基本思想"></a>1、基本思想</h3><p>归并排序算法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p><h3 id="2、算法描述"><a href="#2、算法描述" class="headerlink" title="2、算法描述"></a>2、算法描述</h3><p>归并排序可通过两种方式实现：</p><ul><li>自上而下的递归</li><li>自下而上的迭代<br>一、递归法（假设序列共有n个元素）：</li></ul><p>①. 将序列每相邻两个数字进行归并操作，形成 <code>floor(n/2)</code>个序列，排序后每个序列包含两个元素；<br>②. 将上述序列再次归并，形成 <code>floor(n/4)</code>个序列，每个序列包含四个元素；<br>③. 重复步骤②，直到所有元素排序完毕。</p><p>二、迭代法</p><p>①. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br>②. 设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>③. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置<br>④. 重复步骤③直到某一指针到达序列尾<br>⑤. 将另一序列剩下的所有元素直接复制到合并序列尾</p><h3 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h3><p>归并排序其实要做两件事：</p><ul><li>分解：将序列每次折半拆分</li><li>合并：将划分后的序列段两两排序合并<br>因此，归并排序实际上就是两个操作，拆分+合并</li></ul><p>如何合并？</p><p><code>L[first…mid]</code>为第一段，<code>L[mid+1…last]</code>为第二段，并且两端已经有序，现在我们要将两端合成达到<code>L[first…last]</code>并且也有序。</p><p>首先依次从第一段与第二段中取出元素比较，将较小的元素赋值给<code>temp[]</code><br>重复执行上一步，当某一段赋值结束，则将另一段剩下的元素赋值给<code>temp[]</code><br>此时将<code>temp[]</code>中的元素复制给<code>L[]</code>，则得到的<code>L[first…last]</code>有序</p><p>如何分解？</p><p>在这里，我们采用递归的方法，首先将待排序列分成A,B两组；然后重复对A、B序列<br>分组；直到分组后组内只有一个元素，此时我们认为组内所有元素有序，则分组结束。</p><p>这里我写了递归算法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序（递归）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ①. 将序列每相邻两个数字进行归并操作，形成 floor(n/2)个序列，排序后每个序列包含两个元素；</span></span><br><span class="line"><span class="comment"> * ②. 将上述序列再次归并，形成 floor(n/4)个序列，每个序列包含四个元素；</span></span><br><span class="line"><span class="comment"> * ③. 重复步骤②，直到所有元素排序完毕。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待排序数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergingSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = arr.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] leftArr = Arrays.copyOfRange(arr, <span class="number">0</span>, num);</span><br><span class="line">    <span class="keyword">int</span>[] rightArr = Arrays.copyOfRange(arr, num, arr.length);</span><br><span class="line">    System.out.println(<span class="string">&quot;split two array: &quot;</span> + Arrays.toString(leftArr) + <span class="string">&quot; And &quot;</span> + Arrays.toString(rightArr));</span><br><span class="line">    <span class="keyword">return</span> mergeTwoArray(mergingSort(leftArr), mergingSort(rightArr));      <span class="comment">//不断拆分为最小单元，再排序合并</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeTwoArray(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2)&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length + arr2.length];  <span class="comment">//申请额外的空间存储合并之后的数组</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; arr1.length &amp;&amp; j &lt; arr2.length)&#123;      <span class="comment">//选取两个序列中的较小值放入新数组</span></span><br><span class="line">        <span class="keyword">if</span>(arr1[i] &lt;= arr2[j])&#123;</span><br><span class="line">            result[k++] = arr1[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result[k++] = arr2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; arr1.length)&#123;     <span class="comment">//序列1中多余的元素移入新数组</span></span><br><span class="line">        result[k++] = arr1[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt; arr2.length)&#123;     <span class="comment">//序列2中多余的元素移入新数组</span></span><br><span class="line">        result[k++] = arr2[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Merging: &quot;</span> + Arrays.toString(result));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上, 长度为<code>n</code>的数组, 最终会调用<code>mergeSort</code>函数<code>2n-1</code>次。通过自上而下的递归实现的归并排序, 将存在堆栈溢出的风险。</p><p><a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/#%E4%B8%83%E3%80%81%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88Merging-Sort%EF%BC%89">链接</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;归并排序（稳定）&quot;&gt;&lt;a href=&quot;#归并排序（稳定）&quot; class=&quot;headerlink&quot; title=&quot;归并排序（稳定）&quot;&gt;&lt;/a&gt;归并排序（稳定）&lt;/h2&gt;&lt;p&gt;归并排序是建立在归并操作上的一种有效的排序算法，1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java面试" scheme="https://smile1231.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
    <category term="算法" scheme="https://smile1231.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="归并排序" scheme="https://smile1231.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://smile1231.github.io/posts/14e6f1eb/"/>
    <id>https://smile1231.github.io/posts/14e6f1eb/</id>
    <published>2022-03-12T13:58:14.000Z</published>
    <updated>2022-03-12T17:06:13.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序（稳定）"><a href="#冒泡排序（稳定）" class="headerlink" title="冒泡排序（稳定）"></a>冒泡排序（稳定）</h2><h3 id="1、基本思想"><a href="#1、基本思想" class="headerlink" title="1、基本思想"></a>1、基本思想</h3><p>冒泡排序（<code>Bubble Sort</code>）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><span id="more"></span><h3 id="2、算法描述"><a href="#2、算法描述" class="headerlink" title="2、算法描述"></a>2、算法描述</h3><p>冒泡排序算法的运作如下：</p><p>①. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>②. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。<br>③. 针对所有的元素重复以上的步骤，除了最后一个。<br>④. 持续每次对越来越少的元素重复上面的步骤①~③，直到没有任何一对数字需要比较。</p><h3 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h3><p>冒泡排序需要两个嵌套的循环. 其中, 外层循环移动游标; 内层循环遍历游标及之后(或之前)的元素, 通过两两交换的方式, 每次只确保该内循环结束位置排序正确, 然后内层循环周期结束, 交由外层循环往后(或前)移动游标, 随即开始下一轮内层循环, 以此类推, 直至循环结束.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length; i &gt; <span class="number">0</span>; i--) &#123;      <span class="comment">//外层循环移动游标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i &amp;&amp; (j+<span class="number">1</span>) &lt; i; j++)&#123;    <span class="comment">//内层循环遍历游标及之后(或之前)的元素</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                System.out.println(<span class="string">&quot;Sorting: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips: 由于冒泡排序只在相邻元素大小不符合要求时才调换他们的位置, 它并不改变相同元素之间的相对顺序, 因此它是稳定的排序算法.</p><p><a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/">链接</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;冒泡排序（稳定）&quot;&gt;&lt;a href=&quot;#冒泡排序（稳定）&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序（稳定）&quot;&gt;&lt;/a&gt;冒泡排序（稳定）&lt;/h2&gt;&lt;h3 id=&quot;1、基本思想&quot;&gt;&lt;a href=&quot;#1、基本思想&quot; class=&quot;headerlink&quot; title=&quot;1、基本思想&quot;&gt;&lt;/a&gt;1、基本思想&lt;/h3&gt;&lt;p&gt;冒泡排序（&lt;code&gt;Bubble Sort&lt;/code&gt;）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。&lt;/p&gt;</summary>
    
    
    
    <category term="Java面试" scheme="https://smile1231.github.io/categories/Java%E9%9D%A2%E8%AF%95/"/>
    
    <category term="冒泡排序" scheme="https://smile1231.github.io/categories/Java%E9%9D%A2%E8%AF%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
    <category term="算法" scheme="https://smile1231.github.io/categories/Java%E9%9D%A2%E8%AF%95/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java面试" scheme="https://smile1231.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
    <category term="算法" scheme="https://smile1231.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="冒泡排序" scheme="https://smile1231.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="https://smile1231.github.io/posts/c2a5fdc5/"/>
    <id>https://smile1231.github.io/posts/c2a5fdc5/</id>
    <published>2022-03-12T13:58:00.000Z</published>
    <updated>2022-03-12T16:50:12.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆排序（不稳定）"><a href="#堆排序（不稳定）" class="headerlink" title="堆排序（不稳定）"></a>堆排序（不稳定）</h2><p>个人感觉堆排序还是挺难的，虽然会有演示动画<br><a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/#%E5%9B%9B%E3%80%81%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88Heap-Sort%EF%BC%89">链接</a></p><p>但是从代码层面就没有那么好的通俗</p><span id="more"></span><p>堆的含义就是：完全二叉树中任何一个非叶子节点的值均不大于（或不小于）其左，右孩子节点的值。由上述性质可知大顶堆的堆顶的关键字肯定是所有关键字中最大的，小顶堆的堆顶的关键字是所有关键字中最小的。因此我们可使用大顶堆进行升序排序, 使用小顶堆进行降序排序。</p><h3 id="1、基本思想"><a href="#1、基本思想" class="headerlink" title="1、基本思想"></a>1、基本思想</h3><p>此处以大顶堆为例，堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走，再把剩余的元素调整成堆，找出最大的再移走，重复直至有序。</p><h3 id="2、算法描述"><a href="#2、算法描述" class="headerlink" title="2、算法描述"></a>2、算法描述</h3><p>①. 先将初始序列<code>K[1..n]</code>建成一个大顶堆, 那么此时第一个元素<code>K1</code>最大, 此堆为初始的无序区.<br>②. 再将关键字最大的记录<code>K1</code> (即堆顶, 第一个元素)和无序区的最后一个记录 <code>Kn</code> 交换, 由此得到新的无序区<code>K[1..n−1]</code>和有序区<code>K[n]</code>, 且满足<code>K[1..n−1].keys⩽K[n].key</code><br>③. 交换<code>K1</code> 和 <code>Kn</code> 后, 堆顶可能违反堆性质, 因此需将<code>K[1..n−1]</code>调整为堆. 然后重复步骤②, 直到无序区只有一个元素时停止.</p><h3 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h3><p>从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆函数，二是反复调用建堆函数以选择出剩余未排元素中最大的数来实现排序的函数。</p><p>总结起来就是定义了以下几种操作：</p><ul><li>最大堆调整（<code>Max_Heapify</code>）：将堆的末端子节点作调整，使得子节点永远小于父节点</li><li>创建最大堆（<code>Build_Max_Heap</code>）：将堆所有数据重新排序</li><li>堆排序（<code>HeapSort</code>）：移除位在第一个数据的根节点，并做最大堆调整的递归运算</li></ul><p>对于堆节点的访问：</p><ul><li>父节点i的左子节点在位置：<code>(2*i+1);</code></li><li>父节点i的右子节点在位置：<code>(2*i+2);</code></li><li>子节点i的父节点在位置：<code>floor((i-1)/2);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        max_heapify(arr, i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp = arr[<span class="number">0</span>];      <span class="comment">//堆顶元素(第一个元素)与Kn交换</span></span><br><span class="line">        arr[<span class="number">0</span>] = arr[i-<span class="number">1</span>];</span><br><span class="line">        arr[i-<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">max_heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length &lt;= <span class="number">0</span> || arr.length &lt; limit) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> parentIdx = limit / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(; parentIdx &gt;= <span class="number">0</span>; parentIdx--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(parentIdx * <span class="number">2</span> &gt;= limit)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = parentIdx * <span class="number">2</span>;       <span class="comment">//左子节点位置</span></span><br><span class="line">        <span class="keyword">int</span> right = (left + <span class="number">1</span>) &gt;= limit ? left : (left + <span class="number">1</span>);    <span class="comment">//右子节点位置，如果没有右节点，默认为左节点位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxChildId = arr[left] &gt;= arr[right] ? left : right;</span><br><span class="line">        <span class="keyword">if</span>(arr[maxChildId] &gt; arr[parentIdx])&#123;   <span class="comment">//交换父节点与左右子节点中的最大值</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[parentIdx];</span><br><span class="line">            arr[parentIdx] = arr[maxChildId];</span><br><span class="line">            arr[maxChildId] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Max_Heapify: &quot;</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips: 由于堆排序中初始化堆的过程比较次数较多, 因此它不太适用于小序列. 同时由于多次任意下标相互交换位置, 相同元素之间原本相对的顺序被破坏了, 因此, 它是不稳定的排序.</p><p><a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/">链接</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;堆排序（不稳定）&quot;&gt;&lt;a href=&quot;#堆排序（不稳定）&quot; class=&quot;headerlink&quot; title=&quot;堆排序（不稳定）&quot;&gt;&lt;/a&gt;堆排序（不稳定）&lt;/h2&gt;&lt;p&gt;个人感觉堆排序还是挺难的，虽然会有演示动画&lt;br&gt;&lt;a href=&quot;https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/#%E5%9B%9B%E3%80%81%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%88Heap-Sort%EF%BC%89&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是从代码层面就没有那么好的通俗&lt;/p&gt;</summary>
    
    
    
    <category term="Java面试" scheme="https://smile1231.github.io/categories/Java%E9%9D%A2%E8%AF%95/"/>
    
    <category term="堆排序" scheme="https://smile1231.github.io/categories/Java%E9%9D%A2%E8%AF%95/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
    <category term="算法" scheme="https://smile1231.github.io/categories/Java%E9%9D%A2%E8%AF%95/%E5%A0%86%E6%8E%92%E5%BA%8F/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Java面试" scheme="https://smile1231.github.io/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
    <category term="算法" scheme="https://smile1231.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="堆排序" scheme="https://smile1231.github.io/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
