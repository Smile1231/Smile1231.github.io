<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JIN MAO &#39;s Blog</title>
  
  <subtitle>got windy(起风了)</subtitle>
  <link href="https://smile1231.github.io/atom.xml" rel="self"/>
  
  <link href="https://smile1231.github.io/"/>
  <updated>2022-12-09T15:57:53.291Z</updated>
  <id>https://smile1231.github.io/</id>
  
  <author>
    <name>JIN Mao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Speaking practice</title>
    <link href="https://smile1231.github.io/posts/9a088849/"/>
    <id>https://smile1231.github.io/posts/9a088849/</id>
    <published>2022-12-09T13:58:04.000Z</published>
    <updated>2022-12-09T15:57:53.291Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Speaking of which 说到这儿</p></blockquote><blockquote><p>we don’t see eye to eye 我们彼此看不顺眼</p></blockquote><blockquote><p>that’s how it is 原来如此</p></blockquote><blockquote><p>is this seat taken 我可以坐这儿吗</p></blockquote><blockquote><p>don’t flatter yourself 少臭美了</p></blockquote><blockquote><p>see you around 后会有期</p></blockquote><blockquote><p>keep your voice down 小声点</p></blockquote><blockquote><p>age before beauty 长者优先</p></blockquote><blockquote><p>with all due respect 恕我直言</p></blockquote><blockquote><p>go big or go home 要么吃鸡，要么成盒</p></blockquote><blockquote><p>time will tell 时间会证明一切</p></blockquote><blockquote><p>catch you later 回头见</p></blockquote><blockquote><p>are you serious 你是认真的吗</p></blockquote><blockquote><p>i don’t buy it 我才不信呢</p></blockquote><blockquote><p>it’s an honor to meet you 很荣幸见到你</p></blockquote><blockquote><p>you look so handsome 你好帅呀</p></blockquote><blockquote><p>i got you back 我挺你</p></blockquote><blockquote><p>don’t push your luck 别得寸进尺</p></blockquote><blockquote><p>it’s my day off 今天是我的休息日</p></blockquote><blockquote><p>how is everything 一切还好吗</p></blockquote><blockquote><p>i couldn’t agree more 再同意不过了</p></blockquote><blockquote><p>it’s only a matter of time 这只是时间问题而已</p></blockquote><blockquote><p>i told you so 我告诉过你了</p></blockquote><blockquote><p>the clock is ticking 时间不等人</p></blockquote><blockquote><p>anthor day anthor dollar 且过且得</p></blockquote><blockquote><p>night night 晚安</p></blockquote><blockquote><p>textbook 真他喵的典型的</p></blockquote><blockquote><p>it’s no big deal 没什么大不了的</p></blockquote><blockquote><p>get over yourself 别自作多情</p></blockquote><blockquote><p>go with the flow 顺其自然</p></blockquote><blockquote><p>have nothing to fear 无所畏惧</p></blockquote><blockquote><p>there’s no turning back 没有退路了</p></blockquote><blockquote><p>all set 一切就绪</p></blockquote><blockquote><p>no more bullshit 少废话</p></blockquote><blockquote><p>you’re on your own 你得靠你自己了</p></blockquote><blockquote><p>the chosen one 天选之子</p></blockquote><blockquote><p>hear me out 听我说完</p></blockquote><blockquote><p>got a second 有空吗</p></blockquote><blockquote><p>do me a favor 帮个忙</p></blockquote><blockquote><p>life sucks 生活糟透了</p></blockquote><blockquote><p>same old 老样子</p></blockquote><blockquote><p>you’re a peach 你真好</p></blockquote><blockquote><p>cut to the chase 快说重点</p></blockquote><blockquote><p>keep a low profile 保持低调</p></blockquote><blockquote><p>just kiffing 开个玩笑</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Speaking of which 说到这儿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;we don’t see eye to eye 我们彼此看不顺眼&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Spoken English" scheme="https://smile1231.github.io/categories/Spoken-English/"/>
    
    
    <category term="Spoken English" scheme="https://smile1231.github.io/tags/Spoken-English/"/>
    
  </entry>
  
  <entry>
    <title>最近前端整理</title>
    <link href="https://smile1231.github.io/posts/752b1c2a/"/>
    <id>https://smile1231.github.io/posts/752b1c2a/</id>
    <published>2022-08-21T14:51:33.000Z</published>
    <updated>2022-08-21T15:03:25.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css怎样排除第一个元素给其他元素设置样式"><a class="markdownIt-Anchor" href="#css怎样排除第一个元素给其他元素设置样式">#</a>  <code>css</code>  怎样排除第一个元素给其他元素设置样式</h2><p>在 <code>css</code>  中可以利用 <code>“:first-child”</code>  选择器和 <code>“:not”</code>  选择器来设置除了第一个元素其他元素的样式。</p><p><code>:first-child</code>  选择器用于选取属于其父元素的首个子元素的指定选择器。</p><p><code>:not(selector)</code>  选择器匹配非指定元素 / 选择器的每个元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.select_btn</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:first</span>-child) &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">90px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue-script结构"><a class="markdownIt-Anchor" href="#vue-script结构">#</a>  <code>vue script</code>  结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 组件的方法</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// watch擅长处理的场景：一个数据影响多个数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// computed擅长处理的场景：一个数据受多个数据影响</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeCreate</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在挂载开始之前被调用：相关的 render 函数首次被调用。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 编译好的HTML挂载到页面完成后执行的事件钩子</span></span><br><span class="line">    <span class="comment">// el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</span></span><br><span class="line">    <span class="comment">// 此钩子函数中一般会做一些ajax请求获取数据进行数据初始化</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Home done&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</span></span><br><span class="line">    <span class="comment">// 当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</span></span><br><span class="line">    <span class="comment">// 该钩子在服务器端渲染期间不被调用。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeDestroy</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实例销毁之前调用。在这一步，实例仍然完全可用。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="vue监听数据变化-watch"><a class="markdownIt-Anchor" href="#vue监听数据变化-watch">#</a>  <code>vue</code>  监听数据变化  <code>watch</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">inputValue</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">passedInputValue</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">        <span class="function"><span class="title">inputValue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 当inputValue数据发生变化以后，延迟三秒赋值给passedInputValue</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.passedInputValue = <span class="built_in">this</span>.inputValue;</span><br><span class="line">            &#125;, <span class="number">3000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>获取变化之前的值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="function"><span class="title">inputValue</span>(<span class="params">value,oldValue</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 第一个参数为新值，第二个参数为旧值，不能调换顺序</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`新值：<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`旧值：<span class="subst">$&#123;oldValue&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue中显示与隐藏"><a class="markdownIt-Anchor" href="#vue中显示与隐藏">#</a>  <code>Vue</code>  中显示与隐藏</h2><p><code>v-show</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel_all&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;select_app_show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for使用"><a class="markdownIt-Anchor" href="#v-for使用">#</a>  <code>v-for</code>  使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in items&quot;</span> v-on:click=<span class="string">&quot;onclick(index)&quot;</span> href=<span class="string">&quot;javascript:void(0)&quot;</span>&gt;&#123;&#123; index &#125;&#125;&#123;&#123; item.text &#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;css怎样排除第一个元素给其他元素设置样式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#css怎样排除第一个元素给其他元素设置样式&quot;&gt;#&lt;/a&gt;  &lt;code&gt;css&lt;/code&gt;  怎样排除第一个元素给其他元素设置样式&lt;/h2&gt;
&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://smile1231.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://smile1231.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="https://smile1231.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue实现Yaml验证组件</title>
    <link href="https://smile1231.github.io/posts/bd30a519/"/>
    <id>https://smile1231.github.io/posts/bd30a519/</id>
    <published>2022-08-21T14:03:49.000Z</published>
    <updated>2022-08-21T15:03:25.323Z</updated>
    
    <content type="html"><![CDATA[<p>最近用到了 <code>Vue</code>  页面使用 <code>Yaml</code>  编辑器，但是这样的组件也是从来没有接触过的，这边做个记载:</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTgxMTM3L2FydGljbGUvZGV0YWlscy8xMDU0NDg3MTM=">原文</span></p><h2 id="安装必要依赖"><a class="markdownIt-Anchor" href="#安装必要依赖">#</a> 安装必要依赖</h2><ol><li><code>npm install codemirrir@5.61.1</code></li><li><code>npm installl js-yaml@4.1.0</code></li></ol><h2 id="创建对应的组件"><a class="markdownIt-Anchor" href="#创建对应的组件">#</a> 创建对应的组件</h2><p>路径为 <code>@/components/YamlEditor/index.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yaml-editor&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ref</span>=<span class="string">&quot;textarea&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> CodeMirror <span class="keyword">from</span> <span class="string">&#x27;codemirror&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/lint/lint.css&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&#x27;codemirror/lib/codemirror.css&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&#x27;codemirror/theme/monokai.css&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&#x27;codemirror/mode/yaml/yaml&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/lint/lint&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/lint/yaml-lint&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">window</span>.jsyaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>) <span class="comment">// 引入js-yaml为codemirror提高语法检查核心支持</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;YamlEditor&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// eslint-disable-next-line vue/require-prop-types</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">props</span>: [<span class="string">&#x27;value&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">yamlEditor</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">value</span>(<span class="params">value</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> editorValue = <span class="built_in">this</span>.yamlEditor.getValue()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (value !== editorValue) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.yamlEditor.setValue(<span class="built_in">this</span>.value)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.yamlEditor = CodeMirror.fromTextArea(<span class="built_in">this</span>.$refs.textarea, &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">lineNumbers</span>: <span class="literal">true</span>, <span class="comment">// 显示行号</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">mode</span>: <span class="string">&#x27;text/x-yaml&#x27;</span>, <span class="comment">// 语法model</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">gutters</span>: [<span class="string">&#x27;CodeMirror-lint-markers&#x27;</span>],  <span class="comment">// 语法检查器</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">theme</span>: <span class="string">&#x27;monokai&#x27;</span>, <span class="comment">// 编辑器主题</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">lint</span>: <span class="literal">true</span> <span class="comment">// 开启语法检查</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.yamlEditor.setValue(<span class="built_in">this</span>.value)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.yamlEditor.on(<span class="string">&#x27;change&#x27;</span>, <span class="function">(<span class="params">cm</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;changed&#x27;</span>, cm.getValue())</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, cm.getValue())</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">getValue</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">this</span>.yamlEditor.getValue()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.yaml-editor</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.yaml-editor</span> &gt;&gt;&gt; <span class="selector-class">.CodeMirror</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">min-height</span>: <span class="number">300px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.yaml-editor</span> &gt;&gt;&gt; <span class="selector-class">.CodeMirror-scroll</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">min-height</span>: <span class="number">300px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.yaml-editor</span> &gt;&gt;&gt; <span class="selector-class">.cm-s-rubyblue</span> <span class="selector-tag">span</span><span class="selector-class">.cm-string</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">color</span>: <span class="number">#F08047</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>codemirror</code>  的核心配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.yamlEditor = CodeMirror.fromTextArea(<span class="built_in">this</span>.$refs.textarea, &#123;</span><br><span class="line">    <span class="attr">lineNumbers</span>: <span class="literal">true</span>, <span class="comment">// 显示行号</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;text/x-yaml&#x27;</span>, <span class="comment">// 语法model</span></span><br><span class="line">    <span class="attr">gutters</span>: [<span class="string">&#x27;CodeMirror-lint-markers&#x27;</span>],  <span class="comment">// 语法检查器</span></span><br><span class="line">    <span class="attr">theme</span>: <span class="string">&#x27;monokai&#x27;</span>, <span class="comment">// 编辑器主题</span></span><br><span class="line">    <span class="attr">lint</span>: <span class="literal">true</span> <span class="comment">// 开启语法检查</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的配置只有几个简单的参数，更多的详细参数配置可以移步<span class="exturl" data-url="aHR0cHM6Ly9jb2RlbWlycm9yLm5ldC9kb2MvbWFudWFsLmh0bWw=">官方文档</span>；如果想让编辑器支持其他语言，可以查看 codemirror 官方文档的<span class="exturl" data-url="aHR0cHM6Ly9jb2RlbWlycm9yLm5ldC9tb2RlLw==">语法支持</span>，这里我个人比较倾向下载 <code>codemirror</code>  源码，可以看到对应语法 <code>demo</code>  源代码，使用不同的语法在本组件中 <code>import</code>  相应的依赖即可。</p><p>这边不同的主题: <span class="exturl" data-url="aHR0cHM6Ly9jb2RlbWlycm9yLm5ldC81L3RoZW1lLw==">theme</span></p><h2 id="使用组件"><a class="markdownIt-Anchor" href="#使用组件">#</a> 使用组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;editor-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">yaml-editor</span>  <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">import YamlEditor from &#x27;@/components/YamlEditor/index.vue&#x27;;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">const yamlData = &quot;- hosts: all\n  become: yes\n  become_method: sudo\n  gather_facts: no\n\n  tasks:\n  - name: \&quot;install </span><span class="template-variable">&#123;&#123; <span class="name">package_name</span> &#125;&#125;</span><span class="xml">\&quot;\n    package:\n      name: \&quot;</span><span class="template-variable">&#123;&#123; <span class="name">package_name</span> &#125;&#125;</span><span class="xml">\&quot;\n      state: \&quot;</span><span class="template-variable">&#123;&#123; <span class="name">state</span> | default(<span class="name">&#x27;present&#x27;</span>) &#125;&#125;</span><span class="xml">\&quot;&quot;;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">export default &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">  name: &#x27;YamlEditorDemo&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">  components: &#123; YamlEditor &#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">  data() &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    return &#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">      value: yamlData,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">    &#125;;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">  &#125;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">&#125;;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.editor-container</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果：</p><img data-src="/posts/bd30a519/2022-08-21-22-50-44.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近用到了 &lt;code&gt;Vue&lt;/code&gt;  页面使用 &lt;code&gt;Yaml&lt;/code&gt;  编辑器，但是这样的组件也是从来没有接触过的，这边做个记载:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9ibG9nLmNzZ</summary>
      
    
    
    
    <category term="Vue" scheme="https://smile1231.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://smile1231.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis批量插入</title>
    <link href="https://smile1231.github.io/posts/cb74ceb6/"/>
    <id>https://smile1231.github.io/posts/cb74ceb6/</id>
    <published>2022-08-21T13:57:09.000Z</published>
    <updated>2022-08-21T15:03:25.322Z</updated>
    
    <content type="html"><![CDATA[<p>关于 <code>Mybatia</code>  实现插入 <code>List</code> , 每次一段时间就忘了，这次决定记载下来。</p><blockquote><p><code>Mapper层接口</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bulkInsertAppTable</span><span class="params">(List&lt;AppTable&gt; appTableList)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>Xml实现</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;bulkInsertAppTable&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into app_table</span><br><span class="line">    (application_name,create_by)</span><br><span class="line">values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;appTableList&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">item</span>=<span class="string">&quot;appTable&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span> <span class="attr">close</span>=<span class="string">&quot;&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (</span><br><span class="line">            #&#123;appTable.applicationName,jdbcType=VARCHAR&#125;,</span><br><span class="line">            #&#123;appTable.createBy,jdbcType=VARCHAR&#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于 &lt;code&gt;Mybatia&lt;/code&gt;  实现插入 &lt;code&gt;List&lt;/code&gt; , 每次一段时间就忘了，这次决定记载下来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Mapper层接口&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figur</summary>
      
    
    
    
    <category term="Mybatis" scheme="https://smile1231.github.io/categories/Mybatis/"/>
    
    
    <category term="Mybatis" scheme="https://smile1231.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 接口添加统一前缀</title>
    <link href="https://smile1231.github.io/posts/80a06b6b/"/>
    <id>https://smile1231.github.io/posts/80a06b6b/</id>
    <published>2022-08-21T13:46:23.000Z</published>
    <updated>2022-08-21T13:53:09.217Z</updated>
    
    <content type="html"><![CDATA[<p>为 <code>SpringBoot</code>  添加统一的接口路径前缀，例如 <code>/api/1.0</code>  这样。</p><p>写一个 <code>Springboot</code>  配置类即可:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jinMao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> WebMvcConfig.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022-08-20  00:14:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.addPathPrefix(<span class="string">&quot;/api/1.0&quot;</span>, c -&gt; c.isAnnotationPresent(RestController.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="/posts/80a06b6b/2022-08-21-21-52-28.png" class=""><p>会自动带上前缀：</p><img data-src="/posts/80a06b6b/2022-08-21-21-52-48.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为 &lt;code&gt;SpringBoot&lt;/code&gt;  添加统一的接口路径前缀，例如 &lt;code&gt;/api/1.0&lt;/code&gt;  这样。&lt;/p&gt;
&lt;p&gt;写一个 &lt;code&gt;Springboot&lt;/code&gt;  配置类即可:&lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot javax操作邮箱</title>
    <link href="https://smile1231.github.io/posts/dfc32b58/"/>
    <id>https://smile1231.github.io/posts/dfc32b58/</id>
    <published>2022-08-16T13:43:58.000Z</published>
    <updated>2022-08-16T13:46:37.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot-javax获取邮件内容删除邮件-根据时间段筛选邮件筛选时间段未读邮件"><a class="markdownIt-Anchor" href="#springboot-javax获取邮件内容删除邮件-根据时间段筛选邮件筛选时间段未读邮件">#</a>  <code>SpringBoot javax</code>  获取邮件内容，删除邮件、根据时间段筛选邮件，筛选时间段 + 未读邮件</h1><p>首先需要导入依赖，由于使用的是 <code>Gradle</code> , 其实本质也和 <code>maven</code>  差不多</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="keyword">group</span>: <span class="string">&#x27;org.apache.commons&#x27;</span>, name: <span class="string">&#x27;commons-lang3&#x27;</span>, version: <span class="string">&#x27;3.11&#x27;</span></span><br><span class="line"><span class="comment">//邮件</span></span><br><span class="line">implementation <span class="keyword">group</span>: <span class="string">&#x27;javax.mail&#x27;</span>, name: <span class="string">&#x27;javax.mail-api&#x27;</span>, version: <span class="string">&#x27;1.5.5&#x27;</span></span><br><span class="line">implementation <span class="keyword">group</span>: <span class="string">&#x27;com.sun.mail&#x27;</span>, name: <span class="string">&#x27;javax.mail&#x27;</span>, version: <span class="string">&#x27;1.5.5&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="原文链接"><a class="markdownIt-Anchor" href="#原文链接">#</a> <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY2hlbnlhbmJpbi9wLzE0NjMxOTA1Lmh0bWw=">原文链接</span></h2><p>将分为两个方案  <code>pop3</code>  和 <code>imap</code> :</p><blockquote><p>pop3 与 imap 区别#</p></blockquote><ol><li><p><code>pop3</code>  允许电子邮件客户端请求下载指定邮件服务器上指定用户的邮件信息，但是在用户的客户端所做的任何操作都是不会反馈到服务器上的，也就是说，你已读了邮件在邮件服务器上的状态还是未读取的，这在很多情况下对用户来说是不方便的。这是因为 pop3 协议是单向协议</p></li><li><p><code>IAMP</code>  协议，双向协议，用户在客户端的操作可以实时的反馈到服务器上，用户对邮件的任何操作，服务器也会做出相应的操作。</p><ul><li>同时： <code>IMAP</code>  还可以指定下载邮件的某些内容。</li><li>所以 <code>POP3</code>  协议无法获取邮件状态 (已读或未读)</li><li><code>IMAP</code>  协议不支持 中文主题 或 中文内容 邮件过滤，而 <code>POP3</code>  完全支持</li></ul></li></ol><p><strong>同时， <code>Imap</code>  关于时间筛选只能精确到日，也就是说只能默认搜索当天的所有邮件，因此，在 <code>Imap</code>  的协议下，想要锁定时间搜索只能另寻僻静了</strong></p><h2 id="筛选条件"><a class="markdownIt-Anchor" href="#筛选条件">#</a> 筛选条件#</h2><p><code>JavaMail</code>  在 <code>javax.mail.search</code>  包中定义了一个用于创建搜索条件的 <code>SearchTerm</code>  类，应用程序创建 <code>SearchTerm</code>  类的实例对象后，就可以调用 <code>Folder.Search(SearchTerm st)</code>  方法搜索邮件夹中符合搜索条件的所有邮件。 <code>SearchTerm</code>  是一个抽象类， <code>JavaMail</code>  提供了 <code>22</code>  个实现子类以帮助应用程序创建不同的搜索条件，这 <code>22</code>  个类可分为两大类型，如下所示：</p><ol><li><p>用于创建逻辑组合关系的类</p><ul><li><code>AND</code>  条件（ <code>AndTerm</code>  类）</li><li><code>OR</code>  条件（ <code>OrTerm</code>  类）</li><li><code>NOT</code>  条件（ <code>NotTerm</code>  类）</li><li><code>Comparison</code>  条件（ <code>ComparisonTerm</code>  类）</li></ul></li><li><p>用于创建具体搜索条件的类</p><ul><li><code>DATE</code>  条件（ <code>SentDateTerm、ReceivedDateTerm类</code> ）</li><li><code>CONTENT</code>  条件（ <code>BodyTerm</code>  类）</li><li><code>HEADER</code>  条件（ <code>FromStringTerm、RecipientStringTerm、SubjectTerm</code>  类等）<br>下面通过实现来说明以上类的用法及含义：</li></ul></li></ol><ul><li>搜索发件人为 “智联招聘 “，而且邮件正文包含 <code>“Java工程师“</code> 的所有邮件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SearchTerm andTerm = <span class="keyword">new</span> AndTerm( <span class="keyword">new</span> FromStringTerm(<span class="string">&quot;智联招聘&quot;</span>), <span class="keyword">new</span> BodyTerm(<span class="string">&quot;java工程师&quot;</span>));</span><br><span class="line">Message[] messages = folder.search(andTerm); </span><br></pre></td></tr></table></figure><ul><li>搜索发件人为 “智联招聘 “或主题包含 “最新职位信息 “的所有邮件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SearchTerm orTerm = <span class="keyword">new</span> OrTerm( <span class="keyword">new</span> FromStringTerm(<span class="string">&quot;智联招聘&quot;</span>), <span class="keyword">new</span> SubjectTerm(<span class="string">&quot;最新职位信息&quot;</span>));</span><br><span class="line"></span><br><span class="line">Message[] messages = folder.search(orTerm); </span><br></pre></td></tr></table></figure><ul><li>搜索周一到今天收到的的所有邮件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Calendar calendar = Calendar.getInstance();  </span><br><span class="line">calendar.set(Calendar.DAY_OF_WEEK, calendar.get(Calendar.DAY_OF_WEEK - (Calendar.DAY_OF_WEEK - <span class="number">1</span>)) - <span class="number">1</span>); </span><br><span class="line">Date mondayDate = calendar.getTime(); </span><br><span class="line">SearchTerm comparisonTermGe = <span class="keyword">new</span> SentDateTerm(ComparisonTerm.GE, mondayDate); </span><br><span class="line">SearchTerm comparisonTermLe = <span class="keyword">new</span> SentDateTerm(ComparisonTerm.LE, <span class="keyword">new</span> Date()); </span><br><span class="line">SearchTerm comparisonAndTerm = <span class="keyword">new</span> AndTerm(comparisonTermGe, comparisonTermLe); </span><br><span class="line">Message[] messages = folder.search(comparisonAndTerm); </span><br></pre></td></tr></table></figure><ul><li>搜索大于或等 <code>100KB</code>  的所有邮件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mailSize = <span class="number">1024</span> * <span class="number">100</span>; SearchTerm intComparisonTerm = <span class="keyword">new</span> SizeTerm(IntegerComparisonTerm.GE, mailSize); </span><br><span class="line">Message[] messages = folder.search(intComparisonTerm); </span><br></pre></td></tr></table></figure><p><code>ComparisonTerm</code>  类常用于日期和数字比较中，它使用六个常量 <code>EQ（＝）、GE（&gt;=）、GT（&gt;）、LE（&lt;=）、LT（&lt;）、NE（!=）</code> 来表示六种不同的比较操作。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果需要在取得邮件数后将邮件置为已读则这里需要使用READ_WRITE,否则READ_ONLY就可以</span></span><br><span class="line">    inbox.open(Folder.READ_WRITE); </span><br><span class="line">    <span class="comment">// Message messages[] = inbox.getMessages(); //获取所有邮件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立搜索条件FlagTerm，这里FlagTerm继承自SearchTerm，也就是说除了获取未读邮</span></span><br><span class="line">    <span class="comment">//件的条件还有很多其他条件同样继承了SearchTerm的条件类，像根据发件人，主题搜索等，</span></span><br><span class="line">    <span class="comment">// 还有复杂的逻辑搜索类似：</span></span><br><span class="line">    <span class="comment">//     </span></span><br><span class="line">    <span class="comment">//    SearchTerm orTerm = new OrTerm(   </span></span><br><span class="line">    <span class="comment">//            new FromStringTerm(from),   </span></span><br><span class="line">    <span class="comment">//            new SubjectTerm(subject)   </span></span><br><span class="line">    <span class="comment">//            ); </span></span><br><span class="line">    <span class="comment">//  </span></span><br><span class="line"></span><br><span class="line">    FlagTerm ft = <span class="keyword">new</span> FlagTerm(<span class="keyword">new</span> Flags(Flags.Flag.SEEN), <span class="keyword">false</span>); <span class="comment">//false代表未读，true代表已读</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Flag 类型列举如下</span></span><br><span class="line"><span class="comment">    * Flags.Flag.ANSWERED 邮件回复标记，标识邮件是否已回复。</span></span><br><span class="line"><span class="comment">    * Flags.Flag.DELETED 邮件删除标记，标识邮件是否需要删除。</span></span><br><span class="line"><span class="comment">    * Flags.Flag.DRAFT 草稿邮件标记，标识邮件是否为草稿。</span></span><br><span class="line"><span class="comment">    * Flags.Flag.FLAGGED 表示邮件是否为回收站中的邮件。</span></span><br><span class="line"><span class="comment">    * Flags.Flag.RECENT 新邮件标记，表示邮件是否为新邮件。</span></span><br><span class="line"><span class="comment">    * Flags.Flag.SEEN 邮件阅读标记，标识邮件是否已被阅读。</span></span><br><span class="line"><span class="comment">    * Flags.Flag.USER 底层系统是否支持用户自定义标记，只读。</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure><h2 id="pop3"><a class="markdownIt-Anchor" href="#pop3">#</a>  <code>pop3</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMultipart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeUtility;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreMail</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String USER = <span class="string">&quot;543210188@qq.com&quot;</span>; <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String PASSWORD = <span class="string">&quot;xxxxx&quot;</span>; <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MAIL_SERVER_HOST = <span class="string">&quot;smtp.qq.com&quot;</span>; <span class="comment">// 邮箱服务器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个有具体连接信息的Properties对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.debug&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.store.protocol&quot;</span>, <span class="string">&quot;pop3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.pop3.host&quot;</span>, MAIL_SERVER_HOST);</span><br><span class="line">        <span class="comment">// 1、创建session</span></span><br><span class="line">        Session session = Session.getInstance(prop);</span><br><span class="line">        <span class="comment">// 2、通过session得到Store对象</span></span><br><span class="line">        Store store = session.getStore();</span><br><span class="line">        <span class="comment">// 3、连上邮件服务器</span></span><br><span class="line">        store.connect(MAIL_SERVER_HOST, USER, PASSWORD);</span><br><span class="line">        <span class="comment">// 4、获得邮箱内的邮件夹</span></span><br><span class="line">        Folder folder = store.getFolder(<span class="string">&quot;inbox&quot;</span>);</span><br><span class="line">        <span class="comment">//只读</span></span><br><span class="line">        <span class="comment">//folder.open(Folder.READ_ONLY);</span></span><br><span class="line">        <span class="comment">//读写</span></span><br><span class="line">        folder.open(Folder.READ_WRITE);</span><br><span class="line">        <span class="comment">// 获得邮件夹Folder内的所有邮件Message对象</span></span><br><span class="line">        Message[] messages = folder.getMessages();</span><br><span class="line">        <span class="comment">// 解析所有邮件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = messages.length; i &lt; count; i++) &#123;</span><br><span class="line">            MimeMessage msg = (MimeMessage) messages[i];</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------解析第&quot;</span> + msg.getMessageNumber() + <span class="string">&quot;封邮件-------------------- &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;主题: &quot;</span> + getSubject(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;发件人: &quot;</span> + getFrom(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;收件人：&quot;</span> + getReceiveAddress(msg, <span class="keyword">null</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;发送时间：&quot;</span> + getSentDate(msg, <span class="keyword">null</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;是否已读：&quot;</span> + isSeen(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件优先级：&quot;</span> + getPriority(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;是否需要回执：&quot;</span> + isReplySign(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件大小：&quot;</span> + msg.getSize() * <span class="number">1024</span> + <span class="string">&quot;kb&quot;</span>);</span><br><span class="line">            <span class="keyword">boolean</span> isContainerAttachment = isContainAttachment(msg);</span><br><span class="line">            System.out.println(<span class="string">&quot;是否包含附件：&quot;</span> + isContainerAttachment);</span><br><span class="line">            <span class="keyword">if</span> (isContainerAttachment) &#123;</span><br><span class="line">                saveAttachment(msg, <span class="string">&quot;f:\\mailTest\\&quot;</span>+msg.getSubject() + <span class="string">&quot;_&quot;</span>+i+<span class="string">&quot;_&quot;</span>); <span class="comment">//保存附件</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">//删除邮件</span></span><br><span class="line">                msg.setFlag(Flags.Flag.DELETED, <span class="keyword">true</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;删除&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            StringBuffer content = <span class="keyword">new</span> StringBuffer(<span class="number">30</span>);</span><br><span class="line">            getMailTextContent(msg, content);</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件正文：&quot;</span> + content);</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------第&quot;</span> + msg.getMessageNumber() + <span class="string">&quot;封邮件解析结束-------------------- &quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5、关闭</span></span><br><span class="line">        folder.close(<span class="keyword">true</span>);</span><br><span class="line">        store.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messages 要解析的邮件列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteMessage</span><span class="params">(Message... messages)</span> <span class="keyword">throws</span> MessagingException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (messages == <span class="keyword">null</span> || messages.length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MessagingException(<span class="string">&quot;未找到要解析的邮件!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析所有邮件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = messages.length; i &lt; count; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *   邮件删除</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Message message = messages[i];</span><br><span class="line">            String subject = message.getSubject();</span><br><span class="line">            <span class="comment">// set the DELETE flag to true</span></span><br><span class="line">            message.setFlag(Flags.Flag.DELETED, <span class="keyword">true</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Marked DELETE for message: &quot;</span> + subject);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件主题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解码后的邮件主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSubject</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> UnsupportedEncodingException, MessagingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MimeUtility.decodeText(msg.getSubject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件发件人</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 姓名 &lt;Email地址&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFrom</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> MessagingException, UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String from = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Address[] froms = msg.getFrom();</span><br><span class="line">        <span class="keyword">if</span> (froms.length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MessagingException(<span class="string">&quot;没有发件人!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        InternetAddress address = (InternetAddress) froms[<span class="number">0</span>];</span><br><span class="line">        String person = address.getPersonal();</span><br><span class="line">        <span class="keyword">if</span> (person != <span class="keyword">null</span>) &#123;</span><br><span class="line">            person = MimeUtility.decodeText(person) + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            person = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        from = person + <span class="string">&quot;&lt;&quot;</span> + address.getAddress() + <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据收件人类型，获取邮件收件人、抄送和密送地址。如果收件人类型为空，则获得所有的收件人</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Message.RecipientType.TO  收件人&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Message.RecipientType.CC  抄送&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Message.RecipientType.BCC 密送&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg  邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 收件人类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 收件人1 &lt;邮件地址1&gt;, 收件人2 &lt;邮件地址2&gt;, ...</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getReceiveAddress</span><span class="params">(MimeMessage msg, Message.RecipientType type)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        StringBuffer receiveAddress = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        Address[] addresss = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            addresss = msg.getAllRecipients();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addresss = msg.getRecipients(type);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (addresss == <span class="keyword">null</span> || addresss.length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MessagingException(<span class="string">&quot;没有收件人!&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Address address : addresss) &#123;</span><br><span class="line">            InternetAddress internetAddress = (InternetAddress) address;</span><br><span class="line">            receiveAddress.append(internetAddress.toUnicodeString()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        receiveAddress.deleteCharAt(receiveAddress.length() - <span class="number">1</span>); <span class="comment">//删除最后一个逗号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> receiveAddress.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件发送时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> yyyy年mm月dd日 星期X HH:mm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSentDate</span><span class="params">(MimeMessage msg, String pattern)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        Date receivedDate = msg.getSentDate();</span><br><span class="line">        <span class="keyword">if</span> (receivedDate == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pattern == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(pattern))</span><br><span class="line">            pattern = <span class="string">&quot;yyyy年MM月dd日 E HH:mm &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(pattern).format(receivedDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断邮件中是否包含附件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 邮件中存在附件返回true，不存在返回false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isContainAttachment</span><span class="params">(Part part)</span> <span class="keyword">throws</span> MessagingException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">            MimeMultipart multipart = (MimeMultipart) part.getContent();</span><br><span class="line">            <span class="keyword">int</span> partCount = multipart.getCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partCount; i++) &#123;</span><br><span class="line">                BodyPart bodyPart = multipart.getBodyPart(i);</span><br><span class="line">                String disp = bodyPart.getDisposition();</span><br><span class="line">                <span class="keyword">if</span> (disp != <span class="keyword">null</span> &amp;&amp; (disp.equalsIgnoreCase(Part.ATTACHMENT) || disp.equalsIgnoreCase(Part.INLINE))) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bodyPart.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">                    flag = isContainAttachment(bodyPart);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String contentType = bodyPart.getContentType();</span><br><span class="line">                    <span class="keyword">if</span> (contentType.indexOf(<span class="string">&quot;application&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (contentType.indexOf(<span class="string">&quot;name&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;message/rfc822&quot;</span>)) &#123;</span><br><span class="line">            flag = isContainAttachment((Part) part.getContent());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断邮件是否已读</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果邮件已读返回true, 否则返回false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSeen</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg.getFlags().contains(Flags.Flag.SEEN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断邮件是否需要阅读回执</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 需要回执返回true, 否则返回false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isReplySign</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> replySign = <span class="keyword">false</span>;</span><br><span class="line">        String[] headers = msg.getHeader(<span class="string">&quot;Disposition-Notification-To&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (headers != <span class="keyword">null</span>)</span><br><span class="line">            replySign = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> replySign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件的优先级</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1(High):紧急  3:普通(Normal)  5:低(Low)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPriority</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        String priority = <span class="string">&quot;普通&quot;</span>;</span><br><span class="line">        String[] headers = msg.getHeader(<span class="string">&quot;X-Priority&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (headers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String headerPriority = headers[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (headerPriority.indexOf(<span class="string">&quot;1&quot;</span>) != -<span class="number">1</span> || headerPriority.indexOf(<span class="string">&quot;High&quot;</span>) != -<span class="number">1</span>)</span><br><span class="line">                priority = <span class="string">&quot;紧急&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (headerPriority.indexOf(<span class="string">&quot;5&quot;</span>) != -<span class="number">1</span> || headerPriority.indexOf(<span class="string">&quot;Low&quot;</span>) != -<span class="number">1</span>)</span><br><span class="line">                priority = <span class="string">&quot;低&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                priority = <span class="string">&quot;普通&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> priority;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件文本内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> part    邮件体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 存储邮件文本内容的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMailTextContent</span><span class="params">(Part part, StringBuffer content)</span> <span class="keyword">throws</span> MessagingException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//如果是文本类型的附件，通过getContent方法可以取到文本内容，但这不是我们需要的结果，所以在这里要做判断</span></span><br><span class="line">        <span class="keyword">boolean</span> isContainTextAttach = part.getContentType().indexOf(<span class="string">&quot;name&quot;</span>) &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;text/*&quot;</span>) &amp;&amp; !isContainTextAttach) &#123;</span><br><span class="line">            content.append(part.getContent().toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;message/rfc822&quot;</span>)) &#123;</span><br><span class="line">            getMailTextContent((Part) part.getContent(), content);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">            Multipart multipart = (Multipart) part.getContent();</span><br><span class="line">            <span class="keyword">int</span> partCount = multipart.getCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partCount; i++) &#123;</span><br><span class="line">                BodyPart bodyPart = multipart.getBodyPart(i);</span><br><span class="line">                getMailTextContent(bodyPart, content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存附件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> part    邮件中多个组合体中的其中一个组合体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destDir 附件保存目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveAttachment</span><span class="params">(Part part, String destDir)</span> <span class="keyword">throws</span> UnsupportedEncodingException, MessagingException,</span></span><br><span class="line"><span class="function">            FileNotFoundException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">            Multipart multipart = (Multipart) part.getContent();    <span class="comment">//复杂体邮件</span></span><br><span class="line">            <span class="comment">//复杂体邮件包含多个邮件体</span></span><br><span class="line">            <span class="keyword">int</span> partCount = multipart.getCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partCount; i++) &#123;</span><br><span class="line">                <span class="comment">//获得复杂体邮件中其中一个邮件体</span></span><br><span class="line">                BodyPart bodyPart = multipart.getBodyPart(i);</span><br><span class="line">                <span class="comment">//某一个邮件体也有可能是由多个邮件体组成的复杂体</span></span><br><span class="line">                String disp = bodyPart.getDisposition();</span><br><span class="line">                <span class="keyword">if</span> (disp != <span class="keyword">null</span> &amp;&amp; (disp.equalsIgnoreCase(Part.ATTACHMENT) || disp.equalsIgnoreCase(Part.INLINE))) &#123;</span><br><span class="line">                    InputStream is = bodyPart.getInputStream();</span><br><span class="line">                    saveFile(is, destDir, decodeText(bodyPart.getFileName()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bodyPart.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">                    saveAttachment(bodyPart, destDir);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String contentType = bodyPart.getContentType();</span><br><span class="line">                    <span class="keyword">if</span> (contentType.indexOf(<span class="string">&quot;name&quot;</span>) != -<span class="number">1</span> || contentType.indexOf(<span class="string">&quot;application&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        saveFile(bodyPart.getInputStream(), destDir, decodeText(bodyPart.getFileName()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;message/rfc822&quot;</span>)) &#123;</span><br><span class="line">            saveAttachment((Part) part.getContent(), destDir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取输入流中的数据保存至指定目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is       输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destDir  文件存储目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveFile</span><span class="params">(InputStream is, String destDir, String fileName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(is);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(</span><br><span class="line">                <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(destDir + fileName)));</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(len);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本解码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodeText 解码MimeUtility.encodeText(String text)方法编码后的文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解码后的文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decodeText</span><span class="params">(String encodeText)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (encodeText == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(encodeText)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> MimeUtility.decodeText(encodeText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据时间筛选-目前看来只支持pop3"><a class="markdownIt-Anchor" href="#根据时间筛选-目前看来只支持pop3">#</a> 根据时间筛选 (目前看来只支持 <code>POP3</code> )</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DateTerm dateTerm = <span class="keyword">new</span> DateTerm(<span class="number">3</span>, <span class="keyword">new</span> Date(<span class="number">1617869155000L</span>)) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date receivedDate = msg.getReceivedDate();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.date.before(msg.getSentDate());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Message[] messages = folder.search(dateTerm);</span><br></pre></td></tr></table></figure><p><code>new DateTerm</code>  第一个参数，对应关系如下</p><img data-src="/posts/dfc32b58/2022-08-16-21-46-14.png" class=""><h2 id="imap"><a class="markdownIt-Anchor" href="#imap">#</a>  <code>imap</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMultipart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeUtility;</span><br><span class="line"><span class="keyword">import</span> javax.mail.search.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreMail</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String USER = <span class="string">&quot;543210188@qq.com&quot;</span>; <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String PASSWORD = <span class="string">&quot;xxxxx&quot;</span>; <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String MAIL_SERVER_HOST = <span class="string">&quot;smtp.qq.com&quot;</span>; <span class="comment">// 邮箱服务器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个有具体连接信息的Properties对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.debug&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.store.protocol&quot;</span>, <span class="string">&quot;imap&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;mail.pop3.host&quot;</span>, MAIL_SERVER_HOST);</span><br><span class="line">        <span class="comment">// 1、创建session</span></span><br><span class="line">        Session session = Session.getInstance(prop);</span><br><span class="line">        <span class="comment">// 2、通过session得到Store对象</span></span><br><span class="line">        Store store = session.getStore();</span><br><span class="line">        <span class="comment">// 3、连上邮件服务器</span></span><br><span class="line">        store.connect(MAIL_SERVER_HOST, USER, PASSWORD);</span><br><span class="line">        <span class="comment">// 4、获得邮箱内的邮件夹</span></span><br><span class="line">        Folder folder = store.getFolder(<span class="string">&quot;inbox&quot;</span>);</span><br><span class="line">        <span class="comment">//只读</span></span><br><span class="line">        <span class="comment">//folder.open(Folder.READ_ONLY);</span></span><br><span class="line">        <span class="comment">//读写</span></span><br><span class="line">        folder.open(Folder.READ_WRITE);</span><br><span class="line">        <span class="comment">// 获得邮件夹Folder内的所有邮件Message对象</span></span><br><span class="line">        <span class="comment">//1617869155000  =====&gt; 2021-04-08 16:05:55</span></span><br><span class="line">        DateTerm dateTerm = <span class="keyword">new</span> DateTerm(<span class="number">3</span>, <span class="keyword">new</span> Date(<span class="number">1617869155000L</span>)) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.date.before(msg.getSentDate());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// FlagTerm ft = new FlagTerm(new Flags(Flags.Flag.SEEN), false); //false代表未读，true代表已读</span></span><br><span class="line">        FlagTerm flagTerm = <span class="keyword">new</span> FlagTerm(<span class="keyword">new</span> Flags(Flags.Flag.SEEN), <span class="keyword">false</span>);</span><br><span class="line">        AndTerm andTerm = <span class="keyword">new</span> AndTerm(dateTerm, flagTerm);</span><br><span class="line">        <span class="comment">//根据条件过滤</span></span><br><span class="line">        Message[] messages = folder.search(andTerm);</span><br><span class="line">        <span class="comment">//Message[] messages = folder.getMessages();</span></span><br><span class="line">        <span class="comment">// 解析所有邮件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = messages.length; i &lt; count; i++) &#123;</span><br><span class="line">            MimeMessage msg = (MimeMessage) messages[i];</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------解析第&quot;</span> + msg.getMessageNumber() + <span class="string">&quot;封邮件-------------------- &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;主题: &quot;</span> + getSubject(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;发件人: &quot;</span> + getFrom(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;收件人：&quot;</span> + getReceiveAddress(msg, <span class="keyword">null</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;发送时间：&quot;</span> + getSentDate(msg, <span class="keyword">null</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;是否已读：&quot;</span> + isSeen(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件优先级：&quot;</span> + getPriority(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;是否需要回执：&quot;</span> + isReplySign(msg));</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件大小：&quot;</span> + msg.getSize() * <span class="number">1024</span> + <span class="string">&quot;kb&quot;</span>);</span><br><span class="line">            <span class="keyword">boolean</span> isContainerAttachment = isContainAttachment(msg);</span><br><span class="line">            System.out.println(<span class="string">&quot;是否包含附件：&quot;</span> + isContainerAttachment);</span><br><span class="line">            <span class="comment">//设置当前邮件状态为已读</span></span><br><span class="line">            msg.setFlag(Flags.Flag.SEEN, <span class="keyword">true</span>);</span><br><span class="line">            StringBuffer content = <span class="keyword">new</span> StringBuffer(<span class="number">30</span>);</span><br><span class="line">            getMailTextContent(msg, content);</span><br><span class="line">            System.out.println(<span class="string">&quot;邮件正文：&quot;</span> + content);</span><br><span class="line">            System.out.println(<span class="string">&quot;------------------第&quot;</span> + msg.getMessageNumber() + <span class="string">&quot;封邮件解析结束-------------------- &quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5、关闭</span></span><br><span class="line">        folder.close(<span class="keyword">true</span>);</span><br><span class="line">        store.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messages 要解析的邮件列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteMessage</span><span class="params">(Message... messages)</span> <span class="keyword">throws</span> MessagingException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (messages == <span class="keyword">null</span> || messages.length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MessagingException(<span class="string">&quot;未找到要解析的邮件!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析所有邮件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = messages.length; i &lt; count; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *   邮件删除</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Message message = messages[i];</span><br><span class="line">            String subject = message.getSubject();</span><br><span class="line">            <span class="comment">// set the DELETE flag to true</span></span><br><span class="line">            message.setFlag(Flags.Flag.DELETED, <span class="keyword">true</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Marked DELETE for message: &quot;</span> + subject);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件主题</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解码后的邮件主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSubject</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> UnsupportedEncodingException, MessagingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MimeUtility.decodeText(msg.getSubject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件发件人</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 姓名 &lt;Email地址&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFrom</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> MessagingException, UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String from = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Address[] froms = msg.getFrom();</span><br><span class="line">        <span class="keyword">if</span> (froms.length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MessagingException(<span class="string">&quot;没有发件人!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        InternetAddress address = (InternetAddress) froms[<span class="number">0</span>];</span><br><span class="line">        String person = address.getPersonal();</span><br><span class="line">        <span class="keyword">if</span> (person != <span class="keyword">null</span>) &#123;</span><br><span class="line">            person = MimeUtility.decodeText(person) + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            person = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        from = person + <span class="string">&quot;&lt;&quot;</span> + address.getAddress() + <span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据收件人类型，获取邮件收件人、抄送和密送地址。如果收件人类型为空，则获得所有的收件人</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Message.RecipientType.TO  收件人&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Message.RecipientType.CC  抄送&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Message.RecipientType.BCC 密送&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg  邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 收件人类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 收件人1 &lt;邮件地址1&gt;, 收件人2 &lt;邮件地址2&gt;, ...</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getReceiveAddress</span><span class="params">(MimeMessage msg, Message.RecipientType type)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        StringBuffer receiveAddress = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        Address[] addresss = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            addresss = msg.getAllRecipients();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addresss = msg.getRecipients(type);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (addresss == <span class="keyword">null</span> || addresss.length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MessagingException(<span class="string">&quot;没有收件人!&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Address address : addresss) &#123;</span><br><span class="line">            InternetAddress internetAddress = (InternetAddress) address;</span><br><span class="line">            receiveAddress.append(internetAddress.toUnicodeString()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        receiveAddress.deleteCharAt(receiveAddress.length() - <span class="number">1</span>); <span class="comment">//删除最后一个逗号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> receiveAddress.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件发送时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> yyyy年mm月dd日 星期X HH:mm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSentDate</span><span class="params">(MimeMessage msg, String pattern)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        Date receivedDate = msg.getSentDate();</span><br><span class="line">        <span class="keyword">if</span> (receivedDate == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pattern == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(pattern))</span><br><span class="line">            pattern = <span class="string">&quot;yyyy年MM月dd日 E HH:mm &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(pattern).format(receivedDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断邮件中是否包含附件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 邮件中存在附件返回true，不存在返回false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isContainAttachment</span><span class="params">(Part part)</span> <span class="keyword">throws</span> MessagingException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">            MimeMultipart multipart = (MimeMultipart) part.getContent();</span><br><span class="line">            <span class="keyword">int</span> partCount = multipart.getCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partCount; i++) &#123;</span><br><span class="line">                BodyPart bodyPart = multipart.getBodyPart(i);</span><br><span class="line">                String disp = bodyPart.getDisposition();</span><br><span class="line">                <span class="keyword">if</span> (disp != <span class="keyword">null</span> &amp;&amp; (disp.equalsIgnoreCase(Part.ATTACHMENT) || disp.equalsIgnoreCase(Part.INLINE))) &#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bodyPart.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">                    flag = isContainAttachment(bodyPart);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String contentType = bodyPart.getContentType();</span><br><span class="line">                    <span class="keyword">if</span> (contentType.indexOf(<span class="string">&quot;application&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (contentType.indexOf(<span class="string">&quot;name&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        flag = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;message/rfc822&quot;</span>)) &#123;</span><br><span class="line">            flag = isContainAttachment((Part) part.getContent());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断邮件是否已读</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果邮件已读返回true, 否则返回false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSeen</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg.getFlags().contains(Flags.Flag.SEEN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断邮件是否需要阅读回执</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 需要回执返回true, 否则返回false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isReplySign</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> replySign = <span class="keyword">false</span>;</span><br><span class="line">        String[] headers = msg.getHeader(<span class="string">&quot;Disposition-Notification-To&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (headers != <span class="keyword">null</span>)</span><br><span class="line">            replySign = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> replySign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件的优先级</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1(High):紧急  3:普通(Normal)  5:低(Low)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPriority</span><span class="params">(MimeMessage msg)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        String priority = <span class="string">&quot;普通&quot;</span>;</span><br><span class="line">        String[] headers = msg.getHeader(<span class="string">&quot;X-Priority&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (headers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String headerPriority = headers[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (headerPriority.indexOf(<span class="string">&quot;1&quot;</span>) != -<span class="number">1</span> || headerPriority.indexOf(<span class="string">&quot;High&quot;</span>) != -<span class="number">1</span>)</span><br><span class="line">                priority = <span class="string">&quot;紧急&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (headerPriority.indexOf(<span class="string">&quot;5&quot;</span>) != -<span class="number">1</span> || headerPriority.indexOf(<span class="string">&quot;Low&quot;</span>) != -<span class="number">1</span>)</span><br><span class="line">                priority = <span class="string">&quot;低&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                priority = <span class="string">&quot;普通&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> priority;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得邮件文本内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> part    邮件体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 存储邮件文本内容的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMailTextContent</span><span class="params">(Part part, StringBuffer content)</span> <span class="keyword">throws</span> MessagingException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//如果是文本类型的附件，通过getContent方法可以取到文本内容，但这不是我们需要的结果，所以在这里要做判断</span></span><br><span class="line">        <span class="keyword">boolean</span> isContainTextAttach = part.getContentType().indexOf(<span class="string">&quot;name&quot;</span>) &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;text/*&quot;</span>) &amp;&amp; !isContainTextAttach) &#123;</span><br><span class="line">            content.append(part.getContent().toString());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;message/rfc822&quot;</span>)) &#123;</span><br><span class="line">            getMailTextContent((Part) part.getContent(), content);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">            Multipart multipart = (Multipart) part.getContent();</span><br><span class="line">            <span class="keyword">int</span> partCount = multipart.getCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partCount; i++) &#123;</span><br><span class="line">                BodyPart bodyPart = multipart.getBodyPart(i);</span><br><span class="line">                getMailTextContent(bodyPart, content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存附件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> part    邮件中多个组合体中的其中一个组合体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destDir 附件保存目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveAttachment</span><span class="params">(Part part, String destDir)</span> <span class="keyword">throws</span> UnsupportedEncodingException, MessagingException,</span></span><br><span class="line"><span class="function">            FileNotFoundException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">            Multipart multipart = (Multipart) part.getContent();    <span class="comment">//复杂体邮件</span></span><br><span class="line">            <span class="comment">//复杂体邮件包含多个邮件体</span></span><br><span class="line">            <span class="keyword">int</span> partCount = multipart.getCount();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; partCount; i++) &#123;</span><br><span class="line">                <span class="comment">//获得复杂体邮件中其中一个邮件体</span></span><br><span class="line">                BodyPart bodyPart = multipart.getBodyPart(i);</span><br><span class="line">                <span class="comment">//某一个邮件体也有可能是由多个邮件体组成的复杂体</span></span><br><span class="line">                String disp = bodyPart.getDisposition();</span><br><span class="line">                <span class="keyword">if</span> (disp != <span class="keyword">null</span> &amp;&amp; (disp.equalsIgnoreCase(Part.ATTACHMENT) || disp.equalsIgnoreCase(Part.INLINE))) &#123;</span><br><span class="line">                    InputStream is = bodyPart.getInputStream();</span><br><span class="line">                    saveFile(is, destDir, decodeText(bodyPart.getFileName()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bodyPart.isMimeType(<span class="string">&quot;multipart/*&quot;</span>)) &#123;</span><br><span class="line">                    saveAttachment(bodyPart, destDir);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String contentType = bodyPart.getContentType();</span><br><span class="line">                    <span class="keyword">if</span> (contentType.indexOf(<span class="string">&quot;name&quot;</span>) != -<span class="number">1</span> || contentType.indexOf(<span class="string">&quot;application&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        saveFile(bodyPart.getInputStream(), destDir, decodeText(bodyPart.getFileName()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">&quot;message/rfc822&quot;</span>)) &#123;</span><br><span class="line">            saveAttachment((Part) part.getContent(), destDir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取输入流中的数据保存至指定目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is       输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destDir  文件存储目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveFile</span><span class="params">(InputStream is, String destDir, String fileName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(is);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(</span><br><span class="line">                <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(destDir + fileName)));</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(len);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本解码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encodeText 解码MimeUtility.encodeText(String text)方法编码后的文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解码后的文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decodeText</span><span class="params">(String encodeText)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (encodeText == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(encodeText)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> MimeUtility.decodeText(encodeText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot-javax获取邮件内容删除邮件-根据时间段筛选邮件筛选时间段未读邮件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#springboot-javax获取邮件内容删除邮件-根据时间段筛选邮件筛选时间段未读邮件&quot;&gt;#&lt;</summary>
      
    
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
    <category term="Email" scheme="https://smile1231.github.io/tags/Email/"/>
    
  </entry>
  
  <entry>
    <title>git项目中统计每个人提交代码行数</title>
    <link href="https://smile1231.github.io/posts/2543b551/"/>
    <id>https://smile1231.github.io/posts/2543b551/</id>
    <published>2022-08-16T13:33:38.000Z</published>
    <updated>2022-08-16T13:39:24.572Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个很有趣的，统计 <code>git</code>  项目中每个人提交代码的行数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --format=&#x27;%aN&#x27; | sort -u | while read name; do echo -en &quot;作者： $name\t&quot;; git log --author=&quot;$name&quot; --pretty=tformat: --numstat | awk &#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;添加行数: %s, 删除的行数: %s, 代码总行数: %s\n&quot;, add, subs, loc &#125;&#x27; -; done</span><br></pre></td></tr></table></figure><img data-src="/posts/2543b551/2022-08-16-21-34-50.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;发现一个很有趣的，统计 &lt;code&gt;git&lt;/code&gt;  项目中每个人提交代码的行数&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;</summary>
      
    
    
    
    <category term="git" scheme="https://smile1231.github.io/categories/git/"/>
    
    
    <category term="git" scheme="https://smile1231.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java通过URL下载资源</title>
    <link href="https://smile1231.github.io/posts/a54ed4b0/"/>
    <id>https://smile1231.github.io/posts/a54ed4b0/</id>
    <published>2022-08-11T04:18:32.000Z</published>
    <updated>2022-08-11T16:25:41.263Z</updated>
    
    <content type="html"><![CDATA[<p>关于如何通过下载 <code>URL</code>  下载网络资源，最近做了一些整理</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL2phdmEtZG93bmxvYWQtZmlsZQ==">参考文章</span></p><p>差不多以下的几个都是可以 <code>work</code>  的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadByUrl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DOWNLOAD_URL = <span class="string">&quot;https://archive.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_NAME = <span class="string">&quot;download_file/maven-3.5.4-bin.tar.gz&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">downloadByJavaIO</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> URL(DOWNLOAD_URL).openStream()))&#123;</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(FILE_NAME);</span><br><span class="line">            <span class="keyword">byte</span>[] dataBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = in.read(dataBuffer,<span class="number">0</span>,<span class="number">1024</span>)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fileOutputStream.write(dataBuffer,<span class="number">0</span>,bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">downloadByJavaIOAndCopy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">new</span> URL(DOWNLOAD_URL).openStream();</span><br><span class="line">        Files.copy(in, Paths.get(FILE_NAME), StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">downloadByNIO</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(FILE_NAME))&#123;</span><br><span class="line">            ReadableByteChannel readableByteChannel = Channels.newChannel(<span class="keyword">new</span> URL(DOWNLOAD_URL).openStream());</span><br><span class="line">            <span class="comment">// get a file channel</span></span><br><span class="line">            ;</span><br><span class="line"><span class="comment">//            FileChannel fileChannel = fileOutputStream.getChannel();</span></span><br><span class="line">            fileOutputStream.getChannel()</span><br><span class="line">                    .transferFrom(readableByteChannel,<span class="number">0</span>,Long.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">downloadByCommonsIO</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileUtils.copyURLToFile(</span><br><span class="line">                <span class="keyword">new</span> URL(DOWNLOAD_URL)</span><br><span class="line">                ,<span class="keyword">new</span> File(FILE_NAME)</span><br><span class="line">                ,<span class="number">1000</span></span><br><span class="line">                ,<span class="number">2000</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于如何通过下载 &lt;code&gt;URL&lt;/code&gt;  下载网络资源，最近做了一些整理&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuYmFlbGR1bmcuY29tL2phdmEtZG93bmxvYWQtZmls</summary>
      
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Dokcer镜像推送到DockerHub</title>
    <link href="https://smile1231.github.io/posts/e2b12017/"/>
    <id>https://smile1231.github.io/posts/e2b12017/</id>
    <published>2022-08-10T16:52:36.000Z</published>
    <updated>2022-08-13T03:20:57.431Z</updated>
    
    <content type="html"><![CDATA[<p>关于推送本地的镜像到 <code>Docker Hub</code>  上</p><p>关于如何制作镜像：<a href="https://smile1231.github.io/posts/11faeb76/">make DockerFile</a></p><h2 id="注册账号"><a class="markdownIt-Anchor" href="#注册账号">#</a> 注册账号</h2><p><span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=">official Website</span></p><p>注册完成之后，进入自己的账户信息页创建 <code>Token</code></p><img data-src="/posts/e2b12017/2022-08-13-10-51-18.png" class=""><h2 id="本地登陆账号"><a class="markdownIt-Anchor" href="#本地登陆账号">#</a> 本地登陆账号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment"># Username: jinmaohub</span></span><br><span class="line"><span class="comment"># Password: $&#123;token&#125;</span></span><br><span class="line"><span class="comment"># Login Successed</span></span><br></pre></td></tr></table></figure><h2 id="推送镜像"><a class="markdownIt-Anchor" href="#推送镜像">#</a> 推送镜像</h2><blockquote><p>get images</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><img data-src="/posts/e2b12017/2022-08-13-10-48-38.png" class=""><blockquote><p>用 <code>docker tag</code>  来进行标记</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag &lt;image-name&gt; &lt;docekerhub-name&gt;/&lt;iamges-name&gt;:&lt;tag-name&gt;</span><br><span class="line"><span class="comment"># docker tag local_vue jinmaohub/local_vue:latest</span></span><br></pre></td></tr></table></figure><blockquote><p>推送 <code>images</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker push &lt;docekerhub-name&gt;/&lt;iamges-name&gt;:&lt;tag-name&gt;</span><br><span class="line"><span class="comment"># docker push jinmaohub/local_hub:latest</span></span><br></pre></td></tr></table></figure><img data-src="/posts/e2b12017/2022-08-13-11-20-34.png" class=""><p>就会发现镜像推送成功了</p><img data-src="/posts/e2b12017/2022-08-13-11-20-56.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于推送本地的镜像到 &lt;code&gt;Docker Hub&lt;/code&gt;  上&lt;/p&gt;
&lt;p&gt;关于如何制作镜像：&lt;a href=&quot;https://smile1231.github.io/posts/11faeb76/&quot;&gt;make DockerFile&lt;/a&gt;&lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    <category term="Docker" scheme="https://smile1231.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://smile1231.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Java 操作Jenkins</title>
    <link href="https://smile1231.github.io/posts/d05062ae/"/>
    <id>https://smile1231.github.io/posts/d05062ae/</id>
    <published>2022-08-10T16:47:15.000Z</published>
    <updated>2022-08-10T16:55:04.963Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamVua2lucy5pby9kb2MvYm9vay91c2luZy9yZW1vdGUtYWNjZXNzLWFwaS8=">Jenkins-WIKI</span></p><p>参考文章: <span class="exturl" data-url="aHR0cDovL3d3dy5teWRscS5jbHViL2FydGljbGUvMjMv">利用 Java 操作 Jenkins API 实现对 Jenkins 的控制详解</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cuamVua2lucy5pby9kb2MvYm9vay91c2luZy9yZW1vdGUtYWNjZXNzLWFwaS8=&quot;&gt;Jenkins-WIKI&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;参</summary>
      
    
    
    
    <category term="Jenkins" scheme="https://smile1231.github.io/categories/Jenkins/"/>
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
    <category term="Jenkins" scheme="https://smile1231.github.io/tags/Jenkins/"/>
    
    <category term="CI/CD" scheme="https://smile1231.github.io/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins/CICD</title>
    <link href="https://smile1231.github.io/posts/171f1b7f/"/>
    <id>https://smile1231.github.io/posts/171f1b7f/</id>
    <published>2022-08-08T14:40:05.000Z</published>
    <updated>2022-08-16T13:39:15.211Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://smile1231.github.io/posts/11faeb76/"> <code>Docker</code>  中安装 <code>Jenkins</code> </a></p><p><a href="https://www.cnblogs.com/yungyu16/p/12928802.html#%E6%93%8D%E4%BD%9C%E4%BB%BB%E5%8A%A1"> <code>Java</code>  操作 <code>Jenkins</code>  参考</a></p><p><span class="exturl" data-url="aHR0cHM6Ly9pY29kZS5iZXN0L2kvODI4MDAwNDYwNDU0MDk=">参考文章</span></p><p>完成 <code>jenkins</code>  在 docker 中的启动安装对应的插件之后</p><p>由于我是使用的 <code>docker</code>  启动的 <code>Jenkins</code> , 所以需要在容器中装相应的环境： <code>jdk</code> , <code>maven</code> , <code>git</code>  等等</p><p>进入容器内部: <code>docker exec -u root -it myJenkins10242 bash</code></p><h2 id="安装vim"><a class="markdownIt-Anchor" href="#安装vim">#</a> 安装 <code>vim</code></h2><blockquote><p>在这之前需要对 <code>apt</code>  进行一下升级</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>安装指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><img data-src="/posts/171f1b7f/2022-08-10-23-41-19.png" class=""><h2 id="安装jdk"><a class="markdownIt-Anchor" href="#安装jdk">#</a> 安装 <code>jdk</code></h2><p>这里只讲解手动安装</p><p>查看架构，下载 arm64 版本的 jdk，这里下载 jdk11，<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UvamRrMTEtYXJjaGl2ZS1kb3dubG9hZHMuaHRtbCNsaWNlbnNlLWxpZ2h0Ym94">jdk 11 aarch64_bin.tar.gz</span></p><img data-src="/posts/171f1b7f/2022-08-10-22-18-27.png" class=""><p>我这边将包放在了 <code>docker</code>  的挂载目录上</p><img data-src="/posts/171f1b7f/2022-08-10-23-52-53.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf jdk-11.0.15_linux-aarch64_bin.tar.gz</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在最后加上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/var/jenkins_home/install_package/jdk-11.0.15/</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>最后： <code>source /etc/profile</code>  即可</p><img data-src="/posts/171f1b7f/2022-08-11-00-02-07.png" class=""><h2 id="安装maven"><a class="markdownIt-Anchor" href="#安装maven">#</a> 安装 <code>maven</code></h2><p>安装 <code>maven</code>  的方法也类似，下载版本为<span class="exturl" data-url="aHR0cHM6Ly9hcmNoaXZlLmFwYWNoZS5vcmcvZGlzdC9tYXZlbi9tYXZlbi0zLzMuNS40L2JpbmFyaWVzL2FwYWNoZS1tYXZlbi0zLjUuNC1iaW4udGFyLmd6"> maven-3.5.4</span></p><p>依然放在了挂在目录中的 <code>install_package</code>  中</p><p>解压： <code>tar -zxvf apache-maven-3.5.4-bin.tar.gz</code></p><p>配置环境变量:  <code>vim /etc/profile</code> <br> 加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MAVEN_HOME=/var/jenkins_home/install_package/apache-maven-3.5.4</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>最后： <code>source /etc/profile</code>  即可</p><img data-src="/posts/171f1b7f/2022-08-11-00-06-59.png" class=""><h2 id="git"><a class="markdownIt-Anchor" href="#git">#</a>  <code>Git</code></h2><p>容器中自带了 <code>git</code> ，所以无需安装，但是需要查看路径:  <code>which git</code> ，路径为： <code>/usr/bin/git</code></p><img data-src="/posts/171f1b7f/2022-08-11-00-10-10.png" class=""><h2 id="配置jenkins"><a class="markdownIt-Anchor" href="#配置jenkins">#</a> 配置 <code>Jenkins</code></h2><p>打开 <code>Global Tool Configuration</code> :</p><img data-src="/posts/171f1b7f/2022-08-11-00-12-49.png" class=""><p>这边是配置 <code>maven</code>  中的 <code>settings</code>  文件地址，我地址为： <code>/var/jenkins_home/install_package/apache-maven-3.5.4/conf/settings.xml</code></p><img data-src="/posts/171f1b7f/2022-08-11-00-15-24.png" class=""><p>分别配置上 <code>jdk</code> , <code>git</code> , <code>maven</code>  的本地目录，然后 <code>Apply</code>  和 <code>Save</code> ：</p><img data-src="/posts/171f1b7f/2022-08-11-00-17-12.png" class=""><img data-src="/posts/171f1b7f/2022-08-11-00-17-47.png" class=""><h2 id="安装plugin"><a class="markdownIt-Anchor" href="#安装plugin">#</a> 安装 <code>plugin</code></h2><p>我们会发现新建一个 <code>Item</code>  是没有 <code>Maven</code>  项目的，需要安装一下对应的插件: <code>Maven Integration</code></p><img data-src="/posts/171f1b7f/2022-08-11-00-20-56.png" class=""><p>等待安装完成即可</p><h2 id="maven项目部署测试"><a class="markdownIt-Anchor" href="#maven项目部署测试">#</a>  <code>Maven</code>  项目部署测试</h2><h3 id="新建一个maven名字自取"><a class="markdownIt-Anchor" href="#新建一个maven名字自取">#</a> 新建一个 <code>Maven</code> ，名字自取</h3><img data-src="/posts/171f1b7f/2022-08-11-00-22-22.png" class=""><h3 id="项目描述"><a class="markdownIt-Anchor" href="#项目描述">#</a> 项目描述：</h3><img data-src="/posts/171f1b7f/2022-08-11-00-26-00.png" class=""><h3 id="配置github"><a class="markdownIt-Anchor" href="#配置github">#</a> 配置 <code>github</code></h3><img data-src="/posts/171f1b7f/2022-08-11-00-29-23.png" class=""><blockquote><p>关于 <code>GitHub</code>  凭证配置</p></blockquote><p>配置地址：  <code>https://github.com/settings/tokens</code></p><img data-src="/posts/171f1b7f/2022-08-11-00-30-37.png" class=""><img data-src="/posts/171f1b7f/2022-08-11-00-31-02.png" class=""><p>将生成的 <code>token</code>  记载到本地</p><img data-src="/posts/171f1b7f/2022-08-11-00-31-43.png" class=""><blockquote><p><code>Jenkins</code>  添加凭据</p></blockquote><img data-src="/posts/171f1b7f/2022-08-11-00-33-43.png" class=""><h3 id="github访问超时时间"><a class="markdownIt-Anchor" href="#github访问超时时间">#</a>  <code>github</code>  访问超时时间</h3><p>检出超时时间：</p><img data-src="/posts/171f1b7f/2022-08-11-00-34-52.png" class=""><p><code>clone</code>  超时时间：</p><img data-src="/posts/171f1b7f/2022-08-11-00-36-01.png" class=""><h3 id="build阶段"><a class="markdownIt-Anchor" href="#build阶段">#</a>  <code>Build</code>  阶段</h3><p><code>clean package -Dmaven.test.skip=true -Prd -U</code></p><img data-src="/posts/171f1b7f/2022-08-11-00-39-04.png" class=""><h3 id="配置构建项目后执行的shell脚本"><a class="markdownIt-Anchor" href="#配置构建项目后执行的shell脚本">#</a> 配置构建项目后执行的 <code>Shell</code>  脚本</h3><img data-src="/posts/171f1b7f/2022-08-11-00-42-20.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#输入Maven打包后的项目名称</span></span><br><span class="line">app=xxx-0.0.1-SNAPSHOT</span><br><span class="line"><span class="comment">#项目移动的目的地址</span></span><br><span class="line">path=/usr/xxx</span><br><span class="line"><span class="built_in">echo</span> this is app : <span class="variable">$app</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若项目已启动，杀死旧进程</span></span><br><span class="line">api_pid=`ps -ef | grep <span class="string">&quot;<span class="variable">$app</span>.jar&quot;</span> | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> api_pid = <span class="variable">$api_pid</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$api_pid</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="built_in">kill</span> api</span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$api_pid</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> sleep 3s</span><br><span class="line">        sleep 1</span><br><span class="line">        <span class="built_in">echo</span> sleep 2s</span><br><span class="line">        sleep 1</span><br><span class="line">        <span class="built_in">echo</span> sleep 1s</span><br><span class="line">        sleep 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将jar包从jenkins工作空间中移动到指定路径下</span></span><br><span class="line">mv /root/.jenkins/workspace/项目名/target/<span class="variable">$app</span>.jar <span class="variable">$path</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#防止进程被杀死</span></span><br><span class="line">BUILD_ID=dontKillMe</span><br><span class="line"></span><br><span class="line"><span class="comment">#后台进程形式启动项目，日志文件为out.log</span></span><br><span class="line">nohup java -jar <span class="variable">$app</span>.jar &gt;&gt; out.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$app</span> start success</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h2 id="jenkins运行"><a class="markdownIt-Anchor" href="#jenkins运行">#</a>  <code>Jenkins</code>  运行</h2><img data-src="/posts/171f1b7f/2022-08-11-00-43-49.png" class=""><img data-src="/posts/171f1b7f/2022-08-11-00-45-15.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://smile1231.github.io/posts/11faeb76/&quot;&gt; &lt;code&gt;Docker&lt;/code&gt;  中安装 &lt;code&gt;Jenkins&lt;/code&gt; &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnb</summary>
      
    
    
    
    <category term="Jenkins" scheme="https://smile1231.github.io/categories/Jenkins/"/>
    
    
    <category term="Jenkins" scheme="https://smile1231.github.io/tags/Jenkins/"/>
    
    <category term="CI/CD" scheme="https://smile1231.github.io/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>速查表</title>
    <link href="https://smile1231.github.io/posts/1b392612/"/>
    <id>https://smile1231.github.io/posts/1b392612/</id>
    <published>2022-07-28T10:19:45.000Z</published>
    <updated>2022-08-01T13:58:55.298Z</updated>
    
    <content type="html"><![CDATA[<p>this is a cheatsheet, is used for get help quickly.</p><img data-src="/posts/1b392612/2022-08-01-21-43-59.png" class=""><h1 id="bash"><a class="markdownIt-Anchor" href="#bash">#</a>  <code>Bash</code></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 常用快捷键（默认使用 Emacs 键位）</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">CTRL+A              <span class="comment"># 移动到行首，同 &lt;Home&gt;</span></span><br><span class="line">CTRL+B              <span class="comment"># 向后移动，同 &lt;Left&gt;</span></span><br><span class="line">CTRL+C              <span class="comment"># 结束当前命令</span></span><br><span class="line">CTRL+D              <span class="comment"># 删除光标前的字符，同 &lt;Delete&gt; ，或者没有内容时，退出会话</span></span><br><span class="line">CTRL+E              <span class="comment"># 移动到行末，同 &lt;End&gt;</span></span><br><span class="line">CTRL+F              <span class="comment"># 向前移动，同 &lt;Right&gt;</span></span><br><span class="line">CTRL+G              <span class="comment"># 退出当前编辑（比如正在 CTRL+R 搜索历史时）</span></span><br><span class="line">CTRL+H              <span class="comment"># 删除光标左边的字符，同 &lt;Backspace&gt;</span></span><br><span class="line">CTRL+K              <span class="comment"># 删除光标位置到行末的内容</span></span><br><span class="line">CTRL+L              <span class="comment"># 清屏并重新显示</span></span><br><span class="line">CTRL+N              <span class="comment"># 移动到命令历史的下一行，同 &lt;Down&gt;</span></span><br><span class="line">CTRL+O              <span class="comment"># 类似回车，但是会显示下一行历史</span></span><br><span class="line">CTRL+P              <span class="comment"># 移动到命令历史的上一行，同 &lt;Up&gt;</span></span><br><span class="line">CTRL+R              <span class="comment"># 历史命令反向搜索，使用 CTRL+G 退出搜索</span></span><br><span class="line">CTRL+S              <span class="comment"># 历史命令正向搜索，使用 CTRL+G 退出搜索</span></span><br><span class="line">CTRL+T              <span class="comment"># 交换前后两个字符</span></span><br><span class="line">CTRL+U              <span class="comment"># 删除字符到行首</span></span><br><span class="line">CTRL+V              <span class="comment"># 输入字符字面量，先按 CTRL+V 再按任意键</span></span><br><span class="line">CTRL+W              <span class="comment"># 删除光标左边的一个单词</span></span><br><span class="line">CTRL+X              <span class="comment"># 列出可能的补全</span></span><br><span class="line">CTRL+Y              <span class="comment"># 粘贴前面 CTRL+u/k/w 删除过的内容</span></span><br><span class="line">CTRL+Z              <span class="comment"># 暂停前台进程返回 bash，需要时可用 fg 将其切换回前台</span></span><br><span class="line">CTRL+_              <span class="comment"># 撤销（undo），有的终端将 CTRL+_ 映射为 CTRL+/ 或 CTRL+7</span></span><br><span class="line"></span><br><span class="line">ALT+b               <span class="comment"># 向后（左边）移动一个单词</span></span><br><span class="line">ALT+d               <span class="comment"># 删除光标后（右边）一个单词</span></span><br><span class="line">ALT+f               <span class="comment"># 向前（右边）移动一个单词</span></span><br><span class="line">ALT+t               <span class="comment"># 交换字符</span></span><br><span class="line">ALT+BACKSPACE       <span class="comment"># 删除光标前面一个单词，类似 CTRL+W，但不影响剪贴板</span></span><br><span class="line"></span><br><span class="line">CTRL+X CTRL+X       <span class="comment"># 连续按两次 CTRL+X，光标在当前位置和行首来回跳转 </span></span><br><span class="line">CTRL+X CTRL+E       <span class="comment"># 用你指定的编辑器，编辑当前命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># BASH 基本操作</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>                <span class="comment"># 退出当前登陆</span></span><br><span class="line">env                 <span class="comment"># 显示环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span>         <span class="comment"># 显示你在使用什么 SHELL</span></span><br><span class="line"></span><br><span class="line">bash                <span class="comment"># 使用 bash，用 exit 返回</span></span><br><span class="line"><span class="built_in">which</span> bash          <span class="comment"># 搜索 $PATH，查找哪个程序对应命令 bash</span></span><br><span class="line">whereis bash        <span class="comment"># 搜索可执行，头文件和帮助信息的位置，使用系统内建数据库</span></span><br><span class="line">whatis bash         <span class="comment"># 查看某个命令的解释，一句话告诉你这是干什么的</span></span><br><span class="line"></span><br><span class="line">clear               <span class="comment"># 清初屏幕内容</span></span><br><span class="line">reset               <span class="comment"># 重置终端（当你不小心 cat 了一个二进制，终端状态乱掉时使用）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 目录操作</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span>                  <span class="comment"># 返回自己 $HOME 目录</span></span><br><span class="line"><span class="built_in">cd</span> &#123;dirname&#125;        <span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">pwd</span>                 <span class="comment"># 显示当前所在目录</span></span><br><span class="line">mkdir &#123;dirname&#125;     <span class="comment"># 创建目录</span></span><br><span class="line">mkdir -p &#123;dirname&#125;  <span class="comment"># 递归创建目录</span></span><br><span class="line"><span class="built_in">pushd</span> &#123;dirname&#125;     <span class="comment"># 目录压栈并进入新目录</span></span><br><span class="line"><span class="built_in">popd</span>                <span class="comment"># 弹出并进入栈顶的目录</span></span><br><span class="line"><span class="built_in">dirs</span> -v             <span class="comment"># 列出当前目录栈</span></span><br><span class="line"><span class="built_in">cd</span> -                <span class="comment"># 回到之前的目录</span></span><br><span class="line"><span class="built_in">cd</span> -&#123;N&#125;             <span class="comment"># 切换到目录栈中的第 N个目录，比如 cd -2 将切换到第二个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">ls                  <span class="comment"># 显示当前目录内容，后面可接目录名：ls &#123;dir&#125; 显示指定目录</span></span><br><span class="line">ls -l               <span class="comment"># 列表方式显示目录内容，包括文件日期，大小，权限等信息</span></span><br><span class="line">ls -1               <span class="comment"># 列表方式显示目录内容，只显示文件名称，减号后面是数字 1</span></span><br><span class="line">ls -a               <span class="comment"># 显示所有文件和目录，包括隐藏文件（.开头的文件/目录名）</span></span><br><span class="line">ln -s &#123;fn&#125; &#123;link&#125;   <span class="comment"># 给指定文件创建一个软链接</span></span><br><span class="line">cp &#123;src&#125; &#123;dest&#125;     <span class="comment"># 拷贝文件，cp -r dir1 dir2 可以递归拷贝（目录）</span></span><br><span class="line">rm &#123;fn&#125;             <span class="comment"># 删除文件，rm -r 递归删除目录，rm -f 强制删除</span></span><br><span class="line">mv &#123;src&#125; &#123;dest&#125;     <span class="comment"># 移动文件，如果 dest 是目录，则移动，是文件名则覆盖</span></span><br><span class="line">touch &#123;fn&#125;          <span class="comment"># 创建或者更新一下制定文件</span></span><br><span class="line">cat &#123;fn&#125;            <span class="comment"># 输出文件原始内容</span></span><br><span class="line">any_cmd &gt; &#123;fn&#125;      <span class="comment"># 执行任意命令并将标准输出重定向到指定文件</span></span><br><span class="line">more &#123;fn&#125;           <span class="comment"># 逐屏显示某文件内容，空格翻页，q 退出</span></span><br><span class="line">less &#123;fn&#125;           <span class="comment"># 更高级点的 more，更多操作，q 退出</span></span><br><span class="line">head &#123;fn&#125;           <span class="comment"># 显示文件头部数行，可用 head -3 abc.txt 显示头三行</span></span><br><span class="line">tail &#123;fn&#125;           <span class="comment"># 显示文件尾部数行，可用 tail -3 abc.txt 显示尾部三行</span></span><br><span class="line">tail -f &#123;fn&#125;        <span class="comment"># 持续显示文件尾部数据，可用于监控日志</span></span><br><span class="line">nano &#123;fn&#125;           <span class="comment"># 使用 nano 编辑器编辑文件</span></span><br><span class="line">vim &#123;fn&#125;            <span class="comment"># 使用 vim 编辑文件</span></span><br><span class="line">diff &#123;f1&#125; &#123;f2&#125;      <span class="comment"># 比较两个文件的内容</span></span><br><span class="line">wc &#123;fn&#125;             <span class="comment"># 统计文件有多少行，多少个单词</span></span><br><span class="line">chmod 644 &#123;fn&#125;      <span class="comment"># 修改文件权限为 644，可以接 -R 对目录循环改权限</span></span><br><span class="line">chgrp group &#123;fn&#125;    <span class="comment"># 修改文件所属的用户组</span></span><br><span class="line">chown user1 &#123;fn&#125;    <span class="comment"># 修改文件所有人为 user1, chown user1:group1 fn 可以修改组</span></span><br><span class="line">file &#123;fn&#125;           <span class="comment"># 检测文件的类型和编码</span></span><br><span class="line">basename &#123;fn&#125;       <span class="comment"># 查看文件的名字（不包括路径）</span></span><br><span class="line">dirname &#123;fn&#125;        <span class="comment"># 查看文件的路径（不包括名字）</span></span><br><span class="line">grep &#123;pat&#125; &#123;fn&#125;     <span class="comment"># 在文件中查找出现过 pat 的内容</span></span><br><span class="line">grep -r &#123;pat&#125; .     <span class="comment"># 在当前目录下递归查找所有出现过 pat 的文件内容</span></span><br><span class="line"><span class="built_in">stat</span> &#123;fn&#125;           <span class="comment"># 显示文件的详细信息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 用户管理</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">whoami              <span class="comment"># 显示我的用户名</span></span><br><span class="line">who                 <span class="comment"># 显示已登陆用户信息，w / who / users 内容略有不同</span></span><br><span class="line">w                   <span class="comment"># 显示已登陆用户信息，w / who / users 内容略有不同</span></span><br><span class="line">users               <span class="comment"># 显示已登陆用户信息，w / who / users 内容略有不同</span></span><br><span class="line">passwd              <span class="comment"># 修改密码，passwd &#123;user&#125; 可以用于 root 修改别人密码</span></span><br><span class="line">finger &#123;user&#125;       <span class="comment"># 显示某用户信息，包括 id, 名字, 登陆状态等</span></span><br><span class="line">adduser &#123;user&#125;      <span class="comment"># 添加用户</span></span><br><span class="line">deluser &#123;user&#125;      <span class="comment"># 删除用户</span></span><br><span class="line">w                   <span class="comment"># 查看谁在线</span></span><br><span class="line">su                  <span class="comment"># 切换到 root 用户</span></span><br><span class="line">su -                <span class="comment"># 切换到 root 用户并登陆（执行登陆脚本）</span></span><br><span class="line">su &#123;user&#125;           <span class="comment"># 切换到某用户</span></span><br><span class="line">su -&#123;user&#125;          <span class="comment"># 切换到某用户并登陆（执行登陆脚本）</span></span><br><span class="line">id &#123;user&#125;           <span class="comment"># 查看用户的 uid，gid 以及所属其他用户组</span></span><br><span class="line">id -u &#123;user&#125;        <span class="comment"># 打印用户 uid</span></span><br><span class="line">id -g &#123;user&#125;        <span class="comment"># 打印用户 gid</span></span><br><span class="line">write &#123;user&#125;        <span class="comment"># 向某用户发送一句消息</span></span><br><span class="line">last                <span class="comment"># 显示最近用户登陆列表</span></span><br><span class="line">last &#123;user&#125;         <span class="comment"># 显示登陆记录</span></span><br><span class="line">lastb               <span class="comment"># 显示失败登陆记录</span></span><br><span class="line">lastlog             <span class="comment"># 显示所有用户的最近登陆记录</span></span><br><span class="line">sudo &#123;<span class="built_in">command</span>&#125;      <span class="comment"># 以 root 权限执行某命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 进程管理</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">ps                        <span class="comment"># 查看当前会话进程</span></span><br><span class="line">ps ax                     <span class="comment"># 查看所有进程，类似 ps -e</span></span><br><span class="line">ps aux                    <span class="comment"># 查看所有进程详细信息，类似 ps -ef</span></span><br><span class="line">ps auxww                  <span class="comment"># 查看所有进程，并且显示进程的完整启动命令</span></span><br><span class="line">ps -u &#123;user&#125;              <span class="comment"># 查看某用户进程</span></span><br><span class="line">ps axjf                   <span class="comment"># 列出进程树</span></span><br><span class="line">ps xjf -u &#123;user&#125;          <span class="comment"># 列出某用户的进程树</span></span><br><span class="line">ps -eo pid,user,<span class="built_in">command</span>   <span class="comment"># 按用户指定的格式查看进程</span></span><br><span class="line">ps aux | grep httpd       <span class="comment"># 查看名为 httpd 的所有进程</span></span><br><span class="line">ps --ppid &#123;pid&#125;           <span class="comment"># 查看父进程为 pid 的所有进程</span></span><br><span class="line">pstree                    <span class="comment"># 树形列出所有进程，pstree 默认一般不带，需安装</span></span><br><span class="line">pstree &#123;user&#125;             <span class="comment"># 进程树列出某用户的进程</span></span><br><span class="line">pstree -u                 <span class="comment"># 树形列出所有进程以及所属用户</span></span><br><span class="line">pgrep &#123;procname&#125;          <span class="comment"># 搜索名字匹配的进程的 pid，比如 pgrep apache2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> &#123;pid&#125;                <span class="comment"># 结束进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 &#123;pid&#125;             <span class="comment"># 强制结束进程，9/SIGKILL 是强制不可捕获结束信号</span></span><br><span class="line"><span class="built_in">kill</span> -KILL &#123;pid&#125;          <span class="comment"># 强制执行进程，kill -9 的另外一种写法</span></span><br><span class="line"><span class="built_in">kill</span> -l                   <span class="comment"># 查看所有信号</span></span><br><span class="line"><span class="built_in">kill</span> -l TERM              <span class="comment"># 查看 TERM 信号的编号</span></span><br><span class="line">killall &#123;procname&#125;        <span class="comment"># 按名称结束所有进程</span></span><br><span class="line">pkill &#123;procname&#125;          <span class="comment"># 按名称结束进程，除名称外还可以有其他参数</span></span><br><span class="line"></span><br><span class="line">top                       <span class="comment"># 查看最活跃的进程</span></span><br><span class="line">top -u &#123;user&#125;             <span class="comment"># 查看某用户最活跃的进程</span></span><br><span class="line"></span><br><span class="line">any_command &amp;             <span class="comment"># 在后台运行某命令，也可用 CTRL+Z 将当前进程挂到后台</span></span><br><span class="line"><span class="built_in">jobs</span>                      <span class="comment"># 查看所有后台进程（jobs）</span></span><br><span class="line"><span class="built_in">bg</span>                        <span class="comment"># 查看后台进程，并切换过去</span></span><br><span class="line"><span class="built_in">fg</span>                        <span class="comment"># 切换后台进程到前台</span></span><br><span class="line"><span class="built_in">fg</span> &#123;job&#125;                  <span class="comment"># 切换特定后台进程到前台</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> cmd sig1 sig2        <span class="comment"># 在脚本中设置信号处理命令</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;&quot;</span> sig1 sig2         <span class="comment"># 在脚本中屏蔽某信号</span></span><br><span class="line"><span class="built_in">trap</span> - sig1 sig2          <span class="comment"># 恢复默认信号处理行为</span></span><br><span class="line"></span><br><span class="line">nohup &#123;<span class="built_in">command</span>&#125;           <span class="comment"># 长期运行某程序，在你退出登陆都保持它运行</span></span><br><span class="line">nohup &#123;<span class="built_in">command</span>&#125; &amp;         <span class="comment"># 在后台长期运行某程序</span></span><br><span class="line"><span class="built_in">disown</span> &#123;PID|JID&#125;          <span class="comment"># 将进程从后台任务列表（jobs）移除</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span>                      <span class="comment"># 等待所有后台进程任务结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 常用命令：SSH / 系统信息 / 网络</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">ssh user@host             <span class="comment"># 以用户 user 登陆到远程主机 host</span></span><br><span class="line">ssh -p &#123;port&#125; user@host   <span class="comment"># 指定端口登陆主机</span></span><br><span class="line">ssh-copy-id user@host     <span class="comment"># 拷贝你的 ssh key 到远程主机，避免重复输入密码</span></span><br><span class="line">scp &#123;fn&#125; user@host:path   <span class="comment"># 拷贝文件到远程主机</span></span><br><span class="line">scp user@host:path dest   <span class="comment"># 从远程主机拷贝文件回来</span></span><br><span class="line">scp -P &#123;port&#125; ...         <span class="comment"># 指定端口远程拷贝文件</span></span><br><span class="line"></span><br><span class="line">uname -a                  <span class="comment"># 查看内核版本等信息</span></span><br><span class="line">man &#123;<span class="built_in">help</span>&#125;                <span class="comment"># 查看帮助</span></span><br><span class="line">man -k &#123;keyword&#125;          <span class="comment"># 查看哪些帮助文档里包含了该关键字</span></span><br><span class="line">info &#123;<span class="built_in">help</span>&#125;               <span class="comment"># 查看 info pages，比 man 更强的帮助系统</span></span><br><span class="line">uptime                    <span class="comment"># 查看系统启动时间</span></span><br><span class="line">date                      <span class="comment"># 显示日期</span></span><br><span class="line">cal                       <span class="comment"># 显示日历</span></span><br><span class="line">vmstat                    <span class="comment"># 显示内存和 CPU 使用情况</span></span><br><span class="line">vmstat 10                 <span class="comment"># 每 10 秒打印一行内存和 CPU情况，CTRL+C 退出</span></span><br><span class="line">free                      <span class="comment"># 显示内存和交换区使用情况</span></span><br><span class="line">df                        <span class="comment"># 显示磁盘使用情况</span></span><br><span class="line">du                        <span class="comment"># 显示当前目录占用，du . --max-depth=2 可以指定深度</span></span><br><span class="line">uname                     <span class="comment"># 显示系统版本号</span></span><br><span class="line">hostname                  <span class="comment"># 显示主机名称</span></span><br><span class="line">showkey -a                <span class="comment"># 查看终端发送的按键编码</span></span><br><span class="line"></span><br><span class="line">ping &#123;host&#125;               <span class="comment"># ping 远程主机并显示结果，CTRL+C 退出</span></span><br><span class="line">ping -c N &#123;host&#125;          <span class="comment"># ping 远程主机 N 次</span></span><br><span class="line">traceroute &#123;host&#125;         <span class="comment"># 侦测路由连通情况</span></span><br><span class="line">mtr &#123;host&#125;                <span class="comment"># 高级版本 traceroute</span></span><br><span class="line">host &#123;domain&#125;             <span class="comment"># DNS 查询，&#123;domain&#125; 前面可加 -a 查看详细信息</span></span><br><span class="line">whois &#123;domain&#125;            <span class="comment"># 取得域名 whois 信息</span></span><br><span class="line">dig &#123;domain&#125;              <span class="comment"># 取得域名 dns 信息</span></span><br><span class="line">route -n                  <span class="comment"># 查看路由表</span></span><br><span class="line">netstat -a                <span class="comment"># 列出所有端口</span></span><br><span class="line">netstat -an               <span class="comment"># 查看所有连接信息，不解析域名</span></span><br><span class="line">netstat -anp              <span class="comment"># 查看所有连接信息，包含进程信息（需要 sudo）</span></span><br><span class="line">netstat -l                <span class="comment"># 查看所有监听的端口</span></span><br><span class="line">netstat -t                <span class="comment"># 查看所有 TCP 链接</span></span><br><span class="line">netstat -lntu             <span class="comment"># 显示所有正在监听的 TCP 和 UDP 信息</span></span><br><span class="line">netstat -lntup            <span class="comment"># 显示所有正在监听的 socket 及进程信息</span></span><br><span class="line">netstat -i                <span class="comment"># 显示网卡信息</span></span><br><span class="line">netstat -rn               <span class="comment"># 显示当前系统路由表，同 route -n</span></span><br><span class="line">ss -an                    <span class="comment"># 比 netstat -an 更快速更详细</span></span><br><span class="line">ss -s                     <span class="comment"># 统计 TCP 的 established, wait 等</span></span><br><span class="line"></span><br><span class="line">wget &#123;url&#125;                <span class="comment"># 下载文件，可加 --no-check-certificate 忽略 ssl 验证</span></span><br><span class="line">wget -qO- &#123;url&#125;           <span class="comment"># 下载文件并输出到标准输出（不保存）</span></span><br><span class="line">curl -sL &#123;url&#125;            <span class="comment"># 同 wget -qO- &#123;url&#125; 没有 wget 的时候使用</span></span><br><span class="line"></span><br><span class="line">sz &#123;file&#125;                 <span class="comment"># 发送文件到终端，zmodem 协议</span></span><br><span class="line">rz                        <span class="comment"># 接收终端发送过来的文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 变量操作</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">varname=value             <span class="comment"># 定义变量</span></span><br><span class="line">varname=value <span class="built_in">command</span>     <span class="comment"># 定义子进程变量并执行子进程</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$varname</span>             <span class="comment"># 查看变量内容</span></span><br><span class="line"><span class="built_in">echo</span> $$                   <span class="comment"># 查看当前 shell 的进程号</span></span><br><span class="line"><span class="built_in">echo</span> $!                   <span class="comment"># 查看最近调用的后台任务进程号</span></span><br><span class="line"><span class="built_in">echo</span> $?                   <span class="comment"># 查看最近一条命令的返回码</span></span><br><span class="line"><span class="built_in">export</span> VARNAME=value      <span class="comment"># 设置环境变量（将会影响到子进程）</span></span><br><span class="line"></span><br><span class="line">array[0]=valA             <span class="comment"># 定义数组</span></span><br><span class="line">array[1]=valB</span><br><span class="line">array[2]=valC</span><br><span class="line">array=([0]=valA [1]=valB [2]=valC)   <span class="comment"># 另一种方式</span></span><br><span class="line">array=(valA valB valC)               <span class="comment"># 另一种方式</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;array[i]&#125;</span>               <span class="comment"># 取得数组中的元素</span></span><br><span class="line"><span class="variable">$&#123;#array[@]&#125;</span>              <span class="comment"># 取得数组的长度</span></span><br><span class="line"><span class="variable">$&#123;#array[i]&#125;</span>              <span class="comment"># 取得数组中某个变量的长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">declare</span> -a                <span class="comment"># 查看所有数组</span></span><br><span class="line"><span class="built_in">declare</span> -f                <span class="comment"># 查看所有函数</span></span><br><span class="line"><span class="built_in">declare</span> -F                <span class="comment"># 查看所有函数，仅显示函数名</span></span><br><span class="line"><span class="built_in">declare</span> -i                <span class="comment"># 查看所有整数</span></span><br><span class="line"><span class="built_in">declare</span> -r                <span class="comment"># 查看所有只读变量</span></span><br><span class="line"><span class="built_in">declare</span> -x                <span class="comment"># 查看所有被导出成环境变量的东西</span></span><br><span class="line"><span class="built_in">declare</span> -p varname        <span class="comment"># 输出变量是怎么定义的（类型+值）</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;varname:-word&#125;</span>          <span class="comment"># 如果变量不为空则返回变量，否则返回 word</span></span><br><span class="line"><span class="variable">$&#123;varname:=word&#125;</span>          <span class="comment"># 如果变量不为空则返回变量，否则赋值成 word 并返回</span></span><br><span class="line"><span class="variable">$&#123;varname:?message&#125;</span>       <span class="comment"># 如果变量不为空则返回变量，否则打印错误信息并退出</span></span><br><span class="line"><span class="variable">$&#123;varname:+word&#125;</span>          <span class="comment"># 如果变量不为空则返回 word，否则返回 null</span></span><br><span class="line"><span class="variable">$&#123;varname:offset:len&#125;</span>     <span class="comment"># 取得字符串的子字符串</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;variable#pattern&#125;</span>       <span class="comment"># 如果变量头部匹配 pattern，则删除最小匹配部分返回剩下的</span></span><br><span class="line"><span class="variable">$&#123;variable##pattern&#125;</span>      <span class="comment"># 如果变量头部匹配 pattern，则删除最大匹配部分返回剩下的</span></span><br><span class="line"><span class="variable">$&#123;variable%pattern&#125;</span>       <span class="comment"># 如果变量尾部匹配 pattern，则删除最小匹配部分返回剩下的</span></span><br><span class="line"><span class="variable">$&#123;variable%%pattern&#125;</span>      <span class="comment"># 如果变量尾部匹配 pattern，则删除最大匹配部分返回剩下的</span></span><br><span class="line"><span class="variable">$&#123;variable/pattern/str&#125;</span>   <span class="comment"># 将变量中第一个匹配 pattern 的替换成 str，并返回</span></span><br><span class="line"><span class="variable">$&#123;variable//pattern/str&#125;</span>  <span class="comment"># 将变量中所有匹配 pattern 的地方替换成 str 并返回</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;#varname&#125;</span>               <span class="comment"># 返回字符串长度</span></span><br><span class="line"></span><br><span class="line">*(patternlist)            <span class="comment"># 零次或者多次匹配</span></span><br><span class="line">+(patternlist)            <span class="comment"># 一次或者多次匹配</span></span><br><span class="line">?(patternlist)            <span class="comment"># 零次或者一次匹配</span></span><br><span class="line">@(patternlist)            <span class="comment"># 单词匹配</span></span><br><span class="line">!(patternlist)            <span class="comment"># 不匹配</span></span><br><span class="line"></span><br><span class="line">array=(<span class="variable">$text</span>)             <span class="comment"># 按空格分隔 text 成数组，并赋值给变量</span></span><br><span class="line">IFS=<span class="string">&quot;/&quot;</span> array=(<span class="variable">$text</span>)     <span class="comment"># 按斜杆分隔字符串 text 成数组，并赋值给变量</span></span><br><span class="line">text=<span class="string">&quot;<span class="variable">$&#123;array[*]&#125;</span>&quot;</span>        <span class="comment"># 用空格链接数组并赋值给变量</span></span><br><span class="line">text=$(IFS=/; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;array[*]&#125;</span>&quot;</span>)  <span class="comment"># 用斜杠链接数组并赋值给变量</span></span><br><span class="line"></span><br><span class="line">A=( foo bar <span class="string">&quot;a  b c&quot;</span> 42 ) <span class="comment"># 数组定义</span></span><br><span class="line">B=(<span class="string">&quot;<span class="variable">$&#123;A[@]:1:2&#125;</span>&quot;</span>)         <span class="comment"># 数组切片：B=( bar &quot;a  b c&quot; )</span></span><br><span class="line">C=(<span class="string">&quot;<span class="variable">$&#123;A[@]:1&#125;</span>&quot;</span>)           <span class="comment"># 数组切片：C=( bar &quot;a  b c&quot; 42 )</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;B[@]&#125;</span>&quot;</span>            <span class="comment"># bar a  b c</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;B[1]&#125;</span>&quot;</span>            <span class="comment"># a  b c</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;C[@]&#125;</span>&quot;</span>            <span class="comment"># bar a  b c 42</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;C[@]: -2:2&#125;</span>&quot;</span>      <span class="comment"># a  b c 42  减号前的空格是必须的</span></span><br><span class="line"></span><br><span class="line">$(UNIX <span class="built_in">command</span>)           <span class="comment"># 运行命令，并将标准输出内容捕获并返回</span></span><br><span class="line">varname=$(id -u user)     <span class="comment"># 将用户名为 user 的 uid 赋值给 varname 变量</span></span><br><span class="line"></span><br><span class="line">num=$(expr 1 + 2)         <span class="comment"># 兼容 posix sh 的计算，使用 expr 命令计算结果</span></span><br><span class="line">num=$(expr <span class="variable">$num</span> + 1)      <span class="comment"># 数字自增</span></span><br><span class="line">expr 2 \* \( 2 + 3 \)     <span class="comment"># 兼容 posix sh 的复杂计算，输出 10</span></span><br><span class="line"></span><br><span class="line">num=$((<span class="number">1</span> + <span class="number">2</span>))            <span class="comment"># 计算 1+2 赋值给 num，使用 bash 独有的 $((..)) 计算</span></span><br><span class="line">num=$((<span class="variable">$num</span> + <span class="number">1</span>))         <span class="comment"># 变量递增</span></span><br><span class="line">num=$((num + <span class="number">1</span>))          <span class="comment"># 变量递增，双括号内的 $ 可以省略</span></span><br><span class="line">num=$((<span class="number">1</span> + (<span class="number">2</span> + <span class="number">3</span>) * <span class="number">2</span>))  <span class="comment"># 复杂计算</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 事件指示符</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">!!                  <span class="comment"># 上一条命令</span></span><br><span class="line">!^                  <span class="comment"># 上一条命令的第一个单词</span></span><br><span class="line">!:n                 <span class="comment"># 上一条命令的第n个单词</span></span><br><span class="line">!:n-$               <span class="comment"># 上一条命令的第n个单词到最后一个单词</span></span><br><span class="line">!$                  <span class="comment"># 上一条命令的最后一个单词</span></span><br><span class="line">!-n:$               <span class="comment"># 上n条命令的最后一个单词</span></span><br><span class="line">!string             <span class="comment"># 最近一条包含string的命令</span></span><br><span class="line">!^string1^string2   <span class="comment"># 最近一条包含string1的命令, 快速替换string1为string2</span></span><br><span class="line">!<span class="comment">#                  # 本条命令之前所有的输入内容</span></span><br><span class="line">!<span class="comment">#:n                # 本条命令之前的第n个单词, 快速备份cp /etc/passwd !#:1.bak</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个新函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">myfunc</span></span>() &#123;</span><br><span class="line">    <span class="comment"># $1 代表第一个参数，$N 代表第 N 个参数</span></span><br><span class="line">    <span class="comment"># $# 代表参数个数</span></span><br><span class="line">    <span class="comment"># $0 代表被调用者自身的名字</span></span><br><span class="line">    <span class="comment"># $@ 代表所有参数，类型是个数组，想传递所有参数给其他命令用 cmd &quot;$@&quot; </span></span><br><span class="line">    <span class="comment"># $* 空格链接起来的所有参数，类型是字符串</span></span><br><span class="line">    &#123;shell commands ...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myfunc                    <span class="comment"># 调用函数 myfunc </span></span><br><span class="line">myfunc arg1 arg2 arg3     <span class="comment"># 带参数的函数调用</span></span><br><span class="line">myfunc <span class="string">&quot;<span class="variable">$@</span>&quot;</span>               <span class="comment"># 将所有参数传递给函数</span></span><br><span class="line">myfunc <span class="string">&quot;<span class="variable">$&#123;array[@]&#125;</span>&quot;</span>      <span class="comment"># 将一个数组当作多个参数传递给函数</span></span><br><span class="line"><span class="built_in">shift</span>                     <span class="comment"># 参数左移</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> -f myfunc           <span class="comment"># 删除函数</span></span><br><span class="line"><span class="built_in">declare</span> -f                <span class="comment"># 列出函数定义</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 条件判断（兼容 posix sh 的条件判断）：man test</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">statement1 &amp;&amp; statement2  <span class="comment"># and 操作符</span></span><br><span class="line">statement1 || statement2  <span class="comment"># or 操作符</span></span><br><span class="line"></span><br><span class="line">exp1 -a exp2              <span class="comment"># exp1 和 exp2 同时为真时返回真（POSIX XSI扩展）</span></span><br><span class="line">exp1 -o exp2              <span class="comment"># exp1 和 exp2 有一个为真就返回真（POSIX XSI扩展）</span></span><br><span class="line">( expression )            <span class="comment"># 如果 expression 为真时返回真，输入注意括号前反斜杆</span></span><br><span class="line">! expression              <span class="comment"># 如果 expression 为假那返回真</span></span><br><span class="line"></span><br><span class="line">str1 = str2               <span class="comment"># 判断字符串相等，如 [ &quot;$x&quot; = &quot;$y&quot; ] &amp;&amp; echo yes</span></span><br><span class="line">str1 != str2              <span class="comment"># 判断字符串不等，如 [ &quot;$x&quot; != &quot;$y&quot; ] &amp;&amp; echo yes</span></span><br><span class="line">str1 &lt; str2               <span class="comment"># 字符串小于，如 [ &quot;$x&quot; \&lt; &quot;$y&quot; ] &amp;&amp; echo yes</span></span><br><span class="line">str2 &gt; str2               <span class="comment"># 字符串大于，注意 &lt; 或 &gt; 是字面量，输入时要加反斜杆</span></span><br><span class="line">-n str1                   <span class="comment"># 判断字符串不为空（长度大于零）</span></span><br><span class="line">-z str1                   <span class="comment"># 判断字符串为空（长度等于零）</span></span><br><span class="line"></span><br><span class="line">-a file                   <span class="comment"># 判断文件存在，如 [ -a /tmp/abc ] &amp;&amp; echo &quot;exists&quot;</span></span><br><span class="line">-d file                   <span class="comment"># 判断文件存在，且该文件是一个目录</span></span><br><span class="line">-e file                   <span class="comment"># 判断文件存在，和 -a 等价</span></span><br><span class="line">-f file                   <span class="comment"># 判断文件存在，且该文件是一个普通文件（非目录等）</span></span><br><span class="line">-r file                   <span class="comment"># 判断文件存在，且可读</span></span><br><span class="line">-s file                   <span class="comment"># 判断文件存在，且尺寸大于0</span></span><br><span class="line">-w file                   <span class="comment"># 判断文件存在，且可写</span></span><br><span class="line">-x file                   <span class="comment"># 判断文件存在，且执行</span></span><br><span class="line">-N file                   <span class="comment"># 文件上次修改过后还没有读取过</span></span><br><span class="line">-O file                   <span class="comment"># 文件存在且属于当前用户</span></span><br><span class="line">-G file                   <span class="comment"># 文件存在且匹配你的用户组</span></span><br><span class="line">file1 -nt file2           <span class="comment"># 文件1 比 文件2 新</span></span><br><span class="line">file1 -ot file2           <span class="comment"># 文件1 比 文件2 旧</span></span><br><span class="line"></span><br><span class="line">num1 -eq num2             <span class="comment"># 数字判断：num1 == num2</span></span><br><span class="line">num1 -ne num2             <span class="comment"># 数字判断：num1 != num2</span></span><br><span class="line">num1 -lt num2             <span class="comment"># 数字判断：num1 &lt; num2</span></span><br><span class="line">num1 -le num2             <span class="comment"># 数字判断：num1 &lt;= num2</span></span><br><span class="line">num1 -gt num2             <span class="comment"># 数字判断：num1 &gt; num2</span></span><br><span class="line">num1 -ge num2             <span class="comment"># 数字判断：num1 &gt;= num2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 分支控制：if 和经典 test，兼容 posix sh 的条件判断语句</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> &#123;expression&#125;         <span class="comment"># 判断条件为真的话 test 程序返回0 否则非零</span></span><br><span class="line">[ expression ]            <span class="comment"># 判断条件为真的话返回0 否则非零</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> <span class="string">&quot;abc&quot;</span> = <span class="string">&quot;def&quot;</span>        <span class="comment"># 查看返回值 echo $? 显示 1，因为条件为假</span></span><br><span class="line"><span class="built_in">test</span> <span class="string">&quot;abc&quot;</span> != <span class="string">&quot;def&quot;</span>       <span class="comment"># 查看返回值 echo $? 显示 0，因为条件为真</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -a /tmp; <span class="built_in">echo</span> $?     <span class="comment"># 调用 test 判断 /tmp 是否存在，并打印 test 的返回值</span></span><br><span class="line">[ -a /tmp ]; <span class="built_in">echo</span> $?      <span class="comment"># 和上面完全等价，/tmp 肯定是存在的，所以输出是 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> cond &amp;&amp; cmd1         <span class="comment"># 判断条件为真时执行 cmd1</span></span><br><span class="line">[ cond ] &amp;&amp; cmd1          <span class="comment"># 和上面完全等价</span></span><br><span class="line">[ cond ] &amp;&amp; cmd1 || cmd2  <span class="comment"># 条件为真执行 cmd1 否则执行 cmd2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断 /etc/passwd 文件是否存在</span></span><br><span class="line"><span class="comment"># 经典的 if 语句就是判断后面的命令返回值为0的话，认为条件为真，否则为假</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e /etc/passwd; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;alright it exists ... &quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;it doesn&#x27;t exist ... &quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 和上面完全等价，[ 是个和 test 一样的可执行程序，但最后一个参数必须为 ]</span></span><br><span class="line"><span class="comment"># 这个名字为 &quot;[&quot; 的可执行程序一般就在 /bin 或 /usr/bin 下面，比 test 优雅些</span></span><br><span class="line"><span class="keyword">if</span> [ -e /etc/passwd ]; <span class="keyword">then</span>   </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;alright it exists ... &quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;it doesn&#x27;t exist ... &quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 和上面两个完全等价，其实到 bash 时代 [ 已经是内部命令了，用 enable 可以看到</span></span><br><span class="line">[ -e /etc/passwd ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;alright it exists&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;it doesn&#x27;t exist&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断变量的值</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$varname</span>&quot;</span> = <span class="string">&quot;foo&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is foo&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$varname</span>&quot;</span> = <span class="string">&quot;bar&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;this is bar&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;neither&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂条件判断，注意 || 和 &amp;&amp; 是完全兼容 POSIX 的推荐写法</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$x</span> -gt 10 ] &amp;&amp; [ <span class="variable">$x</span> -lt 20 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;yes, between 10 and 20&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用 &amp;&amp; 命令连接符来做和上面完全等价的事情</span></span><br><span class="line">[ <span class="variable">$x</span> -gt 10 ] &amp;&amp; [ <span class="variable">$x</span> -lt 20 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;yes, between 10 and 20&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小括号和 -a -o 是 POSIX XSI 扩展写法，小括号是字面量，输入时前面要加反斜杆</span></span><br><span class="line"><span class="keyword">if</span> [ \( <span class="variable">$x</span> -gt 10 \) -a \( <span class="variable">$x</span> -lt 20 \) ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;yes, between 10 and 20&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样可以用 &amp;&amp; 命令连接符来做和上面完全等价的事情</span></span><br><span class="line">[ \( <span class="variable">$x</span> -gt 10 \) -a \( <span class="variable">$x</span> -lt 20 \) ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;yes, between 10 and 20&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断程序存在的话就执行</span></span><br><span class="line">[ -x /bin/ls ] &amp;&amp; /bin/ls -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不考虑兼容 posix sh 和 dash 这些的话，可用 bash 独有的 ((..)) 和 [[..]]:</span></span><br><span class="line">https://www.ibm.com/developerworks/library/l-bash-test/index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 流程控制：while / for / case / until </span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while 循环</span></span><br><span class="line"><span class="keyword">while</span> condition; <span class="keyword">do</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 10 ]; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span>; </span><br><span class="line">    i=$(expr <span class="variable">$i</span> + 1)</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for 循环：上面的 while 语句等价</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name [<span class="keyword">in</span> list]; <span class="keyword">do</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for 列举某目录下面的所有文件</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> /home/*; <span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$f</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bash 独有的 (( .. )) 语句，更接近 C 语言，但是不兼容 posix sh</span></span><br><span class="line"><span class="keyword">for</span> (( initialisation ; ending condition ; update )); <span class="keyword">do</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 和上面的写法等价</span></span><br><span class="line"><span class="keyword">for</span> ((i = 0; i &lt; 10; i++)); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case 判断</span></span><br><span class="line"><span class="keyword">case</span> expression <span class="keyword">in</span> </span><br><span class="line">    pattern1 )</span><br><span class="line">        statements ;;</span><br><span class="line">    pattern2 )</span><br><span class="line">        statements ;;</span><br><span class="line">    * )</span><br><span class="line">        otherwise ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># until 语句</span></span><br><span class="line">until condition; <span class="keyword">do</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select 语句</span></span><br><span class="line">select name [<span class="keyword">in</span> list]; <span class="keyword">do</span></span><br><span class="line">  statements that can use <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 命令处理</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span> ls                         <span class="comment"># 忽略 alias 直接执行程序或者内建命令 ls</span></span><br><span class="line"><span class="built_in">builtin</span> <span class="built_in">cd</span>                         <span class="comment"># 忽略 alias 直接运行内建的 cd 命令</span></span><br><span class="line"><span class="built_in">enable</span>                             <span class="comment"># 列出所有 bash 内置命令，或禁止某命令</span></span><br><span class="line"><span class="built_in">help</span> &#123;builtin_command&#125;             <span class="comment"># 查看内置命令的帮助（仅限 bash 内置命令）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$script</span>                       <span class="comment"># 对 script 变量中的字符串求值（执行）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 输出/输入 重定向</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">cmd1 | cmd2                        <span class="comment"># 管道，cmd1 的标准输出接到 cmd2 的标准输入</span></span><br><span class="line">&lt; file                             <span class="comment"># 将文件内容重定向为命令的标准输入</span></span><br><span class="line">&gt; file                             <span class="comment"># 将命令的标准输出重定向到文件，会覆盖文件</span></span><br><span class="line">&gt;&gt; file                            <span class="comment"># 将命令的标准输出重定向到文件，追加不覆盖</span></span><br><span class="line">&gt;| file                            <span class="comment"># 强制输出到文件，即便设置过：set -o noclobber</span></span><br><span class="line">n&gt;| file                           <span class="comment"># 强制将文件描述符 n的输出重定向到文件</span></span><br><span class="line">&lt;&gt; file                            <span class="comment"># 同时使用该文件作为标准输入和标准输出</span></span><br><span class="line">n&lt;&gt; file                           <span class="comment"># 同时使用文件作为文件描述符 n 的输出和输入</span></span><br><span class="line">n&gt; file                            <span class="comment"># 重定向文件描述符 n 的输出到文件</span></span><br><span class="line">n&lt; file                            <span class="comment"># 重定向文件描述符 n 的输入为文件内容</span></span><br><span class="line">n&gt;&amp;                                <span class="comment"># 将标准输出 dup/合并 到文件描述符 n</span></span><br><span class="line">n&lt;&amp;                                <span class="comment"># 将标准输入 dump/合并 定向为描述符 n</span></span><br><span class="line">n&gt;&amp;m                               <span class="comment"># 文件描述符 n 被作为描述符 m 的副本，输出用</span></span><br><span class="line">n&lt;&amp;m                               <span class="comment"># 文件描述符 n 被作为描述符 m 的副本，输入用</span></span><br><span class="line">&amp;&gt;file                             <span class="comment"># 将标准输出和标准错误重定向到文件</span></span><br><span class="line">&lt;&amp;-                                <span class="comment"># 关闭标准输入</span></span><br><span class="line">&gt;&amp;-                                <span class="comment"># 关闭标准输出</span></span><br><span class="line">n&gt;&amp;-                               <span class="comment"># 关闭作为输出的文件描述符 n</span></span><br><span class="line">n&lt;&amp;-                               <span class="comment"># 关闭作为输入的文件描述符 n</span></span><br><span class="line">diff &lt;(cmd1) &lt;(cmd2)               <span class="comment"># 比较两个命令的输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 文本处理 - cut</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">cut -c 1-16                        <span class="comment"># 截取每行头16个字符</span></span><br><span class="line">cut -c 1-16 file                   <span class="comment"># 截取指定文件中每行头 16个字符</span></span><br><span class="line">cut -c3-                           <span class="comment"># 截取每行从第三个字符开始到行末的内容</span></span><br><span class="line">cut -d<span class="string">&#x27;:&#x27;</span> -f5                      <span class="comment"># 截取用冒号分隔的第五列内容</span></span><br><span class="line">cut -d<span class="string">&#x27;;&#x27;</span> -f2,10                   <span class="comment"># 截取用分号分隔的第二和第十列内容</span></span><br><span class="line">cut -d<span class="string">&#x27; &#x27;</span> -f3-7                    <span class="comment"># 截取空格分隔的三到七列</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> | cut -c1-3           <span class="comment"># 显示 hel</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello sir&quot;</span> | cut -d<span class="string">&#x27; &#x27;</span> -f2   <span class="comment"># 显示 sir</span></span><br><span class="line">ps | tr -s <span class="string">&quot; &quot;</span> | cut -d <span class="string">&quot; &quot;</span> -f 2,3,4  <span class="comment"># cut 搭配 tr 压缩字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 文本处理 - awk / sed </span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> file              <span class="comment"># 打印文件中以空格分隔的第五列</span></span><br><span class="line">awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $5&#125;&#x27;</span> file       <span class="comment"># 打印文件中以逗号分隔的第五列</span></span><br><span class="line">awk <span class="string">&#x27;/str/ &#123;print $2&#125;&#x27;</span> file        <span class="comment"># 打印文件中包含 str 的所有行的第二列</span></span><br><span class="line">awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span> file      <span class="comment"># 打印逗号分隔的文件中的每行最后一列 </span></span><br><span class="line">awk <span class="string">&#x27;&#123;s+=$1&#125; END &#123;print s&#125;&#x27;</span> file   <span class="comment"># 计算所有第一列的合</span></span><br><span class="line">awk <span class="string">&#x27;NR%3==1&#x27;</span> file                 <span class="comment"># 从第一行开始，每隔三行打印一行</span></span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;s/find/replace/&#x27;</span> file         <span class="comment"># 替换文件中首次出现的字符串并输出结果 </span></span><br><span class="line">sed <span class="string">&#x27;10s/find/replace/&#x27;</span> file       <span class="comment"># 替换文件第 10 行内容</span></span><br><span class="line">sed <span class="string">&#x27;10,20s/find/replace/&#x27;</span> file    <span class="comment"># 替换文件中 10-20 行内容</span></span><br><span class="line">sed -r <span class="string">&#x27;s/regex/replace/g&#x27;</span> file    <span class="comment"># 替换文件中所有出现的字符串</span></span><br><span class="line">sed -i <span class="string">&#x27;s/find/replace/g&#x27;</span> file     <span class="comment"># 替换文件中所有出现的字符并且覆盖文件</span></span><br><span class="line">sed -i <span class="string">&#x27;/find/i\newline&#x27;</span> file      <span class="comment"># 在文件的匹配文本前插入行</span></span><br><span class="line">sed -i <span class="string">&#x27;/find/a\newline&#x27;</span> file      <span class="comment"># 在文件的匹配文本后插入行</span></span><br><span class="line">sed <span class="string">&#x27;/line/s/find/replace/&#x27;</span> file   <span class="comment"># 先搜索行特征再执行替换</span></span><br><span class="line">sed -e <span class="string">&#x27;s/f/r/&#x27;</span> -e <span class="string">&#x27;s/f/r&#x27;</span> file    <span class="comment"># 执行多次替换</span></span><br><span class="line">sed <span class="string">&#x27;s#find#replace#&#x27;</span> file         <span class="comment"># 使用 # 替换 / 来避免 pattern 中有斜杆</span></span><br><span class="line">sed -i -r <span class="string">&#x27;s/^\s+//g&#x27;</span> file         <span class="comment"># 删除文件每行头部空格</span></span><br><span class="line">sed <span class="string">&#x27;/^$/d&#x27;</span> file                   <span class="comment"># 删除文件空行并打印</span></span><br><span class="line">sed -i <span class="string">&#x27;s/\s\+$//&#x27;</span> file            <span class="comment"># 删除文件每行末尾多余空格</span></span><br><span class="line">sed -n <span class="string">&#x27;2p&#x27;</span> file                   <span class="comment"># 打印文件第二行</span></span><br><span class="line">sed -n <span class="string">&#x27;2,5p&#x27;</span> file                 <span class="comment"># 打印文件第二到第五行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 排序 - sort</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">sort file                          <span class="comment"># 排序文件</span></span><br><span class="line">sort -r file                       <span class="comment"># 反向排序（降序）</span></span><br><span class="line">sort -n file                       <span class="comment"># 使用数字而不是字符串进行比较</span></span><br><span class="line">sort -t: -k 3n /etc/passwd         <span class="comment"># 按 passwd 文件的第三列进行排序</span></span><br><span class="line">sort -u file                       <span class="comment"># 去重排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 快速跳转 - https://github.com/rupa/z</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /path/to/z.sh               <span class="comment"># .bashrc 中初始化 z.sh</span></span><br><span class="line">z                                  <span class="comment"># 列出所有历史路径以及他们的权重</span></span><br><span class="line">z foo                              <span class="comment"># 跳到历史路径中匹配 foo 的权重最大的目录</span></span><br><span class="line">z foo bar                          <span class="comment"># 跳到历史路径中匹配 foo 和 bar 权重最大的目录</span></span><br><span class="line">z -l foo                           <span class="comment"># 列出所有历史路径中匹配 foo 的目录及权重</span></span><br><span class="line">z -r foo                           <span class="comment"># 按照最高访问次数优先进行匹配跳转</span></span><br><span class="line">z -t foo                           <span class="comment"># 按照最近访问优先进行匹配跳转</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 键盘绑定</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> <span class="string">&#x27;&quot;\eh&quot;:&quot;\C-b&quot;&#x27;</span>                <span class="comment"># 绑定 ALT+h 为光标左移，同 CTRL+b / &lt;Left&gt;</span></span><br><span class="line"><span class="built_in">bind</span> <span class="string">&#x27;&quot;\el&quot;:&quot;\C-f&quot;&#x27;</span>                <span class="comment"># 绑定 ALT+l 为光标右移，同 CTRL+f / &lt;Right&gt;</span></span><br><span class="line"><span class="built_in">bind</span> <span class="string">&#x27;&quot;\ej&quot;:&quot;\C-n&quot;&#x27;</span>                <span class="comment"># 绑定 ALT+j 为下条历史，同 CTRL+n / &lt;Down&gt;</span></span><br><span class="line"><span class="built_in">bind</span> <span class="string">&#x27;&quot;\ek&quot;:&quot;\C-p&quot;&#x27;</span>                <span class="comment"># 绑定 ALT+k 为上条历史，同 CTRL+p / &lt;Up&gt;</span></span><br><span class="line"><span class="built_in">bind</span> <span class="string">&#x27;&quot;\eH&quot;:&quot;\eb&quot;&#x27;</span>                 <span class="comment"># 绑定 ALT+H 为光标左移一个单词，同 ALT-b </span></span><br><span class="line"><span class="built_in">bind</span> <span class="string">&#x27;&quot;\eL&quot;:&quot;\ef&quot;&#x27;</span>                 <span class="comment"># 绑定 ALT+L 为光标右移一个单词，同 ALT-f </span></span><br><span class="line"><span class="built_in">bind</span> <span class="string">&#x27;&quot;\eJ&quot;:&quot;\C-a&quot;&#x27;</span>                <span class="comment"># 绑定 ALT+J 为移动到行首，同 CTRL+a / &lt;Home&gt;</span></span><br><span class="line"><span class="built_in">bind</span> <span class="string">&#x27;&quot;\eK&quot;:&quot;\C-e&quot;&#x27;</span>                <span class="comment"># 绑定 ALT+K 为移动到行末，同 CTRL+e / &lt;End&gt;</span></span><br><span class="line"><span class="built_in">bind</span> <span class="string">&#x27;&quot;\e;&quot;:&quot;ls -l\n&quot;&#x27;</span>             <span class="comment"># 绑定 ALT+; 为执行 ls -l 命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 网络管理：ip / ifconfig / nmap ...</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">ip a                               <span class="comment"># 显示所有网络地址，同 ip address</span></span><br><span class="line">ip a show eth1                     <span class="comment"># 显示网卡 IP 地址</span></span><br><span class="line">ip a add 172.16.1.23/24 dev eth1   <span class="comment"># 添加网卡 IP 地址</span></span><br><span class="line">ip a del 172.16.1.23/24 dev eth1   <span class="comment"># 删除网卡 IP 地址</span></span><br><span class="line">ip link show dev eth0              <span class="comment"># 显示网卡设备属性</span></span><br><span class="line">ip link <span class="built_in">set</span> eth1 up                <span class="comment"># 激活网卡</span></span><br><span class="line">ip link <span class="built_in">set</span> eth1 down              <span class="comment"># 关闭网卡</span></span><br><span class="line">ip link <span class="built_in">set</span> eth1 address &#123;mac&#125;     <span class="comment"># 修改 MAC 地址</span></span><br><span class="line">ip neighbour                       <span class="comment"># 查看 ARP 缓存</span></span><br><span class="line">ip route                           <span class="comment"># 查看路由表</span></span><br><span class="line">ip route add 10.1.0.0/24 via 10.0.0.253 dev eth0    <span class="comment"># 添加静态路由</span></span><br><span class="line">ip route del 10.1.0.0/24           <span class="comment"># 删除静态路由</span></span><br><span class="line"></span><br><span class="line">ifconfig                           <span class="comment"># 显示所有网卡和接口信息</span></span><br><span class="line">ifconfig -a                        <span class="comment"># 显示所有网卡（包括开机没启动的）信息</span></span><br><span class="line">ifconfig eth0                      <span class="comment"># 指定设备显示信息</span></span><br><span class="line">ifconfig eth0 up                   <span class="comment"># 激活网卡</span></span><br><span class="line">ifconfig eth0 down                 <span class="comment"># 关闭网卡</span></span><br><span class="line">ifconfig eth0 192.168.120.56       <span class="comment"># 给网卡配置 IP 地址</span></span><br><span class="line">ifconfig eth0 10.0.0.8 netmask 255.255.255.0 up     <span class="comment"># 配置 IP 并启动</span></span><br><span class="line">ifconfig eth0 hw ether 00:aa:bb:cc:dd:ee            <span class="comment"># 修改 MAC 地址</span></span><br><span class="line"></span><br><span class="line">nmap 10.0.0.12                     <span class="comment"># 扫描主机 1-1000 端口</span></span><br><span class="line">nmap -p 1024-65535 10.0.0.12       <span class="comment"># 扫描给定端口</span></span><br><span class="line">nmap 10.0.0.0/24                   <span class="comment"># 给定网段扫描局域网内所有主机</span></span><br><span class="line">nmap -O -sV 10.0.0.12              <span class="comment"># 探测主机服务和操作系统版本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 有趣的命令</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">man hier                           <span class="comment"># 查看文件系统的结构和含义</span></span><br><span class="line">man <span class="built_in">test</span>                           <span class="comment"># 查看 posix sh 的条件判断帮助</span></span><br><span class="line">man ascii                          <span class="comment"># 显示 ascii 表</span></span><br><span class="line">getconf LONG_BIT                   <span class="comment"># 查看系统是 32 位还是 64 位</span></span><br><span class="line"><span class="built_in">bind</span> -P                            <span class="comment"># 列出所有 bash 的快捷键</span></span><br><span class="line">mount | column -t                  <span class="comment"># 漂亮的列出当前加载的文件系统</span></span><br><span class="line">curl ip.cn                         <span class="comment"># 取得外网 ip 地址和服务商信息</span></span><br><span class="line"><span class="built_in">disown</span> -a &amp;&amp; <span class="built_in">exit</span>                  <span class="comment"># 关闭所有后台任务并退出</span></span><br><span class="line">cat /etc/issue                     <span class="comment"># 查看 Linux 发行版信息</span></span><br><span class="line">lsof -i port:80                    <span class="comment"># 哪个程序在使用 80 端口？</span></span><br><span class="line">showkey -a                         <span class="comment"># 取得按键的 ASCII 码</span></span><br><span class="line">svn diff | view -                  <span class="comment"># 使用 Vim 来显示带色彩的 diff 输出</span></span><br><span class="line">mv filename.&#123;old,new&#125;              <span class="comment"># 快速文件改名</span></span><br><span class="line">time <span class="built_in">read</span>                          <span class="comment"># 使用 CTRL-D 停止，最简单的计时功能</span></span><br><span class="line">cp file.txt&#123;,.bak&#125;                 <span class="comment"># 快速备份文件</span></span><br><span class="line">sudo touch /forcefsck              <span class="comment"># 强制在下次重启时扫描磁盘</span></span><br><span class="line">find ~ -mmin 60 -<span class="built_in">type</span> f            <span class="comment"># 查找 $HOME 目录中，60 分钟内修改过的文件</span></span><br><span class="line">curl wttr.in/~beijing              <span class="comment"># 查看北京的天气预报</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;SSH_CLIENT%% *&#125;</span>             <span class="comment"># 取得你是从什么 IP 链接到当前主机上的</span></span><br><span class="line"><span class="built_in">echo</span> $[RANDOM%X+1]                 <span class="comment"># 取得 1 到 X 之间的随机数</span></span><br><span class="line"><span class="built_in">bind</span> -x <span class="string">&#x27;&quot;\C-l&quot;:ls -l&#x27;</span>             <span class="comment"># 设置 CTRL+l 为执行 ls -l 命令</span></span><br><span class="line">find / -<span class="built_in">type</span> f -size +5M           <span class="comment"># 查找大于 5M 的文件</span></span><br><span class="line">chmod --reference f1 f2            <span class="comment"># 将 f2 的权限设置成 f1 一模一样的</span></span><br><span class="line">curl -L cheat.sh                   <span class="comment"># 速查表大全</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 常用技巧</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出最常使用的命令</span></span><br><span class="line"><span class="built_in">history</span> | awk <span class="string">&#x27;&#123;a[$2]++&#125;END&#123;for(i in a)&#123;print a[i] &quot; &quot; i&#125;&#125;&#x27;</span> | sort -rn | head</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有网络状态：ESTABLISHED / TIME_WAIT / FIN_WAIT1 / FIN_WAIT2 </span></span><br><span class="line">netstat -n | awk <span class="string">&#x27;/^tcp/ &#123;++tt[$NF]&#125; END &#123;for (a in tt) print a, tt[a]&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 SSH 来 mount 文件系统</span></span><br><span class="line">sshfs name@server:/path/to/folder /path/to/mount/point</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示前十个运行的进程并按内存使用量排序</span></span><br><span class="line">ps aux | sort -nk +4 | tail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在右上角显示时钟</span></span><br><span class="line"><span class="keyword">while</span> sleep 1;<span class="keyword">do</span> tput sc;tput cup 0 $(($(tput cols)-<span class="number">29</span>));date;tput rc;<span class="keyword">done</span>&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从网络上的压缩文件中解出一个文件来，并避免保存中间文件</span></span><br><span class="line">wget -qO - <span class="string">&quot;http://www.tarball.com/tarball.gz&quot;</span> | tar zxvf -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 性能测试：测试处理器性能</span></span><br><span class="line">python -c <span class="string">&quot;import test.pystone;print(test.pystone.pystones())&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 性能测试：测试内存带宽</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/dev/null bs=1M count=32768</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux 下挂载一个 iso 文件</span></span><br><span class="line">mount /path/to/file.iso /mnt/cdrom -oloop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过主机 A 直接 ssh 到主机 B</span></span><br><span class="line">ssh -t hostA ssh hostB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个网站的所有图片</span></span><br><span class="line">wget -r -l1 --no-parent -nH -nd -P/tmp -A<span class="string">&quot;.gif,.jpg&quot;</span> http://example.com/images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速创建项目目录</span></span><br><span class="line">mkdir -p work/&#123;project1,project2&#125;/&#123;src,bin,bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按日期范围查找文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f -newermt <span class="string">&quot;2010-01-01&quot;</span> ! -newermt <span class="string">&quot;2010-06-01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前正在使用网络的进程</span></span><br><span class="line">lsof -P -i -n | cut -f 1 -d <span class="string">&quot; &quot;</span>| uniq | tail -n +2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Vim 中保存一个没有权限的文件</span></span><br><span class="line">:w !sudo tee &gt; /dev/null %</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 .bashrc / .bash_profile 中加载另外一个文件（比如你保存在 github 上的配置）</span></span><br><span class="line"><span class="built_in">source</span> ~/github/profiles/my_bash_init.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向代理：将外网主机（202.115.8.1）端口（8443）转发到内网主机 192.168.1.2:443</span></span><br><span class="line">ssh -CqTnN -R 0.0.0.0:8443:192.168.1.2:443  user@202.115.8.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正向代理：将本地主机的 8443 端口，通过 192.168.1.3 转发到 192.168.1.2:443 </span></span><br><span class="line">ssh -CqTnN -L 0.0.0.0:8443:192.168.1.2:443  user@192.168.1.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># socks5 代理：把本地 1080 端口的 socks5 的代理请求通过远程主机转发出去</span></span><br><span class="line">ssh -CqTnN -D localhost:1080  user@202.115.8.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 终端下正确设置 ALT 键和 BackSpace 键</span></span><br><span class="line">http://www.skywind.me/blog/archives/2021</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 有用的函数</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动解压：判断文件后缀名并调用相应解压命令</span></span><br><span class="line"><span class="keyword">function</span> q-<span class="function"><span class="title">extract</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">$1</span> ] ; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        *.tar.bz2)   tar -xvjf <span class="variable">$1</span>    ;;</span><br><span class="line">        *.tar.gz)    tar -xvzf <span class="variable">$1</span>    ;;</span><br><span class="line">        *.tar.xz)    tar -xvJf <span class="variable">$1</span>    ;;</span><br><span class="line">        *.bz2)       bunzip2 <span class="variable">$1</span>     ;;</span><br><span class="line">        *.rar)       rar x <span class="variable">$1</span>       ;;</span><br><span class="line">        *.gz)        gunzip <span class="variable">$1</span>      ;;</span><br><span class="line">        *.tar)       tar -xvf <span class="variable">$1</span>     ;;</span><br><span class="line">        *.tbz2)      tar -xvjf <span class="variable">$1</span>    ;;</span><br><span class="line">        *.tgz)       tar -xvzf <span class="variable">$1</span>    ;;</span><br><span class="line">        *.zip)       unzip <span class="variable">$1</span>       ;;</span><br><span class="line">        *.Z)         uncompress <span class="variable">$1</span>  ;;</span><br><span class="line">        *.7z)        7z x <span class="variable">$1</span>        ;;</span><br><span class="line">        *)           <span class="built_in">echo</span> <span class="string">&quot;don&#x27;t know how to extract &#x27;<span class="variable">$1</span>&#x27;...&quot;</span> ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;&#x27;<span class="variable">$1</span>&#x27; is not a valid file!&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动压缩：判断后缀名并调用相应压缩程序</span></span><br><span class="line"><span class="keyword">function</span> q-<span class="function"><span class="title">compress</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">        FILE=<span class="variable">$1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$FILE</span> <span class="keyword">in</span></span><br><span class="line">        *.tar) <span class="built_in">shift</span> &amp;&amp; tar -cf <span class="variable">$FILE</span> $* ;;</span><br><span class="line">        *.tar.bz2) <span class="built_in">shift</span> &amp;&amp; tar -cjf <span class="variable">$FILE</span> $* ;;</span><br><span class="line">        *.tar.xz) <span class="built_in">shift</span> &amp;&amp; tar -cJf <span class="variable">$FILE</span> $* ;;</span><br><span class="line">        *.tar.gz) <span class="built_in">shift</span> &amp;&amp; tar -czf <span class="variable">$FILE</span> $* ;;</span><br><span class="line">        *.tgz) <span class="built_in">shift</span> &amp;&amp; tar -czf <span class="variable">$FILE</span> $* ;;</span><br><span class="line">        *.zip) <span class="built_in">shift</span> &amp;&amp; zip <span class="variable">$FILE</span> $* ;;</span><br><span class="line">        *.rar) <span class="built_in">shift</span> &amp;&amp; rar <span class="variable">$FILE</span> $* ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;usage: q-compress &lt;foo.tar.gz&gt; ./foo ./bar&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 漂亮的带语法高亮的 color cat ，需要先 pip install pygments</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">ccat</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> style=<span class="string">&quot;monokai&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$#</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        pygmentize -P style=<span class="variable">$style</span> -P tabsize=4 -f terminal256 -g</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> NAME <span class="keyword">in</span> <span class="variable">$@</span>; <span class="keyword">do</span></span><br><span class="line">            pygmentize -P style=<span class="variable">$style</span> -P tabsize=4 -f terminal256 -g <span class="string">&quot;<span class="variable">$NAME</span>&quot;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># 好玩的配置</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 放到你的 ~/.bashrc 配置文件中，给 man 增加漂亮的色彩高亮</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_mb=$<span class="string">&#x27;\E[1m\E[32m&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_mh=$<span class="string">&#x27;\E[2m&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_mr=$<span class="string">&#x27;\E[7m&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_md=$<span class="string">&#x27;\E[1m\E[36m&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_ZW=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_us=$<span class="string">&#x27;\E[4m\E[1m\E[37m&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_me=$<span class="string">&#x27;\E(B\E[m&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_ue=$<span class="string">&#x27;\E[24m\E(B\E[m&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_ZO=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_ZN=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_se=$<span class="string">&#x27;\E[27m\E(B\E[m&#x27;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_ZV=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">export</span> LESS_TERMCAP_so=$<span class="string">&#x27;\E[1m\E[33m\E[44m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ALT+hjkl/HJKL 快速移动光标，将下面内容添加到 ~/.inputrc 中可作用所有工具，</span></span><br><span class="line"><span class="comment"># 包括 bash/zsh/python/lua 等使用 readline 的工具，帮助见：info rluserman</span></span><br><span class="line"><span class="string">&quot;\eh&quot;</span>: backward-char</span><br><span class="line"><span class="string">&quot;\el&quot;</span>: forward-char</span><br><span class="line"><span class="string">&quot;\ej&quot;</span>: next-history</span><br><span class="line"><span class="string">&quot;\ek&quot;</span>: previous-history</span><br><span class="line"><span class="string">&quot;\eH&quot;</span>: backward-word</span><br><span class="line"><span class="string">&quot;\eL&quot;</span>: forward-word</span><br><span class="line"><span class="string">&quot;\eJ&quot;</span>: beginning-of-line</span><br><span class="line"><span class="string">&quot;\eK&quot;</span>: end-of-line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment"># References</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"></span><br><span class="line">https://github.com/Idnan/bash-guide</span><br><span class="line">http://www.linuxstall.com/linux-command-line-tips-that-every-linux-user-should-know/</span><br><span class="line">https://ss64.com/bash/syntax-keyboard.html</span><br><span class="line">http://wiki.bash-hackers.org/commands/classictest</span><br><span class="line">https://www.ibm.com/developerworks/library/l-bash-test/index.html</span><br><span class="line">https://www.cyberciti.biz/faq/bash-loop-over-file/</span><br><span class="line">https://linuxconfig.org/bash-scripting-tutorial</span><br><span class="line">https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh</span><br><span class="line">https://devhints.io/bash</span><br><span class="line">https://github.com/jlevy/the-art-of-command-line</span><br><span class="line">https://yq.aliyun.com/articles/68541</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim: set ts=4 sw=4 tw=0 et :</span></span><br></pre></td></tr></table></figure><h1 id="go"><a class="markdownIt-Anchor" href="#go">#</a>  <code>Go</code></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * Golang CHEATSHEET (中文速查表)  -  by chlins (created on 2018/02/14)</span></span><br><span class="line"><span class="comment"> * Version: 3, Last Modified: 2018/03/07 19:51</span></span><br><span class="line"><span class="comment"> * https://github.com/skywind3000/awesome-cheatsheets</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/******************************************************************************</span></span><br><span class="line"><span class="comment">  * Go 编译器命令</span></span><br><span class="line"><span class="comment">  *****************************************************************************/</span></span><br><span class="line"><span class="keyword">go</span> command [arguments]                              <span class="comment">// go 命令 [参数]</span></span><br><span class="line"><span class="keyword">go</span> build                                            <span class="comment">// 编译包和依赖包</span></span><br><span class="line"><span class="keyword">go</span> clean                                            <span class="comment">// 移除对象和缓存文件</span></span><br><span class="line"><span class="keyword">go</span> doc                                              <span class="comment">// 显示包的文档</span></span><br><span class="line"><span class="keyword">go</span> env                                              <span class="comment">// 打印go的环境变量信息</span></span><br><span class="line"><span class="keyword">go</span> bug                                              <span class="comment">// 报告bug</span></span><br><span class="line"><span class="keyword">go</span> fix                                              <span class="comment">// 更新包使用新的api</span></span><br><span class="line"><span class="keyword">go</span> fmt                                              <span class="comment">// 格式规范化代码</span></span><br><span class="line"><span class="keyword">go</span> generate                                         <span class="comment">// 通过处理资源生成go文件</span></span><br><span class="line"><span class="keyword">go</span> get                                              <span class="comment">// 下载并安装包及其依赖</span></span><br><span class="line"><span class="keyword">go</span> install                                          <span class="comment">// 编译和安装包及其依赖</span></span><br><span class="line"><span class="keyword">go</span> list                                             <span class="comment">// 列出所有包</span></span><br><span class="line"><span class="keyword">go</span> run                                              <span class="comment">// 编译和运行go程序</span></span><br><span class="line"><span class="keyword">go</span> test                                             <span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">go</span> tool                                             <span class="comment">// 运行给定的go工具</span></span><br><span class="line"><span class="keyword">go</span> version                                          <span class="comment">// 显示go当前版本</span></span><br><span class="line"><span class="keyword">go</span> vet                                              <span class="comment">// 发现代码中可能的错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * Hello World</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main                                        <span class="comment">// 包名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span>                                        <span class="comment">// 导入fmt包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;                                       <span class="comment">// 主函数</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello World&quot;</span>)                      <span class="comment">// 打印输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// go run main.go                                   // 直接运行</span></span><br><span class="line"><span class="comment">// go build &amp;&amp; ./main                               // 先编译成二进制文件再运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 操作符</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="comment">// 算数操作符</span></span><br><span class="line">+ - * / %                                           <span class="comment">// 加 减 乘 除 取余</span></span><br><span class="line">&amp; | ^ &amp;^                                            <span class="comment">// 位与 位或 位异或 位与非</span></span><br><span class="line">&lt;&lt; &gt;&gt;                                               <span class="comment">// 左移 右移</span></span><br><span class="line"><span class="comment">// 比较操作</span></span><br><span class="line">== !=                                               <span class="comment">// 等于 不等于</span></span><br><span class="line">&lt; &lt;=                                                <span class="comment">// 小于 小于等于</span></span><br><span class="line">&gt; &gt;=                                                <span class="comment">// 大于 大于等于</span></span><br><span class="line"><span class="comment">// 逻辑操作</span></span><br><span class="line">&amp;&amp; || !                                             <span class="comment">// 逻辑与 逻辑或 逻辑非</span></span><br><span class="line"><span class="comment">// 其他</span></span><br><span class="line">&amp; * &lt;-                                              <span class="comment">// 地址 指针引用 通道操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 声明</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line">a := <span class="number">1</span>                                              <span class="comment">// 直接给一个未声明的变量赋值</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int</span>                                           <span class="comment">// var 变量名 数据类型 来声明</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">float64</span></span><br><span class="line"><span class="comment">// 注意：使用var声明过的变量不可再使用 := 赋值</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="number">1</span>                                         <span class="comment">// 常量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 数据类型</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line">s := <span class="string">&quot;hello&quot;</span>                                       <span class="comment">// 字符</span></span><br><span class="line">a := <span class="number">1</span>                                             <span class="comment">// int</span></span><br><span class="line">b := <span class="number">1.2</span>                                           <span class="comment">// float64</span></span><br><span class="line">c := <span class="number">1</span> + <span class="number">5i</span>                                        <span class="comment">// complex128</span></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line">arr1 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;                           <span class="comment">// 手动指定长度</span></span><br><span class="line">arr2 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;                         <span class="comment">// 由golang自动计算长度</span></span><br><span class="line"><span class="comment">// 切片</span></span><br><span class="line">sliceInt := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;                           <span class="comment">// 不指定长度</span></span><br><span class="line">sliceByte := []<span class="keyword">byte</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">// 指针</span></span><br><span class="line">a := <span class="number">1</span></span><br><span class="line">point := &amp;a                                      <span class="comment">// 将a的地址赋给point</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 流程控制</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="comment">// for</span></span><br><span class="line">i := <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(i--)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if else</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;i == 10&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;i != 10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// switch</span></span><br><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;i == 10&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;i != 10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 函数</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="comment">// 以func关键字声明</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;<span class="built_in">println</span>(<span class="string">&quot;Lambdas function&quot;</span>)&#125;     <span class="comment">// 匿名函数</span></span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span> <span class="params">(a,b <span class="keyword">string</span>)</span></span> &#123;                    <span class="comment">// 函数多返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">a, b := get()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 结构体</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="comment">// golang中没有class只有struct</span></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">  Age <span class="keyword">int</span>                                  <span class="comment">// 大写开头的变量在包外可以访问</span></span><br><span class="line">  name <span class="keyword">string</span>                              <span class="comment">// 小写开头的变量仅可在本包内访问</span></span><br><span class="line">&#125;</span><br><span class="line">p1 := People&#123;<span class="number">25</span>, <span class="string">&quot;Kaven&quot;</span>&#125;                 <span class="comment">// 必须按照结构体内部定义的顺序</span></span><br><span class="line">p2 := People&#123;name: <span class="string">&quot;Kaven&quot;</span>, age: <span class="number">25</span>&#125;      <span class="comment">// 若不按顺序则需要指定字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以先不赋值</span></span><br><span class="line">p3 := <span class="built_in">new</span>(People)</span><br><span class="line">p3.Age = <span class="number">25</span></span><br><span class="line">p3.name = <span class="string">&quot;Kaven&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 方法</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="comment">// 方法通常是针对一个结构体来说的</span></span><br><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;</span><br><span class="line">  a <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">                                        <span class="comment">// 值接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f Foo)</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">  f.a = <span class="number">1</span>                              <span class="comment">// 不会改变原来的值</span></span><br><span class="line">&#125;</span><br><span class="line">                                      <span class="comment">// 指针接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Foo)</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">  f.a = <span class="number">1</span>                            <span class="comment">// 会改变原值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * go 协程</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;()                                <span class="comment">// 不会阻塞代码的运行 代码会直接向下运行</span></span><br><span class="line"><span class="comment">// channel 通道</span></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="comment">// 两个协程间可以通过chan通信</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;c &lt;- <span class="number">1</span>&#125;()              <span class="comment">// 此时c会被阻塞 直到值被取走前都不可在塞入新值</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;<span class="built_in">println</span>(&lt;-c)&#125;()</span><br><span class="line"><span class="comment">// 带缓存的channel</span></span><br><span class="line">bc := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;c &lt;- <span class="number">1</span>; c &lt;<span class="number">-2</span>&#125;()      <span class="comment">// c中可以存储声明时所定义的缓存大小的数据，这里是2个</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;<span class="built_in">println</span>(&lt;-c)&#125;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="comment">// go的接口为鸭子类型，即只要你实现了接口中的方法就实现了该接口</span></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reading()                  <span class="comment">// 仅需实现Reading方法就实现了该接口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> As <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a As)</span> <span class="title">Reading</span><span class="params">()</span></span> &#123;&#125;      <span class="comment">// 实现了Reader接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bs <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bs)</span> <span class="title">Reading</span><span class="params">()</span></span> &#123;&#125;      <span class="comment">// 也实现了Reader接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bs)</span> <span class="title">Closing</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * 一些推荐</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line"><span class="comment">// 入门书籍</span></span><br><span class="line">《Go学习笔记》                <span class="comment">// 雨痕的</span></span><br><span class="line">《Go语言实战》                <span class="comment">// 强烈推荐</span></span><br><span class="line"><span class="comment">// 网上资料</span></span><br><span class="line">https:<span class="comment">//github.com/astaxie/build-web-application-with-golang    // 谢大的</span></span><br><span class="line">https:<span class="comment">//github.com/Unknwon/the-way-to-go_ZH_CN                  // 无闻</span></span><br><span class="line">https:<span class="comment">//github.com/Unknwon/go-fundamental-programming           // 无闻教学视频</span></span><br><span class="line"><span class="comment">// 第三方类库</span></span><br><span class="line">https:<span class="comment">//golanglibs.com/</span></span><br><span class="line"><span class="comment">// 大杂烩</span></span><br><span class="line">https:<span class="comment">//github.com/avelino/awesome-go</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment"> * References</span></span><br><span class="line"><span class="comment"> ******************************************************************************/</span></span><br><span class="line">https:<span class="comment">//github.com/a8m/go-lang-cheat-sheet</span></span><br><span class="line">https:<span class="comment">//github.com/LeCoupa/awesome-cheatsheets</span></span><br></pre></td></tr></table></figure><h1 id="python"><a class="markdownIt-Anchor" href="#python">#</a>  <code>Python</code></h1><p>===</p><ul><li>本手册是 <span class="exturl" data-url="aHR0cDovL2RhdGFzY2llbmNlZnJlZS5jb20vcHl0aG9uLnBkZg==">Python cheat sheet</span> 的中文翻译版。原作者：Arianne Colton and Sean Chen (<span class="exturl" data-url="bWFpbHRvOmRhdGEuc2NpZW50aXN0LmluZm9AZ21haWwuY29t">data.scientist.info@gmail.com</span>)</li></ul><h2 id="常规"><a class="markdownIt-Anchor" href="#常规">#</a> 常规</h2><ul><li>Python 对大小写敏感</li><li>Python 的索引从 0 开始</li><li>Python 使用空白符（制表符或空格）来缩进代码，而不是使用花括号</li></ul><h3 id="获取帮助"><a class="markdownIt-Anchor" href="#获取帮助">#</a> 获取帮助</h3><ul><li>获取主页帮助： <code>help()</code></li><li>获取函数帮助： <code>help(str.replace)</code></li><li>获取模块帮助： <code>help(re)</code></li></ul><h3 id="模块库"><a class="markdownIt-Anchor" href="#模块库">#</a> 模块 (库)</h3><p>Python 的模块只是一个简单地以  <code>.py</code>  为后缀的文件。</p><ul><li>列出模块内容： <code>dir(module1)</code></li><li>导入模块： <code>import module</code></li><li>调用模块中的函数： <code>module1.func1()</code></li></ul><blockquote><p><strong>注</strong>： <code>import</code>  语句会创建一个新的命名空间 (namespace)，并且在该命名空间内执行 <code>.py</code>  文件中的所有语句。如果你想把模块内容导入到当前命名空间，请使用 <code>from module1 import *</code>  语句。</p></blockquote><h2 id="数值类类型"><a class="markdownIt-Anchor" href="#数值类类型">#</a> 数值类类型</h2><p>查看变量的数据类型： <code>type(variable)</code></p><h3 id="六种经常使用的数据类型"><a class="markdownIt-Anchor" href="#六种经常使用的数据类型">#</a> 六种经常使用的数据类型</h3><ol><li><p><strong>int/long</strong>：过大的  <code>int</code>  类型会被自动转化为  <code>long</code>  类型</p></li><li><p><strong>float</strong>：64 位，Python 中没有  <code>double</code>  类型</p></li><li><p><strong>bool</strong>：真或假</p></li><li><p><strong>str</strong>：在 Python 2 中默认以 ASCII 编码，而在 Python 3 中默认以 Unicode 编码</p><ul><li><p>字符串可置于单 / 双 / 三引号中</p></li><li><p>字符串是字符的序列，因此可以像处理其他序列一样处理字符串</p></li><li><p>特殊字符可通过  <code>\</code>  或者前缀  <code>r</code>  实现：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">r&#x27;this\f?ff&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串可通过多种方式格式化：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">&#x27;%.2f %s haha $%d&#x27;</span>;</span><br><span class="line">str1 = template % (<span class="number">4.88</span>, <span class="string">&#x27;hola&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>NoneType(None)</strong>：Python “null” 值（ <code>None</code>  对象<strong>只</strong>存在一个实例）</p><ul><li><p><code>None</code>  不是一个保留关键字，而是 <code>NoneType</code>  的一个唯一实例</p></li><li><p><code>None</code>  通常是可选函数参数的默认值：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">a, b, c=<span class="literal">None</span></span>)</span></span><br></pre></td></tr></table></figure></li><li><p><code>None</code>  的常见用法：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> variable <span class="keyword">is</span> <span class="literal">None</span> :</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>datetime</strong>：Python 内置的 <code>datetime</code>  模块提供了 <code>datetime</code> 、 <code>data</code>  以及 <code>time</code>  类型。</p><ul><li><code>datetime</code>  组合了存储于 <code>date</code>  和 <code>time</code>  中的信息</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从字符串中创建 datetime</span></span><br><span class="line">dt1 = datetime.strptime(<span class="string">&#x27;20091031&#x27;</span>, <span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取 date 对象</span></span><br><span class="line">dt1.date()</span><br><span class="line"><span class="comment"># 获取 time 对象</span></span><br><span class="line">dt1.time()</span><br><span class="line"><span class="comment"># 将 datetime 格式化为字符串</span></span><br><span class="line">dt1.strftime(<span class="string">&#x27;%m/%d/%Y%H:%M&#x27;</span>)</span><br><span class="line"><span class="comment"># 更改字段值</span></span><br><span class="line">dt2 = dt1.replace(minute=<span class="number">0</span>, second=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 做差, diff 是一个 datetime.timedelta 对象</span></span><br><span class="line">diff = dt1 - dt2</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>注</strong>：</p><ul><li><code>str</code> 、 <code>bool</code> 、 <code>int</code>  和 <code>float</code>  同时也是显式类型转换函数。</li><li>除字符串和元组外，Python 中的绝大多数对象都是可变的。</li></ul></blockquote><h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构">#</a> 数据结构</h2><blockquote><p><strong>注</strong>：所有的 “非只读 (non-Get)” 函数调用，比如下面例子中的 <code>list1.sort()</code> ，除非特别声明，都是原地操作 (不会创建新的对象)。</p></blockquote><h3 id="元组"><a class="markdownIt-Anchor" href="#元组">#</a> 元组</h3><p>元组是 Python 中任何类型的对象的一个一维、固定长度、<strong>不可变</strong>的序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建元组</span></span><br><span class="line">tup1 = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">tup1 = (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"><span class="comment"># 创建嵌套元组</span></span><br><span class="line">tup1 = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line"><span class="comment"># 将序列或迭代器转化为元组</span></span><br><span class="line"><span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment"># 连接元组</span></span><br><span class="line">tup1 + tup2</span><br><span class="line"><span class="comment"># 解包元组</span></span><br><span class="line">a, b, c = tup1</span><br></pre></td></tr></table></figure><p><strong>元组应用</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交换两个变量的值</span></span><br><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><h3 id="列表"><a class="markdownIt-Anchor" href="#列表">#</a> 列表</h3><p>列表是 Python 中任何类型的对象的一个一维、非固定长度、<strong>可变</strong>（比如内容可以被修改）的序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建列表</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>]</span><br><span class="line">list1 = <span class="built_in">list</span>(tup1)</span><br><span class="line"><span class="comment"># 连接列表</span></span><br><span class="line">list1 + list2</span><br><span class="line">list1.extend(list2)</span><br><span class="line"><span class="comment"># 追加到列表的末尾</span></span><br><span class="line">list1.append(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment"># 插入指定位置</span></span><br><span class="line">list1.insert(PosIndex, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># 反向插入，即弹出给定位置的值/删除</span></span><br><span class="line">ValueAtIdx = list1.pop(PosIndex)</span><br><span class="line"><span class="comment"># 移除列表中的第一个值, a 必须是列表中第一个值</span></span><br><span class="line">list1.remove(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># 检查成员</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> list1 =&gt; <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span></span><br><span class="line"><span class="comment"># 对列表进行排序</span></span><br><span class="line">list1.sort()</span><br><span class="line"><span class="comment"># 按特定方式排序</span></span><br><span class="line">list1.sort(key=<span class="built_in">len</span>) <span class="comment"># 按长度排序</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>使用 + 连接列表会有比较大的开支，因为这个过程中会创建一个新的列表，然后复制对象。因此，使用 <code>extend()</code>  是更明智的选择。</li><li><code>insert</code>  和 <code>append</code>  相比会有更大的开支（时间 / 空间）。</li><li>在列表中检查是否包含一个值会比在字典和集合中慢很多，因为前者需要进行线性扫描，而后者是基于哈希表的，所以只需要花费常数时间。</li></ul></blockquote><h4 id="内置的bisect模块"><a class="markdownIt-Anchor" href="#内置的bisect模块">#</a> 内置的 <code>bisect</code>  模块</h4><ul><li><p>对一个排序好的列表进行二分查找或插入</p></li><li><p><code>bisect.bisect</code>  找到元素在列表中的位置， <code>bisect.insort</code>  将元素插入到相应位置。</p></li><li><p>用法：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#找到 5 在 list1 中的位置，从 1 开始，因此 position = index + 1</span></span><br><span class="line">bisect.bisect(list1, <span class="number">5</span>)</span><br><span class="line"><span class="comment">#将 3.5 插入 list1 中合适位置</span></span><br><span class="line">bisect.insort(list1, <span class="number">3.5</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>注</strong>： <code>bisect</code>  模块中的函数并不会去检查列表是否排序好，因为这会花费很多时间。所以，对未排序好的列表使用这些函数也不会报错，但可能会返回不正确的结果。</p></blockquote><h3 id="针对序列类型的切片"><a class="markdownIt-Anchor" href="#针对序列类型的切片">#</a> 针对序列类型的切片</h3><blockquote><p>序列类型包括 <code>str</code> 、 <code>array</code> 、 <code>tuple</code> 、 <code>list</code>  等。</p></blockquote><p>用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1[start:stop]</span><br><span class="line"><span class="comment"># 如果使用 step</span></span><br><span class="line">list1[start:stop:step]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：</p><ul><li>切片结果包含  <code>start</code>  索引，但不包含  <code>stop</code>  索引</li><li><code>start/stop</code>  索引可以省略，如果省略，则默认为序列从开始到结束，如  <code>list1 == list1[:]</code>  。</li></ul></blockquote><p><code>step</code>  的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取出奇数位置的元素</span></span><br><span class="line">list1[::<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 反转字符串</span></span><br><span class="line">str1[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="字典哈希表"><a class="markdownIt-Anchor" href="#字典哈希表">#</a> 字典（哈希表）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="number">2</span>: [<span class="number">3</span>, <span class="number">2</span>]&#125;</span><br><span class="line"><span class="comment"># 从序列创建字典</span></span><br><span class="line"><span class="built_in">dict</span>(<span class="built_in">zip</span>(KeyList, ValueList))</span><br><span class="line"><span class="comment"># 获取/设置/插入元素</span></span><br><span class="line">dict1[<span class="string">&#x27;key1&#x27;</span>]</span><br><span class="line">dict1[<span class="string">&#x27;key1&#x27;</span>] = <span class="string">&#x27;NewValue&#x27;</span></span><br><span class="line"><span class="comment"># get 提供默认值</span></span><br><span class="line">dict1.get(<span class="string">&#x27;key1&#x27;</span>, DefaultValue)</span><br><span class="line"><span class="comment"># 检查键是否存在</span></span><br><span class="line"><span class="string">&#x27;key1&#x27;</span> <span class="keyword">in</span> dict1</span><br><span class="line"><span class="comment"># 获取键列表</span></span><br><span class="line">dict1.keys()</span><br><span class="line"><span class="comment"># 获取值列表</span></span><br><span class="line">dict1.values()</span><br><span class="line"><span class="comment"># 更新值</span></span><br><span class="line">dict1.update(dict2)  <span class="comment"># dict1 的值被 dict2 替换</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>如果键不存在，则会出现  <code>KeyError Exception</code>  。</li><li>当键不存在时，如果  <code>get()</code>  不提供默认值则会返回  <code>None</code>  。</li><li>以相同的顺序返回键列表和值列表，但顺序不是特定的，也就是说极大可能非排序。</li></ul></blockquote><h4 id="有效字典键类型"><a class="markdownIt-Anchor" href="#有效字典键类型">#</a> 有效字典键类型</h4><ul><li>键必须是不可变的，比如标量类型 ( <code>int</code> 、 <code>float</code> 、 <code>string</code> ) 或者元组（元组中的所有对象也必须是不可变的）。</li><li>这儿涉及的技术术语是 “可哈希 (hashability)”。可以用函数 <code>hash()</code>  来检查一个对象是否是可哈希的，比如  <code>hash('This is a string')</code>  会返回一个哈希值，而 <code>hash([1,2])</code>  则会报错（不可哈希）。</li></ul><h3 id="集合"><a class="markdownIt-Anchor" href="#集合">#</a> 集合</h3><ul><li><p>一个集合是一些<strong>无序</strong>且唯一的元素的聚集；</p></li><li><p>你可以把它看成只有键的字典；</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line"><span class="built_in">set</span>([<span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>])</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 子集测试</span></span><br><span class="line">set1.issubset(set2)</span><br><span class="line"><span class="comment"># 超集测试</span></span><br><span class="line">set1.issuperset(set2)</span><br><span class="line"><span class="comment"># 测试两个集合中的元素是否完全相同</span></span><br><span class="line">set1 == set2</span><br></pre></td></tr></table></figure></li><li><p><strong>集合操作</strong></p><ul><li>并（或）： <code>set1 | set2</code></li><li>交（与）： <code>set1 &amp; set2</code></li><li>差： <code>set1 - set2</code></li><li>对称差（异或）： <code>set1 ^ set2</code></li></ul></li></ul><h2 id="函数"><a class="markdownIt-Anchor" href="#函数">#</a> 函数</h2><p>Python 的函数参数传递是通过<strong>引用传递</strong>。</p><ul><li><p>基本形式</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">posArg1, keywordArg1=<span class="number">1</span>, ..</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：</p><ul><li>关键字参数必须跟在位置参数的后面；</li><li>默认情况下，Python 不会 “延迟求值”，表达式的值会立刻求出来。</li></ul></blockquote></li><li><p>函数调用机制</p><ol><li>所有函数均位于模块内部作用域。见 “模块” 部分。</li><li>在调用函数时，参数被打包成一个元组和一个字典，函数接收一个元组 <code>args</code>  和一个字典 <code>kwargs</code> ，然后在函数内部解包。</li></ol></li><li><p>“函数是对象” 的常见用法：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">ops = [<span class="built_in">str</span>.strip, user_define_func, ..], ..</span>):</span></span><br><span class="line">    <span class="keyword">for</span> function <span class="keyword">in</span> ops:</span><br><span class="line">        value = function(value)</span><br></pre></td></tr></table></figure></li></ul><h3 id="返回值"><a class="markdownIt-Anchor" href="#返回值">#</a> 返回值</h3><ul><li><p>如果函数直到结束都没有 <code>return</code>  语句，则返回 <code>None</code> 。</p></li><li><p>如果有多个返回值则通过<strong>一个</strong>元组来实现。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (value1, value2)</span><br><span class="line">value1, value2 = func1(..)</span><br></pre></td></tr></table></figure></li></ul><h3 id="匿名函数又称-lambda-函数"><a class="markdownIt-Anchor" href="#匿名函数又称-lambda-函数">#</a> 匿名函数（又称 LAMBDA 函数）</h3><ul><li><p>什么是匿名函数？</p><p>匿名函数是一个只包含一条语句的简单函数。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x : x * <span class="number">2</span></span><br><span class="line"><span class="comment"># def func1(x) : return x * 2</span></span><br></pre></td></tr></table></figure></li><li><p>匿名函数的应用：“柯里化 (curring)”，即利用已存在函数的部分参数来派生新的函数。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ma60 = <span class="keyword">lambda</span> x : pd.rolling_mean(x, <span class="number">60</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="一些有用的函数针对数据结构"><a class="markdownIt-Anchor" href="#一些有用的函数针对数据结构">#</a> 一些有用的函数（针对数据结构）</h3><ol><li><p><strong>Enumerate</strong> 返回一个序列 <code>(i, value)</code>  元组， <code>i</code>  是当前  <code>item</code>  的索引。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(collection):</span><br></pre></td></tr></table></figure><ul><li>应用：创建一个序列中值与其在序列中的位置的字典映射（假设每一个值都是唯一的）。</li></ul></li><li><p><strong>Sorted</strong> 可以从任意序列中返回一个排序好的序列。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]) =&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><ul><li><p>应用：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(<span class="built_in">set</span>(<span class="string">&#x27;abc bcd&#x27;</span>)) =&gt; [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="comment"># 返回一个字符串排序后无重复的字母序列</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Zip</strong> 函数可以把许多列表、元组或其他序列的元素配对起来创建一系列的元组。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">zip</span>(seq1, seq2) =&gt; [(<span class="string">&#x27;seq1_1&#x27;</span>, <span class="string">&#x27;seq2_1&#x27;</span>), (..), ..]</span><br></pre></td></tr></table></figure><ul><li><p><code>zip()</code>  可以接收任意数量的序列作为参数，但是产生的元素的数目取决于最短的序列。</p></li><li><p>应用：多个序列同时迭代：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, (a, b) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(seq1, seq2)):</span><br></pre></td></tr></table></figure></li><li><p><code>unzip</code> ：另一种思考方式是把一些行转化为一些列：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seq1, seq2 = unzip(zipOutput)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Reversed</strong> 将一个序列的元素以逆序迭代。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure><blockquote><p><code>reversed()</code>  会返回一个迭代器， <code>list()</code>  使之成为一个列表。</p></blockquote></li></ol><h2 id="控制流"><a class="markdownIt-Anchor" href="#控制流">#</a> 控制流</h2><ol><li><p>用于  <code>if-else</code>  条件中的操作符：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var1 <span class="keyword">is</span> var2  <span class="comment"># 检查两个变量是否是相同的对象</span></span><br><span class="line"></span><br><span class="line">var1 <span class="keyword">is</span> <span class="keyword">not</span> var2  <span class="comment"># 检查两个变量是否是不同的对象</span></span><br><span class="line"></span><br><span class="line">var1 == var2  <span class="comment"># 检查两个变量的值是否相等</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：Python 中使用  <code>and</code> 、 <code>or</code> 、 <code>not</code>  来组合条件，而不是使用  <code>&amp;&amp;</code> 、 <code>||</code> 、 <code>!</code>  。</p></blockquote></li><li><p><code>for</code>  循环的常见用法：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> iterator:  <span class="comment"># 可迭代对象（list、tuple）或迭代器</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a, b, c <span class="keyword">in</span> iterator:  <span class="comment"># 如果元素是可以解包的序列</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p><code>pass</code> ：无操作语句，在不需要进行任何操作的块中使用。</p></li><li><p>三元表达式，又称简洁的  <code>if-else</code> ，基本形式：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = true-expr <span class="keyword">if</span> condition <span class="keyword">else</span> false-expr</span><br></pre></td></tr></table></figure></li><li><p>Python 中没有  <code>switch/case</code>  语句，请使用  <code>if/elif</code> 。</p></li></ol><h2 id="面向对象编程"><a class="markdownIt-Anchor" href="#面向对象编程">#</a> 面向对象编程</h2><ol><li><p><strong>对象</strong>是 Python 中所有类型的根。</p></li><li><p>万物（数字、字符串、函数、类、模块等）皆为对象，每个对象均有一个 “类型 (type)”。对象变量是一个指向变量在内存中位置的指针。</p></li><li><p>所有对象均会被<strong>引用计数</strong>。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sys.getrefcount(<span class="number">5</span>) =&gt; x</span><br><span class="line">a = <span class="number">5</span>, b = a</span><br><span class="line"><span class="comment"># 上式会在等号的右边创建一个对象的引用，因此 a 和 b 均指向 5</span></span><br><span class="line">sys.getrefcount(<span class="number">5</span>)</span><br><span class="line">=&gt; x + <span class="number">2</span></span><br><span class="line"><span class="keyword">del</span>(a); sys.getrefcount(<span class="number">5</span>) =&gt; x + <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>类的基本形式：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># &#x27;self&#x27; 等价于 Java/C++ 中的 &#x27;this&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">memberFunc1</span>(<span class="params">self, arg1</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">classFunc2</span>(<span class="params">arg1</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">obj1 = MyObject(<span class="string">&#x27;name1&#x27;</span>)</span><br><span class="line">obj1.memberFunc1(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">MyObject.classFunc2(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>有用的交互式工具：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span>(variable1)  <span class="comment"># 列出对象的所有可用方法</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="常见字符串操作"><a class="markdownIt-Anchor" href="#常见字符串操作">#</a> 常见字符串操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过分隔符连接列表/元组</span></span><br><span class="line"><span class="string">&#x27;, &#x27;</span>.join([ <span class="string">&#x27;v1&#x27;</span>, <span class="string">&#x27;v2&#x27;</span>, <span class="string">&#x27;v3&#x27;</span>]) =&gt; <span class="string">&#x27;v1, v2, v3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化字符串</span></span><br><span class="line">string1 = <span class="string">&#x27;My name is &#123;0&#125;　&#123;name&#125;&#x27;</span></span><br><span class="line">newString1 = string1.<span class="built_in">format</span>(<span class="string">&#x27;Sean&#x27;</span>, name =　<span class="string">&#x27;Chen&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分裂字符串</span></span><br><span class="line">sep = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">stringList1 =　string1.split(sep)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取子串</span></span><br><span class="line">start = <span class="number">1</span>;</span><br><span class="line">string1[start:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补 &#x27;0&#x27; 向右对齐字符串</span></span><br><span class="line">month = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line">month.zfill(<span class="number">2</span>) =&gt; <span class="string">&#x27;05&#x27;</span></span><br><span class="line">month = <span class="string">&#x27;12&#x27;</span>;</span><br><span class="line">month.zfill(<span class="number">2</span>) =&gt; <span class="string">&#x27;12&#x27;</span></span><br><span class="line">month.zfill(<span class="number">3</span>) =&gt; <span class="string">&#x27;012&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="异常处理"><a class="markdownIt-Anchor" href="#异常处理">#</a> 异常处理</h2><ol><li><p>基本形式：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span> e</span><br><span class="line"><span class="keyword">except</span> (TypeError, AnotherError):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 清理，比如 close db;</span></span><br></pre></td></tr></table></figure></li><li><p>手动引发异常：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">raise</span> AssertionError  <span class="comment"># 断言失败</span></span><br><span class="line"><span class="keyword">raise</span> SystemExit</span><br><span class="line"><span class="comment"># 请求程序退出</span></span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;错误信息 :..&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="列表-字典以及元组的推导表达式"><a class="markdownIt-Anchor" href="#列表-字典以及元组的推导表达式">#</a> 列表、字典以及元组的推导表达式</h2><p>使代码更加易读易写的语法糖。</p><ol><li><p><strong>列表推导</strong></p><ul><li><p>用一个简练的表达式，通过筛选一个数据集并且转换经过筛选的元素的方式来简明地生成新列表。</p></li><li><p>基本形式：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[expr <span class="keyword">for</span> val <span class="keyword">in</span> collection <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure></li></ul><p>等价于</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> collection:</span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        result.append(expr)</span><br></pre></td></tr></table></figure><p>可以省略过滤条件，只留下表达式。</p></li><li><p><strong>字典推导</strong></p><ul><li><p>基本形式：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;key-expr : value-expr <span class="keyword">for</span> value <span class="keyword">in</span> collection <span class="keyword">if</span> condition&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>集合推导</strong></p><ul><li>基本形式：和列表推导一样，不过是用  <code>()</code>  而不是  <code>[]</code>  。</li></ul></li><li><p><strong>嵌套列表</strong></p><ul><li><p>基本形式：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[expr <span class="keyword">for</span> val <span class="keyword">in</span> collection <span class="keyword">for</span> innerVal <span class="keyword">in</span> val <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="单元测试"><a class="markdownIt-Anchor" href="#单元测试">#</a> 单元测试</h2><p>Python 自带 <code>unittest</code>  模块，可供我们编写单元测试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br></pre></td></tr></table></figure><p>我们可以编写继承于 <code>unittest.TestCase</code>  测试类的子类，并在子类中编写具体的测试函数。测试函数命必须以 <code>test_</code> 开头，否则不会被识别为测试函数，进而不会在运行单元测试时被运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSubclass</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_func</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.assertEqual(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 可以通过msg关键字参数提供测试失败时的提示消息</span></span><br><span class="line">        self.assertEqual(<span class="number">0</span>, <span class="number">0</span>, msg=<span class="string">&#x27;modified message&#x27;</span>)</span><br><span class="line">        self.assertGreater(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.assertIn(<span class="number">0</span>, [<span class="number">0</span>])</span><br><span class="line">        self.assertTrue(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 测试是否会抛出异常</span></span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(KeyError):</span><br><span class="line">            _ = <span class="built_in">dict</span>()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 被@unittest.skip装饰器装饰的测试类或测试函数会被跳过</span></span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params">reason=<span class="string">&#x27;just skip&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_skip</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;I shall never be tested&#x27;</span>)</span><br></pre></td></tr></table></figure><p>另外， <code>unittest.TestCase</code>  中还有两个特殊的成员函数，他们分别会在调用每一个测试函数的前后运行。在测试前连接数据库并在测试完成后断开连接是一种常见的使用场景。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># To do: connect to the database</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># To do: release the connection</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_database</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment"># To do: test the database</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>测试类编写完毕后，可以通过添加以下代码来将当前文件当成正常的 Python 脚本使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  unittest.main()</span><br></pre></td></tr></table></figure><h1 id="git"><a class="markdownIt-Anchor" href="#git">#</a>  <code>Git</code></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line">##############################################################################</span><br><span class="line"># 配置</span><br><span class="line">##############################################################################</span><br><span class="line">git config --global &quot;Your Name&quot;</span><br><span class="line">git config --global &quot;Email Address&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 初始化</span><br><span class="line">##############################################################################</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 提交修改</span><br><span class="line">##############################################################################</span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git add -u 提交work directory中所有已track的文件至staging area</span><br><span class="line">git commit -m &quot;descriptions&quot;</span><br><span class="line">git commit --amend 对最近一次的提交做内容修改</span><br><span class="line">git commit --amend --author &quot;user_name &lt;user_email&gt;&quot; 修改最近提交用户名和邮箱</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 查看状态、比对</span><br><span class="line">##############################################################################</span><br><span class="line">git status</span><br><span class="line">git status -s 文件状态缩略信息, 常见 A:新增; M:文件变更; ?:未track; D:删除</span><br><span class="line">git diff &lt;file&gt;</span><br><span class="line">git diff HEAD -- &lt;file&gt;查看工作区和版本库里面最新版本的区别</span><br><span class="line">git diff --check &lt;file&gt;     检查是否有空白错误(regex:&#x27; \&#123;1,\&#125;$&#x27;)</span><br><span class="line">git diff --cached &lt;file&gt;    查看已add的内容(绿M)</span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 查看历史版本、历史操作</span><br><span class="line">##############################################################################</span><br><span class="line">git log</span><br><span class="line">git reflog</span><br><span class="line">git log -n                  最近n条的提交历史</span><br><span class="line">git log &lt;branch_name&gt; -n    分支branch_name最近n条的提交历史</span><br><span class="line">git log --stat              历次commit的文件变化</span><br><span class="line">git log lhs_hash..rhs_hash  对比两次commit的变化(增删的主语为lhs, 如git log HEAD~2..HEAD == git log HEAD -3)</span><br><span class="line">git log -p                  历次commit的内容增删</span><br><span class="line">git log -p -W               历次commit的内容增删, 同时显示变更内容的上下文</span><br><span class="line">git log origin/EI-1024 -1 --stat -p -W 查看远端分支EI-1024前一次修改的详细内容</span><br><span class="line">git log origin/master..dev --stat -p -W 查看本地dev分支比远端master分支变化(修改)的详细内容</span><br><span class="line"></span><br><span class="line">git log &lt;branch_name&gt; --oneline   对提交历史单行排列</span><br><span class="line">git log &lt;branch_name&gt; --graph     对提交历史图形化排列</span><br><span class="line">git log &lt;branch_name&gt; --decorate  对提交历史关联相关引用, 如tag, 本地远程分支等</span><br><span class="line">git log &lt;branch_name&gt; --oneline --graph --decorate 拼接一下, 树形化显示历史</span><br><span class="line">git log --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%ai(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit 同上, 建议alais保存</span><br><span class="line"></span><br><span class="line">git log --since --after     显示时间之后的提交</span><br><span class="line">git log --until --before    显示时间之前的提交</span><br><span class="line">git --author                显示指定作者的提交</span><br><span class="line">git --committer             显示指定committer的提交(注:committer不一定是author)</span><br><span class="line">git log origin/b3.3/master --author=yx-ren --since=&quot;2019-10-01&quot; --before=&quot;2019-11-01&quot; 查看某作者在某发布版本最近一个月的提交, 常见于线上背锅</span><br><span class="line">git log origin/b3.0/master --author=some_leave --since=&quot;1 month ago&quot; 查看某刚离职同事过去一个月的提交, 常见于背锅</span><br><span class="line">git log --since=1.weeks     过去一周的提交(写周报的时候可以看看我这一周干了啥)</span><br><span class="line">git log --since=1.days      过去一天的提交(下班的时候可以看看我这一天干了啥)</span><br><span class="line">git log --since=&quot;1 weeks 2 days 3 hours 40 minutes 50 seconds ago&quot; 过去1周2天3小时40分50秒之内的提交</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 版本回退、前进</span><br><span class="line">##############################################################################</span><br><span class="line">git reset --hard HEAD^回退到上1版本</span><br><span class="line">git reset --hard HEAD~5回退到上5个版本</span><br><span class="line">git reset --hard id回退到指定版本</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 撤销修改</span><br><span class="line">##############################################################################</span><br><span class="line">git checkout -- &lt;file&gt;撤销修改：误修改工作区文件，未git add/commit</span><br><span class="line">git restore &lt;file&gt;撤销修改：误修改工作区文件，未git add/commit</span><br><span class="line">git reset HEAD &lt;file&gt;撤销git add：误将文件加入暂存区（git add），未git commit</span><br><span class="line">git reset --hard HEAD^撤销git commit：误将文件提交（一旦提交，只能通过版本回退进行撤销）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 删除与恢复</span><br><span class="line">##############################################################################</span><br><span class="line">git rm/add &lt;file&gt;</span><br><span class="line">git commit -m &quot;remove &lt;file&gt;&quot;删除版本库中的&lt;file&gt;：删除工作区文件后，继续删除版本库中相应的文件</span><br><span class="line">git checkout -- &lt;file&gt;根据版本库中的&lt;file&gt;恢复工作区&lt;file&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 关联GitHub远程仓库（本地到远程）</span><br><span class="line">##############################################################################</span><br><span class="line">git remote add origin &lt;remote address&gt;在本地工作区目录下按照 GitHub 提示进行关联</span><br><span class="line">git remote rm origin解除错误关联</span><br><span class="line">git push -u origin master第一次将本地仓库推送至远程仓库（每次在本地提交后进行操作）</span><br><span class="line">git push origin master以后每次将本地仓库推送至远程仓库（每次在本地提交后进行操作）</span><br><span class="line">&lt;remote address&gt;:</span><br><span class="line">git@github.com:&lt;username&gt;/&lt;repository&gt;.git</span><br><span class="line">https://github.com/&lt;username&gt;/&lt;repository&gt;.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 克隆GitHub远程仓库（远程到本地）</span><br><span class="line">##############################################################################</span><br><span class="line">git clone &lt;remote address&gt;git协议速度更快但通常公司内网不允许，https协议速度慢</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 分支管理：创建、切换、查看、合并、删除</span><br><span class="line">##############################################################################</span><br><span class="line">git branch &lt;branch name&gt;创建&lt;branch name&gt;分支</span><br><span class="line">git checkout &lt;branch name&gt;切换至&lt;branch name&gt;分支</span><br><span class="line">git switch &lt;branch name&gt;切换至&lt;branch name&gt;分支</span><br><span class="line">git checkout -b &lt;branch name&gt;创建并切换至&lt;branch name&gt;分支</span><br><span class="line">git switch -c &lt;branch name&gt;创建并切换至&lt;branch name&gt;分支</span><br><span class="line">git branch查看已有分支（* 表示当前分支）</span><br><span class="line">git merge &lt;branch name&gt;合并&lt;branch name&gt;到当前分支（通常在master分支下操作）</span><br><span class="line">git branch -d &lt;branch name&gt;删除分支</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 解决合并冲突</span><br><span class="line">##############################################################################</span><br><span class="line">合并时报错“分支发生冲突”，首先vim相应文件，修改冲突位置，然后按照git add/commit重新提交，最后删除多余分支即可。</span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">git log --graph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 分支管理：合并后删除分支也在 log 中保留分支记录</span><br><span class="line">##############################################################################</span><br><span class="line">git merge --no-ff -m &quot;descriptions&quot; &lt;branch name&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 开发流程：</span><br><span class="line">##############################################################################</span><br><span class="line">master分支发布稳定版本</span><br><span class="line">dev分支发布开发版本</span><br><span class="line">&lt;developer name&gt;分支个人开发分支（个人开发完成将该分支并入dev，同时保留该分支，继续开发）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># Bug分支管理（建立单独分支进行bug修复）</span><br><span class="line">##############################################################################</span><br><span class="line">软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</span><br><span class="line">git stash保存当前工作现场（在dev未完成开发，但master有bug需要修复）</span><br><span class="line">git stash pop回到dev分支后恢复工作现场（list中的现场会同时被删除）</span><br><span class="line">git stash list查看当前存储的工作现场</span><br><span class="line">git stash apply stash@&#123;#&#125;回到指定工作现场（list中的现场不会被删除，需要用git stash drop）</span><br><span class="line">git stash drop stash@&#123;#&#125;删除指定工作现场</span><br><span class="line">git cherry-pick &lt;id&gt;在master修复好bug后，在dev复制一遍bug修复流程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># Feature分支管理（建立单独分支添加新功能）</span><br><span class="line">##############################################################################</span><br><span class="line">软件开发中，总有无穷无尽的新的功能要不断添加进来。添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</span><br><span class="line">git branch -D &lt;branch name&gt;强制删除分支（丢弃未合并分支）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 协作与分支推送</span><br><span class="line">##############################################################################</span><br><span class="line">User 1:</span><br><span class="line">git remote [-v]查看远程库信息（-v 查看详细信息）</span><br><span class="line">git push origin [master/dev/...]推送指定分支到远程</span><br><span class="line">User 2:</span><br><span class="line">git clone &lt;remote address&gt;克隆到本地（只能克隆master）</span><br><span class="line">git checkout -b dev origin/dev本地新建分支并关联远程</span><br><span class="line">git add/commit/push添加、提交、推送更新</span><br><span class="line">User 1:</span><br><span class="line">git add/commit/push推送时报错（与user 2推送的更新冲突）</span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line">git branch --set-upstream-to=origin/&lt;branch&gt; &lt;branch&gt;本地与远程关联</span><br><span class="line">git pull拉取远程文件（并解决冲突）</span><br><span class="line">git commit/push重新提交并推送</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 标签管理（常用于版本管理）：查看、创建、操作</span><br><span class="line">##############################################################################</span><br><span class="line">git tag查看标签</span><br><span class="line">git show &lt;tag name&gt;查看指定标签</span><br><span class="line">git log --pretty=oneline --abbrev-commit --decorate=full在log中显示标签</span><br><span class="line">git tag &lt;tag name&gt;为上次commit位置打标签</span><br><span class="line">git tag &lt;tag name&gt; &lt;commit id&gt;为指定commit位置打标签</span><br><span class="line">git tag -a &lt;tag name&gt; -m &quot;descriptions&quot; &lt;commit id&gt;为指定commit打标并添加描述</span><br><span class="line">git tag -d &lt;tag name&gt;删除本地标签</span><br><span class="line">git push origin &lt;tag name&gt;推送指定标签到远程</span><br><span class="line">git push origin --tags推送所有本地标签到远程</span><br><span class="line">git push origin :refs/tags/&lt;tag name&gt;删除远程标签（先删除本地标签）</span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># rebase(换基)</span><br><span class="line">##############################################################################</span><br><span class="line"># rebase 在日常中常用功能主要是两个, 多人协同开发定期rebase master以及压缩某分支多个commit</span><br><span class="line">git rebase master 常见于多人开发, 每个开发人员从master checkout出自己的分支, 开发一段时间后提交至master之前最好rebase一下, 防止冲突,</span><br><span class="line">              就算真有冲突在本地解决好过强制提交, 开发流程中尽量保证master的干净整洁</span><br><span class="line">git rebase -i HEAD~n 压缩当前分支的n个commit并合并为1个commit, 常见第一行为pick, 剩下的n-1行为squash</span><br><span class="line"></span><br><span class="line">git rebase --abort # rebase过程中发生错误, 可以利用该命令终止整个rebase过程</span><br><span class="line">git rebase --continue # rebase过程中发生冲突, 在解决冲突后可以利用该命令进行后续过程</span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 打patch(补丁)</span><br><span class="line">##############################################################################</span><br><span class="line"># 生成diff patch文件(git可以识别diff文件)</span><br><span class="line">git &lt;branch&gt; log -n -p &gt; diff.patch # 生成某分支过去n个commit的文件diff信息至单个diff文件</span><br><span class="line">git diff &lt;--cached&gt; diff.patch # 针对当前缓存区的内容生成diff文件</span><br><span class="line"></span><br><span class="line"># 利用apply打patch</span><br><span class="line">git apply --check diff.patch    #检查是否可以正常应用, 无回显证明无冲突</span><br><span class="line">git apply --stat diff.patch     #查看应用diff文件后的文件变化</span><br><span class="line">git apply diff.patch            #打patch, 仅仅改变文件信息, 无commit信息, 仍然需要add, commit</span><br><span class="line"></span><br><span class="line"># 利用--format-patch生成patch, 带commit信息</span><br><span class="line">git format-patch &lt;branch&gt; -n 　 #生成分支&lt;branch&gt;最近的n次commit的patch</span><br><span class="line">git format-patch &lt;r1&gt;..&lt;r2&gt;     #生成两个commit间的修改的patch（包含两个commit. &lt;r1&gt;和&lt;r2&gt;都是具体的commit号)</span><br><span class="line">git format-patch -1 &lt;r1&gt;        #生成单个commit的patch</span><br><span class="line">git format-patch &lt;r1&gt;           #生成某commit以来的修改patch（不包含该commit）</span><br><span class="line">git format-patch --root &lt;r1&gt;　　#生成从根到r1提交的所有patch</span><br><span class="line"></span><br><span class="line"># 利用am打patch</span><br><span class="line">git apply --check 0001-update-bash.sh.patch #检查patch是否冲突可用</span><br><span class="line">git apply --stat 0001-update-bash.sh.patch  #检查patch文件变更情况, 无回显证明无冲突</span><br><span class="line">git am 0001-update-bash.sh.patch            #将该patch打上到当前分支, 带commit信息</span><br><span class="line">git am ./*.patch                            #将当前路径下的所有patch按照先后顺序打上</span><br><span class="line">git am --abort                              #终止整个打patch的过程, 类似rebase --abort</span><br><span class="line">git am --resolved                           #解决冲突后, 可以执行该命令进行后续的patch, 类似rebase --continue</span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 使用GitHub</span><br><span class="line">##############################################################################</span><br><span class="line">fork --&gt; clone --&gt; add/commit/push --&gt; pull request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 其他配置</span><br><span class="line">##############################################################################</span><br><span class="line">git config --global color.ui true显示颜色</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 配置.gitignore文件</span><br><span class="line">##############################################################################</span><br><span class="line">/&lt;dir name&gt;/忽略文件夹</span><br><span class="line">*.zip忽略.zip文件</span><br><span class="line">/&lt;dir name&gt;/&lt;file name&gt;忽略指定文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 文件.gitignore生效后</span><br><span class="line">##############################################################################</span><br><span class="line">git add -f &lt;file&gt;强制添加</span><br><span class="line">git check-ignore -v &lt;file&gt;查看生效规则</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># 配置别名</span><br><span class="line">##############################################################################</span><br><span class="line">git config [--global] alias.&lt;alias&gt; &#x27;&lt;original command&gt;&#x27;为所有工作区/当前工作区配置别名</span><br><span class="line">.git/config当前工作区的配置文件</span><br><span class="line">~/.gitconfig当前用户的配置文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##############################################################################</span><br><span class="line"># References</span><br><span class="line">##############################################################################</span><br><span class="line">https://www.liaoxuefeng.com/wiki/896043488029600</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;this is a cheatsheet, is used for get help quickly.&lt;/p&gt;
&lt;img data-src=&quot;/posts/1b392612/2022-08-01-21-43-59.png&quot; class=&quot;&quot;&gt;
&lt;h1 id=&quot;bash&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="cheatsheet" scheme="https://smile1231.github.io/categories/cheatsheet/"/>
    
    
    <category term="cheatsheet" scheme="https://smile1231.github.io/tags/cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter notebook使用</title>
    <link href="https://smile1231.github.io/posts/53fbbba3/"/>
    <id>https://smile1231.github.io/posts/53fbbba3/</id>
    <published>2022-07-17T14:44:03.000Z</published>
    <updated>2022-07-17T14:50:55.332Z</updated>
    
    <content type="html"><![CDATA[<p><code>Jupyter</code>  不乏为一个很好的编译工具，搭配上 <code>Anoconda</code>  简直是无敌了</p><h2 id="jupyter常用快捷键"><a class="markdownIt-Anchor" href="#jupyter常用快捷键">#</a>  <code>Jupyter</code>  常用快捷键：</h2><h3 id="命令模式按esc键"><a class="markdownIt-Anchor" href="#命令模式按esc键">#</a> 命令模式（按 <code>Esc</code>  键）：</h3><ol><li>Enter：转入编辑模式</li><li>Shift-Enter：运行本单元，选中下个单元</li><li>Ctrl-Enter：运行本单元</li><li>Alt-Enter：运行本单元，在其下插入新单元</li><li>Y：单元转入代码状态</li><li>M：单元转入 markdown 状态</li><li>R：单元转入 raw 状态</li><li>1：设定 1 级标题</li><li>2：设定 2 级标题</li><li>3：设定 3 级标题</li><li>4：设定 4 级标题</li><li>5：设定 5 级标题</li><li>6：设定 6 级标题</li><li>Up：选中上方单元</li><li>K：选中上方单元</li><li>Down：选中下方单元</li><li>J：选中下方单元</li><li>Shift-K：扩大选中上方单元</li><li>Shift-J：扩大选中下方单元</li><li>A：在上方插入新单元</li><li>B：在下方插入新单元</li><li>X：剪切选中的单元</li><li>C：复制选中的单元</li><li>Shift-V：粘贴到上方单元</li><li>V：粘贴到下方单元</li><li>Z：恢复删除的最后一个单元</li><li>D,D：删除选中的单元</li><li>Shift-M：合并选中的单元</li><li>Ctrl-S：文件存盘</li><li>S：文件存盘</li><li>L：转换行号</li><li>O：转换输出</li><li>Shift-O：转换输出滚动</li><li>Esc：关闭页面</li><li>Q：关闭页面</li><li>H：显示快捷键帮助</li><li>I,I：中断 Notebook 内核</li><li>0,0：重启 Notebook 内核</li><li>Shift：忽略</li><li>Shift-Space：向上滚动</li><li>Space：向下滚动</li></ol><h3 id="编辑模式"><a class="markdownIt-Anchor" href="#编辑模式">#</a> 编辑模式：</h3><ol><li>Tab : 代码补全或缩进</li><li>Shift-Tab : 提示</li><li>Ctrl-] : 缩进</li><li>Ctrl-[ : 解除缩进</li><li>Ctrl-A : 全选</li><li>Ctrl-Z : 复原</li><li>Ctrl-Shift-Z : 再做</li><li>Ctrl-Y : 再做</li><li>Ctrl-Home : 跳到单元开头</li><li>Ctrl-Up : 跳到单元开头</li><li>Ctrl-End : 跳到单元末尾</li><li>Ctrl-Down : 跳到单元末尾</li><li>Ctrl-Left : 跳到左边一个字首</li><li>Ctrl-Right : 跳到右边一个字首</li><li>Ctrl-Backspace : 删除前面一个字</li><li>Ctrl-Delete : 删除后面一个字</li><li>Esc : 进入命令模式</li><li>Ctrl-M : 进入命令模式</li><li>Shift-Enter : 运行本单元，选中下一单元</li><li>Ctrl-Enter : 运行本单元</li><li>Alt-Enter : 运行本单元，在下面插入一单元</li><li>Ctrl-Shift-- : 分割单元</li><li>Ctrl-Shift-Subtract : 分割单元</li><li>Ctrl-S : 文件存盘</li><li>Shift : 忽略</li><li>Up : 光标上移或转入上一单元</li><li>Down : 光标下移或转入下一单元</li></ol><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项">#</a> 注意事项：</h2><p><code>jupyter notebook</code>  每一个 <code>cell</code>  运行完后都会把这个 <code>cell</code>  中的变量保存到内存中，如果在一个 <code>cell</code>  中修改了之前的变量，再此运行这个 <code>cell</code>  的时候可能会导致一些问题产生。比如以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个cell中的代码</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个cell中的代码</span></span><br><span class="line">c = a/b</span><br><span class="line">b = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>因为第二个 <code>cell</code>  修改了 <code>b</code>  变量，此时在整个环境中 <code>b</code>  都是等于 0 的，所以以后再运行这个 <code>cell</code>  的时候， <code>a/b</code>  这个就会出问题了。这时候可以使用 <code>Kernel-&gt;Rstart&amp;Run All</code>  来重新运行整个项目。</p><h2 id="mac乱码解决"><a class="markdownIt-Anchor" href="#mac乱码解决">#</a>  <code>Mac</code>  乱码解决</h2><h3 id="步骤一-查看自己的字体中有哪种中文字体"><a class="markdownIt-Anchor" href="#步骤一-查看自己的字体中有哪种中文字体">#</a> 步骤一 查看自己的字体中有哪种中文字体</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">a=<span class="built_in">sorted</span>([f.name <span class="keyword">for</span> f <span class="keyword">in</span> matplotlib.font_manager.fontManager.ttflist])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><img data-src="/posts/53fbbba3/2022-07-17-22-46-35.png" class=""><p>找到支持中文的字体</p><img data-src="/posts/53fbbba3/2022-07-17-22-46-44.png" class=""><h3 id="选择相应的字体"><a class="markdownIt-Anchor" href="#选择相应的字体">#</a> 选择相应的字体</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=<span class="string">&#x27;Heiti TC&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 负号正常显示</span></span><br></pre></td></tr></table></figure><img data-src="/posts/53fbbba3/2022-07-17-22-46-51.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Jupyter&lt;/code&gt;  不乏为一个很好的编译工具，搭配上 &lt;code&gt;Anoconda&lt;/code&gt;  简直是无敌了&lt;/p&gt;
&lt;h2 id=&quot;jupyter常用快捷键&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jupyte</summary>
      
    
    
    
    <category term="Machine Learning" scheme="https://smile1231.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Python" scheme="https://smile1231.github.io/tags/Python/"/>
    
    <category term="Jupyter" scheme="https://smile1231.github.io/tags/Jupyter/"/>
    
    <category term="Machine Learning" scheme="https://smile1231.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning essays</title>
    <link href="https://smile1231.github.io/posts/1b930e38/"/>
    <id>https://smile1231.github.io/posts/1b930e38/</id>
    <published>2022-07-17T13:44:54.000Z</published>
    <updated>2022-07-29T09:48:22.110Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看 <code>数据挖掘</code> 以及 <code>ML</code>  的课程</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmh3bC5jb29sL3B5dGhvbi8lRTYlOTUlQjAlRTYlOEQlQUUlRTYlOEMlOTYlRTYlOEUlOTgv">数据挖掘资料</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnVtcHkub3JnLmNuL3JlZmVyZW5jZS8=">numpy reference</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnL3N0YWJsZS9tb2R1bGVzL2NsYXNzZXMuaHRtbA==">Sklearn Reference</span></p><p><span class="exturl" data-url="aHR0cDovL3dlYmdyYXBodml6LmNvbS8=">WebGraph</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cua2FnZ2xlLmNvbS9kYXRhc2V0cy8=">Kaggle</span></p><h2 id="python中的head方法"><a class="markdownIt-Anchor" href="#python中的head方法">#</a>  <code>python</code>  中的 <code>head</code>  方法</h2><p><code>head()</code>  根据位置返回对象的前 <code>n</code>  行。 如果你的对象中包含正确的数据类型，则对于快速测试很有用。 此方法用于返回数据帧或序列的前 <code>n</code>  行 (默认值为 <code>5</code> )。  <code>n：</code> 它是指返回行数的整数值。</p><h2 id="pandas交叉表"><a class="markdownIt-Anchor" href="#pandas交叉表">#</a>  <code>pandas</code>  交叉表</h2><p>交叉表是由列和行组成的双向表。 它也被称为数据透视表或多维表。 其最大的优势是能够构造、汇总及显示大量数据。 交叉表还可用于确定行变量与列变量之间是否存在关系。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnRpYmNvLmNvbS9wdWIvc3BvdGZpcmVfd2ViX3BsYXllci82LjAuMC1ub3ZlbWJlci0yMDEzL3poLUNOL1dlYkhlbHAvR1VJRC0xRjY3QjJGMy0wNTZCLTQzMjQtQjJDQy0xNEQ3M0QzNzg2OTMuaHRtbA==">参考链接</span></p><h2 id="网格搜索gridsearchcv"><a class="markdownIt-Anchor" href="#网格搜索gridsearchcv">#</a> 网格搜索（ <code>GridSearchCV</code> ）</h2><p><code>GridSearch和CV</code> ，即网格搜索和交叉验证</p><p>网格搜索算法是一种通过遍历给定的参数组合来优化模型表现的方法</p><p>为何使用：超参数选择不恰当，就会出现欠拟合或者过拟合的问题</p><p>内容： 网格搜索，搜索的是参数，即在指定的参数范围内，按步长依次调整参数，利用调整的参数训练学习器，从所有的参数中找到在验证集上精度最高的参数，这其实是一个训练和比较的过程。</p><p><code>Grid Search</code> ：一种调参手段；穷举搜索：在所有候选的参数选择中，通过循环遍历，尝试每一种可能性，表现最好的参数就是最终的结果</p><p>用法：网格搜索适用于三四个（或者更少）的超参数（当超参数的数量增长时，网格搜索的计算复杂度会呈现指数增长，这时候则使用随机搜索），用户列出一个较小的超参数值域，这些超参数至于的笛卡尔积（排列组合）为一组组超参数。网格搜索算法使用每组超参数训练模型并挑选验证集误差最小的超参数组合</p><p>缺点：遍历所有组合，比较耗时</p><h2 id="打印表头"><a class="markdownIt-Anchor" href="#打印表头">#</a> 打印表头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">titanic = pd.read_csv(<span class="string">&quot;./titanic/train.csv&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(titanic.columns)</span><br></pre></td></tr></table></figure><img data-src="/posts/1b930e38/2022-07-29-13-01-44.png" class=""><h2 id="pandas的inplace参数"><a class="markdownIt-Anchor" href="#pandas的inplace参数">#</a>  <code>pandas</code>  的 <code>inplace</code>  参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 关于`python`中的随机种子——`random_state`</span><br><span class="line"></span><br><span class="line">`random_state`是一个随机种子，是在任意带有随机性的类或函数里作为参数来控制随机模式。当`random_state`取某一个值时，也就确定了一种规则。</span><br><span class="line"></span><br><span class="line">`random_state`可以用于很多函数，一般用于以下三个地方：1、训练集测试集的划分 2、构建决策树 3、构建随机森林</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 查看数据类型</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># type(a)   DataFrame数据类型</span><br><span class="line"></span><br><span class="line">df.dtypes  #查看各列数据类型</span><br><span class="line">df[A].dtypes  #查看A列数据类型</span><br><span class="line"></span><br><span class="line">df[A].astypes(int)#将A列数据类型转换为int</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在看 &lt;code&gt;数据挖掘&lt;/code&gt; 以及 &lt;code&gt;ML&lt;/code&gt;  的课程&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLmh3bC5jb29sL3B5dGhvbi8lRTYlOTUlQjAl</summary>
      
    
    
    
    <category term="Machine Learning" scheme="https://smile1231.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="https://smile1231.github.io/tags/Machine-Learning/"/>
    
    <category term="numpy" scheme="https://smile1231.github.io/tags/numpy/"/>
    
    <category term="pandas" scheme="https://smile1231.github.io/tags/pandas/"/>
    
    <category term="sklearn" scheme="https://smile1231.github.io/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>The learning of Jenkins Grammer</title>
    <link href="https://smile1231.github.io/posts/273d98ce/"/>
    <id>https://smile1231.github.io/posts/273d98ce/</id>
    <published>2022-07-10T05:44:11.000Z</published>
    <updated>2022-08-10T16:55:57.195Z</updated>
    
    <content type="html"><![CDATA[<p>Recently , i use jenkinsFile to realize some function</p><h2 id="处理json"><a class="markdownIt-Anchor" href="#处理json">#</a> 处理 <code>JSON</code></h2><h2 id="压缩方法"><a class="markdownIt-Anchor" href="#压缩方法">#</a> 压缩方法</h2><p>可能是自带的方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip <span class="attr">zipFile:</span> <span class="string">&#x27;&lt;zipFileName&gt;&#x27;</span>, <span class="attr">archive:</span> <span class="literal">true</span>, <span class="attr">glob:</span> <span class="string">&#x27;&lt;file_path&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example： zip zipFile: &#x27;upload.zip&#x27;, archive: true, glob: &#x27;/binary/&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="json操作"><a class="markdownIt-Anchor" href="#json操作">#</a>  <code>JSON</code>  操作</h2><blockquote><p>读取：从文件中读取   <code>JSON</code>  字符串，并直接解析为对象</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从文件中读取</span></span><br><span class="line"><span class="keyword">def</span> dataObject = readJSON <span class="attr">file:</span> <span class="string">&#x27;message2.json&#x27;</span></span><br><span class="line">echo <span class="string">&quot;color: $&#123;dataObject.attachments[0].color&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从文本中读取</span></span><br><span class="line"><span class="keyword">def</span> dataObject = readJSON <span class="attr">text:</span> <span class="string">&#x27;message2.json&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>写入文件</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存：将对象直接写入文件，无需先转化为 JSON 字符串</span></span><br><span class="line"><span class="comment">// Building json from code and write it to file</span></span><br><span class="line">writeJSON(<span class="attr">file:</span> <span class="string">&#x27;message1.json&#x27;</span>, <span class="attr">json:</span> dataObject)</span><br></pre></td></tr></table></figure><h2 id="groovy获取shell执行结果和执行状态码"><a class="markdownIt-Anchor" href="#groovy获取shell执行结果和执行状态码">#</a> groovy 获取 shell 执行结果和执行状态码</h2><blockquote><p>获取执行结果</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = sh(<span class="attr">script:</span> <span class="string">&quot;shell command&quot;</span>, <span class="attr">returnStdout:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><blockquote><p>获取执行状态码（0 或者非 0）</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">excuteCode = sh(<span class="attr">script:</span> <span class="string">&quot;shell command&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="jenkins声明式pipeline中单引号和双引号的区别"><a class="markdownIt-Anchor" href="#jenkins声明式pipeline中单引号和双引号的区别">#</a>  <code>Jenkins</code>  声明式 <code>Pipeline</code>  中单引号和双引号的区别</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzE5MzkyL2FydGljbGUvZGV0YWlscy8xMjE0NzI4OTQ=">原文地址</span></p><ol><li><p>如果使用三个单引号，那么其中的字符，除了 <code>'\'</code>  会被解析为转义字符外，其他都会被原封不动地传递给 <code>P</code> owershell`，不作任何解析</p></li><li><p>如果使用三个双引号，则绝大部分字符也会被原封不动地传递给 <code>Powershel</code> l，但如下三个字符除外：</p><p>①  <code>'$'</code> （美元字符） <code>：</code> 用于引用 <code>Jenkinsfile</code>  中的环境变量。</p><p>②  <code>'\'</code> （反斜杠字符） <code>：</code> 用于转义。</p><p>③  <code>' &quot; '</code> （双引号字符）：本身无特殊含义，但是三个双引号之间不允许出现非转义的双引号字符，否则将导致语法错误。</p></li></ol><p>如果确实需要使用上述三个字符本身，而不是使用其特殊含义，则必须在前面加上 <code>'\'</code>  字符进行转义，即： <code>'\$'</code> 、 <code>'\\'</code> 、 <code>'\&quot;'</code> 。</p><blockquote><p>总结 <code>：</code></p></blockquote><p>三单引号的优点是，语法简洁，不存在过多转义；缺点是，无法引用 <code>Jenkins</code>  中的环境变量。而三双引号的优缺点与此正好相反。</p><p>个人对于使用三双引号的建议是：仅在必须声明和引用 <code>Powershell</code>  变量（而非 <code>Jenkins</code>  环境变量）时，才使用三单引号或三双引号。其他时候，每一条命令都应拆分，并以 <code>powershell</code>  开头。这样做的好处是便于调试（尤其是使用 <code>Blue Ocean</code>  调试时）。在这一前提下，如果需要在三引号中引用 <code>Jenkins</code>  环境变量，则必须使用三双引号；否则，使用三单引号表达更为简洁。</p><h2 id="jenkins-pipeline中获取shell命令的标准输出或者状态"><a class="markdownIt-Anchor" href="#jenkins-pipeline中获取shell命令的标准输出或者状态">#</a>  <code>jenkins pipeline</code>  中获取 <code>shell</code>  命令的标准输出或者状态</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取标准输出</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">result = sh <span class="attr">returnStdout:</span> <span class="literal">true</span> ,<span class="attr">script:</span> <span class="string">&quot;&lt;shell command&gt;&quot;</span></span><br><span class="line">result = result.trim()</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">result = sh(<span class="attr">script:</span> <span class="string">&quot;&lt;shell command&gt;&quot;</span>, <span class="attr">returnStdout:</span> <span class="literal">true</span>).trim()</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">sh <span class="string">&quot;&lt;shell command&gt; &gt; commandResult&quot;</span></span><br><span class="line">result = readFile(<span class="string">&#x27;commandResult&#x27;</span>).trim()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取执行状态</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">result = sh <span class="attr">returnStatus:</span> <span class="literal">true</span> ,<span class="attr">script:</span> <span class="string">&quot;&lt;shell command&gt;&quot;</span></span><br><span class="line">result = result.trim()</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">result = sh(<span class="attr">script:</span> <span class="string">&quot;&lt;shell command&gt;&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span>).trim()</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">sh <span class="string">&#x27;&lt;shell command&gt;; echo $? &gt; status&#x27;</span></span><br><span class="line"><span class="keyword">def</span> r = readFile(<span class="string">&#x27;status&#x27;</span>).trim()</span><br><span class="line"></span><br><span class="line"><span class="comment">//无需返回值，仅执行shell命令</span></span><br><span class="line"><span class="comment">//最简单的方式</span></span><br><span class="line">sh <span class="string">&#x27;&lt;shell command&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>例如：</p><blockquote><p>工作中需要获取 <code>shell </code> 命令的执行状态，返回 0 或者非 0<br> <code>groovy</code>  语句写法为：</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> exitValue = sh(<span class="attr">script:</span> <span class="string">&quot;grep -i &#x27;xxx&#x27; /etc/myfolder&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span>)</span><br><span class="line">echo <span class="string">&quot;return exitValue :$&#123;exitValue&#125;&quot;</span></span><br><span class="line"><span class="keyword">if</span>(exitValue != <span class="number">0</span>)&#123;</span><br><span class="line">    执行操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>grep</code>  命令执行没有报错，正常情况下 <code>exitValue</code>  为 <code>0</code> ，报错则为非 <code>0</code></p><p>需要注意的是当命令中存在重定向的时候，会出现返回状态异常，因为我们要返回状态，删除重定向（ <code>&amp;&gt;/dev/null</code> ）即可，比如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> exitValue = sh(<span class="attr">script:</span> <span class="string">&quot;grep -i &#x27;xxx&#x27; /etc/myfolder &amp;&gt;/dev/null&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span>)</span><br><span class="line">xxx不存在，正常逻辑是返回非<span class="number">0</span>，但是实际中返回的是<span class="number">0</span> 。可以理解为先执行命令然后赋值操作，类似下面的动作：（个人理解）</span><br><span class="line">sh <span class="string">&quot;ls -l &gt; commandResult&quot;</span></span><br><span class="line">result = readFile(<span class="string">&#x27;commandResult&#x27;</span>).trim()</span><br></pre></td></tr></table></figure><p><code>groovy</code>  中存在另外一种解析 <code>shell</code>  脚本的方法，在 <code>jenkins pipeline</code>  中会使用会报异常， <code>jenkins</code>  相关资料中也没有看到此种用法，应该是不支持</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovy<span class="selector-class">.lang</span><span class="selector-class">.MissingPropertyException</span>: No such property: rhel <span class="keyword">for</span> class: groovy<span class="selector-class">.lang</span>.Binding</span><br></pre></td></tr></table></figure><p>写法为：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> command = <span class="string">&quot;git log&quot;</span></span><br><span class="line"><span class="keyword">def</span> proc = command.execute()</span><br><span class="line">proc.waitFor()</span><br><span class="line"><span class="keyword">def</span> status = proc.exitValue()</span><br></pre></td></tr></table></figure><h2 id="pipleline讲解"><a class="markdownIt-Anchor" href="#pipleline讲解">#</a>  <code>pipleline</code>  讲解</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">    /**</span><br><span class="line">    * agent none ，这样可以在具体的stages中定义</span><br><span class="line">agent：指定流水线的执行位置，流水线中的每个阶段都必须在某个地方（物理机，虚拟机或 Docker 容器）执行，agent 部分即指定具体在哪里执行。</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    *说明某项目要在jdk8的环境中创建</span><br><span class="line">    *实际上agent &#123; label <span class="string">&#x27;jdk8&#x27;</span> &#125;是 agent &#123; node &#123; label <span class="string">&#x27;jdk8&#x27;</span> &#125; &#125; 的简写。 </span><br><span class="line">    */</span><br><span class="line">    label <span class="string">&#x27;jdk8&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  /*</span><br><span class="line">  environment指令指定一系列键值对，这些对值将被定义为所有步骤的环境变量或阶段特定步骤</span><br><span class="line"></span><br><span class="line">environment&#123;…&#125;, 大括号里面写一些键值对，也就是定义一些变量并赋值，这些变量就是环境变量。环境变量的作用范围，取决你environment&#123;…&#125;所写的位置，你可以写在顶层环境变量，让所有的stage下的step共享这些变量，也可以单独定义在某一个stage下，只能供这个stage去调用变量，其他的stage不能共享这些变量。一般来说，我们基本上上定义全局环境变量，如果是局部环境变量，我们直接用def关键字声明就可以，没必要放environment&#123;…&#125;里面。</span><br><span class="line">*/</span><br><span class="line">  environment&#123;</span><br><span class="line">    project = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    staticname = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    appname= <span class="string">&#x27;&#x27;</span></span><br><span class="line">    version=<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">//  需要配置jdk环境，那这个里面的jdk环境与agent label有啥区别</span><br><span class="line">tools&#123;</span><br><span class="line">   jdk <span class="string">&#x27;jdk1.8.0_121&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">// 定义阶段，可以设置并行和串行，默认情况就是串行的，默认的如下举例</span><br><span class="line">/**</span><br><span class="line">* stage(<span class="string">&#x27;Parallel Stage&#x27;</span>) &#123;</span><br><span class="line">*           failFast <span class="literal">true</span></span><br><span class="line">*            parallel &#123;</span><br><span class="line">*                stage(<span class="string">&#x27;并行一&#x27;</span>) &#123;</span><br><span class="line">*                    steps &#123;</span><br><span class="line">*                        <span class="built_in">echo</span> <span class="string">&quot;并行一&quot;</span></span><br><span class="line">*                    &#125;</span><br><span class="line">*                stage(<span class="string">&#x27;并行2&#x27;</span>) &#123;</span><br><span class="line">*                    steps &#123;</span><br><span class="line">*                        <span class="built_in">echo</span> <span class="string">&quot;并行2&quot;</span></span><br><span class="line">*                    &#125;</span><br><span class="line">*            &#125;</span><br><span class="line">*&#125;</span><br><span class="line"></span><br><span class="line">**/</span><br><span class="line">  stages &#123;</span><br><span class="line">     stage (<span class="string">&#x27;build&#x27;</span>) &#123;</span><br><span class="line">         steps &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&#x27;build&#x27;</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently , i use jenkinsFile to realize some function&lt;/p&gt;
&lt;h2 id=&quot;处理json&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#处理json&quot;&gt;#&lt;/a&gt; 处理 &lt;code&gt;JSON</summary>
      
    
    
    
    <category term="Jenkins" scheme="https://smile1231.github.io/categories/Jenkins/"/>
    
    
    <category term="Jenkins" scheme="https://smile1231.github.io/tags/Jenkins/"/>
    
    <category term="Groovy" scheme="https://smile1231.github.io/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>如何让自己的博客被Google以及百度收录</title>
    <link href="https://smile1231.github.io/posts/3c59e6c8/"/>
    <id>https://smile1231.github.io/posts/3c59e6c8/</id>
    <published>2022-07-08T06:23:55.000Z</published>
    <updated>2022-07-08T15:40:52.041Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章： <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzU1MDM2Mg==">https://segmentfault.com/a/1190000037550362</span></p><p>这篇文章讲的很详细</p><h2 id="agenda"><a class="markdownIt-Anchor" href="#agenda">#</a> Agenda</h2><p>突然奇想，我的博客能在 <code>Google</code>  或者百度上搜到吗，果不其然，是不能的，测试方法：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">site:</span><span class="params">&lt;域名&gt;</span></span><br></pre></td></tr></table></figure><p>例如我的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">site</span>:smile<span class="number">1231</span>.github.io</span><br></pre></td></tr></table></figure><img data-src="/posts/3c59e6c8/2022-07-08-22-34-25.png" class=""><p>百度还在申请中：</p><img data-src="/posts/3c59e6c8/2022-07-08-22-36-33.png" class=""><h2 id="百度申请"><a class="markdownIt-Anchor" href="#百度申请">#</a> 百度申请</h2><p>我们需要登录<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnNlZ21lbnRmYXVsdC5jb20vP2VuYz1NMG9kZGFxWmwlMkJBNzdEZVY1WnA1RkElM0QlM0QuNTg0SyUyQnFLb0pEVVdxZCUyQlpIVUxIcGFoMGVGem12OTRhJTJGdjIlMkI1Vlg1ZFVrJTNE">百度搜索资源平台</span>， 只要是百度旗下的账号就可以， 登录成功之后在站点管理中点击<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnNlZ21lbnRmYXVsdC5jb20vP2VuYz15bndBbGYlMkZ5UHZuJTJCZUk1cEFSJTJCOFRRJTNEJTNELkZLJTJGMVpnRWtBMHc1JTJGOENOY1dnc09tVzR2NXkwdzltJTJCS3drdW5iR0xvd3FJbW8lMkZ0bFA0cVN6UFpJakFxSmJRNQ==">添加网站</span>，输入域名，按照步骤走。</p><blockquote><p>输入网址</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-39-27.png" class=""><blockquote><p>一些站点标签</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-41-13.png" class=""><blockquote><p>需要验证所有权，所以这边我选择了文件验证，需要将 <code>html</code>  文件进行下载</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-41-04.png" class=""><p>将 <code>html</code>  文件放在 <code>theme</code>  主题下的 <code>source</code>  文件夹中</p><img data-src="/posts/3c59e6c8/2022-07-08-22-43-41.png" class=""><blockquote><p><code>Google</code>  文件下载<br>这边可以同时将<a href="https://search.google.com/search-console/welcome"> <code>Google</code>  的 <code>html</code>  文件</a>也下载了</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-50-55.png" class=""><p>点击下载放在同样的位置：</p><img data-src="/posts/3c59e6c8/2022-07-08-22-53-06.png" class=""><blockquote><p>依次执行 <code>hexo clean</code>   <code>hexo g</code>   <code>hexo d</code> ，需要等待部署完毕之后，访问  <code>https://&lt;域名&gt;/&lt;htmlFileName&gt;</code>  ， 不报 <code>404</code>  就 ok 啦</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-56-26.png" class=""><img data-src="/posts/3c59e6c8/2022-07-08-22-57-11.png" class=""><blockquote><p>点击验证完成即可</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-57-41.png" class=""><h2 id="关于收录"><a class="markdownIt-Anchor" href="#关于收录">#</a> 关于收录</h2><img data-src="/posts/3c59e6c8/2022-07-08-23-01-54.png" class=""><h3 id="使用sitemap方式推送"><a class="markdownIt-Anchor" href="#使用sitemap方式推送">#</a> 使用 <code>sitemap</code>  方式推送</h3><blockquote><p><code>hexo</code>  框架只需要在两个 <code>sitemap</code>  插件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>这两个插件是用来生成  <code>Sitemap</code>  文件 的插件，而  <code>Sitemap</code>  文件 是用来告诉搜索引擎我们的站点有哪些资源是可以抓取的。</p><p>安装完成后我们执行 <code>hexo clean</code> &amp;&amp; <code>hexo g</code>  命令后我们会发现在 <code>public</code>  目录下面会多了 <code>baidusitemap.xml</code>  和 <code>sitemap.xml</code>  文件。</p><blockquote><p>安装 <code>hexo-abbrlink</code> , 这个会自动生成一个永久博客链接且不重复，同时需要配置 <code>root</code>  目录下的 <code>_config.</code></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure><blockquote><p><code>hexo d</code>  完成之后，可以访问  <code>https://&lt;域名&gt;/baidusitemap.xml</code></p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-23-33-54.png" class=""><p>回到百度提交 <code>sitemap</code>  界面，将 <code>https://smile1231.github.io/baidusitemap.xml</code>  填入然后提交即可，就会进入审核状态，需要耗时一段时间。</p><img data-src="/posts/3c59e6c8/2022-07-08-23-36-16.png" class=""><h3 id="google提交sitemap"><a class="markdownIt-Anchor" href="#google提交sitemap">#</a>  <code>Google</code>  提交 <code>sitemap</code></h3><p>由于之前的插件也会在 <code>public</code>  目录下生成一个 <code>sitemap.xml</code> ，同样的在 <code>google</code>  站点地图中提交即可</p><img data-src="/posts/3c59e6c8/2022-07-08-23-38-49.png" class=""><p><code>ex: sitemap.xml</code></p><p><code>google</code>  收录会很快，估计几个小时即可！效果上图已经展示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考文章： &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzU1MDM2Mg==&quot;&gt;https://segmentfault.com/a/11900000375</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://smile1231.github.io/tags/Hexo/"/>
    
    <category term="Google" scheme="https://smile1231.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo使用shoka主题注意点</title>
    <link href="https://smile1231.github.io/posts/66edb7d2/"/>
    <id>https://smile1231.github.io/posts/66edb7d2/</id>
    <published>2022-07-08T01:57:07.000Z</published>
    <updated>2022-07-08T02:35:11.110Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现了一个特比好看的主题，叫  <code>shaoka</code>  , <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">github 地址</span>，效果图不出意外的话应该就是我现在使用的这个 <code>theme</code>  了，同时博主也很贴心了贴了一些简单的<a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/dependents/"> <code>wiki</code>  文档</a>，<span class="exturl" data-url="aHR0cHM6Ly93d3cucmV2ZXJzZXNhY2xlLmNvbS9IZXhvLVNob2thJUU0JUI4JUJCJUU5JUEyJTk4JUU1JThBJTlGJUU4JTgzJUJEJUU0JUJCJThCJUU3JUJCJThEJUU4JUExJUE1JUU1JTg1JTg1JUU3JTgyJUI5Lw==">补充功能介绍点</span></p><p>可能我这个主题还是会有一点问题，目前有的大坑的话就是关于界面搜索功能的失效，参照上面的补充功能介绍点注册一个<a href="https://www.algolia.com/"> <code>algolia</code> </a>.</p><p>需要注意的是，在 <code>root</code>  的 <code>_config.yml</code>  文件中需要输入一些配置信息，由于我之前 <code>appId</code>  一直写的是 <code>applicaitonId</code> , 因为有些博客是这个，可能是老版本吧。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">   <span class="attr">appId:</span> <span class="string">&quot;Application ID对应码&quot;</span></span><br><span class="line">   <span class="attr">apiKey:</span> <span class="string">&quot;API Keys页面的All API Keys中刚刚新建的API key的对应码&quot;</span></span><br><span class="line">   <span class="attr">adminApiKey:</span> <span class="string">&quot;Admin API Key对应码&quot;</span></span><br><span class="line">   <span class="attr">chunkSize:</span> <span class="number">5000</span></span><br><span class="line">   <span class="attr">indexName:</span> <span class="string">&quot;你填写的Indices部分&quot;</span></span><br><span class="line">   <span class="attr">fields:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">title</span> <span class="comment">#必须配置</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">path</span> <span class="comment">#必须配置</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">categories</span> <span class="comment">#推荐配置</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">content:strip:truncate,0,4000</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">gallery</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">photos</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure><p>在 <code>theme</code>  的 <code>_config.yml</code>  文件中，加入或者修改以下配置，目前版本的 <code>search</code>  如果不配置，会报一个 <code>hits</code>  的错误</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Algolia Search</span></span><br><span class="line"><span class="comment"># For more information: https://www.algolia.com</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Something</span> </span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># if there are no result</span></span><br><span class="line">    <span class="attr">hits_stats:</span> <span class="string">&quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近发现了一个特比好看的主题，叫  &lt;code&gt;shaoka&lt;/code&gt;  , &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==&quot;&gt;git</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://smile1231.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot如何优雅的发邮件</title>
    <link href="https://smile1231.github.io/posts/ac1ae082/"/>
    <id>https://smile1231.github.io/posts/ac1ae082/</id>
    <published>2022-07-05T15:45:58.000Z</published>
    <updated>2022-07-06T13:58:07.774Z</updated>
    
    <content type="html"><![CDATA[<p>这里演示使用 <code>163</code>  邮箱发邮件</p><h2 id="注册163并打开配置"><a class="markdownIt-Anchor" href="#注册163并打开配置">#</a> 注册 <code>163</code> ，并打开配置</h2><p>记得保存授权吗</p><img data-src="/posts/ac1ae082/2022-07-06-21-58-05.png" class=""><span id="more"></span><h2 id="增加maven以来"><a class="markdownIt-Anchor" href="#增加maven以来">#</a> 增加 <code>maven</code>  以来</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- send email --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yaml文件配置"><a class="markdownIt-Anchor" href="#yaml文件配置">#</a>  <code>yaml</code>  文件配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">********</span> <span class="comment">#登陆账号</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">********</span> <span class="comment">#登陆密码（或授权码），开启上面配置时会有</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">from:</span> <span class="string">JinMaoToRich@163.com</span> <span class="comment">#邮件发信人（即真实邮箱）</span></span><br></pre></td></tr></table></figure><h2 id="java代码"><a class="markdownIt-Anchor" href="#java代码">#</a>  <code>Java</code>  代码</h2><p>实体类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmailRecord</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主键</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件发送人</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String from;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件接受人</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String to;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件主题</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String subject;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件内容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String text;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 抄送</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String cc;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 密送</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String bcc;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 0 - ok , 1 - fail</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> Byte status;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 报错信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String error;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> Date sendDate;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 计算文件夹路径</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String computationDirectory;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件附件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> List&lt;File&gt; fileList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送邮件代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl mailSender;<span class="comment">//注入邮件工具类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SendEmailRecordDao sendEmailRecordDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShellProperties shellProperties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMailWithAttach</span><span class="params">(SendEmailRecord sendEmailInfo)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start to send email to &#123;&#125;&quot;</span>,sendEmailInfo.getTo());</span><br><span class="line">        MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(mailSender.createMimeMessage(), <span class="keyword">true</span>);<span class="comment">//true表示支持复杂类型</span></span><br><span class="line">        sendEmailInfo.setFrom(getMailSendFrom());<span class="comment">//邮件发信人从配置项读取</span></span><br><span class="line">        messageHelper.setFrom(sendEmailInfo.getFrom());<span class="comment">//邮件发信人</span></span><br><span class="line">        messageHelper.setTo(sendEmailInfo.getTo().split(<span class="string">&quot;,&quot;</span>));<span class="comment">//邮件收信人</span></span><br><span class="line">        messageHelper.setSubject(sendEmailInfo.getSubject());<span class="comment">//邮件主题</span></span><br><span class="line">        messageHelper.setText(sendEmailInfo.getText());<span class="comment">//邮件内容</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(sendEmailInfo.getCc())) &#123;<span class="comment">//抄送</span></span><br><span class="line">            messageHelper.setCc(sendEmailInfo.getCc().split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(sendEmailInfo.getBcc())) &#123;<span class="comment">//密送</span></span><br><span class="line">            messageHelper.setCc(sendEmailInfo.getBcc().split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isNotEmpty(sendEmailInfo.getFileList())) &#123;<span class="comment">//添加邮件附件</span></span><br><span class="line">            <span class="keyword">for</span> (File file : sendEmailInfo.getFileList()) &#123;</span><br><span class="line">                messageHelper.addAttachment(file.getName(),file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mailSender.send(messageHelper.getMimeMessage());<span class="comment">//正式发送邮件</span></span><br><span class="line">        sendEmailInfo.setStatus(SendMailStatusEnum.OK.getCode());</span><br><span class="line">        log.info(<span class="string">&quot;Send Email Success ：&#123;&#125;-&gt;&#123;&#125;&quot;</span>, sendEmailInfo.getFrom(), sendEmailInfo.getTo());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;send Email failed , error is &#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">        sendEmailInfo.setStatus(SendMailStatusEnum.FAILED.getCode());</span><br><span class="line">        sendEmailInfo.setError(e.getMessage());</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        saveMail(sendEmailInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存邮件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveMail</span><span class="params">(SendEmailRecord emailInfo)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;start save send email record to database.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (Objects.equals(emailInfo.getTo(),shellProperties.getAlarmEmail()))&#123;</span><br><span class="line">        log.info(<span class="string">&quot;this is alarm email , email info is &#123;&#125;&quot;</span>,emailInfo);</span><br><span class="line">        emailInfo.setStatus(SendMailStatusEnum.FAILED.getCode());</span><br><span class="line">    &#125;</span><br><span class="line">    sendEmailRecordDao.insertSelective(emailInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取邮件发信人</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMailSendFrom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mailSender.getJavaMailProperties().getProperty(<span class="string">&quot;from&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里演示使用 &lt;code&gt;163&lt;/code&gt;  邮箱发邮件&lt;/p&gt;
&lt;h2 id=&quot;注册163并打开配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#注册163并打开配置&quot;&gt;#&lt;/a&gt; 注册 &lt;code&gt;163&lt;/code&gt; ，并打开配置&lt;/h2&gt;
&lt;p&gt;记得保存授权吗&lt;/p&gt;
&lt;img src=&quot;/posts/ac1ae082/2022-07-06-21-58-05.png&quot; class=&quot;&quot;&gt;</summary>
    
    
    
    
    <category term="SrpingBoot" scheme="https://smile1231.github.io/tags/SrpingBoot/"/>
    
  </entry>
  
  <entry>
    <title>Nginx踩坑之解决前后端跨域</title>
    <link href="https://smile1231.github.io/posts/7874a051/"/>
    <id>https://smile1231.github.io/posts/7874a051/</id>
    <published>2022-07-05T15:17:40.000Z</published>
    <updated>2022-07-05T15:46:09.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx配置前端跨域"><a class="markdownIt-Anchor" href="#nginx配置前端跨域">#</a>  <code>nginx</code>  配置前端跨域</h2><p>注意点： 如果使用 <code>nginx</code>  解决跨域在前端使用 <code>axios</code>  是不需要写后端全路径的，类似于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  原来我们需要写</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://localhost:9999/api&#x27;</span></span><br><span class="line"><span class="comment">// 现在改为</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;/api&#x27;</span></span><br></pre></td></tr></table></figure><p>这边不改动</p><span id="more"></span><img data-src="/posts/7874a051/2022-07-05-23-34-01.png" class=""><p>因为如果使用了 <code>Nginx</code>  反向代理之后，部署服务器会有跨域的问题，如果仅仅只是后端处理，也不一定能行，需要在配置文件中进行代理， <code>docker</code>  中文件位置：</p><img data-src="/posts/7874a051/2022-07-05-23-39-51.png" class=""><img data-src="/posts/7874a051/2022-07-05-23-40-29.png" class=""><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!--</span> <span class="string">解决跨域代理 --&gt;</span></span><br><span class="line"><span class="attr">location</span> <span class="string">/api/ &#123;</span></span><br><span class="line"><span class="attr">proxy_pass</span> <span class="string">http://58.198.178.163:9999/api/;</span></span><br><span class="line"><span class="attr">client_max_body_size</span> <span class="string">1024m;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="meta">&lt;!--</span> <span class="string">解决404 --&gt;</span></span><br><span class="line"><span class="attr">error_page</span>  <span class="string">404              index.html;</span></span><br></pre></td></tr></table></figure><p><strong>Tips：此处一定要注意的是， <code>proxy_pass</code>  所对应的地址一定要是真实 <code>ip</code> ，要不然就回报 <code>502</code>  错误，真的是个大坑，也是我自己的问题！！！</strong>：</p><h2 id="nginx与vue打包成镜像"><a class="markdownIt-Anchor" href="#nginx与vue打包成镜像">#</a>  <code>Nginx</code>  与 <code>Vue</code>  打包成镜像</h2><blockquote><p><code>npm run build</code>  打包，生成 <code>dist</code>  文件夹</p></blockquote><blockquote><p>在 <code>dist</code>  统计目录下， <code>vim Dockerfile</code> , 在其中输入</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">COPY /dist /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">ENTRYPOINT nginx -g <span class="string">&quot;daemon off;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>打包命令:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;image_name&gt; .</span><br></pre></td></tr></table></figure><blockquote><p>查看镜像 ：  <code>docker images</code></p></blockquote><blockquote><p>运行：  <code>docker run -d --name nginx_vue -p 8888:80 &lt;image_name&gt;</code></p></blockquote><blockquote><p>进入容器：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx_vue /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p><code>nginx</code>  配置文件地址  <code>/etc/nginx/conf.d/default.conf</code></p></blockquote><h2 id="nginx修改上传文件大小"><a class="markdownIt-Anchor" href="#nginx修改上传文件大小">#</a>  <code>Nginx</code>  修改上传文件大小</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">client_max_body_size</span>    <span class="string">1000m;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;nginx配置前端跨域&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nginx配置前端跨域&quot;&gt;#&lt;/a&gt;  &lt;code&gt;nginx&lt;/code&gt;  配置前端跨域&lt;/h2&gt;
&lt;p&gt;注意点： 如果使用 &lt;code&gt;nginx&lt;/code&gt;  解决跨域在前端使用 &lt;code&gt;axios&lt;/code&gt;  是不需要写后端全路径的，类似于：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  原来我们需要写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.defaults.baseURL = &lt;span class=&quot;string&quot;&gt;&amp;#x27;http://localhost:9999/api&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 现在改为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.defaults.baseURL = &lt;span class=&quot;string&quot;&gt;&amp;#x27;/api&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这边不改动&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
    <category term="Nginx" scheme="https://smile1231.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Springboot优雅的实现重试</title>
    <link href="https://smile1231.github.io/posts/49a9ac1a/"/>
    <id>https://smile1231.github.io/posts/49a9ac1a/</id>
    <published>2022-07-05T14:49:37.000Z</published>
    <updated>2022-07-05T15:46:35.201Z</updated>
    
    <content type="html"><![CDATA[<p><code>guava-retrying</code>  包有一个重试工具，这便是重试示例代码，同时，参考文章有 <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNzUyMDg2">https://cloud.tencent.com/developer/article/1752086</span></p><p>引入 <code>maven</code>  包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.rholder<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava-retrying<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>封装为工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">RetryUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Retryer&lt;Boolean&gt; retryer = RetryerBuilder.&lt;Boolean&gt;newBuilder()</span><br><span class="line">        <span class="comment">//重试条件</span></span><br><span class="line">        .retryIfResult(aBoolean -&gt; Objects.equals(aBoolean,<span class="keyword">false</span>))</span><br><span class="line">        <span class="comment">//等待策略，此处为120秒重试一次</span></span><br><span class="line">        .withWaitStrategy(WaitStrategies.fixedWait(<span class="number">150</span>, TimeUnit.SECONDS))</span><br><span class="line">        <span class="comment">//停止策略，此处只重试10次</span></span><br><span class="line">        .withStopStrategy(StopStrategies.stopAfterAttempt(<span class="number">10</span>))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">context</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, RetryException </span>&#123;</span><br><span class="line">        AtomicInteger j = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        RetryUtil.retryer.call(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;start &#123;&#125; calculate&quot;</span>,j.get());</span><br><span class="line">           <span class="keyword">int</span> i = j.get();</span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">8</span>)&#123;</span><br><span class="line">               j.getAndIncrement();</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="/posts/49a9ac1a/2022-07-05-23-14-13.png" class="">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;guava-retrying&lt;/code&gt;  包有一个重试工具，这便是重试示例代码，同时，参考文章有 &lt;a href=&quot;https://cloud.tencent.com/developer/article/1752086&quot;&gt;https://cloud.tencent.com/developer/article/1752086&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引入 &lt;code&gt;maven&lt;/code&gt;  包&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.rholder&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;guava-retrying&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
