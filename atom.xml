<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JIN MAO &#39;s Blog</title>
  
  <subtitle>got windy(起风了)</subtitle>
  <link href="https://smile1231.github.io/atom.xml" rel="self"/>
  
  <link href="https://smile1231.github.io/"/>
  <updated>2022-07-17T14:50:55.332Z</updated>
  <id>https://smile1231.github.io/</id>
  
  <author>
    <name>JIN Mao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jupyter notebook使用</title>
    <link href="https://smile1231.github.io/posts/53fbbba3/"/>
    <id>https://smile1231.github.io/posts/53fbbba3/</id>
    <published>2022-07-17T14:44:03.000Z</published>
    <updated>2022-07-17T14:50:55.332Z</updated>
    
    <content type="html"><![CDATA[<p><code>Jupyter</code>不乏为一个很好的编译工具，搭配上<code>Anoconda</code>简直是无敌了</p><h2 id="Jupyter常用快捷键："><a href="#Jupyter常用快捷键：" class="headerlink" title="Jupyter常用快捷键："></a><code>Jupyter</code>常用快捷键：</h2><h3 id="命令模式（按Esc键）："><a href="#命令模式（按Esc键）：" class="headerlink" title="命令模式（按Esc键）："></a>命令模式（按<code>Esc</code>键）：</h3><ol><li>Enter：转入编辑模式</li><li>Shift-Enter：运行本单元，选中下个单元</li><li>Ctrl-Enter：运行本单元</li><li>Alt-Enter：运行本单元，在其下插入新单元</li><li>Y：单元转入代码状态</li><li>M：单元转入markdown状态</li><li>R：单元转入raw状态</li><li>1：设定 1 级标题</li><li>2：设定 2 级标题</li><li>3：设定 3 级标题</li><li>4：设定 4 级标题</li><li>5：设定 5 级标题</li><li>6：设定 6 级标题</li><li>Up：选中上方单元</li><li>K：选中上方单元</li><li>Down：选中下方单元</li><li>J：选中下方单元</li><li>Shift-K：扩大选中上方单元</li><li>Shift-J：扩大选中下方单元</li><li>A：在上方插入新单元</li><li>B：在下方插入新单元</li><li>X：剪切选中的单元</li><li>C：复制选中的单元</li><li>Shift-V：粘贴到上方单元</li><li>V：粘贴到下方单元</li><li>Z：恢复删除的最后一个单元</li><li>D,D：删除选中的单元</li><li>Shift-M：合并选中的单元</li><li>Ctrl-S：文件存盘</li><li>S：文件存盘</li><li>L：转换行号</li><li>O：转换输出</li><li>Shift-O：转换输出滚动</li><li>Esc：关闭页面</li><li>Q：关闭页面</li><li>H：显示快捷键帮助</li><li>I,I：中断Notebook内核</li><li>0,0：重启Notebook内核</li><li>Shift：忽略</li><li>Shift-Space：向上滚动</li><li>Space：向下滚动</li></ol><h3 id="编辑模式："><a href="#编辑模式：" class="headerlink" title="编辑模式："></a>编辑模式：</h3><ol><li>Tab : 代码补全或缩进</li><li>Shift-Tab : 提示</li><li>Ctrl-] : 缩进</li><li>Ctrl-[ : 解除缩进</li><li>Ctrl-A : 全选</li><li>Ctrl-Z : 复原</li><li>Ctrl-Shift-Z : 再做</li><li>Ctrl-Y : 再做</li><li>Ctrl-Home : 跳到单元开头</li><li>Ctrl-Up : 跳到单元开头</li><li>Ctrl-End : 跳到单元末尾</li><li>Ctrl-Down : 跳到单元末尾</li><li>Ctrl-Left : 跳到左边一个字首</li><li>Ctrl-Right : 跳到右边一个字首</li><li>Ctrl-Backspace : 删除前面一个字</li><li>Ctrl-Delete : 删除后面一个字</li><li>Esc : 进入命令模式</li><li>Ctrl-M : 进入命令模式</li><li>Shift-Enter : 运行本单元，选中下一单元</li><li>Ctrl-Enter : 运行本单元</li><li>Alt-Enter : 运行本单元，在下面插入一单元</li><li>Ctrl-Shift– : 分割单元</li><li>Ctrl-Shift-Subtract : 分割单元</li><li>Ctrl-S : 文件存盘</li><li>Shift : 忽略</li><li>Up : 光标上移或转入上一单元</li><li>Down :光标下移或转入下一单元</li></ol><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p><code>jupyter notebook</code>每一个<code>cell</code>运行完后都会把这个<code>cell</code>中的变量保存到内存中，如果在一个<code>cell</code>中修改了之前的变量，再此运行这个<code>cell</code>的时候可能会导致一些问题产生。比如以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个cell中的代码</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个cell中的代码</span></span><br><span class="line">c = a/b</span><br><span class="line">b = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>因为第二个<code>cell</code>修改了<code>b</code>变量，此时在整个环境中<code>b</code>都是等于0的，所以以后再运行这个<code>cell</code>的时候，<code>a/b</code>这个就会出问题了。这时候可以使用<code>Kernel-&gt;Rstart&amp;Run All</code>来重新运行整个项目。</p><h2 id="Mac乱码解决"><a href="#Mac乱码解决" class="headerlink" title="Mac乱码解决"></a><code>Mac</code>乱码解决</h2><h3 id="步骤一-查看自己的字体中有哪种中文字体"><a href="#步骤一-查看自己的字体中有哪种中文字体" class="headerlink" title="步骤一 查看自己的字体中有哪种中文字体"></a>步骤一 查看自己的字体中有哪种中文字体</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">a=<span class="built_in">sorted</span>([f.name <span class="keyword">for</span> f <span class="keyword">in</span> matplotlib.font_manager.fontManager.ttflist])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><img data-src="/posts/53fbbba3/2022-07-17-22-46-35.png" class=""><p>找到支持中文的字体</p><img data-src="/posts/53fbbba3/2022-07-17-22-46-44.png" class=""><h3 id="选择相应的字体"><a href="#选择相应的字体" class="headerlink" title="选择相应的字体"></a>选择相应的字体</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=<span class="string">&#x27;Heiti TC&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 负号正常显示</span></span><br></pre></td></tr></table></figure><img data-src="/posts/53fbbba3/2022-07-17-22-46-51.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Jupyter&lt;/code&gt;不乏为一个很好的编译工具，搭配上&lt;code&gt;Anoconda&lt;/code&gt;简直是无敌了&lt;/p&gt;
&lt;h2 id=&quot;Jupyter常用快捷键：&quot;&gt;&lt;a href=&quot;#Jupyter常用快捷键：&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Machine Learning" scheme="https://smile1231.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Python" scheme="https://smile1231.github.io/tags/Python/"/>
    
    <category term="Jupyter" scheme="https://smile1231.github.io/tags/Jupyter/"/>
    
    <category term="Machine Learning" scheme="https://smile1231.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning essays</title>
    <link href="https://smile1231.github.io/posts/1b930e38/"/>
    <id>https://smile1231.github.io/posts/1b930e38/</id>
    <published>2022-07-17T13:44:54.000Z</published>
    <updated>2022-07-17T14:48:11.412Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看 <code>数据挖掘</code> 以及 <code>ML</code>  的课程</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmh3bC5jb29sL3B5dGhvbi8lRTYlOTUlQjAlRTYlOEQlQUUlRTYlOEMlOTYlRTYlOEUlOTgv">数据挖掘资料</span></p><h2 id="python中的head方法"><a class="markdownIt-Anchor" href="#python中的head方法">#</a>  <code>python</code>  中的 <code>head</code>  方法</h2><p><code>head()</code>  根据位置返回对象的前 <code>n</code>  行。 如果你的对象中包含正确的数据类型，则对于快速测试很有用。 此方法用于返回数据帧或序列的前 <code>n</code>  行 (默认值为 <code>5</code> )。  <code>n：</code> 它是指返回行数的整数值。</p><h2 id="pandas交叉表"><a class="markdownIt-Anchor" href="#pandas交叉表">#</a>  <code>pandas</code>  交叉表</h2><p>交叉表是由列和行组成的双向表。 它也被称为数据透视表或多维表。 其最大的优势是能够构造、汇总及显示大量数据。 交叉表还可用于确定行变量与列变量之间是否存在关系。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnRpYmNvLmNvbS9wdWIvc3BvdGZpcmVfd2ViX3BsYXllci82LjAuMC1ub3ZlbWJlci0yMDEzL3poLUNOL1dlYkhlbHAvR1VJRC0xRjY3QjJGMy0wNTZCLTQzMjQtQjJDQy0xNEQ3M0QzNzg2OTMuaHRtbA==">参考链接</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在看 &lt;code&gt;数据挖掘&lt;/code&gt; 以及 &lt;code&gt;ML&lt;/code&gt;  的课程&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kb2NzLmh3bC5jb29sL3B5dGhvbi8lRTYlOTUlQjAl</summary>
      
    
    
    
    <category term="Machine Learning" scheme="https://smile1231.github.io/categories/Machine-Learning/"/>
    
    
    <category term="Machine Learning" scheme="https://smile1231.github.io/tags/Machine-Learning/"/>
    
    <category term="numpy" scheme="https://smile1231.github.io/tags/numpy/"/>
    
    <category term="pandas" scheme="https://smile1231.github.io/tags/pandas/"/>
    
    <category term="sklearn" scheme="https://smile1231.github.io/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>The learning of Jenkins Grammer</title>
    <link href="https://smile1231.github.io/posts/273d98ce/"/>
    <id>https://smile1231.github.io/posts/273d98ce/</id>
    <published>2022-07-10T05:44:11.000Z</published>
    <updated>2022-07-11T16:17:06.436Z</updated>
    
    <content type="html"><![CDATA[<p>Recently , i use jenkinsFile to realize some function</p><h2 id="处理json"><a class="markdownIt-Anchor" href="#处理json">#</a> 处理 <code>JSON</code></h2><h2 id="压缩方法"><a class="markdownIt-Anchor" href="#压缩方法">#</a> 压缩方法</h2><p>可能是自带的方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zip <span class="attr">zipFile:</span> <span class="string">&#x27;&lt;zipFileName&gt;&#x27;</span>, <span class="attr">archive:</span> <span class="literal">true</span>, <span class="attr">glob:</span> <span class="string">&#x27;&lt;file_path&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example： zip zipFile: &#x27;upload.zip&#x27;, archive: true, glob: &#x27;/binary/&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="json操作"><a class="markdownIt-Anchor" href="#json操作">#</a>  <code>JSON</code>  操作</h2><blockquote><p>读取：从文件中读取   <code>JSON</code>  字符串，并直接解析为对象</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从文件中读取</span></span><br><span class="line"><span class="keyword">def</span> dataObject = readJSON <span class="attr">file:</span> <span class="string">&#x27;message2.json&#x27;</span></span><br><span class="line">echo <span class="string">&quot;color: $&#123;dataObject.attachments[0].color&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从文本中读取</span></span><br><span class="line"><span class="keyword">def</span> dataObject = readJSON <span class="attr">text:</span> <span class="string">&#x27;message2.json&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>写入文件</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存：将对象直接写入文件，无需先转化为 JSON 字符串</span></span><br><span class="line"><span class="comment">// Building json from code and write it to file</span></span><br><span class="line">writeJSON(<span class="attr">file:</span> <span class="string">&#x27;message1.json&#x27;</span>, <span class="attr">json:</span> dataObject)</span><br></pre></td></tr></table></figure><h2 id="groovy获取shell执行结果和执行状态码"><a class="markdownIt-Anchor" href="#groovy获取shell执行结果和执行状态码">#</a> groovy 获取 shell 执行结果和执行状态码</h2><blockquote><p>获取执行结果</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = sh(<span class="attr">script:</span> <span class="string">&quot;shell command&quot;</span>, <span class="attr">returnStdout:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><blockquote><p>获取执行状态码（0 或者非 0）</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">excuteCode = sh(<span class="attr">script:</span> <span class="string">&quot;shell command&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="jenkins声明式pipeline中单引号和双引号的区别"><a class="markdownIt-Anchor" href="#jenkins声明式pipeline中单引号和双引号的区别">#</a>  <code>Jenkins</code>  声明式 <code>Pipeline</code>  中单引号和双引号的区别</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzE5MzkyL2FydGljbGUvZGV0YWlscy8xMjE0NzI4OTQ=">原文地址</span></p><ol><li><p>如果使用三个单引号，那么其中的字符，除了 <code>'\'</code>  会被解析为转义字符外，其他都会被原封不动地传递给 <code>P</code> owershell`，不作任何解析</p></li><li><p>如果使用三个双引号，则绝大部分字符也会被原封不动地传递给 <code>Powershel</code> l，但如下三个字符除外：</p><p>①  <code>'$'</code> （美元字符） <code>：</code> 用于引用 <code>Jenkinsfile</code>  中的环境变量。</p><p>②  <code>'\'</code> （反斜杠字符） <code>：</code> 用于转义。</p><p>③  <code>' &quot; '</code> （双引号字符）：本身无特殊含义，但是三个双引号之间不允许出现非转义的双引号字符，否则将导致语法错误。</p></li></ol><p>如果确实需要使用上述三个字符本身，而不是使用其特殊含义，则必须在前面加上 <code>'\'</code>  字符进行转义，即： <code>'\$'</code> 、 <code>'\\'</code> 、 <code>'\&quot;'</code> 。</p><blockquote><p>总结 <code>：</code></p></blockquote><p>三单引号的优点是，语法简洁，不存在过多转义；缺点是，无法引用 <code>Jenkins</code>  中的环境变量。而三双引号的优缺点与此正好相反。</p><p>个人对于使用三双引号的建议是：仅在必须声明和引用 <code>Powershell</code>  变量（而非 <code>Jenkins</code>  环境变量）时，才使用三单引号或三双引号。其他时候，每一条命令都应拆分，并以 <code>powershell</code>  开头。这样做的好处是便于调试（尤其是使用 <code>Blue Ocean</code>  调试时）。在这一前提下，如果需要在三引号中引用 <code>Jenkins</code>  环境变量，则必须使用三双引号；否则，使用三单引号表达更为简洁。</p><h2 id="jenkins-pipeline中获取shell命令的标准输出或者状态"><a class="markdownIt-Anchor" href="#jenkins-pipeline中获取shell命令的标准输出或者状态">#</a>  <code>jenkins pipeline</code>  中获取 <code>shell</code>  命令的标准输出或者状态</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取标准输出</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">result = sh <span class="attr">returnStdout:</span> <span class="literal">true</span> ,<span class="attr">script:</span> <span class="string">&quot;&lt;shell command&gt;&quot;</span></span><br><span class="line">result = result.trim()</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">result = sh(<span class="attr">script:</span> <span class="string">&quot;&lt;shell command&gt;&quot;</span>, <span class="attr">returnStdout:</span> <span class="literal">true</span>).trim()</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">sh <span class="string">&quot;&lt;shell command&gt; &gt; commandResult&quot;</span></span><br><span class="line">result = readFile(<span class="string">&#x27;commandResult&#x27;</span>).trim()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取执行状态</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">result = sh <span class="attr">returnStatus:</span> <span class="literal">true</span> ,<span class="attr">script:</span> <span class="string">&quot;&lt;shell command&gt;&quot;</span></span><br><span class="line">result = result.trim()</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">result = sh(<span class="attr">script:</span> <span class="string">&quot;&lt;shell command&gt;&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span>).trim()</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line">sh <span class="string">&#x27;&lt;shell command&gt;; echo $? &gt; status&#x27;</span></span><br><span class="line"><span class="keyword">def</span> r = readFile(<span class="string">&#x27;status&#x27;</span>).trim()</span><br><span class="line"></span><br><span class="line"><span class="comment">//无需返回值，仅执行shell命令</span></span><br><span class="line"><span class="comment">//最简单的方式</span></span><br><span class="line">sh <span class="string">&#x27;&lt;shell command&gt;&#x27;</span></span><br></pre></td></tr></table></figure><p>例如：</p><blockquote><p>工作中需要获取 <code>shell </code> 命令的执行状态，返回 0 或者非 0<br> <code>groovy</code>  语句写法为：</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> exitValue = sh(<span class="attr">script:</span> <span class="string">&quot;grep -i &#x27;xxx&#x27; /etc/myfolder&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span>)</span><br><span class="line">echo <span class="string">&quot;return exitValue :$&#123;exitValue&#125;&quot;</span></span><br><span class="line"><span class="keyword">if</span>(exitValue != <span class="number">0</span>)&#123;</span><br><span class="line">    执行操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>grep</code>  命令执行没有报错，正常情况下 <code>exitValue</code>  为 <code>0</code> ，报错则为非 <code>0</code></p><p>需要注意的是当命令中存在重定向的时候，会出现返回状态异常，因为我们要返回状态，删除重定向（ <code>&amp;&gt;/dev/null</code> ）即可，比如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> exitValue = sh(<span class="attr">script:</span> <span class="string">&quot;grep -i &#x27;xxx&#x27; /etc/myfolder &amp;&gt;/dev/null&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span>)</span><br><span class="line">xxx不存在，正常逻辑是返回非<span class="number">0</span>，但是实际中返回的是<span class="number">0</span> 。可以理解为先执行命令然后赋值操作，类似下面的动作：（个人理解）</span><br><span class="line">sh <span class="string">&quot;ls -l &gt; commandResult&quot;</span></span><br><span class="line">result = readFile(<span class="string">&#x27;commandResult&#x27;</span>).trim()</span><br></pre></td></tr></table></figure><p><code>groovy</code>  中存在另外一种解析 <code>shell</code>  脚本的方法，在 <code>jenkins pipeline</code>  中会使用会报异常， <code>jenkins</code>  相关资料中也没有看到此种用法，应该是不支持</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovy<span class="selector-class">.lang</span><span class="selector-class">.MissingPropertyException</span>: No such property: rhel <span class="keyword">for</span> class: groovy<span class="selector-class">.lang</span>.Binding</span><br></pre></td></tr></table></figure><p>写法为：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> command = <span class="string">&quot;git log&quot;</span></span><br><span class="line"><span class="keyword">def</span> proc = command.execute()</span><br><span class="line">proc.waitFor()</span><br><span class="line"><span class="keyword">def</span> status = proc.exitValue()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently , i use jenkinsFile to realize some function&lt;/p&gt;
&lt;h2 id=&quot;处理json&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#处理json&quot;&gt;#&lt;/a&gt; 处理 &lt;code&gt;JSON</summary>
      
    
    
    
    <category term="Jenkins" scheme="https://smile1231.github.io/categories/Jenkins/"/>
    
    
    <category term="Jenkins" scheme="https://smile1231.github.io/tags/Jenkins/"/>
    
    <category term="Groovy" scheme="https://smile1231.github.io/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>如何让自己的博客被Google以及百度收录</title>
    <link href="https://smile1231.github.io/posts/3c59e6c8/"/>
    <id>https://smile1231.github.io/posts/3c59e6c8/</id>
    <published>2022-07-08T06:23:55.000Z</published>
    <updated>2022-07-08T15:40:52.041Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章： <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzU1MDM2Mg==">https://segmentfault.com/a/1190000037550362</span></p><p>这篇文章讲的很详细</p><h2 id="agenda"><a class="markdownIt-Anchor" href="#agenda">#</a> Agenda</h2><p>突然奇想，我的博客能在 <code>Google</code>  或者百度上搜到吗，果不其然，是不能的，测试方法：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">site:</span><span class="params">&lt;域名&gt;</span></span><br></pre></td></tr></table></figure><p>例如我的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">site</span>:smile<span class="number">1231</span>.github.io</span><br></pre></td></tr></table></figure><img data-src="/posts/3c59e6c8/2022-07-08-22-34-25.png" class=""><p>百度还在申请中：</p><img data-src="/posts/3c59e6c8/2022-07-08-22-36-33.png" class=""><h2 id="百度申请"><a class="markdownIt-Anchor" href="#百度申请">#</a> 百度申请</h2><p>我们需要登录<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnNlZ21lbnRmYXVsdC5jb20vP2VuYz1NMG9kZGFxWmwlMkJBNzdEZVY1WnA1RkElM0QlM0QuNTg0SyUyQnFLb0pEVVdxZCUyQlpIVUxIcGFoMGVGem12OTRhJTJGdjIlMkI1Vlg1ZFVrJTNE">百度搜索资源平台</span>， 只要是百度旗下的账号就可以， 登录成功之后在站点管理中点击<span class="exturl" data-url="aHR0cHM6Ly9saW5rLnNlZ21lbnRmYXVsdC5jb20vP2VuYz15bndBbGYlMkZ5UHZuJTJCZUk1cEFSJTJCOFRRJTNEJTNELkZLJTJGMVpnRWtBMHc1JTJGOENOY1dnc09tVzR2NXkwdzltJTJCS3drdW5iR0xvd3FJbW8lMkZ0bFA0cVN6UFpJakFxSmJRNQ==">添加网站</span>，输入域名，按照步骤走。</p><blockquote><p>输入网址</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-39-27.png" class=""><blockquote><p>一些站点标签</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-41-13.png" class=""><blockquote><p>需要验证所有权，所以这边我选择了文件验证，需要将 <code>html</code>  文件进行下载</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-41-04.png" class=""><p>将 <code>html</code>  文件放在 <code>theme</code>  主题下的 <code>source</code>  文件夹中</p><img data-src="/posts/3c59e6c8/2022-07-08-22-43-41.png" class=""><blockquote><p><code>Google</code>  文件下载<br>这边可以同时将<a href="https://search.google.com/search-console/welcome"> <code>Google</code>  的 <code>html</code>  文件</a>也下载了</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-50-55.png" class=""><p>点击下载放在同样的位置：</p><img data-src="/posts/3c59e6c8/2022-07-08-22-53-06.png" class=""><blockquote><p>依次执行 <code>hexo clean</code>   <code>hexo g</code>   <code>hexo d</code> ，需要等待部署完毕之后，访问  <code>https://&lt;域名&gt;/&lt;htmlFileName&gt;</code>  ， 不报 <code>404</code>  就 ok 啦</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-56-26.png" class=""><img data-src="/posts/3c59e6c8/2022-07-08-22-57-11.png" class=""><blockquote><p>点击验证完成即可</p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-22-57-41.png" class=""><h2 id="关于收录"><a class="markdownIt-Anchor" href="#关于收录">#</a> 关于收录</h2><img data-src="/posts/3c59e6c8/2022-07-08-23-01-54.png" class=""><h3 id="使用sitemap方式推送"><a class="markdownIt-Anchor" href="#使用sitemap方式推送">#</a> 使用 <code>sitemap</code>  方式推送</h3><blockquote><p><code>hexo</code>  框架只需要在两个 <code>sitemap</code>  插件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>这两个插件是用来生成  <code>Sitemap</code>  文件 的插件，而  <code>Sitemap</code>  文件 是用来告诉搜索引擎我们的站点有哪些资源是可以抓取的。</p><p>安装完成后我们执行 <code>hexo clean</code> &amp;&amp; <code>hexo g</code>  命令后我们会发现在 <code>public</code>  目录下面会多了 <code>baidusitemap.xml</code>  和 <code>sitemap.xml</code>  文件。</p><blockquote><p>安装 <code>hexo-abbrlink</code> , 这个会自动生成一个永久博客链接且不重复，同时需要配置 <code>root</code>  目录下的 <code>_config.</code></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure><blockquote><p><code>hexo d</code>  完成之后，可以访问  <code>https://&lt;域名&gt;/baidusitemap.xml</code></p></blockquote><img data-src="/posts/3c59e6c8/2022-07-08-23-33-54.png" class=""><p>回到百度提交 <code>sitemap</code>  界面，将 <code>https://smile1231.github.io/baidusitemap.xml</code>  填入然后提交即可，就会进入审核状态，需要耗时一段时间。</p><img data-src="/posts/3c59e6c8/2022-07-08-23-36-16.png" class=""><h3 id="google提交sitemap"><a class="markdownIt-Anchor" href="#google提交sitemap">#</a>  <code>Google</code>  提交 <code>sitemap</code></h3><p>由于之前的插件也会在 <code>public</code>  目录下生成一个 <code>sitemap.xml</code> ，同样的在 <code>google</code>  站点地图中提交即可</p><img data-src="/posts/3c59e6c8/2022-07-08-23-38-49.png" class=""><p><code>ex: sitemap.xml</code></p><p><code>google</code>  收录会很快，估计几个小时即可！效果上图已经展示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考文章： &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzNzU1MDM2Mg==&quot;&gt;https://segmentfault.com/a/11900000375</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://smile1231.github.io/tags/Hexo/"/>
    
    <category term="Google" scheme="https://smile1231.github.io/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo使用shoka主题注意点</title>
    <link href="https://smile1231.github.io/posts/66edb7d2/"/>
    <id>https://smile1231.github.io/posts/66edb7d2/</id>
    <published>2022-07-08T01:57:07.000Z</published>
    <updated>2022-07-08T02:35:11.110Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现了一个特比好看的主题，叫  <code>shaoka</code>  , <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">github 地址</span>，效果图不出意外的话应该就是我现在使用的这个 <code>theme</code>  了，同时博主也很贴心了贴了一些简单的<a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/dependents/"> <code>wiki</code>  文档</a>，<span class="exturl" data-url="aHR0cHM6Ly93d3cucmV2ZXJzZXNhY2xlLmNvbS9IZXhvLVNob2thJUU0JUI4JUJCJUU5JUEyJTk4JUU1JThBJTlGJUU4JTgzJUJEJUU0JUJCJThCJUU3JUJCJThEJUU4JUExJUE1JUU1JTg1JTg1JUU3JTgyJUI5Lw==">补充功能介绍点</span></p><p>可能我这个主题还是会有一点问题，目前有的大坑的话就是关于界面搜索功能的失效，参照上面的补充功能介绍点注册一个<a href="https://www.algolia.com/"> <code>algolia</code> </a>.</p><p>需要注意的是，在 <code>root</code>  的 <code>_config.yml</code>  文件中需要输入一些配置信息，由于我之前 <code>appId</code>  一直写的是 <code>applicaitonId</code> , 因为有些博客是这个，可能是老版本吧。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">   <span class="attr">appId:</span> <span class="string">&quot;Application ID对应码&quot;</span></span><br><span class="line">   <span class="attr">apiKey:</span> <span class="string">&quot;API Keys页面的All API Keys中刚刚新建的API key的对应码&quot;</span></span><br><span class="line">   <span class="attr">adminApiKey:</span> <span class="string">&quot;Admin API Key对应码&quot;</span></span><br><span class="line">   <span class="attr">chunkSize:</span> <span class="number">5000</span></span><br><span class="line">   <span class="attr">indexName:</span> <span class="string">&quot;你填写的Indices部分&quot;</span></span><br><span class="line">   <span class="attr">fields:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">title</span> <span class="comment">#必须配置</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">path</span> <span class="comment">#必须配置</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">categories</span> <span class="comment">#推荐配置</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">content:strip:truncate,0,4000</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">gallery</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">photos</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure><p>在 <code>theme</code>  的 <code>_config.yml</code>  文件中，加入或者修改以下配置，目前版本的 <code>search</code>  如果不配置，会报一个 <code>hits</code>  的错误</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Algolia Search</span></span><br><span class="line"><span class="comment"># For more information: https://www.algolia.com</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Something</span> </span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># if there are no result</span></span><br><span class="line">    <span class="attr">hits_stats:</span> <span class="string">&quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近发现了一个特比好看的主题，叫  &lt;code&gt;shaoka&lt;/code&gt;  , &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==&quot;&gt;git</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://smile1231.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot如何优雅的发邮件</title>
    <link href="https://smile1231.github.io/posts/ac1ae082/"/>
    <id>https://smile1231.github.io/posts/ac1ae082/</id>
    <published>2022-07-05T15:45:58.000Z</published>
    <updated>2022-07-06T13:58:07.774Z</updated>
    
    <content type="html"><![CDATA[<p>这里演示使用 <code>163</code>  邮箱发邮件</p><h2 id="注册163并打开配置"><a class="markdownIt-Anchor" href="#注册163并打开配置">#</a> 注册 <code>163</code> ，并打开配置</h2><p>记得保存授权吗</p><img data-src="/posts/ac1ae082/2022-07-06-21-58-05.png" class=""><span id="more"></span><h2 id="增加maven以来"><a class="markdownIt-Anchor" href="#增加maven以来">#</a> 增加 <code>maven</code>  以来</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- send email --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="yaml文件配置"><a class="markdownIt-Anchor" href="#yaml文件配置">#</a>  <code>yaml</code>  文件配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">********</span> <span class="comment">#登陆账号</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">********</span> <span class="comment">#登陆密码（或授权码），开启上面配置时会有</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">from:</span> <span class="string">JinMaoToRich@163.com</span> <span class="comment">#邮件发信人（即真实邮箱）</span></span><br></pre></td></tr></table></figure><h2 id="java代码"><a class="markdownIt-Anchor" href="#java代码">#</a>  <code>Java</code>  代码</h2><p>实体类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmailRecord</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主键</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件发送人</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String from;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件接受人</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String to;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件主题</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String subject;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件内容</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String text;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 抄送</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String cc;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 密送</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String bcc;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 0 - ok , 1 - fail</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> Byte status;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 报错信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String error;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> Date sendDate;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 计算文件夹路径</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String computationDirectory;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 邮件附件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> List&lt;File&gt; fileList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送邮件代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSenderImpl mailSender;<span class="comment">//注入邮件工具类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SendEmailRecordDao sendEmailRecordDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShellProperties shellProperties;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMailWithAttach</span><span class="params">(SendEmailRecord sendEmailInfo)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start to send email to &#123;&#125;&quot;</span>,sendEmailInfo.getTo());</span><br><span class="line">        MimeMessageHelper messageHelper = <span class="keyword">new</span> MimeMessageHelper(mailSender.createMimeMessage(), <span class="keyword">true</span>);<span class="comment">//true表示支持复杂类型</span></span><br><span class="line">        sendEmailInfo.setFrom(getMailSendFrom());<span class="comment">//邮件发信人从配置项读取</span></span><br><span class="line">        messageHelper.setFrom(sendEmailInfo.getFrom());<span class="comment">//邮件发信人</span></span><br><span class="line">        messageHelper.setTo(sendEmailInfo.getTo().split(<span class="string">&quot;,&quot;</span>));<span class="comment">//邮件收信人</span></span><br><span class="line">        messageHelper.setSubject(sendEmailInfo.getSubject());<span class="comment">//邮件主题</span></span><br><span class="line">        messageHelper.setText(sendEmailInfo.getText());<span class="comment">//邮件内容</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(sendEmailInfo.getCc())) &#123;<span class="comment">//抄送</span></span><br><span class="line">            messageHelper.setCc(sendEmailInfo.getCc().split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(sendEmailInfo.getBcc())) &#123;<span class="comment">//密送</span></span><br><span class="line">            messageHelper.setCc(sendEmailInfo.getBcc().split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isNotEmpty(sendEmailInfo.getFileList())) &#123;<span class="comment">//添加邮件附件</span></span><br><span class="line">            <span class="keyword">for</span> (File file : sendEmailInfo.getFileList()) &#123;</span><br><span class="line">                messageHelper.addAttachment(file.getName(),file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mailSender.send(messageHelper.getMimeMessage());<span class="comment">//正式发送邮件</span></span><br><span class="line">        sendEmailInfo.setStatus(SendMailStatusEnum.OK.getCode());</span><br><span class="line">        log.info(<span class="string">&quot;Send Email Success ：&#123;&#125;-&gt;&#123;&#125;&quot;</span>, sendEmailInfo.getFrom(), sendEmailInfo.getTo());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;send Email failed , error is &#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">        sendEmailInfo.setStatus(SendMailStatusEnum.FAILED.getCode());</span><br><span class="line">        sendEmailInfo.setError(e.getMessage());</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        saveMail(sendEmailInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存邮件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveMail</span><span class="params">(SendEmailRecord emailInfo)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;start save send email record to database.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (Objects.equals(emailInfo.getTo(),shellProperties.getAlarmEmail()))&#123;</span><br><span class="line">        log.info(<span class="string">&quot;this is alarm email , email info is &#123;&#125;&quot;</span>,emailInfo);</span><br><span class="line">        emailInfo.setStatus(SendMailStatusEnum.FAILED.getCode());</span><br><span class="line">    &#125;</span><br><span class="line">    sendEmailRecordDao.insertSelective(emailInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取邮件发信人</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMailSendFrom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mailSender.getJavaMailProperties().getProperty(<span class="string">&quot;from&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里演示使用 &lt;code&gt;163&lt;/code&gt;  邮箱发邮件&lt;/p&gt;
&lt;h2 id=&quot;注册163并打开配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#注册163并打开配置&quot;&gt;#&lt;/a&gt; 注册 &lt;code&gt;163&lt;/code&gt; ，并打开配置&lt;/h2&gt;
&lt;p&gt;记得保存授权吗&lt;/p&gt;
&lt;img src=&quot;/posts/ac1ae082/2022-07-06-21-58-05.png&quot; class=&quot;&quot;&gt;</summary>
    
    
    
    
    <category term="SrpingBoot" scheme="https://smile1231.github.io/tags/SrpingBoot/"/>
    
  </entry>
  
  <entry>
    <title>Nginx踩坑之解决前后端跨域</title>
    <link href="https://smile1231.github.io/posts/7874a051/"/>
    <id>https://smile1231.github.io/posts/7874a051/</id>
    <published>2022-07-05T15:17:40.000Z</published>
    <updated>2022-07-05T15:46:09.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx配置前端跨域"><a class="markdownIt-Anchor" href="#nginx配置前端跨域">#</a>  <code>nginx</code>  配置前端跨域</h2><p>注意点： 如果使用 <code>nginx</code>  解决跨域在前端使用 <code>axios</code>  是不需要写后端全路径的，类似于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  原来我们需要写</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://localhost:9999/api&#x27;</span></span><br><span class="line"><span class="comment">// 现在改为</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;/api&#x27;</span></span><br></pre></td></tr></table></figure><p>这边不改动</p><span id="more"></span><img data-src="/posts/7874a051/2022-07-05-23-34-01.png" class=""><p>因为如果使用了 <code>Nginx</code>  反向代理之后，部署服务器会有跨域的问题，如果仅仅只是后端处理，也不一定能行，需要在配置文件中进行代理， <code>docker</code>  中文件位置：</p><img data-src="/posts/7874a051/2022-07-05-23-39-51.png" class=""><img data-src="/posts/7874a051/2022-07-05-23-40-29.png" class=""><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!--</span> <span class="string">解决跨域代理 --&gt;</span></span><br><span class="line"><span class="attr">location</span> <span class="string">/api/ &#123;</span></span><br><span class="line"><span class="attr">proxy_pass</span> <span class="string">http://58.198.178.163:9999/api/;</span></span><br><span class="line"><span class="attr">client_max_body_size</span> <span class="string">1024m;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="meta">&lt;!--</span> <span class="string">解决404 --&gt;</span></span><br><span class="line"><span class="attr">error_page</span>  <span class="string">404              index.html;</span></span><br></pre></td></tr></table></figure><p><strong>Tips：此处一定要注意的是， <code>proxy_pass</code>  所对应的地址一定要是真实 <code>ip</code> ，要不然就回报 <code>502</code>  错误，真的是个大坑，也是我自己的问题！！！</strong>：</p><h2 id="nginx与vue打包成镜像"><a class="markdownIt-Anchor" href="#nginx与vue打包成镜像">#</a>  <code>Nginx</code>  与 <code>Vue</code>  打包成镜像</h2><blockquote><p><code>npm run build</code>  打包，生成 <code>dist</code>  文件夹</p></blockquote><blockquote><p>在 <code>dist</code>  统计目录下， <code>vim Dockerfile</code> , 在其中输入</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">COPY /dist /usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">ENTRYPOINT nginx -g <span class="string">&quot;daemon off;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>打包命令:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;image_name&gt; .</span><br></pre></td></tr></table></figure><blockquote><p>查看镜像 ：  <code>docker images</code></p></blockquote><blockquote><p>运行：  <code>docker run -d --name nginx_vue -p 8888:80 &lt;image_name&gt;</code></p></blockquote><blockquote><p>进入容器：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx_vue /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p><code>nginx</code>  配置文件地址  <code>/etc/nginx/conf.d/default.conf</code></p></blockquote><h2 id="nginx修改上传文件大小"><a class="markdownIt-Anchor" href="#nginx修改上传文件大小">#</a>  <code>Nginx</code>  修改上传文件大小</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">client_max_body_size</span>    <span class="string">1000m;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;nginx配置前端跨域&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nginx配置前端跨域&quot;&gt;#&lt;/a&gt;  &lt;code&gt;nginx&lt;/code&gt;  配置前端跨域&lt;/h2&gt;
&lt;p&gt;注意点： 如果使用 &lt;code&gt;nginx&lt;/code&gt;  解决跨域在前端使用 &lt;code&gt;axios&lt;/code&gt;  是不需要写后端全路径的，类似于：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  原来我们需要写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.defaults.baseURL = &lt;span class=&quot;string&quot;&gt;&amp;#x27;http://localhost:9999/api&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 现在改为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;axios.defaults.baseURL = &lt;span class=&quot;string&quot;&gt;&amp;#x27;/api&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这边不改动&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
    <category term="Nginx" scheme="https://smile1231.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Springboot优雅的实现重试</title>
    <link href="https://smile1231.github.io/posts/49a9ac1a/"/>
    <id>https://smile1231.github.io/posts/49a9ac1a/</id>
    <published>2022-07-05T14:49:37.000Z</published>
    <updated>2022-07-05T15:46:35.201Z</updated>
    
    <content type="html"><![CDATA[<p><code>guava-retrying</code>  包有一个重试工具，这便是重试示例代码，同时，参考文章有 <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNzUyMDg2">https://cloud.tencent.com/developer/article/1752086</span></p><p>引入 <code>maven</code>  包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.rholder<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava-retrying<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><p>封装为工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryUtil</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">RetryUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Retryer&lt;Boolean&gt; retryer = RetryerBuilder.&lt;Boolean&gt;newBuilder()</span><br><span class="line">        <span class="comment">//重试条件</span></span><br><span class="line">        .retryIfResult(aBoolean -&gt; Objects.equals(aBoolean,<span class="keyword">false</span>))</span><br><span class="line">        <span class="comment">//等待策略，此处为120秒重试一次</span></span><br><span class="line">        .withWaitStrategy(WaitStrategies.fixedWait(<span class="number">150</span>, TimeUnit.SECONDS))</span><br><span class="line">        <span class="comment">//停止策略，此处只重试10次</span></span><br><span class="line">        .withStopStrategy(StopStrategies.stopAfterAttempt(<span class="number">10</span>))</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">context</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, RetryException </span>&#123;</span><br><span class="line">        AtomicInteger j = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        RetryUtil.retryer.call(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;start &#123;&#125; calculate&quot;</span>,j.get());</span><br><span class="line">           <span class="keyword">int</span> i = j.get();</span><br><span class="line">           <span class="keyword">if</span> (i &lt; <span class="number">8</span>)&#123;</span><br><span class="line">               j.getAndIncrement();</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="/posts/49a9ac1a/2022-07-05-23-14-13.png" class="">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;guava-retrying&lt;/code&gt;  包有一个重试工具，这便是重试示例代码，同时，参考文章有 &lt;a href=&quot;https://cloud.tencent.com/developer/article/1752086&quot;&gt;https://cloud.tencent.com/developer/article/1752086&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引入 &lt;code&gt;maven&lt;/code&gt;  包&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.rholder&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;guava-retrying&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>JAVA-jar包运行及日志输出</title>
    <link href="https://smile1231.github.io/posts/f35c5140/"/>
    <id>https://smile1231.github.io/posts/f35c5140/</id>
    <published>2022-07-05T14:01:26.000Z</published>
    <updated>2022-07-05T15:40:39.946Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbHNoLWFkbWluL3AvMTUzNDUxNzYuaHRtbA==">原文地址</span></p><p>一般情况下运行 jar 包，当前是可运行的 jar 包，直接命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar common.jar </span><br></pre></td></tr></table></figure><p>按下 <code>ctrl+C</code>  ，关闭当前 <code>ssh</code>  或者直接关闭窗口，当前程序都会退出。</p><span id="more"></span><p>我们在命令的结尾添加  <code>“&amp;”</code>  ，&amp; 表示该程序可以在后台执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar common.jar &amp;</span><br></pre></td></tr></table></figure><p>但是在当窗口关闭时，程序也会中止运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar common.jar &amp;</span><br></pre></td></tr></table></figure><p>命令最前面个 <code>nohub</code>  关键字，这样程序就会不挂断运行命令，当 ssh 终端关闭时，程序仍然在运行，当前程序的日志会被写入到当前目录的 <code>nohup.out</code>  文件中</p><p>我们可以改下输入的日志文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar common.jar &gt; log.out &amp;</span><br></pre></td></tr></table></figure><p>当前程序的日志会被写入到当前目录的 <code>log.out</code>  文件中</p><p>如果不想写日志，可以将日志重定向到  <code>/dev/null</code>  中， <code>/dev/null</code>  代表 <code>linux</code>  的空设备文件，所有往这个文件里面写入的内容都会丢失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar common.jar &gt; /dev/<span class="keyword">null</span> &amp;</span><br></pre></td></tr></table></figure><p>标准输出就会不再存在，没有任何地方能够找到输出的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar common-api.jar &gt;/dev/<span class="keyword">null</span> <span class="number">2</span>&gt;log.error &amp; </span><br></pre></td></tr></table></figure><p>只输出错误信息到日志文件，标准输出不写入日志文件，直接丢弃</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar common-api.jar &gt;/dev/<span class="keyword">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp; </span><br></pre></td></tr></table></figure><p>标准输出 <code>(stdout)</code>  重定向到 <code>/dev/null</code>  中（丢弃标准输出），然后标准错误输出 <code>(stderror)</code>  由于重用了标准输出的描述符，所以标准错误输出也被定向到了 <code>/dev/null</code>  中，错误输出同样也被丢弃了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar common-api.jar &gt;log.out <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp; </span><br></pre></td></tr></table></figure><p>标准输出重定向到 <code>log.out</code>  中，然后错误输出由于重用了标准输出的描述符，所以错误输出也被定向到了 <code>log.out</code>  中</p><p>但是不管那种情况，如果日志输出，日志文件都会增加很快，造成单个文件很大。所以需要拆分文件</p><ol><li><p>定时作业，每天将日志文件复制一份，然后将当前的日志文件清空。</p></li><li><p>借助  <code>cronolog</code>  来分隔日志</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar common-api.jar | /usr/local/cronolog/sbin/cronolog logs/console-%Y-%m-%d.out &amp;</span><br></pre></td></tr></table></figure><p>这样每天会产生一个 <code>console</code>  开头的日志文件。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/lsh-admin/p/15345176.html&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一般情况下运行 jar 包，当前是可运行的 jar 包，直接命令&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java -jar common.jar &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按下 &lt;code&gt;ctrl+C&lt;/code&gt;  ，关闭当前 &lt;code&gt;ssh&lt;/code&gt;  或者直接关闭窗口，当前程序都会退出。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>VsCode 如何Debug Shell</title>
    <link href="https://smile1231.github.io/posts/823298d2/"/>
    <id>https://smile1231.github.io/posts/823298d2/</id>
    <published>2022-07-01T02:58:13.000Z</published>
    <updated>2022-07-02T03:05:50.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载vscode插件-bash-debug"><a class="markdownIt-Anchor" href="#1-下载vscode插件-bash-debug">#</a> 1. 下载 <code>Vscode</code>  插件  <code>Bash Debug</code></h2><img data-src="/posts/823298d2/2022-07-01-10-59-08.png" class=""><span id="more"></span><h2 id="2-create-launchjson-file"><a class="markdownIt-Anchor" href="#2-create-launchjson-file">#</a> 2.  <code>create launch.json file</code></h2><p>选择 <code>Bash Debug</code></p><img data-src="/posts/823298d2/2022-07-01-11-04-35.png" class=""><h2 id="3-添加配置"><a class="markdownIt-Anchor" href="#3-添加配置">#</a> 3. 添加配置</h2><img data-src="/posts/823298d2/2022-07-01-11-06-45.png" class=""><img data-src="/posts/823298d2/2022-07-01-11-07-31.png" class=""><p>使用下拉菜单选中刚刚我们添加的  <code>select script from list of sh files</code> ，点击播放键运行。</p><p>选择想 <code>debug</code>  的脚本，然后开始</p><h2 id="4-查看变量名"><a class="markdownIt-Anchor" href="#4-查看变量名">#</a> 4. 查看变量名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;变量名&#125;</span></span><br><span class="line"><span class="comment"># 格式来添加，要确认哪个就添加哪个。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-下载vscode插件-bash-debug&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-下载vscode插件-bash-debug&quot;&gt;#&lt;/a&gt; 1. 下载 &lt;code&gt;Vscode&lt;/code&gt;  插件  &lt;code&gt;Bash Debug&lt;/code&gt;&lt;/h2&gt;
&lt;img src=&quot;/posts/823298d2/2022-07-01-10-59-08.png&quot; class=&quot;&quot;&gt;</summary>
    
    
    
    
    <category term="VsCode" scheme="https://smile1231.github.io/tags/VsCode/"/>
    
    <category term="Shell" scheme="https://smile1231.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Docker指令以及部署</title>
    <link href="https://smile1231.github.io/posts/11faeb76/"/>
    <id>https://smile1231.github.io/posts/11faeb76/</id>
    <published>2022-06-30T13:30:40.000Z</published>
    <updated>2022-07-02T05:39:15.741Z</updated>
    
    <content type="html"><![CDATA[<p>文档地址：<span class="exturl" data-url="aHR0cHM6Ly95ZWFzeS5naXRib29rLmlvL2RvY2tlcl9wcmFjdGljZS8=">https://yeasy.gitbook.io/docker_practice/</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=">Docker hub</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwv">Docker Install</span></p><h2 id="列出所有镜像"><a class="markdownIt-Anchor" href="#列出所有镜像">#</a> 列出所有镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="查看运行的容器"><a class="markdownIt-Anchor" href="#查看运行的容器">#</a> 查看运行的容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><blockquote><p>列出所有容器 ID</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="查看所有的容器包括停止的"><a class="markdownIt-Anchor" href="#查看所有的容器包括停止的">#</a> 查看所有的容器包括停止的</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h2 id="删除"><a class="markdownIt-Anchor" href="#删除">#</a> 删除</h2><blockquote><p>删除容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm &lt;NAMES&gt;/&lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><blockquote><p>删除镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm &lt;IMAGES&gt;</span><br></pre></td></tr></table></figure><img data-src="/posts/11faeb76/2022-06-30-22-57-53.png" class=""><h2 id="停止-启动-杀死-重启一个容器"><a class="markdownIt-Anchor" href="#停止-启动-杀死-重启一个容器">#</a> 停止、启动、杀死、重启一个容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop Name或者ID  </span><br><span class="line">docker start Name或者ID  </span><br><span class="line">docker <span class="built_in">kill</span> Name或者ID  </span><br><span class="line">docker restart name或者ID</span><br></pre></td></tr></table></figure><h2 id="docker启动失败如何查看容器日志"><a class="markdownIt-Anchor" href="#docker启动失败如何查看容器日志">#</a>  <code>docker</code>  启动失败如何查看容器日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们可以通过如下命令来获取容器的日志地址</span></span><br><span class="line">docker inspect --format <span class="string">&#x27;&#123;&#123;.LogPath&#125;&#125;&#x27;</span> &lt;NAMES&gt;</span><br><span class="line"><span class="comment">#  然后通过cat命令查看上述命令找到的日志地址</span></span><br></pre></td></tr></table></figure><img data-src="/posts/11faeb76/2022-06-30-23-11-07.png" class=""><blockquote><p>更简单的方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs &lt;NAMES&gt;</span><br></pre></td></tr></table></figure><h2 id="m1拉取mysql数据库"><a class="markdownIt-Anchor" href="#m1拉取mysql数据库">#</a>  <code>M1</code>  拉取 <code>Mysql</code>  数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull --platform linux/x86_64 mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动mysql</span></span><br><span class="line">docker run --name mymysql -e MYSQL_ROOT_PASSWORD=root -d -p 3306:3306  mysql:5.7</span><br></pre></td></tr></table></figure><h2 id="docker安装nginx并且部署vue项目"><a class="markdownIt-Anchor" href="#docker安装nginx并且部署vue项目">#</a>  <code>Docker</code>  安装 <code>Nginx</code>  并且部署 <code>Vue</code>  项目</h2><h3 id="拉取nginx"><a class="markdownIt-Anchor" href="#拉取nginx">#</a> 拉取 <code>Nginx</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h3 id="创建挂载目录"><a class="markdownIt-Anchor" href="#创建挂载目录">#</a> 创建挂载目录</h3><p>找个目录创建一下目录（在 <code>/Users/jinmao/Documents/Docker/</code>  下创建 <code>/nginx</code> ）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir</span><br></pre></td></tr></table></figure><h3 id="运行并且挂载nginx"><a class="markdownIt-Anchor" href="#运行并且挂载nginx">#</a> 运行并且挂载 <code>nginx</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name nginx_BEBA  -v /Users/jinmao/Documents/Docker/nginx/dist:/usr/share/nginx/html --restart=always nginx</span><br></pre></td></tr></table></figure><h3 id="把vue的目录上传到挂载的目录"><a class="markdownIt-Anchor" href="#把vue的目录上传到挂载的目录">#</a> 把 <code>vue</code>  的目录上传到挂载的目录</h3><p><code>vue</code>  项目打包</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="builtin-name">run</span> build</span><br></pre></td></tr></table></figure><img data-src="/posts/11faeb76/2022-07-02-09-15-41.png" class=""><h3 id="重启docker容器"><a class="markdownIt-Anchor" href="#重启docker容器">#</a> 重启 <code>Docker</code>  容器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart <span class="tag">&lt;<span class="name">NAMES</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时就可以了， <code>nginx</code>  开放端口为 <code>80</code> , 直接 <code>ip</code>  访问即可</p><h3 id="为什么要挂载在到docker的usrsharenginxhtml"><a class="markdownIt-Anchor" href="#为什么要挂载在到docker的usrsharenginxhtml">#</a> 为什么要挂载在到 <code>docker</code>  的 <code>/usr/share/nginx/html</code></h3><p>看 <code>nginx</code>  的默认配置就知道<br>进入 <code>docker</code>  的容器里面：<br>通过命令 <code>docker ps</code>  查看运行容器信息；<br>在通过命令  <code>docker exec -it 容器id /bin/bash </code> 进入容器目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;NAMES&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>进入 <code>cd /etc/nginx/conf.d</code>  , 查看 <code>default.conf</code>  文件</p><img data-src="/posts/11faeb76/2022-07-02-09-34-32.png" class=""><p>但是你会发现 <code>etc/nginx</code>  下有个 <code>nginx.conf</code>  配置文件我们查看配置发现这里有条语句是引用了上面 <code>default.conf</code>  的配置，由此可见我们以后需要配置其他项目路径就直接配置 <code>default.conf</code>  就行了。</p><img data-src="/posts/11faeb76/2022-07-02-09-36-44.png" class=""><p>但是这个有个缺点每次修改都需要进入容器的内部求修改。</p><h3 id="优化nginx的配置文件为了以后多项目部署方便修改nginx"><a class="markdownIt-Anchor" href="#优化nginx的配置文件为了以后多项目部署方便修改nginx">#</a> 优化 <code>nginx</code>  的配置文件（为了以后多项目部署方便修改 <code>Nginx</code> ）</h3><p>我们可以通过把 <code>etc/nginx</code>  复制到宿主机的目录下这样我们就可以修改宿主机的配置文件在重新启动一下容器就可以实现最新的配置</p><ol><li><p>使用命令复制容器的文件到宿主机： <code>docker cp &lt;NAMES&gt;:/etc/nginx /Users/jinmao/Documents/Docker/nginx/</code></p><blockquote><p><code>/etc/nginx</code> : 为需要复制的文件</p></blockquote><blockquote><p><code>/Users/jinmao/Documents/Docker/nginx/dist</code>  : 把他保存到那个目录下</p></blockquote> <img data-src="/posts/11faeb76/2022-07-02-09-52-09.png" class=""></li><li><p>进入 <code>/nginx</code>  修改宿主机 (本地的) 的 <code>default.conf</code>  配置文件命令</p> <img data-src="/posts/11faeb76/2022-07-02-10-35-29.png" class=""></li><li><p>通过命令删除就的 <code>nginx</code>  容器： <code>docker rm 容器id</code>  删除容器</p></li><li><p>重新启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --name &lt;name&gt; -p 80:80 -v /Users/jinmao/Documents/Docker/nginx/dist:/Users/jinmao/Documents/Study/doctor/Topic1/frontPro/dist -v /Users/jinmao/Documents/Docker/nginx/nginx:/etc/nginx -d nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解释：</span></span><br><span class="line"><span class="comment"># –name：后面的是容器名称</span></span><br><span class="line"><span class="comment"># -p:冒号前面是宿主机的对外端口，冒号后面的是容器的端口</span></span><br><span class="line"><span class="comment"># -v：冒号前面的是宿主机的文件目录，冒号后面是容器的内部文件目录</span></span><br><span class="line"><span class="comment"># -d:表示后端运行</span></span><br><span class="line"><span class="comment"># nginx：最后面的nginx是镜像的名称</span></span><br></pre></td></tr></table></figure> <img data-src="/posts/11faeb76/2022-07-02-11-08-24.png" class=""></li></ol><p>现在已经把宿主机的 <code>vue</code>  项目 <code>dist</code>  挂载到 <code>nginx</code>  容器中，这样监听的请求就会被 <code>nginx</code>  代理到对应的目录中访问资源，还有宿主机的 <code>/Users/jinmao/Documents/Docker/nginx/nginx</code>  也被挂载到了容器 <code>etc/nginx</code>  中，这样只要修改宿主机的 <code>nginx</code>  配置，只要重启容器最新配置就会生效。</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE1NTg1Njk5LzUxNzk2ODg=">参考链接</span></p><h2 id="制作dockerfilespringboot"><a class="markdownIt-Anchor" href="#制作dockerfilespringboot">#</a> 制作 <code>Dockerfile</code> ( <code>Springboot</code> )</h2><p><code>Maven</code>  打包完 <code>jar</code>  包，忽略。。</p><h3 id="编辑dockerfile文件"><a class="markdownIt-Anchor" href="#编辑dockerfile文件">#</a> 编辑 <code>DockerFile</code>  文件</h3><p>和  <code>jar</code>  包在同一级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker image for springboot file run</span></span><br><span class="line"><span class="comment"># VERSION 1.0.0</span></span><br><span class="line"><span class="comment"># Author: jinmao</span></span><br><span class="line">FROM java:8</span><br><span class="line">VOLUME /tmp</span><br><span class="line">EXPOSE 9999</span><br><span class="line">ADD thesis-project.jar /app.jar</span><br><span class="line">RUN bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>打包命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buil -t &lt;lower_name&gt; .</span><br></pre></td></tr></table></figure><img data-src="/posts/11faeb76/2022-07-02-13-32-00.png" class=""><blockquote><p>运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9999:9999 --name BABE_Thesis -d babe_end</span><br></pre></td></tr></table></figure><img data-src="/posts/11faeb76/2022-07-02-13-35-28.png" class="">]]></content>
    
    
    <summary type="html">&lt;p&gt;文档地址：&lt;a href=&quot;https://yeasy.gitbook.io/docker_practice/&quot;&gt;https://yeasy.gitbook.io/docker_practice/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker hub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Docker Install&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;列出所有镜像&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#列出所有镜像&quot;&gt;#&lt;/a&gt; 列出所有镜像&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker images&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;查看运行的容器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#查看运行的容器&quot;&gt;#&lt;/a&gt; 查看运行的容器&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker ps&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;列出所有容器 ID&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker ps -aq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
    <category term="Docker" scheme="https://smile1231.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Springboot工程项目.gitignore配置</title>
    <link href="https://smile1231.github.io/posts/ba003691/"/>
    <id>https://smile1231.github.io/posts/ba003691/</id>
    <published>2022-06-30T00:57:45.000Z</published>
    <updated>2022-07-01T01:13:52.465Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/posts/ba003691/2022-06-30-08-58-34.png" class=""><span id="more"></span><p><code>SpringBoot</code>  根目录下创建 <code>.gitignore</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">../HELP.md</span><br><span class="line">target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line">!**/src/main/**</span><br><span class="line">!**/src/<span class="built_in">test</span>/**</span><br><span class="line"></span><br><span class="line"><span class="comment">### STS ###</span></span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line">.sts4-cache</span><br><span class="line">.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### IntelliJ IDEA ###</span></span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">.mvn</span><br><span class="line">mvnw*</span><br><span class="line">HELP.md</span><br><span class="line"></span><br><span class="line"><span class="comment">### NetBeans ###</span></span><br><span class="line">/nbproject/private/</span><br><span class="line">/nbbuild/</span><br><span class="line">/dist/</span><br><span class="line">/nbdist/</span><br><span class="line">/.nb-gradle/</span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment">### VS Code ###</span></span><br><span class="line">.vscode/</span><br><span class="line"></span><br><span class="line"><span class="comment">### generated files ###</span></span><br><span class="line">bin/</span><br><span class="line">gen/</span><br><span class="line"></span><br><span class="line"><span class="comment">### MAC ###</span></span><br><span class="line">.DS_Store</span><br><span class="line"></span><br><span class="line"><span class="comment">### Other ###</span></span><br><span class="line">logs/</span><br><span class="line"><span class="built_in">log</span></span><br><span class="line">temp/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/posts/ba003691/2022-06-30-08-58-34.png&quot; class=&quot;&quot;&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://smile1231.github.io/posts/d0edc1ed/"/>
    <id>https://smile1231.github.io/posts/d0edc1ed/</id>
    <published>2022-06-29T14:06:39.000Z</published>
    <updated>2022-07-02T09:28:33.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux查看空间大小的命令"><a class="markdownIt-Anchor" href="#linux查看空间大小的命令">#</a>  <code>Linux</code>  查看空间大小的命令</h2><span id="more"></span><h3 id="df"><a class="markdownIt-Anchor" href="#df">#</a>  <code>df</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一列：文件系统</span><br><span class="line">第二列：容量</span><br><span class="line">第三列：已用容量</span><br><span class="line">第四列：可用容量</span><br><span class="line">第五列：已用容量%</span><br><span class="line">第六列：挂载点</span><br></pre></td></tr></table></figure><img data-src="/posts/d0edc1ed/2022-06-29-22-09-03.png" class=""><p>参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-a: 显示所有文件系统信息，包括系统特有的 /proc、/sysfs 等文件系统；</span><br><span class="line">-m: 以 MB 为单位显示容量；</span><br><span class="line">-k: 以 KB 为单位显示容量，默认以 KB 为单位；</span><br><span class="line">-h: 使用人们习惯的 KB、MB 或 GB 等单位自行显示容量；</span><br><span class="line">-T: 显示该分区的文件系统名称；</span><br><span class="line">-i: 不用硬盘容量显示，而是以含有 inode 的数量来显示。</span><br><span class="line">--block-size=&lt;区块大小&gt;：以指定的区块大小来显示区块数目；</span><br><span class="line">-l或--<span class="built_in">local</span>：仅显示本地端的文件系统；</span><br><span class="line">--no-sync：在取得磁盘使用信息前，不要执行sync指令，此为预设值；</span><br><span class="line">-P或--portability：使用POSIX的输出格式；</span><br><span class="line">--sync：在取得磁盘使用信息前，先执行sync指令；</span><br><span class="line">-t&lt;文件系统类型&gt;或--<span class="built_in">type</span>=&lt;文件系统类型&gt;：仅显示指定文件系统类型的磁盘信息；</span><br><span class="line">-x&lt;文件系统类型&gt;或--exclude-type=&lt;文件系统类型&gt;：不要显示指定文件系统类型的磁盘信息；</span><br><span class="line">--<span class="built_in">help</span>：显示帮助；</span><br><span class="line">--version：显示版本信息。</span><br></pre></td></tr></table></figure><img data-src="/posts/d0edc1ed/2022-06-29-22-17-18.png" class=""><h3 id="du"><a class="markdownIt-Anchor" href="#du">#</a>  <code>du</code></h3><img data-src="/posts/d0edc1ed/2022-06-29-22-20-51.png" class=""><blockquote><p>如果只想查看当前目录占用空间的大小，不查看子目录或者子文件占用空间大小，那么 <code>s</code>  选项无疑很有帮助，如下：</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">du -sh</span></span><br></pre></td></tr></table></figure><img data-src="/posts/d0edc1ed/2022-06-29-22-23-40.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=0</span><br></pre></td></tr></table></figure><img data-src="/posts/d0edc1ed/2022-06-29-22-29-35.png" class=""><h2 id="mount文件挂载"><a class="markdownIt-Anchor" href="#mount文件挂载">#</a>  <code>Mount</code>  文件挂载</h2><blockquote><p>文件系统挂载</p></blockquote><p>硬件设备必须挂载之后才能使用，只不过，有些硬件设备（比如硬盘分区）在每次系统启动时会自动挂载，而有些（比如 U 盘、光盘）则需要手动进行挂载。</p><p>挂载指的是将硬件设备的文件系统和  <code>Linux</code>  系统中的文件系统，通过指定目录（作为挂载点）进行关联。而要将文件系统挂载到  <code>Linux</code>  系统上，就需要使用  <code>mount</code>  挂载命令。</p><blockquote><p><code>mount</code>  命令的常用格式有以下几种：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mount [-l]</span><br><span class="line"><span class="comment"># 单纯使用 `mount` 命令，会显示出系统中已挂载的设备信息，使用 `-l` 选项，会额外显示出卷标名称（读者可自行运行，查看输出结果）；</span></span><br><span class="line"></span><br><span class="line">mount -a</span><br><span class="line"><span class="comment"># -a 选项的含义是自动检查 /etc/fstab 文件中有无疏漏被挂载的设备文件，如果有，则进行自动挂载操作。这里简单介绍一下 /etc/fstab 文件，此文件是自动挂载文件，系统开机时会主动读取 /etc/fstab 这个文件中的内容，根据该文件的配置，系统会自动挂载指定设备。</span></span><br><span class="line"></span><br><span class="line">mount [-t 系统类型] [-L 卷标名] [-o 特殊选项] [-n] 设备文件名 挂载点</span><br><span class="line"></span><br><span class="line"><span class="comment"># 各选项的含义分别是：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -t 系统类型：指定欲挂载的文件系统类型。Linux 常见的支持类型有 EXT2、EXT3、EXT4、iso9660（光盘格式）、vfat、reiserfs 等。如果不指定具体类型，挂载时 Linux 会自动检测。</span></span><br><span class="line"><span class="comment"># -L 卷标名：除了使用设备文件名（例如 /dev/hdc6）之外，还可以利用文件系统的卷标名称进行挂载。</span></span><br><span class="line"><span class="comment"># -n：在默认情况下，系统会将实际挂载的情况实时写入 /etc/mtab 文件中，但在某些场景下（例如单人维护模式），为了避免出现问题，会刻意不写入，此时就需要使用这个选项；</span></span><br><span class="line"><span class="comment"># -o 特殊选项：可以指定挂载的额外选项，比如读写权限、同步/异步等，如果不指定，则使用默认值（defaults）。</span></span><br></pre></td></tr></table></figure><blockquote><p>mount 命令选项及功能</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rw/ro ：是否对挂载的文件系统拥有读写权限，rw 为默认值，表示拥有读写权限；ro 表示只读权限。</span><br><span class="line"></span><br><span class="line">async/sync ： 此文件系统是否使用同步写入（sync）或异步（async）的内存机制，默认为异步 async。</span><br><span class="line"></span><br><span class="line">dev/nodev ：是否允许从该文件系统的 block 文件中提取数据，为了保证数据安装，默认是 nodev。</span><br><span class="line"></span><br><span class="line">auto/noauto ：是否允许此文件系统被以 mount -a 的方式进行自动挂载，默认是 auto。</span><br><span class="line"></span><br><span class="line">suid/nosuid ：设定文件系统是否拥有 SetUID 和 SetGID 权限，默认是拥有。</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>/noexec ：设定在文件系统中是否允许执行可执行文件，默认是允许。</span><br><span class="line"></span><br><span class="line">user/nouser ：设定此文件系统是否允许让普通用户使用 mount 执行实现挂载，默认是不允许（nouser），仅有 root 可以。</span><br><span class="line"></span><br><span class="line">defaults ：定义默认值，相当于 rw、suid、dev、<span class="built_in">exec</span>、auto、nouser、async 这 7 个选项。</span><br><span class="line"></span><br><span class="line">remount重新挂载已挂载的文件系统，一般用于指定修改特殊权限。</span><br></pre></td></tr></table></figure><h2 id="查看系统信息"><a class="markdownIt-Anchor" href="#查看系统信息">#</a> 查看系统信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/os-release</span><br></pre></td></tr></table></figure><img data-src="/posts/d0edc1ed/2022-06-30-10-12-30.png" class=""><h2 id="查看开放端口"><a class="markdownIt-Anchor" href="#查看开放端口">#</a> 查看开放端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntu </span><br><span class="line">或者  ss -lntu</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看端口号</span><br><span class="line">netstat -ntlp //查看当前所有tcp端口·</span><br><span class="line">netstat -ntulp |grep 6666 //查看所有1935端口使用情况·</span><br><span class="line">CentOS默认开放的本地端口范围</span><br><span class="line">系统本地开放端口的范围：（默认30000多到60000多）</span><br></pre></td></tr></table></figure><img data-src="/posts/d0edc1ed/2022-06-30-10-13-53.png" class=""><h2 id="检查端口是否打开"><a class="markdownIt-Anchor" href="#检查端口是否打开">#</a> 检查端口是否打开</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -na | grep :9999</span><br><span class="line">ss -na | grep :9999</span><br></pre></td></tr></table></figure><p>输出必须保持空白，从而验证它当前未被使用，以便我们可以将端口规则手动添加到系统 <code>iptables</code>  防火墙。</p><h2 id="centos查看防火墙状态的方法"><a class="markdownIt-Anchor" href="#centos查看防火墙状态的方法">#</a>  <code>centos</code>  查看防火墙状态的方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">service iptables status <span class="comment">#查看iptables防火墙状态</span></span><br><span class="line">或</span><br><span class="line">systemctl status firewalld <span class="comment">#查看firewall防火墙服务状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#iptables防火墙</span></span><br><span class="line">service iptables start <span class="comment">#启动防火墙</span></span><br><span class="line">service iptables stop <span class="comment">#停止防火墙</span></span><br><span class="line">service iptables restart <span class="comment">#重启防火墙</span></span><br><span class="line"><span class="comment">#firewall防火墙</span></span><br><span class="line">service firewalld start <span class="comment"># 开启</span></span><br><span class="line">service firewalld stop <span class="comment"># 关闭 </span></span><br><span class="line">service firewalld restart <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><h2 id="开放端口"><a class="markdownIt-Anchor" href="#开放端口">#</a> 开放端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要root权限</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"><span class="comment"># 命令含义：</span></span><br><span class="line">--zone <span class="comment">#作用域</span></span><br><span class="line">--add-port=6666/tcp <span class="comment">#添加端口，格式为：端口/通讯协议</span></span><br><span class="line">--permanent <span class="comment">#永久生效，没有此参数重启后失效</span></span><br></pre></td></tr></table></figure><h2 id="防火墙firewall"><a class="markdownIt-Anchor" href="#防火墙firewall">#</a> 防火墙 <code>firewall</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启firewall</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否生效</span></span><br><span class="line">firewall-cmd --zone=public —query-port=8080/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止firewall</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止firewall开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h2 id="检测远程端口是否打开"><a class="markdownIt-Anchor" href="#检测远程端口是否打开">#</a> 检测远程端口是否打开</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">telnet 118.10.6.128 88</span><br><span class="line"><span class="comment"># 测试远程主机端口是否打开</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap ip -p port <span class="comment">#测试端口</span></span><br><span class="line">nmap ip </span><br><span class="line"><span class="comment"># 根据显示close/open确定端口是否打开</span></span><br></pre></td></tr></table></figure><img data-src="/posts/d0edc1ed/2022-07-01-09-13-27.png" class=""><h2 id="linux生成-uuid"><a class="markdownIt-Anchor" href="#linux生成-uuid">#</a>  <code>Linux</code>  生成  <code>UUID</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/kernel/random/uuid</span><br></pre></td></tr></table></figure><h2 id="查看正在运行的java线程"><a class="markdownIt-Anchor" href="#查看正在运行的java线程">#</a> 查看正在运行的 <code>java</code>  线程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jps -l</span><br><span class="line"></span><br><span class="line"><span class="comment">## 杀死线程</span></span><br><span class="line"><span class="built_in">kill</span> -9 &lt;PID&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;linux查看空间大小的命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linux查看空间大小的命令&quot;&gt;#&lt;/a&gt;  &lt;code&gt;Linux&lt;/code&gt;  查看空间大小的命令&lt;/h2&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://smile1231.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java运行调用Shell脚本</title>
    <link href="https://smile1231.github.io/posts/8da68a98/"/>
    <id>https://smile1231.github.io/posts/8da68a98/</id>
    <published>2022-06-29T14:02:56.000Z</published>
    <updated>2022-07-05T14:47:31.159Z</updated>
    
    <content type="html"><![CDATA[<p>关于在 <code>java</code>  中如何去调用 <code>shell</code>  脚本，最近忙活了老半天</p><p>在 <code>java</code>  中有一个 <code>ProcessBuilder</code>  类，能够调用到 <code>sh</code>  命令，话不多说，贴上代码</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zipFileAction</span><span class="params">(String computationDir,String email)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;###### start zip file , computation is &#123;&#125; ###### &quot;</span>, computationDir);</span><br><span class="line">    <span class="comment">// initShell</span></span><br><span class="line">    Process process = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        ProcessBuilder pb = <span class="keyword">new</span> ProcessBuilder();</span><br><span class="line">        <span class="comment">//这里指的shell文件所在的目录</span></span><br><span class="line">        pb.directory(<span class="keyword">new</span> File(DirectoryUtil.getFileLocalAbsolutePathWithFileUrl(<span class="string">&quot;shell/action/&quot;</span>)));</span><br><span class="line">        <span class="comment">//权限</span></span><br><span class="line">        pb.command(<span class="string">&quot;chmod 777 &quot;</span> + shellProperties.getZipShellName());</span><br><span class="line">        <span class="comment">//此处的 ./ 不是指当前文件夹 ， 而是指运行的意思</span></span><br><span class="line">        pb.command(<span class="string">&quot;./&quot;</span>+shellProperties.getZipShellName() ,computationDir,shellProperties.getCompressedFileName());</span><br><span class="line">        <span class="comment">// 将错误输出流转移到标准输出流中,但使用Runtime不可以</span></span><br><span class="line">        pb.redirectErrorStream(<span class="keyword">true</span>);</span><br><span class="line">        process = pb.start();</span><br><span class="line">        <span class="comment">//将shell日志写入到文件中</span></span><br><span class="line">        writeToLocal(DirectoryUtil.getFileLocalAbsolutePathWithFileUrl(computationDir) + <span class="string">&quot;/zipLog.txt&quot;</span>,process.getInputStream());</span><br><span class="line"><span class="comment">//            String dataMsg = reader(process.getInputStream());</span></span><br><span class="line"><span class="comment">//            log.info(&quot;###### shell zip script data message is &#123;&#125; ###### &quot;,dataMsg);</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;###### run shell zip script is error , message is &#123;&#125;######&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> runningStatus = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        runningStatus = process.waitFor();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;###### run shell zip script occurs error, error is &#123;&#125; ######&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(runningStatus != <span class="number">0</span>) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;###### run shell zip script failed.###### &quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;###### run shell zip script success. ######&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 数据读取操作</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> input 输入流</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reader</span><span class="params">(InputStream input)</span> </span>&#123;</span><br><span class="line">    StringBuilder outDat = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">try</span> (InputStreamReader inputReader = <span class="keyword">new</span> InputStreamReader(input, StandardCharsets.UTF_8);</span><br><span class="line">            BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputReader)) &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            outDat.append(line);</span><br><span class="line">            outDat.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;exception is &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> outDat.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将InputStream写入本地文件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> destination 写入本地目录</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> input输入流</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeToLocal</span><span class="params">(String destination, InputStream input)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    FileOutputStream downloadFile = <span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">    <span class="keyword">while</span> ((index = input.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        downloadFile.write(bytes, <span class="number">0</span>, index);</span><br><span class="line">        downloadFile.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    downloadFile.close();</span><br><span class="line">    input.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于在 &lt;code&gt;java&lt;/code&gt;  中如何去调用 &lt;code&gt;shell&lt;/code&gt;  脚本，最近忙活了老半天&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;java&lt;/code&gt;  中有一个 &lt;code&gt;ProcessBuilder&lt;/code&gt;  类，能够调用到 &lt;code&gt;sh&lt;/code&gt;  命令，话不多说，贴上代码&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
    <category term="Springboot" scheme="https://smile1231.github.io/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>The Basic knowledge of Anaconda</title>
    <link href="https://smile1231.github.io/posts/378107f2/"/>
    <id>https://smile1231.github.io/posts/378107f2/</id>
    <published>2022-05-23T08:16:39.000Z</published>
    <updated>2022-07-05T15:16:31.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="anaconda基本学习"><a class="markdownIt-Anchor" href="#anaconda基本学习">#</a>  <code>Anaconda</code>  基本学习</h1><p><code>conda</code>  中想要安装的包，可以在这个网站搜索查询： <span class="exturl" data-url="aHR0cHM6Ly9hbmFjb25kYS5vcmcvc2VhcmNoP3E9ZmFzdHEtam9pbg==">https://anaconda.org/search?q=fastq-join</span></p><blockquote><p>官网下载  <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHBzJTNBJTJGJTJGd3d3LmFuYWNvbmRhLmNvbSUyRmRvd25sb2FkJTJG">链接</span></p></blockquote><p>此处不多说</p><blockquote><p>环境变量的配置 (windows)</p></blockquote><p>需要注意的是， <code>AnaConda</code>  需要配置三个路径的环境变量</p><span id="more"></span><img data-src="/posts/378107f2/2022-05-23-16-19-09.png" class=""><p>根据自己的安装目录为准</p><p>此时在 <code>windows</code>  中的 <code>cmd</code>  中输入 <code>conda</code>  命令</p><img data-src="/posts/378107f2/2022-05-23-16-19-17.png" class=""><p>说明安装完毕，就可以投入使用了</p><h2 id="conda的基本指令"><a class="markdownIt-Anchor" href="#conda的基本指令">#</a>  <code>Conda</code>  的基本指令</h2><h3 id="环境管理"><a class="markdownIt-Anchor" href="#环境管理">#</a> 环境管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级conda</span></span><br><span class="line">conda update conda</span><br><span class="line">conda update anaconda</span><br><span class="line">conda update anaconda-navigator    <span class="comment">#update最新版本的anaconda-navigator</span></span><br><span class="line">conda update xxx   <span class="comment">#更新xxx文件包</span></span><br><span class="line"></span><br><span class="line">conda --version <span class="comment">#获取版本号</span></span><br><span class="line"></span><br><span class="line">conda update --<span class="built_in">help</span></span><br><span class="line">conda remove --<span class="built_in">help</span>  <span class="comment">#查看某一命令的帮助，如update命令及remove命令</span></span><br><span class="line"></span><br><span class="line">conda env -h <span class="comment"># 查看环境管理的全部命令帮助</span></span><br><span class="line"></span><br><span class="line">conda create --name your_env_name <span class="comment">#创建环境 --name可以省略为-n</span></span><br><span class="line"></span><br><span class="line">conda create --n your_env_name python=<span class="number">3.7</span><span class="comment">#创建制定python版本的环境</span></span><br><span class="line"></span><br><span class="line">conda create --name your_env_name numpy scipy<span class="comment">#创建包含某些包的环境</span></span><br><span class="line"></span><br><span class="line">conda info --envs</span><br><span class="line">conda env <span class="built_in">list</span>  <span class="comment">#列举当前所有环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进入某个环境</span></span><br><span class="line">activate your_env_name</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出当前环境</span></span><br><span class="line">deactivate </span><br><span class="line"></span><br><span class="line"><span class="comment">#复制某个环境</span></span><br><span class="line">conda create --name new_env_name --clone old_env_name </span><br><span class="line"></span><br><span class="line"><span class="comment">#删除某个环境</span></span><br><span class="line">conda remove --name your_env_name --<span class="built_in">all</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分享环境"><a class="markdownIt-Anchor" href="#分享环境">#</a> 分享环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你想把你当前的环境配置与别人分享，这样ta可以快速建立一个与你一模一样的环境（同一个版本的python及各种包）来共同开发/进行新的实验。一个分享环境的快速方法就是给ta一个你的环境的.yml文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首先通过activate target_env要分享的环境target_env，然后输入下面的命令会在当前工作目录下生成一个environment.yml文件，</span></span><br><span class="line"></span><br><span class="line">conda env export &gt; environment.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#小伙伴拿到environment.yml文件后，将该文件放在工作目录下，可以通过以下命令从该文件创建环境</span></span><br><span class="line"></span><br><span class="line">conda env create -f environment.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>yml</code>  是这样的</p><img data-src="/posts/378107f2/2022-05-23-16-19-29.png" class=""><h3 id="包管理"><a class="markdownIt-Anchor" href="#包管理">#</a> 包管理</h3><p>列举当前活跃环境下的所有包</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure><p>列举一个非当前活跃环境下的所有包</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda list -n your_env_name</span><br></pre></td></tr></table></figure><p>为指定环境安装某个包</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n env_name package_name</span><br></pre></td></tr></table></figure><h1 id="搭载vscode使用junpyter"><a class="markdownIt-Anchor" href="#搭载vscode使用junpyter">#</a> 搭载 <code>VsCode</code>  使用 <code>junpyter</code></h1><p>安装 <code>VsCode</code>  插件</p><img data-src="/posts/378107f2/2022-05-23-16-19-42.png" class=""><p>这个时候就具备使用 <code>Jupyter</code>  的条件了，因为 <code>Python</code>  插件内部也安装了 <code>Jupyter</code>  插件，此时 <code>Ctrl+Shift+P</code>  弹出</p><img data-src="/posts/378107f2/2022-05-23-16-19-49.png" class=""><p>新建一个 <code>Jupyter</code>  就可以使用了</p><img data-src="/posts/378107f2/2022-05-23-16-19-55.png" class=""><p>如果报错，一般重启一下 VSCode 就能够使用，喜欢使用主要是因为 <code>Jupyter</code>  可以一行一行的执行，嘻嘻</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;anaconda基本学习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#anaconda基本学习&quot;&gt;#&lt;/a&gt;  &lt;code&gt;Anaconda&lt;/code&gt;  基本学习&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;conda&lt;/code&gt;  中想要安装的包，可以在这个网站搜索查询： &lt;a href=&quot;https://anaconda.org/search?q=fastq-join&quot;&gt;https://anaconda.org/search?q=fastq-join&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网下载  &lt;a href=&quot;https://link.jianshu.com/?t=https%3A%2F%2Fwww.anaconda.com%2Fdownload%2F&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此处不多说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;环境变量的配置 (windows)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是， &lt;code&gt;AnaConda&lt;/code&gt;  需要配置三个路径的环境变量&lt;/p&gt;</summary>
    
    
    
    <category term="master" scheme="https://smile1231.github.io/categories/master/"/>
    
    
    <category term="master" scheme="https://smile1231.github.io/tags/master/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 获取服务IP地址和端口号</title>
    <link href="https://smile1231.github.io/posts/67f40b37/"/>
    <id>https://smile1231.github.io/posts/67f40b37/</id>
    <published>2022-05-21T14:58:51.000Z</published>
    <updated>2022-05-21T15:15:48.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>IP</code>  地址</p></blockquote><p><code>IP</code>  地址非常简单，直接上代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    String result = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">    LOGGER.error(<span class="string">&quot;获取IP失败&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>端口号</p></blockquote><p>获取端口号有四种方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- `<span class="meta">@Value</span>`注解</span><br><span class="line">- `<span class="meta">@LocalServerPort</span>`注解</span><br><span class="line">- `Environment`</span><br><span class="line"></span><br><span class="line">我们将`<span class="meta">@Value</span>和<span class="meta">@LocalServerPort</span>`放在一起, 其实`<span class="meta">@LocalServerPort</span>`等价于`<span class="meta">@Value(&quot;$&#123;local.server.port&#125;&quot;)</span>`:</span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">int</span> serverPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LocalServerPort</span></span><br><span class="line"><span class="keyword">int</span> localServerPort</span><br></pre></td></tr></table></figure><p>这里要特别注意，如果没有在配置文件中配置 <code>local.server.port, @LocalServerPort</code>  会为 <code>null</code> <br> <code>Environment</code>  本质和上述方法类似，用它来读取配置属性:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Environment environment;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> environment.getProperty(<span class="string">&quot;server.port&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTY2OTIwMTQwNDYxOTY1MzIw">参考链接</span></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;IP&lt;/code&gt;  地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;IP&lt;/code&gt;  地址非常简单，直接上代码:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String result = InetAddress.getLocalHost().getHostAddress();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (UnknownHostException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOGGER.error(&lt;span class=&quot;string&quot;&gt;&amp;quot;获取IP失败&amp;quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/categories/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>一图看懂Java中的PO,BO,VO,DTO,POJO,DAO,DO</title>
    <link href="https://smile1231.github.io/posts/bd76a990/"/>
    <id>https://smile1231.github.io/posts/bd76a990/</id>
    <published>2022-05-21T14:57:50.000Z</published>
    <updated>2022-05-21T15:15:48.228Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTUyODQ4Njc1OTI0MDgyNzE4"> 参考链接 </span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTUyODQ4Njc1OTI0MDgyNzE4&quot;&gt; 参考链接 &lt;/span&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>在Javadoc注释中引用方法</title>
    <link href="https://smile1231.github.io/posts/d6d1be75/"/>
    <id>https://smile1231.github.io/posts/d6d1be75/</id>
    <published>2022-05-21T14:00:19.000Z</published>
    <updated>2022-05-21T15:15:48.229Z</updated>
    
    <content type="html"><![CDATA[<p>最近用到如何在注释中 <code>link</code>  到另一个类</p><ol><li><code>@link</code>  标签<br> <code>Javadoc</code>  提供了 <code>@link</code>  内联标记来引用 Java 类中的成员。我们可以认为 <code>@link</code>  标签类似于  <code>HTML</code>  中的锚标签，用于通过超链接将一个页面链接到另一个页面。</li></ol><p>让我们看看使用 <code>@link</code>  标记引用  <code>Javadoc</code>  注释中的方法的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">@link</span> path_to_member label&#125;</span><br></pre></td></tr></table></figure><p>与锚标签类似， <code>path_to_member</code>  是目的地，标签是显示文本。</p><p>标签是可选的，但 <code>path_to_member</code>  是引用方法所必需的。但是，始终使用标签名称来避免复杂的参考链接是一种很好的做法。 <code>path_to_member</code>  的语法 根据我们引用的方法是否驻留在同一个类中而有所不同。</p><p>需要注意的是，大括号 <code>&#123;</code> 和 <code>@link</code>  之间不能有空格。如果它们之间有空格， <code>Javadoc </code> 工具将无法正确生成引用。但是，  <code>path_to_member、label</code>  和右大括号之间没有空间限制。</p><span id="more"></span><ol start="2"><li>引用同一个类中的方法<br>引用方法的最简单方法是在同一个类中：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">@link</span> #methodName() LabelName&#125;</span><br></pre></td></tr></table></figure><p>假设我们正在记录一个方法，并且我们想从同一个类中引用另一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Also, check the &#123;<span class="doctag">@link</span> #move() Move&#125; method for more movement details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下， <code>walk()</code>  方法引用同一类中的 <code>move()</code>  实例方法。</p><p>如果被引用的方法有参数，当我们想要引用一个重载或参数化的方法时，我们必须相应地指定其参数的类型。</p><p>考虑以下引用重载方法的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check this &#123;<span class="doctag">@link</span> #move(String) Move&#125; method for direction-oriented movement.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(String direction)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>move()</code>  方法是指一种采用一个 String 参数的重载方法。</p><ol start="3"><li>引用另一个类中的方法<br>要引用另一个类中的方法，我们将使用类名，后跟标签，然后是方法名：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="meta">@link</span> ClassName#methodName() LabelName&#125;</span><br></pre></td></tr></table></figure><p>语法类似于引用同一类中的方法，除了在 <code>#</code> 符号之前提到类名。</p><p>现在，让我们考虑在另一个类中引用方法的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Additionally, check this &#123;<span class="doctag">@link</span> Animal#run(String) Run&#125; method for direction based run.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用的方法在同一个包中的 <code>Animal</code>  类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String direction)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们想引用另一个包中的方法，我们有两个选择。一种方法是直接指定包以及类名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Also consider checking &#123;<span class="doctag">@link</span> com.baeldung.sealed.classes.Vehicle#Vehicle() Vehicle&#125; </span></span><br><span class="line"><span class="comment"> * constructor to initialize vehicle object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goToWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，已经使用完整的包名称提到了 <code>Vehicle</code>  类，以引用 <code>Vehicle()</code>  方法。</p><p>此外，我们可以导入包并单独提及类名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baeldung.sealed.records.Car;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Have a look at &#123;<span class="doctag">@link</span> Car#getNumberOfSeats() SeatsAvailability&#125; </span></span><br><span class="line"><span class="comment"> * method for checking the available seats needed for driving.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，驻留在另一个包中的 <code>Car</code>  类已被导入。所以， <code>@link</code>  只需要包含类名和方法。</p><p>我们可以选择两种方式中的任何一种来引用不同包中的方法。如果是单次使用包，那么我们可以使用第一种方式，否则，如果有多个依赖项，我们应该选择第二种方式。</p><ol start="4"><li><code>@linkplain</code>  标签<br>我们已经在注释中看到了用于引用方法的 <code>@link Javadoc</code>  标记。 <code>Javadoc</code>  提供了另一个名为 <code>@linkplain</code>  的标记，用于在注释中引用方法，类似于 <code>@link</code>  标记。主要区别在于，在生成文档时， <code>@link</code>  以等宽格式文本生成标签值，而 <code>@linkplain</code>  以标准格式（如纯文本）生成它。</li></ol><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemRpdGVjdC5jb20vbWFpbi1hZHZhbmNlZC9qYXZhL2phdmEtbWV0aG9kLWluLWphdmFkb2MuaHRtbA=="> 原文章地址 </span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近用到如何在注释中 &lt;code&gt;link&lt;/code&gt;  到另一个类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@link&lt;/code&gt;  标签&lt;br&gt;
 &lt;code&gt;Javadoc&lt;/code&gt;  提供了 &lt;code&gt;@link&lt;/code&gt;  内联标记来引用 Java 类中的成员。我们可以认为 &lt;code&gt;@link&lt;/code&gt;  标签类似于  &lt;code&gt;HTML&lt;/code&gt;  中的锚标签，用于通过超链接将一个页面链接到另一个页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们看看使用 &lt;code&gt;@link&lt;/code&gt;  标记引用  &lt;code&gt;Javadoc&lt;/code&gt;  注释中的方法的语法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;meta&quot;&gt;@link&lt;/span&gt; path_to_member label&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;与锚标签类似， &lt;code&gt;path_to_member&lt;/code&gt;  是目的地，标签是显示文本。&lt;/p&gt;
&lt;p&gt;标签是可选的，但 &lt;code&gt;path_to_member&lt;/code&gt;  是引用方法所必需的。但是，始终使用标签名称来避免复杂的参考链接是一种很好的做法。 &lt;code&gt;path_to_member&lt;/code&gt;  的语法 根据我们引用的方法是否驻留在同一个类中而有所不同。&lt;/p&gt;
&lt;p&gt;需要注意的是，大括号 &lt;code&gt;&amp;#123;&lt;/code&gt; 和 &lt;code&gt;@link&lt;/code&gt;  之间不能有空格。如果它们之间有空格， &lt;code&gt;Javadoc &lt;/code&gt; 工具将无法正确生成引用。但是，  &lt;code&gt;path_to_member、label&lt;/code&gt;  和右大括号之间没有空间限制。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://smile1231.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://smile1231.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Springboot+Vue二进制文件传输</title>
    <link href="https://smile1231.github.io/posts/a1926332/"/>
    <id>https://smile1231.github.io/posts/a1926332/</id>
    <published>2022-05-21T13:42:10.000Z</published>
    <updated>2022-05-21T15:15:48.227Z</updated>
    
    <content type="html"><![CDATA[<p>最近用到了 <code>springboot</code>  项目返回二进制流，话不多说，代码贴上:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/file/&#123;fileName&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;FileSystemResource&gt; <span class="title">getFile</span><span class="params">(<span class="meta">@PathVariable(&quot;fileName&quot;)</span> String fileName)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(filePath, fileName);</span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> export(file);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(file);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;FileSystemResource&gt; <span class="title">export</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (file == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">headers.add(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache, no-store, must-revalidate&quot;</span>);</span><br><span class="line">headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + file.getName());</span><br><span class="line">headers.add(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">headers.add(<span class="string">&quot;Expires&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">headers.add(<span class="string">&quot;Last-Modified&quot;</span>, <span class="keyword">new</span> Date().toString());</span><br><span class="line">headers.add(<span class="string">&quot;ETag&quot;</span>, String.valueOf(System.currentTimeMillis()));</span><br><span class="line"><span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                        .headers(headers)</span><br><span class="line">                        .contentLength(file.length())</span><br><span class="line">                        .contentType(MediaType.parseMediaType(<span class="string">&quot;application/octet-stream&quot;</span>))</span><br><span class="line">                        .body(<span class="keyword">new</span> FileSystemResource(file));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>前端 <code>Vue</code>  代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">downloadXLSXFile() &#123;</span><br><span class="line"><span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">that.axios</span><br><span class="line">.post(</span><br><span class="line"><span class="string">&quot;/download/XLSXExampleFile&quot;</span>,</span><br><span class="line">&#123; fileId: <span class="number">123</span> &#125;, <span class="comment">//入参</span></span><br><span class="line">&#123; responseType: <span class="string">&quot;blob&quot;</span> &#125; <span class="comment">// 设置responseType对象格式为 blob:</span></span><br><span class="line">)</span><br><span class="line">.then((res) =&gt; &#123;</span><br><span class="line">let blob = <span class="keyword">new</span> Blob([res.data], &#123;</span><br><span class="line">type: <span class="string">&quot;application/octet-stream&quot;</span>,</span><br><span class="line">&#125;); <span class="comment">// 获取请求返回的response对象中的blob 设置文件类型</span></span><br><span class="line"></span><br><span class="line">let url = window.URL.createObjectURL(blob); <span class="comment">// 创建一个临时的url指向blob对象</span></span><br><span class="line">let a = document.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">a.href = url;</span><br><span class="line">a.download = <span class="string">&quot;text.xslx&quot;</span>; <span class="comment">//下载的文件名</span></span><br><span class="line">a.click();</span><br><span class="line">window.URL.revokeObjectURL(url); <span class="comment">//释放blob对象</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同时贴一个 <code>Springboot</code>  接受前端 `Vue`` 对象参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/business&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubmitController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SubmitService submitService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO <span class="title">submitAction</span><span class="params">(<span class="meta">@RequestBody</span> UploadFileSubmitEntity uploadFileSubmitEntity)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;start submitAction ...&quot;</span>);</span><br><span class="line">        log.info(uploadFileSubmitEntity.toString());</span><br><span class="line">        <span class="keyword">return</span> submitService.submitAction(uploadFileSubmitEntity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadFileSubmitEntity</span> </span>&#123;</span><br><span class="line">    <span class="comment">//gz 文件列表</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;GZFileList&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;UploadRes&gt; GZFileList;</span><br><span class="line">    <span class="comment">//xlsx 文件列表</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;XLSXFileList&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;UploadRes&gt; XLSXFileList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line"><span class="string">&quot;GZFileList&quot;</span>: <span class="built_in">this</span>.GZFileList,</span><br><span class="line"><span class="string">&quot;XLSXFileList&quot;</span>: <span class="built_in">this</span>.XLSXFileList,</span><br><span class="line">&#125;;</span><br><span class="line">that.axios(&#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&quot;/business/submit&quot;</span>,</span><br><span class="line"><span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(param),</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(res.data.code == <span class="number">200</span>)&#123;</span><br><span class="line">that.$message.success(<span class="string">&quot;submit successfully! , Plz wait for some time .&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近用到了 &lt;code&gt;springboot&lt;/code&gt;  项目返回二进制流，话不多说，代码贴上:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@PostMapping(value = &amp;quot;/file/&amp;#123;fileName&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ResponseEntity&amp;lt;FileSystemResource&amp;gt; &lt;span class=&quot;title&quot;&gt;getFile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;meta&quot;&gt;@PathVariable(&amp;quot;fileName&amp;quot;)&lt;/span&gt; String fileName)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; FileNotFoundException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	File file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(filePath, fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file.exists()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; export(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	System.out.println(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ResponseEntity&amp;lt;FileSystemResource&amp;gt; &lt;span class=&quot;title&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File file)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	HttpHeaders headers = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpHeaders();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Cache-Control&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;no-cache, no-store, must-revalidate&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Content-Disposition&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;attachment; filename=&amp;quot;&lt;/span&gt; + file.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Pragma&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;no-cache&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Expires&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;Last-Modified&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date().toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	headers.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;ETag&amp;quot;&lt;/span&gt;, String.valueOf(System.currentTimeMillis()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ResponseEntity.ok()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .headers(headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .contentLength(file.length())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .contentType(MediaType.parseMediaType(&lt;span class=&quot;string&quot;&gt;&amp;quot;application/octet-stream&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        .body(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileSystemResource(file));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="https://smile1231.github.io/tags/SpringBoot/"/>
    
    <category term="文件上传" scheme="https://smile1231.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>文件上传前端小结</title>
    <link href="https://smile1231.github.io/posts/7733848a/"/>
    <id>https://smile1231.github.io/posts/7733848a/</id>
    <published>2022-05-21T13:24:07.000Z</published>
    <updated>2022-05-21T15:15:48.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页面a标签-点击不跳转"><a class="markdownIt-Anchor" href="#页面a标签-点击不跳转">#</a> 页面 <code>a</code>  标签 点击不跳转</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">href=&quot;javascript:viod(0)&quot;</span><br><span class="line"></span><br><span class="line">href=&quot;javascript:;&quot;</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;页面a标签-点击不跳转&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#页面a标签-点击不跳转&quot;&gt;#&lt;/a&gt; 页面 &lt;code&gt;a&lt;/code&gt;  标签 点击不跳转&lt;/h2&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;href=&amp;quot;javascript:viod(0)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;href=&amp;quot;javascript:;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://smile1231.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://smile1231.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://smile1231.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
